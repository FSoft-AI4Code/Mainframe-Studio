# Generated from .\src\mainframe_migration\parser\grammar\ibm_jcl\IBM_JCL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,158,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        3,14,99,8,14,1,15,1,15,1,16,4,16,104,8,16,11,16,12,16,105,1,17,1,
        17,5,17,110,8,17,10,17,12,17,113,9,17,1,17,1,17,1,18,1,18,5,18,119,
        8,18,10,18,12,18,122,9,18,1,18,1,18,1,19,4,19,127,8,19,11,19,12,
        19,128,1,20,4,20,132,8,20,11,20,12,20,133,1,21,3,21,137,8,21,1,21,
        1,21,1,21,1,21,5,21,143,8,21,10,21,12,21,146,9,21,1,21,1,21,3,21,
        150,8,21,1,21,1,21,1,22,4,22,155,8,22,11,22,12,22,156,2,111,120,
        0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,
        0,4,7,0,9,10,13,13,32,32,40,42,44,44,47,47,61,61,1,0,48,57,2,0,9,
        9,32,32,2,0,10,10,13,13,167,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,
        47,1,0,0,0,3,49,1,0,0,0,5,51,1,0,0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,
        58,1,0,0,0,13,60,1,0,0,0,15,64,1,0,0,0,17,69,1,0,0,0,19,72,1,0,0,
        0,21,76,1,0,0,0,23,83,1,0,0,0,25,86,1,0,0,0,27,90,1,0,0,0,29,98,
        1,0,0,0,31,100,1,0,0,0,33,103,1,0,0,0,35,107,1,0,0,0,37,116,1,0,
        0,0,39,126,1,0,0,0,41,131,1,0,0,0,43,136,1,0,0,0,45,154,1,0,0,0,
        47,48,5,47,0,0,48,2,1,0,0,0,49,50,5,61,0,0,50,4,1,0,0,0,51,52,5,
        40,0,0,52,6,1,0,0,0,53,54,5,41,0,0,54,8,1,0,0,0,55,56,5,42,0,0,56,
        57,5,46,0,0,57,10,1,0,0,0,58,59,5,46,0,0,59,12,1,0,0,0,60,61,5,74,
        0,0,61,62,5,79,0,0,62,63,5,66,0,0,63,14,1,0,0,0,64,65,5,69,0,0,65,
        66,5,88,0,0,66,67,5,69,0,0,67,68,5,67,0,0,68,16,1,0,0,0,69,70,5,
        68,0,0,70,71,5,68,0,0,71,18,1,0,0,0,72,73,5,69,0,0,73,74,5,78,0,
        0,74,75,5,68,0,0,75,20,1,0,0,0,76,77,5,74,0,0,77,78,5,67,0,0,78,
        79,5,76,0,0,79,80,5,76,0,0,80,81,5,73,0,0,81,82,5,66,0,0,82,22,1,
        0,0,0,83,84,5,47,0,0,84,85,5,47,0,0,85,24,1,0,0,0,86,87,5,83,0,0,
        87,88,5,69,0,0,88,89,5,84,0,0,89,26,1,0,0,0,90,91,5,80,0,0,91,92,
        5,82,0,0,92,93,5,79,0,0,93,94,5,67,0,0,94,28,1,0,0,0,95,99,5,44,
        0,0,96,97,5,44,0,0,97,99,5,32,0,0,98,95,1,0,0,0,98,96,1,0,0,0,99,
        30,1,0,0,0,100,101,5,42,0,0,101,32,1,0,0,0,102,104,8,0,0,0,103,102,
        1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,34,1,
        0,0,0,107,111,5,34,0,0,108,110,9,0,0,0,109,108,1,0,0,0,110,113,1,
        0,0,0,111,112,1,0,0,0,111,109,1,0,0,0,112,114,1,0,0,0,113,111,1,
        0,0,0,114,115,5,34,0,0,115,36,1,0,0,0,116,120,5,39,0,0,117,119,9,
        0,0,0,118,117,1,0,0,0,119,122,1,0,0,0,120,121,1,0,0,0,120,118,1,
        0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,124,5,39,0,0,124,38,1,
        0,0,0,125,127,7,1,0,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,
        0,0,0,128,129,1,0,0,0,129,40,1,0,0,0,130,132,7,2,0,0,131,130,1,0,
        0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,42,1,0,0,
        0,135,137,5,47,0,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,
        0,138,139,5,47,0,0,139,140,5,42,0,0,140,144,1,0,0,0,141,143,8,3,
        0,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,
        0,0,145,149,1,0,0,0,146,144,1,0,0,0,147,150,3,45,22,0,148,150,5,
        0,0,1,149,147,1,0,0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,152,6,
        21,0,0,152,44,1,0,0,0,153,155,7,3,0,0,154,153,1,0,0,0,155,156,1,
        0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,46,1,0,0,0,11,0,98,105,
        111,120,128,133,136,144,149,156,1,0,1,0
    ]

class JCLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    JOB_ = 7
    EXEC_ = 8
    DD_ = 9
    END_ = 10
    JCLLIB_ = 11
    DSLASH_ = 12
    SET_ = 13
    PROC_ = 14
    COMMA = 15
    STAR = 16
    IDENTIFIER = 17
    STRING = 18
    STRING2 = 19
    NUMBER = 20
    WS = 21
    LINECOMMENT = 22
    NEWLINE = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'/'", "'='", "'('", "')'", "'*.'", "'.'", "'JOB'", "'EXEC'", 
            "'DD'", "'END'", "'JCLLIB'", "'//'", "'SET'", "'PROC'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "JOB_", "EXEC_", "DD_", "END_", "JCLLIB_", "DSLASH_", "SET_", 
            "PROC_", "COMMA", "STAR", "IDENTIFIER", "STRING", "STRING2", 
            "NUMBER", "WS", "LINECOMMENT", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "JOB_", 
                  "EXEC_", "DD_", "END_", "JCLLIB_", "DSLASH_", "SET_", 
                  "PROC_", "COMMA", "STAR", "IDENTIFIER", "STRING", "STRING2", 
                  "NUMBER", "WS", "LINECOMMENT", "NEWLINE" ]

    grammarFileName = "IBM_JCL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


