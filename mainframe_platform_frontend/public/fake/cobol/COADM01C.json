{
  "id": "cda49e90d7984d2197aa5f0fb53e6b2e",
  "name": "COADM01C",
  "path": "DEMO.CARDDEMO.CBL/COADM01C",
  "label": "COBOL",
  "overview": {
    "programe_name": "COADM01C",
    "io_files": [],
    "db_accesses": [],
    "copy_files": [
      "COCOM01Y",
      "COADM02Y",
      "COADM01",
      "COTTL01Y",
      "CSDAT01Y",
      "CSMSG01Y",
      "CSUSR01Y",
      "DFHAID",
      "DFHBMSCA"
    ],
    "call_files": [],
    "summarization": "The provided COBOL code governs the flow of a CICS transaction menu system. The main flow of the code can be summarized as follows:\n\n1. **Initialization**: The main paragraph (`MAIN-PARA`) initializes flags and messages, checks if this is the first time the program is entered, and if not, sets a reentry flag.\n\n2. **First-Time Entry Handling**:\n   - If `EIBCALEN` (length of the communication area) is zero, the program moves to the 'RETURN-TO-SIGNON-SCREEN' paragraph to display the sign-on screen.\n\n3. **Reentry Handling**:\n   - If reentered, the program transfers values and resets fields before invoking the menu screen via `PERFORM SEND-MENU-SCREEN`.\n\n4. **Receive Terminal Input**:\n   - The program then waits for user input through `RECEIVE-MENU-SCREEN` and evaluates the key pressed (`EIBAID` field).\n\n5. **Key Processing**:\n   - Different actions are performed based on the key pressed:\n      - **Enter Key**: The program handles this through the `PROCESS-ENTER-KEY` paragraph, validating and processing the menu options.\n      - **PF3 Key**: The program exits to the sign-on screen (`RETURN-TO-SIGNON-SCREEN`).\n      - **Other Keys**: It displays an error message and redisplays the menu screen (`SEND-MENU-SCREEN`).\n\n6. **PROCESS-ENTER-KEY Paragraph**:\n   - Validates the input option number.\n   - If invalid, flags an error and calls `SEND-MENU-SCREEN`.\n   - If valid and not a dummy option, it transfers control to another program using `EXEC CICS XCTL PROGRAM`.\n\n7. **Return to Sign-On Screen** (`RETURN-TO-SIGNON-SCREEN` Paragraph):\n   - Transfers control to the specified sign-on program (`COSGN00C`).\n\n8. **Send and Receive Menu Screen**, `SEND-MENU-SCREEN` and `RECEIVE-MENU-SCREEN` Paragraphs:\n   - Sends the menu screen to the terminal and receives user input.\n\n9. **Header Information and Menu Options Building**:\n   - **`POPULATE-HEADER-INFO`**: Populates screen header with formatted date and time.\n   - **`BUILD-MENU-OPTIONS`**: Constructs menu options text and maps menu options to screen fields (e.g., `OPTN001O`, `OPTN002O`, etc.).\n\nThroughout the code, the COBOL maps (`COADM1AO`, `COADM1AI`) and fields (e.g., `ERRMSGO`, `OPTIONO`, `TITLE01O`) are used to interact with the terminal screen and control the workflow based on user inputs.",
    "io_table": []
  },
  "io_params_def": {
    "input_table": [
      {
        "item_name": "DFHCOMMAREA",
        "cobol_level": "01",
        "cobol_dtype": "",
        "length": "",
        "access_mode": "I-O",
        "dtype": "",
        "default_value": "",
        "remarks": "Java DTO class equivalence"
      },
      {
        "item_name": "   LK-COMMAREA",
        "cobol_level": "05",
        "cobol_dtype": "X",
        "length": "01",
        "access_mode": "I-O",
        "dtype": "String",
        "default_value": "",
        "remarks": "Java String data type equivalence"
      }
    ],
    "input_note": "",
    "output_table": [
      {
        "item_name": "DFHCOMMAREA",
        "cobol_level": "01",
        "cobol_dtype": "",
        "length": "",
        "access_mode": "I-O",
        "dtype": "",
        "default_value": "",
        "remarks": "Java DTO class equivalence"
      },
      {
        "item_name": "   LK-COMMAREA",
        "cobol_level": "05",
        "cobol_dtype": "X",
        "length": "01",
        "access_mode": "I-O",
        "dtype": "String",
        "default_value": "",
        "remarks": "Java String data type equivalence"
      }
    ],
    "output_note": ""
  },
  "process_logic": {
    "paragraph_level": {
      "MAIN-PARA": {
        "paragraph_name": "MAIN-PARA",
        "section": "procedure division",
        "paragraph_code": "MAIN-PARA.\n\n           SET ERR-FLG-OFF TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COADM1AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-FROM-PROGRAM\n               PERFORM RETURN-TO-SIGNON-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COADM1AO\n                   PERFORM SEND-MENU-SCREEN\n               ELSE\n                   PERFORM RECEIVE-MENU-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-SIGNON-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-MENU-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n",
        "paragraph_lines": [75, 110],
        "ref_paragraphs": [
          "RETURN-TO-SIGNON-SCREEN",
          "SEND-MENU-SCREEN",
          "RECEIVE-MENU-SCREEN",
          "PROCESS-ENTER-KEY",
          "RETURN-TO-SIGNON-SCREEN",
          "SEND-MENU-SCREEN"
        ],
        "paragraph_logic": [
          "Initializes the error flag to off and clears the message fields.",
          "Determines if conversation data exists; if not, it sets the program to return to the sign-on screen.",
          "If conversation data exists, checks if the program is being re-entered, if not, it sets re-entry flag and clears specific fields, then sends the menu screen.",
          "If the program is re-entering, it receives input from the menu screen and evaluates the function key pressed (Enter, PF3 or others).",
          "Based on the function key, performs actions such as processing the Enter key, returning to sign-on screen, or setting error messages and sending the menu screen again.",
          "Returns control to CICS, passing the transaction ID and updated communication area."
        ]
      },
      "PROCESS-ENTER-KEY": {
        "paragraph_name": "PROCESS-ENTER-KEY",
        "section": "procedure division",
        "paragraph_code": "PROCESS-ENTER-KEY.\n\n           PERFORM VARYING WS-IDX\n                   FROM LENGTH OF OPTIONI OF COADM1AI BY -1 UNTIL\n                   OPTIONI OF COADM1AI(WS-IDX:1) NOT = SPACES OR\n                   WS-IDX = 1\n           END-PERFORM\n           MOVE OPTIONI OF COADM1AI(1:WS-IDX) TO WS-OPTION-X\n           INSPECT WS-OPTION-X REPLACING ALL ' ' BY '0'\n           MOVE WS-OPTION-X              TO WS-OPTION\n           MOVE WS-OPTION                TO OPTIONO OF COADM1AO\n\n           IF WS-OPTION IS NOT NUMERIC OR\n              WS-OPTION > CDEMO-ADMIN-OPT-COUNT OR\n              WS-OPTION = ZEROS\n               MOVE 'Y'     TO WS-ERR-FLG\n               MOVE 'Please enter a valid option number...' TO\n                                       WS-MESSAGE\n               PERFORM SEND-MENU-SCREEN\n           END-IF\n\n\n           IF NOT ERR-FLG-ON\n               IF CDEMO-ADMIN-OPT-PGMNAME(WS-OPTION)(1:5) NOT = 'DUMMY'\n                   MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n                   MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n                   MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n                   EXEC CICS\n                       XCTL PROGRAM(CDEMO-ADMIN-OPT-PGMNAME(WS-OPTION))\n                       COMMAREA(CARDDEMO-COMMAREA)\n                   END-EXEC\n               END-IF\n               MOVE SPACES             TO WS-MESSAGE\n               MOVE DFHGREEN           TO ERRMSGC  OF COADM1AO\n               STRING 'This option '       DELIMITED BY SIZE\n      *                CDEMO-ADMIN-OPT-NAME(WS-OPTION)\n      *                                DELIMITED BY SIZE\n                       'is coming soon ...'   DELIMITED BY SIZE\n                  INTO WS-MESSAGE\n               PERFORM SEND-MENU-SCREEN\n           END-IF.\n\n",
        "paragraph_lines": [115, 155],
        "ref_paragraphs": ["SEND-MENU-SCREEN", "SEND-MENU-SCREEN"],
        "paragraph_logic": [
          "Iterates through the options in reverse to find a non-space character, storing it in WS-OPTION-X.",
          "Cleans up the option input by replacing spaces with zeros and moves it to WS-OPTION.",
          "Checks if the option is numeric, within a valid range, and not zero; sets error flag and message if invalid, then calls the [menu screen sending process]<SEND-MENU-SCREEN>.",
          "If no error and the selected program is not a dummy, transfers control to the specified program using XCTL.",
          "Clears the message field, constructs a placeholder message for options coming soon, and calls the [menu screen sending process]<SEND-MENU-SCREEN> again."
        ]
      },
      "RETURN-TO-SIGNON-SCREEN": {
        "paragraph_name": "RETURN-TO-SIGNON-SCREEN",
        "section": "procedure division",
        "paragraph_code": "RETURN-TO-SIGNON-SCREEN.\n\n           IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n           END-EXEC.\n\n",
        "paragraph_lines": [160, 167],
        "ref_paragraphs": [],
        "paragraph_logic": [
          "Check if the target program code is either blank or set to initial values.",
          "If the target program code is blank or initial values, set it to COSGN00C.",
          "Transfer control to the sign-on screen program specified by the code in CDEMO-TO-PROGRAM using CICS XCTL command."
        ]
      },
      "SEND-MENU-SCREEN": {
        "paragraph_name": "SEND-MENU-SCREEN",
        "section": "procedure division",
        "paragraph_code": "SEND-MENU-SCREEN.\n\n           PERFORM POPULATE-HEADER-INFO\n           PERFORM BUILD-MENU-OPTIONS\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COADM1AO\n\n           EXEC CICS SEND\n                     MAP('COADM1A')\n                     MAPSET('COADM01')\n                     FROM(COADM1AO)\n                     ERASE\n           END-EXEC.\n\n",
        "paragraph_lines": [172, 184],
        "ref_paragraphs": ["POPULATE-HEADER-INFO", "BUILD-MENU-OPTIONS"],
        "paragraph_logic": [
          "Calls the [header information population process]<POPULATE-HEADER-INFO> to prepare and populate the header section of the screen.",
          "Calls the [menu options building process]<BUILD-MENU-OPTIONS> to set up and construct the various menu options for user selection.",
          "Moves the content of WS-MESSAGE to the ERRMSGO field of COADM1AO to display any error messages.",
          "Uses CICS SEND command to send the map COADM1A from mapset COADM01 to the terminal, erasing the previous content on the screen."
        ]
      },
      "RECEIVE-MENU-SCREEN": {
        "paragraph_name": "RECEIVE-MENU-SCREEN",
        "section": "procedure division",
        "paragraph_code": "RECEIVE-MENU-SCREEN.\n\n           EXEC CICS RECEIVE\n                     MAP('COADM1A')\n                     MAPSET('COADM01')\n                     INTO(COADM1AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n",
        "paragraph_lines": [189, 197],
        "ref_paragraphs": [],
        "paragraph_logic": [
          "Receives data from the user input screen via a CICS RECEIVE command.",
          "Specifies the map COADM1A and mapset COADM01 to determine the screen layout.",
          "Stores the received data into the data structure COADM1AI.",
          "Handles any responses or exceptions using WS-RESP-CD and WS-REAS-CD."
        ]
      },
      "POPULATE-HEADER-INFO": {
        "paragraph_name": "POPULATE-HEADER-INFO",
        "section": "procedure division",
        "paragraph_code": "POPULATE-HEADER-INFO.\n\n           MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COADM1AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COADM1AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COADM1AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COADM1AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COADM1AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COADM1AO.\n\n",
        "paragraph_lines": [202, 221],
        "ref_paragraphs": [],
        "paragraph_logic": [
          "Populates the current date into the working storage (WS-CURDATE-DATA).",
          "Transfers title information to the appropriate output fields (TITLE01O, TITLE02O) of COADM1AO.",
          "Moves the transaction ID and program name to their respective fields (TRNNAMEO, PGMNAMEO) in COADM1AO.",
          "Formats and assigns the current date components (month, day, year) into the appropriate display variables (WS-CURDATE-MM, WS-CURDATE-DD, WS-CURDATE-YY).",
          "Concatenates and moves the formatted date (WS-CURDATE-MM-DD-YY) to the CURDATEO field in COADM1AO.",
          "Formats and transfers the current time components (hours, minutes, seconds) into the display variables (WS-CURTIME-HH, WS-CURTIME-MM, WS-CURTIME-SS).",
          "Concatenates and moves the formatted time (WS-CURTIME-HH-MM-SS) to the CURTIMEO field in COADM1AO."
        ]
      },
      "BUILD-MENU-OPTIONS": {
        "paragraph_name": "BUILD-MENU-OPTIONS",
        "section": "procedure division",
        "paragraph_code": "BUILD-MENU-OPTIONS.\n\n           PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL\n                           WS-IDX > CDEMO-ADMIN-OPT-COUNT\n\n               MOVE SPACES             TO WS-ADMIN-OPT-TXT\n\n               STRING CDEMO-ADMIN-OPT-NUM(WS-IDX)  DELIMITED BY SIZE\n                      '. '                         DELIMITED BY SIZE\n                      CDEMO-ADMIN-OPT-NAME(WS-IDX) DELIMITED BY SIZE\n                 INTO WS-ADMIN-OPT-TXT\n\n               EVALUATE WS-IDX\n                   WHEN 1\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN001O\n                   WHEN 2\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN002O\n                   WHEN 3\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN003O\n                   WHEN 4\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN004O\n                   WHEN 5\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN005O\n                   WHEN 6\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN006O\n                   WHEN 7\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN007O\n                   WHEN 8\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN008O\n                   WHEN 9\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN009O\n                   WHEN 10\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN010O\n                   WHEN OTHER\n                       CONTINUE\n               END-EVALUATE\n\n           END-PERFORM.\n\n\n",
        "paragraph_lines": [226, 263],
        "ref_paragraphs": [],
        "paragraph_logic": [
          "Loops through administrative options from 1 to CDEMO-ADMIN-OPT-COUNT.",
          "Clears the text field for administrative options.",
          "Concatenates the option number, a dot, and the option name into a single string.",
          "Evaluates the current index and moves the concatenated string to the appropriate option variable.",
          "Continues to the next iteration or moves to the next paragraph if the index does not match any specified cases."
        ]
      }
    }
  },
  "copy_graph": {
    "programs": [
      {
        "index": 0,
        "program_id": "COCOM01Y",
        "program_type": "Copy",
        "program_name": "COCOM01Y",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 1,
        "program_id": "COADM02Y",
        "program_type": "Copy",
        "program_name": "COADM02Y",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 2,
        "program_id": "COADM01",
        "program_type": "Copy",
        "program_name": "COADM01",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 3,
        "program_id": "COTTL01Y",
        "program_type": "Copy",
        "program_name": "COTTL01Y",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 4,
        "program_id": "CSDAT01Y",
        "program_type": "Copy",
        "program_name": "CSDAT01Y",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 5,
        "program_id": "CSMSG01Y",
        "program_type": "Copy",
        "program_name": "CSMSG01Y",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 6,
        "program_id": "CSUSR01Y",
        "program_type": "Copy",
        "program_name": "CSUSR01Y",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 7,
        "program_id": "DFHAID",
        "program_type": "Copy",
        "program_name": "DFHAID",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      },
      {
        "index": 8,
        "program_id": "DFHBMSCA",
        "program_type": "Copy",
        "program_name": "DFHBMSCA",
        "call_type": "Static Call",
        "notes": "",
        "locations": "",
        "paragraph": "",
        "identifier": []
      }
    ],
    "details": [""]
  }
}
