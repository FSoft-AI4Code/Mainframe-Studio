// updates left off at XML-related attributes in c2789402.pdf.

// Combined Antlr4 grammar generated by Antlrvsix.
// Input grammar: C:\Users\kenne\Documents\pl1\pl1-parser.y
// Date: 7/6/2020 2:43:11 PM

grammar PLI;

startRule  :  firstline?  procedureBlock   EOF

  ;

firstline: '*' .*? ;
// jclline: ('//'|'/*') .*?;

procedureBlock: 
  prestmtlist COLON procedurestmt ('(' includestmt SEMICOLON ')' )?
  
  procedureContent
  
  (prestmtlist COLON )? 
  
  inlineBlock? 
  endstmt SEMICOLON
  ;

inlineBlock:
  varname COLON
  procedureContent
  ;

procedureContent:
  
  pl1stmtlist
  ;

pl1stmtlist  : (pl1stmt |procedureBlock) 
  | pl1stmtlist (pl1stmt |procedureBlock) 
  ;



preconditioncommalist  : precondition
  | preconditioncommalist COMMA precondition
  ;
prestmtlist  : varnamequal
  | '(' preconditioncommalist ')'
  | prestmtlist COLON varnamequal
  | prestmtlist COLON '(' preconditioncommalist ')'
  ;




pl1stmt  : 
  // stmt 
  // | prestmtlist COLON stmt
  // | stmtscope
  // | prestmtlist COLON stmtscope
  // | stmtscopeend
  // | prestmtlist COLON stmtscopeend
  // procedureBlock
  (prestmtlist COLON)?
  (doBlock SEMICOLON
  |selectBlock SEMICOLON
  |ifBlock 
  // |elseBlock
  |onBlock 
  |(otherBlock SEMICOLON NUM?))
  ;


otherBlock:
  stmt 
  ;



onBlock:
  ON onconditioncommalist pl1stmt
  |
  ON onconditioncommalist
  beginstmt SEMICOLON
  pl1stmtlist
  (prestmtlist COLON)?endstmt 
  ;

doBlock:
  dostmt SEMICOLON
  // (pl1stmt SEMICOLON)*
  doContent?
  (prestmtlist COLON)?endstmt
  ;

doContent:
  pl1stmt 
  | doContent pl1stmt 
  ;

selectBlock:
  selectstmt SEMICOLON
  (whenstmt )*
  (otherwisestmt )?
  (prestmtlist COLON)? endstmt
  ;

ifBlock:
  ifstmt 
;
// elseBlock:
//   elsestmt 
// ;

stmtscopeend  : endstmt
  ;
stmtscope  : beginstmt
  | dostmt
  | entrystmt
  | packagestmt
  | selectstmt
  ;
stmt  :
  | allocatestmt
  | assignstmt
  | attachstmt
  | callstmt
  | closestmt
  | dclstmt
  | defaultstmt
  | definealiasstmt
  | defineordinalstmt
  | definestructurestmt
  | delaystmt
  | deletestmt
  | detachstmt
  | displaystmt
  | entrystmt
  // | elsestmt
  | execstmt
  | exitstmt
  | fetchstmt
  | flushstmt
  | formatstmt
  | freestmt
  | getstmt
  | gotostmt
  //| ifstmt
  | iteratestmt
  | leavestmt
  | locatestmt
  | onstmt
  | openstmt
  // | otherwisestmt
  | putstmt
  | readstmt
  | releasestmt
  | resignalstmt
  | returnstmt
  | revertstmt
  | rewritestmt
  | signalstmt
  | stopstmt
  | waitstmt
  // | whenstmt
  | writestmt
  | unlockstmt
  | inlinestmt
  | includestmt
  ;


includestmt: AINCLUDE (filename | ('(' filename ')')) ;
filename: '\\'? VARNAME;

allocatestmt  : ALLOCATE allocateoptionlist
  ;
allocateoptionlist  : allocateoption
  | allocateoptionlist COMMA allocateoption
  ;
allocateoption  : varnameref
  | varnameref IN '(' varnameref ')'
  | varnameref SET '(' varnameref ')'
  | varnameref IN '(' varnameref ')' SET '(' varnameref ')'
  | varnameref SET '(' varnameref ')' IN '(' varnameref ')'
  | NUM varnameref
  | varnameref ctloptionlist
  | NUM varnameref ctloptionlist
  ;
attachstmt  : ATTACH varnameref
  | ATTACH varnameref THREAD '(' varnameref ')'
  | ATTACH varnameref THREAD '(' varnameref ')' ENVIRONMENT '(' ')'
  | ATTACH varnameref THREAD '(' varnameref ')' ENVIRONMENT '(' TSTACK '(' expr ')' ')'
  | ATTACH varnameref ENVIRONMENT '(' ')'
  | ATTACH varnameref ENVIRONMENT '(' TSTACK '(' expr ')' ')'
  | ATTACH varnameref ENVIRONMENT '(' ')' THREAD '(' varnameref ')'
  | ATTACH varnameref ENVIRONMENT '(' TSTACK '(' expr ')' ')' THREAD '(' varnameref ')'
  ;
ctloptionlist  : ctlvarattribute
  | ctlvarattribute dclinit
  | dclinit
  ;
ctlvarattribute  : CHARACTER '(' expr ')'
  | BIT '(' expr ')'
  | GRAPHIC '(' expr ')'
  | AREA '(' expr ')'
  | NCHARACTER '(' expr ')'
  | KEIS '(' expr ')'
  ;
beginstmt  : BEGIN_
  | BEGIN_ OPTIONS '(' beginstmtoptionlist ')'
  ;
beginstmtoptionlist  : beginstmtoption
  | beginstmtoptionlist beginstmtoption
  | beginstmtoptionlist COMMA beginstmtoption
  ;
beginstmtoption  : ORDER
  | REORDER
  | NOCHARGRAPHIC
  | CHARGRAPHIC
  | NOINLINE
  | INLINE
  | NON_QUICK
  | NO_QUICK_BLOCKS
  | SUPPORT
  ;
delaystmt  : DELAY '(' expr ')'
  ;
callstmt  : CALL calloptionlist ('('AINCLUDE filename SEMICOLON')')?
  ;
inlinestmt: '\\' calloptionlist;

closestmt  : CLOSE closegrouplist
  ;
defaultstmt  : DEFAULT defaultitemcommalist
  | DEFAULT NONE
  ;
definealiasstmt  : DEFINE ALIAS varname dcloptionlist
  ;
defineordinalstmt  : DEFINE ORDINAL varname '(' ordinalmembercommalist ')'
  | DEFINE ORDINAL varname '(' ordinalmembercommalist ')' ordinaloptionlist
  ;
definestructurestmt  : DEFINE STRUCTURE dclstructurecommalist
  ;
dclstructurecommalist  : dclstructure
  | dclstructurecommalist COMMA dclstructure
  ;
dclstructure  : NUM varname
  | NUM varname CELL
  | NUM varname UNION
  | NUM varname dclfactor
  | NUM '*'
  | NUM '*' CELL
  | NUM '*' UNION
  | NUM '*' dclfactor
  ;
ordinalmembercommalist  : ordinalmember
  | ordinalmembercommalist COMMA ordinalmember
  ;
ordinalmember  : varname
  | varname VALUE '(' NUM ')'
  ;
ordinaloptionlist  : ordinaloption
  | ordinaloptionlist ordinaloption
  ;
ordinaloption  : PRECISION '(' NUM ')'
  | SIGNED
  | UNSIGNED
  ;
displaystmt  : DISPLAY '(' expr ')'
  | DISPLAY '(' expr ')' REPLY '(' varnameref ')'
  | DISPLAY '(' expr ')' REPLY '(' varnameref ')' EVENT '(' varnameref ')'
  | DISPLAY '(' expr ')' EVENT '(' varnameref ')' REPLY '(' varnameref ')'
  ;
deletestmt  : DELETE deleteoptionlist
  ;
detachstmt  : DETACH THREAD '(' varnameref ')'
  ;
// elsestmt  : ELSE pl1stmt
  // ;
endstmt  : END
  | END varname
  ;
entrystmt  : ENTRY entrygrouplist
  | ENTRY
  ;

execstmt: EXEC (sqlstmt|cicsstmt) ;
sqlstmt : SQL  (execInclude|sqlCommand);
cicsstmt: CICS command field* ROLLBACK?; 
command: varname;
field: varname ( '(' (varnameref|STR_CONSTANT|NUM) ')')?;

declare: DECLARE varnameref+ (WITH varnameref)? FOR? varnameref?;
execInclude: INCLUDE varname;
sqlCommand: declare? (sqlSelectCommand|
                    sqlWheneverCommand|
                    sqlOpen|sqlClose|sqlFetch|
                    sqlUpdate|sqlCommit|sqlInsert|sqlDelete|sqlPrepare|sqlDescribe|sqlRollback)? forCommand?;
sqlDescribe: DESCRIBE avarname into;
sqlPrepare: PREPARE avarname FROM avarname;
forCommand: FOR UPDATE 'OF' list;
sqlOpen: OPEN varnameref;
sqlClose: CLOSE varnameref;
sqlFetch: FETCH varnameref (INTO alist)? (USING varnameref+)? ;
sqlUpdate: UPDATE varnameref SET assignList SEMICOLON? where?;
sqlCommit: COMMIT;
sqlInsert: INSERT into VALUES '(' alist ')';
sqlDelete: DELETE from where?;
sqlWheneverCommand: WHENEVER varname+;
sqlSelectCommand: SELECT DISTINCT? (list|'*') into? from where? order? (WITH varnameref)? group? having?;
sqlRollback: ROLLBACK;
                  
from: FROM from_list;
where: WHERE sqlCondExp;
order: ORDER BY alist ;
into: INTO alist;
group: GROUP BY alist;
having: HAVING varnameref ('(' '*' ')')? sign NUM  ;


from_list: varname? varnameref (COMMA varname? varnameref)*;
list:  varnameref ('(' '*' ')')? (COMMA varnameref )*; 
alist:  avarname ('ASC'|DESC)? (COMMA WS? avarname ('ASC'|DESC)?)*; 


assignList: varnameref EQUAL sqlExp (COMMA varnameref EQUAL sqlExp)*;
sqlExpList: sqlExp (COMMA sqlExp)*;
sqlExp: avarname| expr | ((('(' sqlCondExp ')')|sqlCond) (('AND'|'OR') (('(' sqlCondExp ')')|sqlCond))*) ; 
sqlCondExp: (('(' sqlCondExp ')')|sqlCond) (('AND'|'OR') (('(' sqlCondExp ')')|sqlCond))* ;  
// sqlCond (('AND'|'OR') sqlCond)*;
sqlCond: (varnameref (EQUAL|LIKE|sign|'OF') avarname)|
          (varnameref 'BETWEEN' (avarname (('AND'|'OR') avarname)+))|
          (varnameref 'NOT'? IN (set|('(' sqlSelectCommand ')')))|ifprestmt;

sign: GE|LE|'>'|'<'|NE|NG;
set: '(' (varnameref|STR_CONSTANT) (COMMA (varnameref|STR_CONSTANT) )* ')';
avarname: (COLON)? (varname|string|varnameref|NUM)?;
string: STR_CONSTANT;

exitstmt  : EXIT
  ;
fetchstmt  : FETCH fetchoptioncommalist
  ;
fetchoptioncommalist  : fetchoption
  | fetchoptioncommalist COMMA fetchoption
  ;
fetchoption  : varnameref
  | varnameref SET '(' varnameref ')'
  | varnameref TITLE '(' expr ')'
  | varnameref SET '(' varnameref ')' TITLE '(' expr ')'
  | varnameref TITLE '(' expr ')' SET '(' varnameref ')'
  ;
flushstmt  : FLUSH FILE_ '(' varnameref ')'
  | FLUSH FILE_ '(' '*' ')'
  ;
formatstmt  : FORMAT formatgrouplist
  ;
freestmt  : FREE freeoption
  ;
freeoption  : varnameref
  | varnameref IN '(' varnameref ')'
  | freeoption COMMA varnameref
  | freeoption COMMA varnameref IN '(' varnameref ')'
  ;
getstmt  : GET getoptionlist
  | GET '(' varnamedimensioncommalist ')'
  | GET '(' varnamedimensioncommalist ')' getoptionlist
  ;
gotostmt  : GO TO varnameref
  | GOTO varnameref
  ;
iteratestmt  : ITERATE
  | ITERATE varnameref
  ;
leavestmt  : LEAVE
  | LEAVE varnameref
  ;
locatestmt  : LOCATE varnameref locateoptionlist
  ;
onstmt  : ON onconditioncommalist SYSTEM
  | ON onconditioncommalist SNAP SYSTEM
  | ON onconditioncommalist SNAP pl1stmt
  | ON onconditioncommalist pl1stmt
  ;
openstmt  : OPEN opengrouplist
  ;
packagestmt  : PACKAGE
  | PACKAGE packagegrouplist
  ;
packagegrouplist  : packagegroup
  | packagegrouplist packagegroup
  ;
packagegroup  : EXPORTS '(' '*' ')'
  | EXPORTS '(' packagevarnamecommalist ')'
  | RESERVES '(' '*' ')'
  | RESERVES '(' varnamecommalist ')'
  | OPTIONS '(' ')'
  | OPTIONS '(' packageoptionlist ')'
  ;
packagevarnamecommalist  : packagevarname
  | packagevarnamecommalist COMMA packagevarname
  ;
packagevarname  : varname
  | varname EXTERNAL '(' STR_CONSTANT ')'
  ;
packageoptionlist  : packageoption
  | packageoptionlist packageoption
  | packageoptionlist COMMA packageoption
  ;
packageoption  : NOCHARGRAPHIC
  | CHARGRAPHIC
  | ORDER
  | REORDER
  | REENTRANT
  ;
putstmt  : PUT putoptionlist
  | PUT '(' varnamedimensioncommalist ')'
  | PUT '(' varnamedimensioncommalist ')' putoptionlist
  
  ;
procedurestmt  : PROCEDURE procgrouplist
  | PROCEDURE
  ;
readstmt  : READ readoptionlist
  ;
releasestmt  : RELEASE varnamecommalist
  | RELEASE '*'
  ;
resignalstmt  : RESIGNAL
  ;
returnstmt  : RETURN
  | RETURN '(' expr ')'
  ;
rewritestmt  : REWRITE rewriteoptionlist
  ;
revertstmt  : REVERT onconditioncommalist
  ;
signalstmt  : SIGNAL oncondition
  ;
stopstmt  : STOP
  ;
unlockstmt  : UNLOCK unlockoptionlist
  ;
waitstmt  : WAIT '(' varnamedimensioncommalist ')'
  | WAIT '(' varnamedimensioncommalist ')' '(' expr ')'
  | WAIT THREAD '(' varnameref ')'
  ;
writestmt  : WRITE writeoptionlist
  ;
readoptionlist  : readoption +
  ;
rewriteoptionlist  : rewriteoption +
  // | rewriteoptionlist rewriteoption
  ;
selectstmt  : SELECT
  | SELECT '(' expr ')'
  ;
whenstmt  : WHEN '(' varnamedimensioncommalist ')' pl1stmt
  ;
otherwisestmt  : OTHERWISE pl1stmt
  ;
writeoptionlist  : (writeoption )+
  ;
deleteoptionlist  : deleteoption +
  // | deleteoptionlist deleteoption
  ;
unlockoptionlist  : unlockoption
  | unlockoptionlist unlockoption
  ;
locateoptionlist  : locateoption +
  // | locateoptionlist locateoption
  ;
calloptionlist  : varnameref
  | varnameref callmultitaskoptionlist
  ;
callmultitaskoptionlist  : callmultitaskoption
  | callmultitaskoptionlist callmultitaskoption
  ;
callmultitaskoption  : TASK
  | TASK '(' varnameref ')'
  | EVENT '(' varnameref ')'
  | PRIORITY '(' varnameref ')'
  ;
closegrouplist  : closegroup
  | closegrouplist COMMA closegroup
  ;
defaultitemcommalist  : defaultitem
  | defaultitemcommalist COMMA defaultitem
  ;
defaultitem  : defaultpredicateexpr
  | defaultpredicateexpr dcloptionlist
  | defaultpredicateexpr dcloptionlist VALUE '(' dcloptionlist ')'
  | '(' defaultitemcommalist ')'
  | '(' defaultitemcommalist ')' dcloptionlist
  | '(' defaultitemcommalist ')' dcloptionlist VALUE '(' dcloptionlist ')'
  | '(' defaultitemcommalist ')' ERROR
  ;
defaultrangespec  : varname
  | varname COLON varname
  | defaultrangespec COMMA varname
  | defaultrangespec COMMA varname COLON varname
  ;
defaultpredicateexpr  : defaultpredicateexpr AND defaultpredicateexpr
  | defaultpredicateexpr OR defaultpredicateexpr
  | NOT defaultpredicateexpr
  | '(' defaultpredicateexpr ')'
  | RANGE '(' '*' ')'
  | RANGE '(' defaultrangespec ')'
  | DESCRIPTORS
  | dcloption
  ;
procgrouplist  : procgroup
  | procgrouplist procgroup
  ;
entrygrouplist  : entrygroup
  | entrygrouplist entrygroup
  ;
formatgrouplist  : '(' editformatlist ')'
  ;
iooption  : FILE_ '(' varnameref ')'
  | EVENT '(' varnameref ')'
  ;
readoption  : INTO '(' varnameref ')'
  | SET '(' varnameref ')'
  | IGNORE '(' expr ')'
  | KEY '(' expr ')'
  | KEYTO '(' varnameref ')'
  | NOLOCK
  | iooption
  ;
writeoption  : FROM '(' varnameref ')'
  | KEYFROM '(' expr ')'
  | KEYTO '(' varnameref ')'
  | iooption
  ;
rewriteoption  : FROM '(' varnameref ')'
  | KEY '(' expr ')'
  | iooption
  ;
deleteoption  : KEY '(' expr ')'
  | iooption
  ;
unlockoption  : FILE_ '(' varnameref ')'
  | KEY '(' expr ')'
  ;
locateoption  : FILE_ '(' varnameref ')'
  | SET '(' varnameref ')'
  | KEYFROM '(' expr ')'
  ;
opengrouplist  : opengroup
  | opengrouplist COMMA opengroup
  ;
opengroup  : FILE_ '(' varnameref ')' openoptionlist
  | FILE_ '(' varnameref ')'
  ;
openoptionlist  : openoption
  | openoptionlist openoption
  ;
openoption  : STREAM
  | RECORD
  | INPUT
  | OUTPUT
  | UPDATE
  | DIRECT
  | SEQUENTIAL
  | TRANSIENT
  | BUFFERED
  | UNBUFFERED
  | BACKWARDS
  | EXCLUSIVE
  | KEYED
  | PRINT
  | TITLE '(' expr ')'
  | LINESIZE '(' expr ')'
  | PAGESIZE '(' expr ')'
  | ENVIRONMENT '(' environmentspeclist ')'
  ;
closegroup  : FILE_ '(' varnameref ')' ENVIRONMENT '(' LEAVE ')'
  | FILE_ '(' varnameref ')' ENVIRONMENT '(' REREAD ')'
  | FILE_ '(' varnameref ')'
  ;
putoptionlist  : putoption
  | putoptionlist putoption
  ;
putoption  : FILE_ '(' varnameref ')'
  | PAGE
  | SKIP_
  | SKIP_ '(' expr ')'
  | LINE '(' expr ')'
  | STRING '(' varnameref ')'
  | dataspecification
  // | EDIT '(' expr ')' '(' list ')'
  ;
entrygroup  : '(' varnamecommalist ')'
  | RETURNS '(' entryparmcommalist ')'
  | REDUCIBLE
  | IRREDUCIBLE
  | OPTIONS '(' procoptionlist ')'
  | '(' ')'
  ;
procgroup  : '(' varnamecommalist ')'
  | RETURNS '(' entryparmcommalist ')'
  | OPTIONS '(' procoptionlist ')'
  | REDUCIBLE
  | IRREDUCIBLE
  | RECURSIVE
  | ORDER
  | REORDER
  | CHARGRAPHIC
  | NOCHARGRAPHIC
  | '(' ')'
  ;
procoptionlist  : procoption
  | procoptionlist procoption
  | procoptionlist COMMA procoption
  ;
procoption  : MAIN
  | REENTRANT
  | NOEXECOPS
  | TASK
  | VARIABLE
  | NON_QUICK
  | NO_QUICK_BLOCKS
  | PACKED_DECIMAL
  | SEPARATE_STATIC
  | SUPPORT
  | RENAME '(' renamepaircommalist ')'
  | VALIDATE
  | VALIDATE '(' varname ')'
  ;
renamepaircommalist  : renamepair
  | renamepaircommalist COMMA renamepair
  ;
renamepair  : '(' varname COMMA varname ')'
  ;
getoptionlist  : getoption
  | getoptionlist getoption
  ;
getoption  : FILE_ '(' varnameref ')'
  | COPY '(' varnameref ')'
  | PAGE
  | SKIP_
  | SKIP_ '(' expr ')'
  | STRING '(' expr ')'
  | dataspecification
  ;
dataspecification  : LIST listdataspec
  | DATA datadataspec
  | DATA
  | EDIT editdataspec
  ;
listdataspec  : '(' datalist ')'
  ;
datadataspec  : '(' datalist ')'
  ;
editdataspec  : '(' datalist ')' '(' editformatlist ')'
  | editdataspec '(' datalist ')' '(' editformatlist ')'
  ;
editformatexpr  : A
  | A '(' expr ')'
  | B
  | B '(' expr ')'
  | C '(' realformatexpr ')'
  | C '(' realformatexpr COMMA realformatexpr ')'
  | realformatexpr
  | G
  | G '(' expr ')'
  | P STR_CONSTANT
  | R '(' varnameref ')'
  | X '(' expr ')'
  | LINE '(' expr ')'
  | COLUMN '(' expr ')'
  | PAGE
  | SKIP_
  | SKIP_ '(' expr ')'
  ;
realformatexpr  : E '(' expr ')'
  | E '(' expr COMMA expr ')'
  | E '(' expr COMMA expr COMMA expr ')'
  | F '(' expr ')'
  | F '(' expr COMMA expr ')'
  | F '(' expr COMMA expr COMMA expr ')'
  ;
editformatitem  : editformatexpr
  | NUM editformatexpr
  | '(' NUM ')' editformatexpr
  ;
editformatlist  : editformatitem
  | NUM '(' editformatlist ')'
  | '(' NUM ')' '(' editformatlist ')'
  | editformatlist COMMA editformatitem
  | editformatlist COMMA NUM '(' editformatlist ')'
  | editformatlist COMMA '(' NUM ')' '(' editformatlist ')'
  ;
datalist  : expr
  | '(' datalist do_type_3 ')'
  | datalist COMMA expr
  | datalist COMMA '(' datalist do_type_3 ')'
  ;
dostmt  : do_type_1
  | do_type_2
  | do_type_3
  ;
do_type_1  : DO
  ;
do_type_2  : DO do_spec_2
  ;
do_spec_2  : WHILE '(' expr ')'
  | WHILE '(' expr ')' UNTIL '(' expr ')'
  | UNTIL '(' expr ')'
  | UNTIL '(' expr ')' WHILE '(' expr ')'
  | LOOP
  | FOREVER
  ;
do_type_3  : DO varnameref EQUAL do_spec_3list
  ;
do_spec_3list  : do_spec_3
  | do_spec_3 do_spec_2
  | do_spec_3list COMMA do_spec_3
  | do_spec_3list COMMA do_spec_3 do_spec_2
  ;
do_spec_3  : expr
  | expr do_spec_3_exprlist
  ;
do_spec_3_exprlist  : do_spec_3_expr
  | do_spec_3_exprlist do_spec_3_expr
  ;
do_spec_3_expr  : TO expr
  | BY expr
  | REPEAT expr
  | UPTHRU expr
  | DOWNTHRU expr
  ;
ifstmt  : IF ifprestmt THEN pl1stmt  ( ELSE pl1stmt )?
  ;
ifprestmt  : expr
  | ('(' expr ')' EQUAL expr)
  | (expr EQUAL expr)
  ;
assignstmt  : (
		varnamerefcommalist EQUAL expr
		  | varnamerefcommalist EQUAL expr COMMA BY NAME
		  | IF '(' expr ')' EQUAL expr
		  | IF '(' expr ')' EQUAL expr COMMA BY NAME
	  ) | (
		varnamerefcommalist SELFOP expr
		  | varnamerefcommalist SELFOP expr COMMA BY NAME
		  | IF '(' expr ')' SELFOP expr
		  | IF '(' expr ')' SELFOP expr COMMA BY NAME
	)
 ;
expr : exprbase | exprnested;
exprbase :
  NOT exprnested
  | '+' exprnested
  | '-' exprnested
  | exprnested POWER exprnested
  | exprnested ('*' | '/' | AND) exprnested
  | exprnested ('+' | '-' | OR | CONCAT) exprnested
  | exprnested (('?'? EQUAL) | '<' | '>' | LE | GE | NE |NG|NL) exprnested
  | ('-' | '+') exprnested
  | NOT exprnested
  | varnameref
  | exprconst
  ;
exprnested :
  NOT exprnested
  | '+' exprnested
  | '-' exprnested
  | exprnested POWER exprnested
  | exprnested ('*' | '/' | AND) exprnested
  | exprnested ('+' | '-' | OR | CONCAT) exprnested
  | exprnested (('?'? EQUAL) | '<' | '>' | LE | GE | NE) exprnested
  | ('-' | '+') exprnested
  | NOT exprnested
  | varnameref
  | exprconst
  | '(' exprnested ')'
  | '(' exprnested ')' exprstrconst
  ;
exprconst  : exprnumconst
  | exprstrconst
  ;
exprstrconst  : STR_CONSTANT
  | STR_CONSTANT B
  | STR_CONSTANT B1
  | STR_CONSTANT B2
  | STR_CONSTANT B3
  | STR_CONSTANT B4
  | STR_CONSTANT BX
  | STR_CONSTANT G
  | STR_CONSTANT GX
  | STR_CONSTANT M
  | STR_CONSTANT WX
  | STR_CONSTANT X
  | STR_CONSTANT XN
  | STR_CONSTANT XU
  ;
exprnumconst  : (
		NUM
		  | NUM I
		  | NUMFLOAT
		  | NUMFLOAT I
		  ) | (
			NUM B
			  | NUM B I
			  | NUM B1
			  | NUM B1 I
			  | NUM B2
			  | NUM B2 I
			  | NUM B3
			  | NUM B3 I
			  | NUM B4
			  | NUM B4 I
			  | NUMFLOAT B
			  | NUMFLOAT B I
			  | NUMFLOAT B1
			  | NUMFLOAT B1 I
			  | NUMFLOAT B2
			  | NUMFLOAT B2 I
			  | NUMFLOAT B3
			  | NUMFLOAT B3 I
			  | NUMFLOAT B4
			  | NUMFLOAT B4 I
			  )
  ;
varnamerefcommalist  : varnameref
  | varnamerefcommalist COMMA varnameref
  ;
varnameref  : varnamequal
  | varnameref DOT varnamequal
  | varnameref PTR varnamequal
  | varnameref HANDLEPTR varnamequal
  ;
varnamequal  : (
					varname
					  | varname '(' varnamedimensioncommalist ')'
					  | varname '(' varnamedimensioncommalist ')' '(' varnamedimensioncommalist ')'
					  | varname '(' ')'
					  | varname '(' varnamedimensioncommalist ')' '(' ')'
					  )
				| (
				DELAY '(' '*' COMMA varnamedimensioncommalist ')'
				  | DELAY '(' '*' ')'
				  | DELAY '(' expr COMMA varnamedimensioncommalist ')'
				  | DELAY '(' expr ')'
				  | DISPLAY '(' '*' COMMA varnamedimensioncommalist ')'
				  | DISPLAY '(' '*' ')'
				  | DISPLAY '(' expr COMMA varnamedimensioncommalist ')'
				  | DISPLAY '(' expr ')'
				  | GET '(' varnamedimensioncommalist ')'
				  | IF '(' '*' COMMA varnamedimensioncommalist ')'
				  | IF '(' '*' ')'
				  | IF '(' expr COMMA varnamedimensioncommalist ')'
				  | IF '(' expr ')'
				  | PUT '(' varnamedimensioncommalist ')'
				  | RETURN '(' '*' COMMA varnamedimensioncommalist ')'
				  | RETURN '(' '*' ')'
				  | RETURN '(' expr COMMA varnamedimensioncommalist ')'
				  | RETURN '(' expr ')'
				  | SELECT '(' '*' COMMA varnamedimensioncommalist ')'
				  | SELECT '(' '*' ')'
				  | SELECT '(' expr COMMA varnamedimensioncommalist ')'
				  | SELECT '(' expr ')'
				  | UNTIL '(' '*' ')'
				  | UNTIL '(' '*' COMMA varnamedimensioncommalist ')'
				  | UNTIL '(' expr COMMA varnamedimensioncommalist ')'
				  | UNTIL '(' expr ')'
				  | WHEN '(' varnamedimensioncommalist ')'
				  | WAIT '(' varnamedimensioncommalist ')'
				  | WHILE '(' '*' ')'
				  | WHILE '(' '*' COMMA varnamedimensioncommalist ')'
				  | WHILE '(' expr COMMA varnamedimensioncommalist ')'
				  | WHILE '(' expr ')'
				  )
  ;
varnamedimensioncommalist  : varnamedimension
  | varnamedimensioncommalist COMMA varnamedimension
  | varnamedimensioncommalist COLON varnamedimension
  ;
varnamedimension  : expr
  | '*'
  | NUM SUB
  ;
varnamecommalist  : varname
  | varnamecommalist COMMA varname
  ;
varname  : '\\'? (VARNAME
  | varname_kw
  | varname_kwpp
  | varname_conditions)
  ;
varname_kw  : A
  | ABNORMAL
  | ADDBUFF
  | ALIAS
  | ALIGNED
  | ALLOCATE
  | ASCII
  | ASSIGNABLE
  | ASSEMBLER
  | ATTACH
  | AUTOMATIC
  | B
  | B1
  | B2
  | B3
  | B4
  | BACKWARDS
  | BASED
  | BEGIN_
  | BIGENDIAN
  | BINARY
  | BIT
  | BKWD
  | BLKSIZE
  | BUFFERED
  | BUFFERS
  | BUFFOFF
  | BUFND
  | BUFNI
  | BUFSP
  | BUILTIN
  | BY
  | BYADDR
  | BYVALUE
  | BX
  | C
  | CALL
  | CELL
  | CDECL
  | CHARACTER
  | CHARGRAPHIC
  | CLOSE
  | COBOL
  | COLUMN
  | COMPLEX
  | CONNECTED
  | CONSECUTIVE
  | CONSTANT
  | CONTROLLED
  | COPY
  | CTLASA
  | CTL360
  | D
  | DATA
  | DATE
  | DB
  | DECIMAL
  | DEFINE
  | DEFINED
  | DELAY
  | DELETE
  | DESCRIPTOR
  | DESCRIPTORS
  | DETACH
  | DIMENSION
  | DISPLAY
  | DIRECT
  | DO
  | DOWNTHRU
  | E
  | EDIT
  | ELSE
  | END
  | ENTRY
  | ENVIRONMENT
  | EVENT
  | EXCLUSIVE
  | EXEC
  | EXPORTS
  | EXTERNAL
  | EXIT
  | F
  | FB
  | FS
  | FBS
  | FETCH
  | FETCHABLE
  | FILE_
  | FIXED
  | FLOAT
  | FLUSH
  | FOREVER
  | FORMAT
  | FORTRAN
  | FREE
  | FROM
  | FROMALIEN
  | G
  | GENERIC
  | GENKEY
  | GET
  | GO
  | GOTO
  | GRAPHIC
  | GX
  | H
  | HANDLE
  | HEXADEC
  | I
  | IEEE
  | IF
  | IGNORE
  | IMPORTED
  | IN
  | INDEXAREA
  | INDEXED
  | INITIAL_
  | INLINE
  | INPUT
  | INSERT
  | INTER
  | INTERACTIVE
  | INTERNAL
  | INTO
  | IRREDUCIBLE
  | ITERATE
  | J
  | K
  | KEIS
  | KEYED
  | KEYLENGTH
  | KEYLOC
  | KEYTO
  | KEYFROM
  | L
  | LABEL
  | LEAVE
  | LIKE
  | LIMITED
  | LINE
  | LINESIZE
  | LINKAGE
  | LIST
  | LITTLEENDIAN
  | LOCAL
  | LOCATE
  | LOOP
  | M
  | MAIN
  | N
  | NCHARACTER
  | NCP
  | NOCHARGRAPHIC
  | NOCHECK
  | NOCONVERSION
  | NODESCRIPTOR
  | NOEXECOPS
  | NOFIXEDOVERFLOW
  | NOINIT
  | NOINLINE
  | NOINVALIDOP
  | NOLOCK
  | NONASSIGNABLE
  | NONCONNECTED
  | NONE
  | NONVARYING
  | NON_QUICK
  | NO_QUICK_BLOCKS
  | NOOVERFLOW
  | NORMAL
  | NOSIZE
  | NOSUBSCRIPTRANGE
  | NOSTRINGRANGE
  | NOSTRINGSIZE
  | NOUNDERFLOW
  | NOWRITE
  | NOZERODIVIDE
  | O
  | OFFSET
  | ON
  | OPEN
  | OPTIONAL
  | OPTIONS
  | OPTLINK
  | ORDER
  | ORDINAL
  | OTHERWISE
  | OUTPUT
  | P
  | PACKAGE
  | PACKED
  | PACKED_DECIMAL
  | PAGE
  | PAGESIZE
  | PARAMETER
  | PASSWORD
  | PICTURE
  | POINTER
  | POSITION
  | PRECISION
  | PRINT
  | PRIORITY
  | PUT
  | Q
  | R
  | RANGE
  | REAL
  | READ
  | RECSIZE
  | RECURSIVE
  | REENTRANT
  | REDUCIBLE
  | REFER
  | REGIONAL
  | RELEASE
  | RENAME
  | REORDER
  | REPEAT
  | REPLY
  | REREAD
  | RESERVED
  | RESERVES
  | RESIGNAL
  | RETCODE
  | RETURN
  | RETURNS
  | REUSE
  | REVERT
  | REWRITE
  | S
  | SCALARVARYING
  | SELECT
  | SEPARATE_STATIC
  | SEQUENTIAL
  | SET
  | SIGNAL
  | SIGNED
  | SIS
  | SKIP_
  | STATIC
  | STDCALL
  | STOP
  | STREAM
  | STRING
  | STRINGVALUE
  | STRUCTURE
  | SUB
  | SUPPORT
  | SYSTEM
  | T
  | TASK
  | THEN
  | THREAD
  | TITLE
  | TO
  | TOTAL
  | TP
  | TRANSIENT
  | TRKOFL
  | TSTACK
  | TYPE
  | U
  | UNALIGNED
  | UNBUFFERED
  | UNCONNECTED
  | UNDEFINEDFILE
  | UNION
  | UNLOCK
  | UNSIGNED
  | UNTIL
  | UPDATE
  | UPTHRU
  | V
  | VALIDATE
  | VALUE
  | VARIABLE
  | VARYING
  | VARYINGZ
  | VB
  | VBS
  | VS
  | VSAM
  | WAIT
  | WHEN
  | WHILE
  | WIDECHAR
  | WINMAIN
  | WRITE
  | WX
  | X
  | XN
  | XU
  | Y
  | Z
  ;
varname_kwpp  : ACTIVATE
  | DEACTIVATE
  | INCLUDE
  | NOPRINT
  | NOTE
  | PAGE
  | REPLACE
  ;
varname_conditions  : ANYCONDITION
  | AREA
  | ATTENTION
  | CHECK
  | CONDITION
  | CONVERSION
  | ENDFILE
  | ENDPAGE
  | ERROR
  | FINISH
  | FIXEDOVERFLOW
  | INVALIDOP
  | KEY
  | NAME
  | OVERFLOW_
  | PENDING
  | RECORD
  | SIZE
  | STORAGE
  | STRINGRANGE
  | STRINGSIZE
  | SUBSCRIPTRANGE
  | TRANSMIT
  | UNDERFLOW_
  | ZERODIVIDE
  ;
onconditioncommalist  : oncondition
  | onconditioncommalist COMMA oncondition
  ;
oncondition  : AREA
  | ATTENTION
  | ANYCONDITION
  | CHECK
  | CHECK '(' varnamerefcommalist ')'
  | CONDITION '(' varnameref ')'
  | CONVERSION
  | ENDFILE '(' varnameref ')'
  | ENDPAGE '(' varnameref ')'
  | ERROR
  | FINISH
  | FIXEDOVERFLOW
  | INVALIDOP
  | KEY '(' varnameref ')'
  | NAME '(' varnameref ')'
  | OVERFLOW_
  | PENDING '(' varnameref ')'
  | RECORD '(' varnameref ')'
  | SIZE
  | STORAGE
  | STRINGRANGE
  | STRINGSIZE
  | SUBSCRIPTRANGE
  | TRANSMIT '(' varnameref ')'
  | UNDEFINEDFILE '(' varnameref ')'
  | UNDERFLOW_
  | ZERODIVIDE
  | VARNAME
  | varname_kw
  ;
precondition  : CHECK
  | CHECK '(' varnamerefcommalist ')'
  | CONVERSION
  | FIXEDOVERFLOW
  | INVALIDOP
  | OVERFLOW_
  | SIZE
  | STRINGRANGE
  | STRINGSIZE
  | SUBSCRIPTRANGE
  | UNDERFLOW_
  | ZERODIVIDE
  | NOCHECK
  | NOCONVERSION
  | NOFIXEDOVERFLOW
  | NOINVALIDOP
  | NOOVERFLOW
  | NOSIZE
  | NOSUBSCRIPTRANGE
  | NOSTRINGRANGE
  | NOSTRINGSIZE
  | NOUNDERFLOW
  | NOZERODIVIDE
  ;
dclstmt  : (DECLARE dcltermcommalist
  | DECLARE)
  // AINCLUDE?
  ;
// dcltermcommalist  : dclterm
//   | dclnamebase
//   | dcltermcommalist COMMA (includestmt SEMICOLON )?  dclterm
//   | dcltermcommalist COMMA (includestmt SEMICOLON )? dclnamebase
//   ;

dcltermcommalist: (dclterm|dclnamebase) (COMMA (includestmt |dclterm|dclnamebase)?)*;

dclterm  : '(' dcltermcommalist ')'
  | '(' dcltermcommalist ')' dclfactor
  | NUM '(' dcltermcommalist ')'
  | NUM '(' dcltermcommalist ')' dclfactor
  | NUM '(' dcltermcommalist ')' CELL
  | NUM '(' dcltermcommalist ')' UNION
  ;
dclnamebase  : varname
  | varname dclfactor
  | NUM varname
  | NUM varname dclfactor
  | NUM varname CELL
  | NUM varname UNION
  | NUM '*'
  | NUM '*' dclfactor
  | NUM '*' CELL
  | NUM '*' UNION
  ;
dclfactor  : '(' dclarrayboundcommalist ')'
  | '(' dclarrayboundcommalist ')' dcloptionlist
  | dcloptionlist
  ;
dclarrayboundcommalist  : dclarraybound
  | dclarraybound COLON dclarraybound
  | dclarrayboundcommalist COMMA dclarraybound
  | dclarrayboundcommalist COMMA dclarraybound COLON dclarraybound
  ;
dclarraybound  : expr
  | expr REFER '(' varnameref ')'
  | '*'
  ;
dcloptionlist  : dcloption
  | dcloptionlist dcloption
  ;
dcloption  : dclnumeric
  | dclio
  | dclchar
  | dclstg
  | dclpgm
  | dclmisc
  | dclinit
  ;
dclnumeric  : FIXED
  | FIXED '(' dclnumericNUM ')'
  | FIXED '(' dclnumericNUM COMMA dclnumericNUM ')'
  | FLOAT
  | FLOAT '(' dclnumericNUM ')'
  | DECIMAL
  | DECIMAL '(' dclnumericNUM ')'
  | DECIMAL '(' dclnumericNUM COMMA dclnumericNUM ')'
  | BINARY
  | BINARY '(' dclnumericNUM ')'
  | BINARY '(' dclnumericNUM COMMA dclnumericNUM ')'
  | REAL
  | COMPLEX
  | COMPLEX '(' dclnumericNUM ')'
  | PRECISION
  | PRECISION '(' dclnumericNUM ')'
  | PRECISION '(' dclnumericNUM COLON dclnumericNUM ')'
  | PRECISION '(' dclnumericNUM COMMA dclnumericNUM ')'
  ;
dclnumericNUM  : NUM
  | '-' NUM
  | '+' NUM
  ;
dclio  : BACKWARDS
  | BUFFERED
  | DIRECT
  | ENVIRONMENT '(' environmentspeclist ')'
  | EXCLUSIVE
  | FILE_
  | INPUT
  | KEYED
  | LINESIZE '(' expr ')'
  | OUTPUT
  | PAGESIZE '(' expr ')'
  | PRINT
  | RECORD
  | SEQUENTIAL
  | STREAM
  | TITLE '(' expr ')'
  | TRANSIENT
  | UNBUFFERED
  | UPDATE
  ;
dclchar  : AREA charspec
  | BIT charspec
  | CHARACTER charspec
  | GRAPHIC charspec
  | G charspec
  | PICTURE STR_CONSTANT
  | WIDECHAR charspec
  | DATE
  | DATE '(' STR_CONSTANT ')'
  | NCHARACTER charspec
  ;
dclstg  : ALIGNED
  | AUTOMATIC
  | BASED
  | BASED '(' varnameref ')'
  | BYADDR
  | BYVALUE
  | CONNECTED
  | CONSTANT
  | CONTROLLED
  | DEFINED varnameref
  | DEFINED '(' varnameref ')'
  | DIMENSION '(' dclarrayboundcommalist ')'
  | EXTERNAL
  | EXTERNAL '(' STR_CONSTANT ')'
  | INTERNAL
  | LIKE varnameref
  | LOCAL
  | NONCONNECTED
  | STATIC
  | OFFSET
  | OFFSET '(' varnameref ')'
  | OPTIONAL
  | PARAMETER
  | POSITION '(' expr ')'
  | RESERVED
  | RESERVED '(' IMPORTED ')'
  | UNALIGNED
  | UNCONNECTED
  | STRUCTURE
  ;
dclpgm  : ENTRY
  | ENTRY '(' entryparmcommalist ')'
  | RETURNS '(' entryparmcommalist ')'
  | LABEL
  | CONDITION
  | GENERIC '(' genericspeccommalist ')'
  | TASK
  | LIMITED
  | FROMALIEN
  | FETCHABLE
  | CDECL
  | OPTLINK
  | STDCALL
  | WINMAIN
  | FORTRAN
  | DESCRIPTOR
  | NODESCRIPTOR
  | LINKAGE '(' STR_CONSTANT ')'
  | REDUCIBLE
  | IRREDUCIBLE
  ;
dclmisc  : VARIABLE
  | VARYING
  | NONVARYING
  | VARYINGZ
  | SYSTEM
  | BUILTIN
  | POINTER
  | ABNORMAL
  | NORMAL
  | ASSIGNABLE
  | NONASSIGNABLE
  | HEXADEC
  | IEEE
  | BIGENDIAN
  | LIST
  | LITTLEENDIAN
  | SIGNED
  | UNSIGNED
  | NOINIT
  | HANDLE varnameref
  | HANDLE '(' varnameref ')'
  | TYPE varnameref
  | TYPE '(' varnameref ')'
  | ORDINAL varnameref
  | OPTIONS '(' entryoptionlist ')'
  | FORMAT
  ;
environmentspeclist  : environmentspec
  | environmentspeclist environmentspec
  | environmentspeclist COMMA environmentspec
  ;
environmentspec  : F
  | F '(' NUM ')'
  | FB
  | FS
  | FBS
  | V
  | VB
  | VS
  | VBS
  | ADDBUFF
  | ASCII
  | BKWD
  | BLKSIZE '(' environmentspecparm ')'
  | BUFFERS '(' environmentspecparm ')'
  | BUFFOFF '(' environmentspecparm ')'
  | BUFND '(' environmentspecparm ')'
  | BUFNI '(' environmentspecparm ')'
  | BUFSP '(' environmentspecparm ')'
  | COBOL
  | CONSECUTIVE
  | CTLASA
  | CTL360
  | D
  | DB
  | GENKEY
  | INDEXAREA '(' environmentspecparm ')'
  | INDEXED
  | INTERACTIVE
  | KEIS
  | KEYLENGTH '(' environmentspecparm ')'
  | KEYLOC '(' environmentspecparm ')'
  | LEAVE
  | NCP '(' environmentspecparm ')'
  | NOWRITE
  | RECSIZE '(' environmentspecparm ')'
  | REGIONAL '(' environmentspecparm ')'
  | REREAD
  | REUSE
  | PASSWORD
  | SCALARVARYING
  | SIS
  | SKIP_
  | STRINGVALUE
  | TOTAL
  | TP '(' M ')'
  | TP '(' R ')'
  | TRKOFL
  | U
  | VSAM
  ;
environmentspecparm  : NUM
  | VARNAME
  ;
entryparmcommalist  : entryparm
  | entryparmcommalist COMMA entryparm
  ;
entryparm  :
  | dcloptionlist
  | '*'
  | '*' dcloptionlist
  | NUM dcloptionlist
  | NUM
  | '(' entryarrayspeccommalist ')' dcloptionlist
  | NUM '(' entryarrayspeccommalist ')' dcloptionlist
  | NUM '(' entryarrayspeccommalist ')'
  ;
entryarrayspec  : '*'
  | NUM
  | NUM COLON NUM
  | NUM COLON '*'
  | '*' COLON NUM
  | '*' COLON '*'
  ;
entryarrayspeccommalist  : entryarrayspec
  | entryarrayspeccommalist COMMA entryarrayspec
  ;
entryoptionlist  : entryoption
  | entryoptionlist entryoption
  | entryoptionlist COMMA entryoption
  ;
entryoption  : ASSEMBLER
  | COBOL
  | FORTRAN
  | INTER
  | RETCODE
  | CONSTANT
  | VARIABLE
  | PACKED
  | SUPPORT
  ;
genericspeccommalist  : genericspec
  | genericspeccommalist COMMA genericspec
  ;
genericspec  : varname WHEN '(' genericwhenoptionlist ')'
  ;
genericwhenoptionlist  : genericwhenoption
  | genericwhenoptionlist COMMA genericwhenoption
  ;
genericwhenoption  :
  | '*'
  | dcloptionlist
  ;
charspec  :
  | '(' '*' ')'
  | '(' expr ')'
  | '(' expr REFER '(' varnameref ')' ')'
  ;
dclinit  : INITIAL_ '(' inititemcommalist ')'
  | INITIAL_ CALL varnameref
  | INITIAL_ TO '(' initialtospec ')' '(' inititemcommalist ')'
  ;
initialtospec  : VARYING
  | VARYINGZ
  | NONVARYING
  ;
inititemcommalist  : inititem
  | inititemcommalist COMMA inititem
  ;
inititem  : exprbase
  | '*'
  | inititerationfactorlist
  | inititerationfactorlist '*'
  | inititerationfactorlist exprbase
  | inititerationfactorlist '(' inititemcommalist ')'
  ;
inititerationfactorlist  : '(' exprbase ')'
  | inititerationfactorlist '(' exprbase ')'
  ;


ACOMMENT: '//' .*?  -> skip;
COMMENT : ('/*'|'**') .*? '*/'+     -> skip;
/* Notes:
 * "Keywords, their allowable synonyms, and reserved parameters, appear in uppercase for the
 * MVS platform, and lowercase for UNIX platform. These items must be entered exactly as shown."
 *
 * "You can use a combination of lowercase and uppercase characters in a PL/I program.
 * When used in keywords or identifiers, the lowercase characters are treated as the corresponding
 * uppercase characters. This is true even if you entered a lowercase character as a DBCS character.
 * When used in a comment or in a character, mixed, or a graphic string constant, lowercase characters
 * remain lowercase."
 */

A: [aA];
B: [bB];
C: [cC];
D: [dD];
E: [eE];
F: [fF];
G: [gG];
H: [hH];
I: [iI];
J: [jJ];
K: [kK];
L: [lL];
M: [mM];
N: [nN];
O: [oO];
P: [pP];
Q: [qQ];
R: [rR];
S: [sS];
T: [tT];
U: [uU];
V: [vV];
W: [wW];
X: [xX];
Y: [yY];
Z: [zZ];
ABNORMAL        : A B N O R M A L;
ACTIVATE     : A C T (I V A T E)?;
ADDBUFF         : A D D B U F F;
ALIAS           : A L I A S;
ALIGNED         : A L I G N E D;
ALLOCATE     : A L L O C (A T E)?;
ANYCONDITION : A N Y C O N D (I T I O N)?;
AREA            : A R E A;
ASCII           : A S C I I;
ASSIGNABLE : A S S I G N A B L E | A S G N;
ASSEMBLER   : A S S E M B L E R | A S M;
ATTACH          : A T T A C H;
ATTENTION  : A T T E N T I O N | A T T N;
AUTOMATIC    : A U T O (M A T I C)?;

B1              : B [1];
B2              : B [2];
B3              : B [3];
B4              : B [4];
BACKWARDS       : B A C K W A R D S;
BASED           : B A S E D;
BEGIN_           : B E G I N;
BIGENDIAN       : B I G E N D I A N;
BINARY       : B I N (A R Y)?;
BIT             : B I T;
BKWD            : B K W D;
BLKSIZE         : B L K S I Z E;
BUFFERED     : B U F F E R E D | B U F;
BUFFERS      : B U F F E R S | B U F F;
BUFFOFF         : B U F F O F F;
BUFND           : B U F N D;
BUFNI           : B U F N I;
BUFSP           : B U F S P;
BUILTIN         : B U I L T I N;
BY              : B Y;
BYADDR		: B Y A D D R;
BYVALUE		: B Y V A L U E;
BX		: B X;
CALL            : C A L L;
CDECL           : C D E C L;
CELL            : C E L L;
CHARACTER    : C H A R A C T E R | C H A R;
CHARGRAPHIC  : C H A R G R A P H I C | C H A R G;
CHECK           : C H E C K;
CICS: C I C S;
CLOSE           : C L O S E;
COBOL           : C O B O L;
COLUMN       : C O L U M N | C O L;
COMMIT : C O M M I T;
COMPLEX    : C O M P L E X | C P L X;
CONNECTED    : C O N N (E C T E D)?;
CONDITION    : C O N D (I T I O N)?;
CONSECUTIVE     : C O N S E C U T I V E;
CONSTANT     : C O N S T (A N T)?;
CTLASA          : C T L A S A;
CTL360          : C T L [3] [6] [0];
CONTROLLED  : C O N T R O L L E D | C T L;
CONVERSION   : C O N V (E R S I O N)?;
COPY            : C O P Y;
DB              : D B;
DATA            : D A T A;
DATE            : D A T E;
DECLARE : D E C L A R E | D C L;
DEACTIVATE   : D E A C T (I V A T E)?;
DECIMAL      : D E C I M A L | D E C;
DEFAULT  : D E F A U L T | D F T;	// specialKeyWord(DEFAULT,DEFAULT,VARNAME);
DELAY		: D E L A Y;
DELETE		: D E L E T E;
DEFINE		: D E F I N E;
DEFINED	: D E F (I N E D)?;
DESC: D E S C ;
DESCRIBE: D E S C R I B E;
DESCRIPTOR	: D E S C R I P T O R;
DESCRIPTORS	: D E S C R I P T O R S;
DETACH		: D E T A C H;
DIMACROSS : D I M A C R O S S; //TODO
DIMENSION	: D I M (E N S I O N)?;
DIRECT		: D I R E C T;
DISPLAY		: D I S P L A Y;
DISTINCT: D I S T I N C T;
DO	 	: D O;
DOWNTHRU	: D O W N T H R U;
EDIT	 	: E D I T;
ELSE		: E L S E;
END : E N D;
ENDFILE		: E N D F I L E;
ENDPAGE		: E N D P A G E;
ENTRY : E N T R Y; //		specialKeyWord(ENTRY,ENTRY,ENTRY);
ENVIRONMENT  : E N V (I R O N M E N T)?;
ERROR           : E R R O R;
EVENT           : E V E N T;
EXCLUSIVE    : E X C L (U S I V E)?;
EXEC : E X E C;
EXIT            : E X I T;
EXPORTS         : E X P O R T S;
EXTERNAL     : E X T (E R N A L)?;
FB              : F B;
FS              : F S;
FBS             : F B S;
FETCH           : F E T C H;
FETCHABLE       : F E T C H A B L E;
FILE_            : F I L E;
FINISH          : F I N I S H;
FIXED           : F I X E D;
FIXEDOVERFLOW  : F I X E D O V E R F L O W | F O F L;
FLOAT           : F L O A T;
FLUSH           : F L U S H;
FREE            : F R E E;
FOR : F O R; 
FORCE : F O R C E; //TODO
FOREVER         : F O R E V E R;
FORTRAN         : F O R T R A N;
FORMAT	: F O R M A T; //	specialKeyWord(FORMAT,FORMAT_STMT,FORMAT);
FROM            : F R O M;
FROMALIEN       : F R O M A L I E N;
GENERIC         : G E N E R I C;
GENKEY          : G E N K E Y;
GET             : G E T;
GO              : G O;
GOTO            : G O T O;
GRAPHIC         : G R A P H I C;
GROUP: G R O U P;
GX              : G X;
HANDLE		: H A N D L E;
HAVING: H A V I N G;
HEXADEC		: H E X A D E C;
IEEE		: I E E E;
IF              : I F;
IGNORE          : I G N O R E;
IMPORTED        : I M P O R T E D;
IN              : I N;
INCLUDE         : I N C L U D E;
INDEXAREA       : I N D E X A R E A;
INDEXED         : I N D E X E D;
INDFOR : I N D F O R; //TODO
INITIAL_      : I N I T I A L | I N I | I N I T;
INLINE          : I N L I N E;
INONLY : I N O N L Y; //TODO
INOUT :  I N O U T; //TODO
INPUT           : I N P U T;
INSERT: I N S E R T;
INTER           : I N T E R;
INTERACTIVE     : I N T E R A C T I V E;
INTERNAL     : I N T (E R N A L)?;
INTO            : I N T O;
INVALIDOP       : I N V A L I D O P;
IRREDUCIBLE  : I R R E D (U C I B L E)?;
ITERATE		: I T E R A T E;
KEIS            : K E I S;
KEY             : K E Y;
KEYED           : K E Y E D;
KEYFROM         : K E Y F R O M;
KEYLENGTH       : K E Y L E N G T H;
KEYLOC          : K E Y L O C;
KEYTO           : K E Y T O;
LABEL           : L A B E L;
LEAVE           : L E A V E;
LIMITED         : L I M I T E D;
LIKE            : L I K E;
LINE            : L I N E;
LINESIZE        : L I N E S I Z E;
LINKAGE         : L I N K A G E;
LIST            : L I S T;
LITTLEENDIAN	: L I T T L E E N D I A N;
LOCAL           : L O C A L;
LOCATE          : L O C A T E;
LOOP            : L O O P;
MAIN            : M A I N;
NAME            : N A M E;
NCHARACTER    : N C H A R A C T E R | N C H A R;
NCP             : N C P;
NOCHARGRAPHIC : N O C H A R G (R A P H I C)?;
NOCHECK         : N O C H E C K;
NOCONVERSION : N O C O N V (E R S I O N)?;
NODESCRIPTOR    : N O D E S C R I P T O R;
NOEXECOPS       : N O E X E C O P S;
NOFIXEDOVERFLOW : N O F I X E D O V E R F L O W O F L;
NOINIT          : N O I N I T;
NOINLINE        : N O I N L I N E;
NOINVALIDOP     : N O I N V A L I D O P;
NOLOCK          : N O L O C K;
NONASSIGNABLE : N O N A S S I G N A B L E | N O N A S G N;
NONCONNECTED : N O N C O N N (E C T E D)?;
NONE            : N O N E;
NONVARYING	: N O N V A R (Y I N G)?;
NON_QUICK       : N O N '_' Q U I C K;
NO_QUICK_BLOCKS	:  N O '_' Q U I C K '_' B L O C K S ;
NOOVERFLOW : N O O V E R F L O W | N O O F L;
NOPRINT		: N O P R I N T;
NORMAL		: N O R M A L;
NOSIZE          : N O S I Z E;
NOSUBSCRIPTRANGE : N O S U B S C R I P T R A N G E | N O S U B R G;
NOSTRINGRANGE     : N O S T R I N G R A N G E | N O S T R G;
NOSTRINGSIZE      : N O S T R I N G S I Z E | N O S T R Z;
NOTE      	: N O T E;
NOUNDERFLOW      : N O U N D E R F L O W | N O U F L;
NOWRITE               : N O W R I T E;
NOZERODIVIDE    : N O Z E R O D I V I D E | N O Z D I V;
NULLINIT : N U L L I N I T;//TODO
OFFSET          : O F F S E T;
ON              : O N;
OPEN            : O P E N;
OPTIONAL        : O P T I O N A L;
OPTIONS         : O P T I O N S;
OPTLINK         : O P T L I N K;
ORDER           : O R D E R;
ORDINAL         : O R D I N A L;
OTHERWISE	: O T H E R (W I S E)?; //specialKeyWord(OTHERWISE,OTHERWISE,VARNAME);
OUTONLY : O U T O N L Y; //TODO
OUTPUT		: O U T P U T;
OVERFLOW_	: O V E R F L O W | O F L;
PACKAGE         : P A C K A G E;
PACKED_DECIMAL  : P A C K E D '_' D E C I M A L ; //'PACKED_DECIMAL';
PACKED          : P A C K E D;
PAGE            : P A G E;
PAGESIZE        : P A G E S I Z E;
PARAMETER   : P A R A M E T E R | P A R M;
PASSWORD	: P A S S W O R D;
PENDING		: P E N D I N G;
PICTURE	: P I C (T U R E)?;
POINTER	: P O I N T E R | P T R;
POSITION	: P O S (I T I O N)?;
PRECISION	: P R E C (I S I O N)?;
PREPARE: P R E P A R E;
PRINT	        : P R I N T;
PRIORITY        : P R I O R I T Y;
PROCEDURE	: P R O C (E D U R E)?; //specialKeyWord(PROCEDURE,PROCEDURE,VARNAME);
PROCESS: P R O C E S S ;
PUT             : P U T;
RANGE           : R A N G E;
READ            : R E A D;
REAL            : R E A L;
RECORD          : R E C O R D;
RECSIZE         : R E C S I Z E;
RECURSIVE       : R E C U R S I V E;
REDUCIBLE	: R E D (U C I B L E)?;
REENTRANT       : R E E N T R A N T;
REFER           : R E F E R;
REGIONAL        : R E G I O N A L;
RELEASE         : R E L E A S E;
RENAME          : R E N A M E;
REORDER         : R E O R D E R;
REPEAT          : R E P E A T;
REPLACE         : R E P L A C E;
REPLY		: R E P L Y;
REREAD		: R E R E A D;
RESERVED	: R E S E R V E D;
RESERVES	: R E S E R V E S;
RESIGNAL	: R E S I G N A L;
RETCODE		: R E T C O D E;
RETURN		: R E T U R N;
RETURNS		: R E T U R N S;
REUSE		: R E U S E;
REVERT		: R E V E R T;
REWRITE		: R E W R I T E;
ROLLBACK: R O L L B A C K;
SCALARVARYING	: S C A L A R V A R Y I N G;
SELECT		: S E L E C T;
SEPARATE_STATIC	: S E P A R A T E '_' S T A T I C ; //'SEPARATE_STATIC';
SET             : S E T;
SEQUENTIAL	: S E Q U E N T I A L | S E Q L;
SIGNAL          : S I G N A L;
SIGNED          : S I G N E D;
SIS             : S I S;
SIZE            : S I Z E;
SKIP_            : S K I P;
SNAP	 : S N A P; //     	specialKeyWord(SNAP,SNAP,VARNAME);
SQL   : S Q L;
STATIC		: S T A T I C;
STDCALL		: S T D C A L L;
STORAGE		: S T O R A G E;
STOP		: S T O P;
STREAM		: S T R E A M;
STRING	 	: S T R I N G;
STRINGRANGE        : S T R I N G R A N G E | S T R G;
STRINGSIZE		: S T R I N G S I Z E | S T R Z;
STRINGVALUE	: S T R I N G V A L U E;
STRUCTURE	: S T R U C T U R E;
SUB             : S U B;
SUBSCRIPTRANGE	: S U B S C R I P T R A N G E | S U B R G;
SUPPRESS : S U P P R E S S; //TODO
SUPPORT		: S U P P O R T;
SYSTEM		: S Y S T E M;
TASK		: T A S K;
THEN		: T H E N;
THREAD		: T H R E A D;
TITLE		: T I T L E;
TO              : T O;
TOTAL           : T O T A L;
TP              : T P;
TRANSIENT       : T R A N S I E N T;
TRANSMIT        : T R A N S M I T;
TRKOFL          : T R K O F L;
TSTACK          : T S T A C K;
TYPE            : T Y P E;
UNALIGNED    : U N A L (I G N E D)?;
UNBUFFERED   : U N B U F F (E R E D)?;
UNCONNECTED     : U N C O N N E C T E D;
UNDEFINEDFILE : U N D E F I N E D F I L E | U N D F;
UNDERFLOW_    : U N D E R F L O W | U F L;
UNION           : U N I O N;
UNLOCK          : U N L O C K;
UNSIGNED     : U N S (I G N E D)?;
UNTIL           : U N T I L;
UPDATE          : U P D A T E;
UPTHRU          : U P T H R U;
USING:  U S I N G ;
VALIDATE        : V A L I D A T E;
VALUE           : V A L U E;
VALUELIST      : V A L U E L I S T; //TODO
VALUELISTFROM      : V A L U E L I S T F R O M; //TODO
VALUERANGE      : V A L U E R A N G E; //TODO
VALUES           : V A L U E S;
VARIABLE        : V A R I A B L E;
VARYING      : V A R (Y I N G)?;
VARYINGZ     : V A R (Y I N G)? Z ;
VB              : V B;
VBS             : V B S;
VS              : V S;
VSAM            : V S A M;
WAIT            : W A I T;
WHEN            : W H E N;
WHENEVER        : W H E N E V E R;
WHERE           : W H E R E;
WIDECHAR     : W (I D E)? C H A R;
WITH :W I T H;
WINMAIN         : W I N M A I N;
WHILE           : W H I L E;
WRITE           : W R I T E;
WX              : W X;
XN              : X N;
XU              : X U;
ZERODIVIDE : Z E R O D I V I D E | Z D I V;


COMMA: ',';
COLON: ':';
NUM : Nbr ;
fragment Nbr : [0-9] [0-9_]* ;
fragment Nbree : [DEFSQ] [+-]? Nbr;
STR_CONSTANT : STR+;
STR: '"' .*? '"' | '\'' .*? '\'' ('NX'|'ND'|'NA'|'NK')? ;
NOT : [\u00AA] | [\uFFFD] | '^' | '~'|'¬';
AND : '&';
POWER: '**';
CONCAT : '||' | '!!';
NUMFLOAT :
	DOT Nbr Nbree
	| DOT Nbr
	| Nbr Nbree
	| Nbr DOT
	| Nbr DOT Nbree
	| Nbr DOT Nbr Nbree
	| Nbr DOT Nbr
	;
PTR : '->';
HANDLEPTR : '=>';
SELFOP : ('+' | '-' | '*' | '|' | '!' | '&') EQUAL;
OR : '|' | '!';
LE : [\u00AA] '>' | [\uFFFD] '>' | '^>' | '~>' | '<=';
GE : [\u00AA] '<' | [\uFFFD] '<' | '^<' | '~<' | '>=';
NE : [\u00AA] EQUAL | [\uFFFD] EQUAL | '<>' | '^=' | '~='| '¬=' |'斂=';
NG : '¬>';
NL : '¬<';
fragment Chr : [_$#@]+;
fragment Let : [?a-zA-Z\u0080-\uFFFF_\\]+;
VARNAME :   (Chr | Let) (Chr | Let | [0-9])*;
// VARNAME:
//    [A-Za-z][0-9A-Za-z\u0080-\uFFFF_];
EQUAL: '=';
SEMICOLON: ';';
DOT: '.';


AINCLUDE: PERCENT WS? INCLUDE;
PERCENT: '%';

APAGE: PERCENT WS?'PAGE' ~[\n\r]*-> channel(HIDDEN);
ASKIP: PERCENT WS?'SKIP' ~[\n\r]*-> channel(HIDDEN);
APRINT: PERCENT WS?'PRINT' ~[\n\r]*-> channel(HIDDEN);
ANOPRINT: PERCENT WS?'NOPRINT' ~[\n\r]*-> channel(HIDDEN);
// ADCL: PERCENTWs?'DCL' ~[\n\r]*-> channel(HIDDEN);
// ASHAFT: PERCENTWs?'#' ~[\n\r]*-> channel(HIDDEN);
// ADEACT: PERCENTWs?'DEACT' ~[\n\r]*-> channel(HIDDEN);
// ANNOTATE: PERCENT~[I|i]  ~[\n\r]* -> channel(HIDDEN);
fragment Ws : (' ' | '\t' | '\n' | '\r');
// fragment NWs: (' '|SEMICOLON) NUM ('\r'|'\n'); 
WS : Ws  -> channel(HIDDEN) ;//-> channel(HIDDEN);
APROCESS : PROCESS ~[\n\r]*  -> channel(HIDDEN);
