# Generated from src/parsers/grammar/bms/BMS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,144,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,3,12,97,8,12,1,12,1,12,5,12,101,
        8,12,10,12,12,12,104,9,12,1,13,1,13,5,13,108,8,13,10,13,12,13,111,
        9,13,1,13,1,13,1,14,1,14,5,14,117,8,14,10,14,12,14,120,9,14,1,14,
        1,14,1,15,4,15,125,8,15,11,15,12,15,126,1,16,4,16,130,8,16,11,16,
        12,16,131,1,16,1,16,1,17,1,17,5,17,138,8,17,10,17,12,17,141,9,17,
        1,17,1,17,2,109,118,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,6,1,0,
        38,38,3,0,48,57,65,90,97,122,5,0,35,35,45,45,48,57,65,90,97,122,
        1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,150,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,41,1,0,0,0,5,48,1,0,0,0,7,55,
        1,0,0,0,9,62,1,0,0,0,11,69,1,0,0,0,13,76,1,0,0,0,15,81,1,0,0,0,17,
        83,1,0,0,0,19,85,1,0,0,0,21,87,1,0,0,0,23,89,1,0,0,0,25,96,1,0,0,
        0,27,105,1,0,0,0,29,114,1,0,0,0,31,124,1,0,0,0,33,129,1,0,0,0,35,
        135,1,0,0,0,37,38,5,69,0,0,38,39,5,78,0,0,39,40,5,68,0,0,40,2,1,
        0,0,0,41,42,5,68,0,0,42,43,5,70,0,0,43,44,5,72,0,0,44,45,5,80,0,
        0,45,46,5,83,0,0,46,47,5,68,0,0,47,4,1,0,0,0,48,49,5,68,0,0,49,50,
        5,70,0,0,50,51,5,72,0,0,51,52,5,80,0,0,52,53,5,68,0,0,53,54,5,73,
        0,0,54,6,1,0,0,0,55,56,5,68,0,0,56,57,5,70,0,0,57,58,5,72,0,0,58,
        59,5,77,0,0,59,60,5,83,0,0,60,61,5,68,0,0,61,8,1,0,0,0,62,63,5,68,
        0,0,63,64,5,70,0,0,64,65,5,72,0,0,65,66,5,77,0,0,66,67,5,68,0,0,
        67,68,5,73,0,0,68,10,1,0,0,0,69,70,5,68,0,0,70,71,5,70,0,0,71,72,
        5,72,0,0,72,73,5,77,0,0,73,74,5,68,0,0,74,75,5,70,0,0,75,12,1,0,
        0,0,76,77,5,84,0,0,77,78,5,89,0,0,78,79,5,80,0,0,79,80,5,69,0,0,
        80,14,1,0,0,0,81,82,5,44,0,0,82,16,1,0,0,0,83,84,5,61,0,0,84,18,
        1,0,0,0,85,86,5,40,0,0,86,20,1,0,0,0,87,88,5,41,0,0,88,22,1,0,0,
        0,89,90,5,70,0,0,90,91,5,73,0,0,91,92,5,78,0,0,92,93,5,65,0,0,93,
        94,5,76,0,0,94,24,1,0,0,0,95,97,7,0,0,0,96,95,1,0,0,0,96,97,1,0,
        0,0,97,98,1,0,0,0,98,102,7,1,0,0,99,101,7,2,0,0,100,99,1,0,0,0,101,
        104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,26,1,0,0,0,104,102,
        1,0,0,0,105,109,5,34,0,0,106,108,9,0,0,0,107,106,1,0,0,0,108,111,
        1,0,0,0,109,110,1,0,0,0,109,107,1,0,0,0,110,112,1,0,0,0,111,109,
        1,0,0,0,112,113,5,34,0,0,113,28,1,0,0,0,114,118,5,39,0,0,115,117,
        9,0,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,119,1,0,0,0,118,116,
        1,0,0,0,119,121,1,0,0,0,120,118,1,0,0,0,121,122,5,39,0,0,122,30,
        1,0,0,0,123,125,7,3,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,
        1,0,0,0,126,127,1,0,0,0,127,32,1,0,0,0,128,130,7,4,0,0,129,128,1,
        0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,133,1,
        0,0,0,133,134,6,16,0,0,134,34,1,0,0,0,135,139,5,42,0,0,136,138,8,
        5,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,
        0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,6,17,1,0,143,36,1,
        0,0,0,8,0,96,102,109,118,126,131,139,2,6,0,0,0,1,0
    ]

class BMSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    IDENTIFIER = 13
    STRING = 14
    STRING2 = 15
    NUMBER = 16
    WS = 17
    LineComment = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'END'", "'DFHPSD'", "'DFHPDI'", "'DFHMSD'", "'DFHMDI'", "'DFHMDF'", 
            "'TYPE'", "','", "'='", "'('", "')'", "'FINAL'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "STRING", "STRING2", "NUMBER", "WS", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "IDENTIFIER", 
                  "STRING", "STRING2", "NUMBER", "WS", "LineComment" ]

    grammarFileName = "BMS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


