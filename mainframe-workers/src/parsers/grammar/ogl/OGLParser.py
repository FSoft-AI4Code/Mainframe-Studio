# Generated from grammar/ogl/OGL.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,118,855,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,1,0,5,0,252,
        8,0,10,0,12,0,255,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,3,1,273,8,1,1,2,1,2,3,2,277,8,2,1,2,1,2,1,
        2,3,2,282,8,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,3,7,298,8,7,1,7,3,7,301,8,7,1,7,3,7,304,8,7,1,7,3,7,307,8,
        7,1,7,3,7,310,8,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
        12,4,12,323,8,12,11,12,12,12,324,1,13,1,13,1,13,1,13,1,13,3,13,332,
        8,13,1,14,1,14,3,14,336,8,14,1,15,1,15,4,15,340,8,15,11,15,12,15,
        341,1,16,1,16,4,16,346,8,16,11,16,12,16,347,1,17,1,17,4,17,352,8,
        17,11,17,12,17,353,1,17,1,17,1,18,1,18,1,19,1,19,3,19,362,8,19,1,
        19,3,19,365,8,19,1,19,3,19,368,8,19,1,19,4,19,371,8,19,11,19,12,
        19,372,1,20,1,20,3,20,377,8,20,1,21,1,21,3,21,381,8,21,1,22,1,22,
        1,23,1,23,3,23,387,8,23,1,24,1,24,3,24,391,8,24,1,25,1,25,1,26,1,
        26,1,26,1,27,1,27,1,28,1,28,3,28,402,8,28,1,28,3,28,405,8,28,1,28,
        3,28,408,8,28,1,28,3,28,411,8,28,1,28,3,28,414,8,28,1,29,1,29,3,
        29,418,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,
        34,1,34,1,34,1,34,1,34,1,34,3,34,436,8,34,1,35,1,35,1,35,1,36,1,
        36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,3,40,454,
        8,40,1,40,1,40,3,40,458,8,40,1,40,3,40,461,8,40,1,40,3,40,464,8,
        40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,4,45,477,
        8,45,11,45,12,45,478,1,46,3,46,482,8,46,1,46,1,46,1,46,1,46,1,47,
        1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,509,8,51,10,51,12,51,512,
        9,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,3,56,524,
        8,56,1,57,1,57,4,57,528,8,57,11,57,12,57,529,3,57,532,8,57,1,58,
        1,58,1,58,1,59,1,59,1,60,1,60,1,60,4,60,542,8,60,11,60,12,60,543,
        1,60,3,60,547,8,60,1,61,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,64,
        1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,67,1,67,3,67,567,8,67,1,68,
        1,68,3,68,571,8,68,1,68,3,68,574,8,68,1,68,3,68,577,8,68,1,68,3,
        68,580,8,68,1,69,1,69,1,69,3,69,585,8,69,1,70,1,70,1,71,1,71,1,72,
        1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,75,1,75,3,75,601,8,75,1,75,
        3,75,604,8,75,1,75,3,75,607,8,75,1,75,3,75,610,8,75,1,75,1,75,1,
        76,1,76,1,77,1,77,1,77,3,77,619,8,77,1,78,1,78,4,78,623,8,78,11,
        78,12,78,624,1,79,4,79,628,8,79,11,79,12,79,629,1,79,3,79,633,8,
        79,1,79,3,79,636,8,79,1,79,3,79,639,8,79,1,79,4,79,642,8,79,11,79,
        12,79,643,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,
        3,84,657,8,84,1,85,1,85,3,85,661,8,85,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,3,86,671,8,86,4,86,673,8,86,11,86,12,86,674,1,87,1,
        87,3,87,679,8,87,1,88,1,88,1,88,1,88,1,89,3,89,686,8,89,1,89,1,89,
        1,90,3,90,691,8,90,1,90,1,90,1,91,1,91,5,91,697,8,91,10,91,12,91,
        700,9,91,1,91,5,91,703,8,91,10,91,12,91,706,9,91,1,91,5,91,709,8,
        91,10,91,12,91,712,9,91,1,91,5,91,715,8,91,10,91,12,91,718,9,91,
        1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,
        101,1,101,1,102,1,102,1,102,1,103,1,103,1,104,1,104,3,104,754,8,
        104,1,105,1,105,1,105,3,105,759,8,105,1,105,3,105,762,8,105,1,105,
        3,105,765,8,105,1,105,3,105,768,8,105,1,105,3,105,771,8,105,1,105,
        3,105,774,8,105,1,106,1,106,1,106,3,106,779,8,106,1,106,3,106,782,
        8,106,1,106,3,106,785,8,106,1,106,3,106,788,8,106,1,106,3,106,791,
        8,106,1,106,3,106,794,8,106,1,107,1,107,1,107,1,108,1,108,1,109,
        3,109,802,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,
        1,111,1,111,1,111,1,112,1,112,1,113,1,113,1,113,1,114,1,114,1,114,
        1,115,1,115,1,115,1,116,1,116,1,116,1,117,1,117,1,118,1,118,1,119,
        1,119,1,120,1,120,1,121,1,121,1,122,1,122,1,122,1,122,4,122,843,
        8,122,11,122,12,122,844,1,122,1,122,1,123,1,123,1,124,1,124,3,124,
        853,8,124,1,124,0,0,125,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,0,27,2,0,83,83,118,118,2,0,58,58,61,61,2,0,60,60,
        62,62,5,0,11,11,15,15,49,49,79,79,102,102,2,0,20,20,100,100,2,0,
        80,80,96,96,2,0,15,15,103,103,2,0,41,41,84,84,2,0,5,5,33,33,4,0,
        9,9,50,50,57,57,114,114,3,0,25,25,30,30,91,91,2,0,12,13,103,104,
        3,0,10,10,49,49,79,79,5,0,11,11,49,49,79,79,102,102,109,109,2,0,
        82,82,97,97,5,0,24,24,50,50,57,57,111,112,114,114,1,0,93,94,2,0,
        66,66,106,106,2,0,16,16,44,44,5,0,4,4,33,33,49,49,79,79,107,107,
        3,0,63,63,78,78,98,98,3,0,6,6,36,36,108,108,2,0,65,65,99,99,2,0,
        64,64,92,92,3,0,39,39,76,76,118,118,2,0,40,40,118,118,6,0,23,23,
        45,45,54,54,56,56,71,71,73,73,849,0,253,1,0,0,0,2,272,1,0,0,0,4,
        274,1,0,0,0,6,283,1,0,0,0,8,285,1,0,0,0,10,288,1,0,0,0,12,290,1,
        0,0,0,14,293,1,0,0,0,16,311,1,0,0,0,18,314,1,0,0,0,20,316,1,0,0,
        0,22,318,1,0,0,0,24,322,1,0,0,0,26,326,1,0,0,0,28,335,1,0,0,0,30,
        337,1,0,0,0,32,343,1,0,0,0,34,349,1,0,0,0,36,357,1,0,0,0,38,359,
        1,0,0,0,40,376,1,0,0,0,42,378,1,0,0,0,44,382,1,0,0,0,46,384,1,0,
        0,0,48,390,1,0,0,0,50,392,1,0,0,0,52,394,1,0,0,0,54,397,1,0,0,0,
        56,399,1,0,0,0,58,415,1,0,0,0,60,419,1,0,0,0,62,421,1,0,0,0,64,423,
        1,0,0,0,66,426,1,0,0,0,68,435,1,0,0,0,70,437,1,0,0,0,72,440,1,0,
        0,0,74,442,1,0,0,0,76,445,1,0,0,0,78,447,1,0,0,0,80,451,1,0,0,0,
        82,465,1,0,0,0,84,467,1,0,0,0,86,469,1,0,0,0,88,471,1,0,0,0,90,473,
        1,0,0,0,92,481,1,0,0,0,94,487,1,0,0,0,96,489,1,0,0,0,98,493,1,0,
        0,0,100,495,1,0,0,0,102,497,1,0,0,0,104,513,1,0,0,0,106,515,1,0,
        0,0,108,517,1,0,0,0,110,519,1,0,0,0,112,521,1,0,0,0,114,531,1,0,
        0,0,116,533,1,0,0,0,118,536,1,0,0,0,120,538,1,0,0,0,122,548,1,0,
        0,0,124,552,1,0,0,0,126,554,1,0,0,0,128,556,1,0,0,0,130,559,1,0,
        0,0,132,561,1,0,0,0,134,566,1,0,0,0,136,568,1,0,0,0,138,584,1,0,
        0,0,140,586,1,0,0,0,142,588,1,0,0,0,144,590,1,0,0,0,146,592,1,0,
        0,0,148,596,1,0,0,0,150,598,1,0,0,0,152,613,1,0,0,0,154,618,1,0,
        0,0,156,620,1,0,0,0,158,627,1,0,0,0,160,645,1,0,0,0,162,647,1,0,
        0,0,164,649,1,0,0,0,166,651,1,0,0,0,168,656,1,0,0,0,170,658,1,0,
        0,0,172,672,1,0,0,0,174,676,1,0,0,0,176,680,1,0,0,0,178,685,1,0,
        0,0,180,690,1,0,0,0,182,694,1,0,0,0,184,719,1,0,0,0,186,721,1,0,
        0,0,188,723,1,0,0,0,190,725,1,0,0,0,192,727,1,0,0,0,194,736,1,0,
        0,0,196,738,1,0,0,0,198,740,1,0,0,0,200,742,1,0,0,0,202,744,1,0,
        0,0,204,746,1,0,0,0,206,749,1,0,0,0,208,753,1,0,0,0,210,755,1,0,
        0,0,212,775,1,0,0,0,214,795,1,0,0,0,216,798,1,0,0,0,218,801,1,0,
        0,0,220,805,1,0,0,0,222,811,1,0,0,0,224,814,1,0,0,0,226,816,1,0,
        0,0,228,819,1,0,0,0,230,822,1,0,0,0,232,825,1,0,0,0,234,828,1,0,
        0,0,236,830,1,0,0,0,238,832,1,0,0,0,240,834,1,0,0,0,242,836,1,0,
        0,0,244,838,1,0,0,0,246,848,1,0,0,0,248,850,1,0,0,0,250,252,3,2,
        1,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,
        0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,257,5,0,0,1,257,1,1,0,0,
        0,258,273,3,182,91,0,259,273,3,192,96,0,260,273,3,204,102,0,261,
        273,3,208,104,0,262,273,3,244,122,0,263,273,3,176,88,0,264,273,3,
        102,51,0,265,273,3,80,40,0,266,273,3,78,39,0,267,273,3,56,28,0,268,
        273,3,38,19,0,269,273,3,26,13,0,270,273,3,14,7,0,271,273,3,4,2,0,
        272,258,1,0,0,0,272,259,1,0,0,0,272,260,1,0,0,0,272,261,1,0,0,0,
        272,262,1,0,0,0,272,263,1,0,0,0,272,264,1,0,0,0,272,265,1,0,0,0,
        272,266,1,0,0,0,272,267,1,0,0,0,272,268,1,0,0,0,272,269,1,0,0,0,
        272,270,1,0,0,0,272,271,1,0,0,0,273,3,1,0,0,0,274,276,5,85,0,0,275,
        277,3,6,3,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,
        281,3,238,119,0,279,282,3,8,4,0,280,282,3,12,6,0,281,279,1,0,0,0,
        281,280,1,0,0,0,281,282,1,0,0,0,282,5,1,0,0,0,283,284,5,118,0,0,
        284,7,1,0,0,0,285,286,5,26,0,0,286,287,3,10,5,0,287,9,1,0,0,0,288,
        289,7,0,0,0,289,11,1,0,0,0,290,291,5,37,0,0,291,292,3,216,108,0,
        292,13,1,0,0,0,293,294,5,72,0,0,294,295,5,70,0,0,295,297,3,36,18,
        0,296,298,3,206,103,0,297,296,1,0,0,0,297,298,1,0,0,0,298,300,1,
        0,0,0,299,301,3,24,12,0,300,299,1,0,0,0,300,301,1,0,0,0,301,303,
        1,0,0,0,302,304,3,20,10,0,303,302,1,0,0,0,303,304,1,0,0,0,304,306,
        1,0,0,0,305,307,3,22,11,0,306,305,1,0,0,0,306,307,1,0,0,0,307,309,
        1,0,0,0,308,310,3,16,8,0,309,308,1,0,0,0,309,310,1,0,0,0,310,15,
        1,0,0,0,311,312,5,19,0,0,312,313,3,18,9,0,313,17,1,0,0,0,314,315,
        5,118,0,0,315,19,1,0,0,0,316,317,7,1,0,0,317,21,1,0,0,0,318,319,
        7,2,0,0,319,23,1,0,0,0,320,323,3,142,71,0,321,323,3,144,72,0,322,
        320,1,0,0,0,322,321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,
        325,1,0,0,0,325,25,1,0,0,0,326,327,5,27,0,0,327,328,3,36,18,0,328,
        329,5,70,0,0,329,331,3,28,14,0,330,332,5,35,0,0,331,330,1,0,0,0,
        331,332,1,0,0,0,332,27,1,0,0,0,333,336,3,30,15,0,334,336,3,32,16,
        0,335,333,1,0,0,0,335,334,1,0,0,0,336,29,1,0,0,0,337,339,5,71,0,
        0,338,340,3,34,17,0,339,338,1,0,0,0,340,341,1,0,0,0,341,339,1,0,
        0,0,341,342,1,0,0,0,342,31,1,0,0,0,343,345,5,34,0,0,344,346,3,34,
        17,0,345,344,1,0,0,0,346,347,1,0,0,0,347,345,1,0,0,0,347,348,1,0,
        0,0,348,33,1,0,0,0,349,351,5,2,0,0,350,352,5,114,0,0,351,350,1,0,
        0,0,352,353,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,355,1,0,
        0,0,355,356,5,3,0,0,356,35,1,0,0,0,357,358,5,118,0,0,358,37,1,0,
        0,0,359,361,5,86,0,0,360,362,3,206,103,0,361,360,1,0,0,0,361,362,
        1,0,0,0,362,364,1,0,0,0,363,365,3,40,20,0,364,363,1,0,0,0,364,365,
        1,0,0,0,365,367,1,0,0,0,366,368,3,48,24,0,367,366,1,0,0,0,367,368,
        1,0,0,0,368,370,1,0,0,0,369,371,3,156,78,0,370,369,1,0,0,0,371,372,
        1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,39,1,0,0,0,374,377,3,
        42,21,0,375,377,3,46,23,0,376,374,1,0,0,0,376,375,1,0,0,0,377,41,
        1,0,0,0,378,380,5,59,0,0,379,381,3,44,22,0,380,379,1,0,0,0,380,381,
        1,0,0,0,381,43,1,0,0,0,382,383,7,3,0,0,383,45,1,0,0,0,384,386,7,
        4,0,0,385,387,3,44,22,0,386,385,1,0,0,0,386,387,1,0,0,0,387,47,1,
        0,0,0,388,391,3,50,25,0,389,391,3,52,26,0,390,388,1,0,0,0,390,389,
        1,0,0,0,391,49,1,0,0,0,392,393,5,7,0,0,393,51,1,0,0,0,394,395,5,
        95,0,0,395,396,3,54,27,0,396,53,1,0,0,0,397,398,3,248,124,0,398,
        55,1,0,0,0,399,401,5,87,0,0,400,402,3,58,29,0,401,400,1,0,0,0,401,
        402,1,0,0,0,402,404,1,0,0,0,403,405,3,64,32,0,404,403,1,0,0,0,404,
        405,1,0,0,0,405,407,1,0,0,0,406,408,3,66,33,0,407,406,1,0,0,0,407,
        408,1,0,0,0,408,410,1,0,0,0,409,411,3,70,35,0,410,409,1,0,0,0,410,
        411,1,0,0,0,411,413,1,0,0,0,412,414,3,74,37,0,413,412,1,0,0,0,413,
        414,1,0,0,0,414,57,1,0,0,0,415,417,3,60,30,0,416,418,3,62,31,0,417,
        416,1,0,0,0,417,418,1,0,0,0,418,59,1,0,0,0,419,420,3,248,124,0,420,
        61,1,0,0,0,421,422,3,248,124,0,422,63,1,0,0,0,423,424,5,52,0,0,424,
        425,3,248,124,0,425,65,1,0,0,0,426,427,5,22,0,0,427,428,3,68,34,
        0,428,67,1,0,0,0,429,436,3,248,124,0,430,436,5,57,0,0,431,436,5,
        90,0,0,432,436,5,47,0,0,433,436,5,42,0,0,434,436,5,55,0,0,435,429,
        1,0,0,0,435,430,1,0,0,0,435,431,1,0,0,0,435,432,1,0,0,0,435,433,
        1,0,0,0,435,434,1,0,0,0,436,69,1,0,0,0,437,438,5,101,0,0,438,439,
        3,72,36,0,439,71,1,0,0,0,440,441,7,5,0,0,441,73,1,0,0,0,442,443,
        5,75,0,0,443,444,3,76,38,0,444,75,1,0,0,0,445,446,7,6,0,0,446,77,
        1,0,0,0,447,448,5,72,0,0,448,449,7,7,0,0,449,450,3,246,123,0,450,
        79,1,0,0,0,451,453,5,32,0,0,452,454,3,82,41,0,453,452,1,0,0,0,453,
        454,1,0,0,0,454,455,1,0,0,0,455,457,3,84,42,0,456,458,3,86,43,0,
        457,456,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,461,3,88,44,
        0,460,459,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,464,3,90,45,
        0,463,462,1,0,0,0,463,464,1,0,0,0,464,81,1,0,0,0,465,466,7,8,0,0,
        466,83,1,0,0,0,467,468,3,248,124,0,468,85,1,0,0,0,469,470,7,9,0,
        0,470,87,1,0,0,0,471,472,7,10,0,0,472,89,1,0,0,0,473,476,5,77,0,
        0,474,477,3,92,46,0,475,477,3,96,48,0,476,474,1,0,0,0,476,475,1,
        0,0,0,477,478,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,91,1,0,
        0,0,480,482,7,8,0,0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,1,0,
        0,0,483,484,3,94,47,0,484,485,5,95,0,0,485,486,3,134,67,0,486,93,
        1,0,0,0,487,488,5,114,0,0,488,95,1,0,0,0,489,490,5,53,0,0,490,491,
        3,100,50,0,491,492,3,98,49,0,492,97,1,0,0,0,493,494,3,248,124,0,
        494,99,1,0,0,0,495,496,3,248,124,0,496,101,1,0,0,0,497,498,5,31,
        0,0,498,499,3,104,52,0,499,510,3,106,53,0,500,509,3,108,54,0,501,
        509,3,110,55,0,502,509,3,112,56,0,503,509,3,116,58,0,504,509,3,120,
        60,0,505,509,3,136,68,0,506,509,3,146,73,0,507,509,3,150,75,0,508,
        500,1,0,0,0,508,501,1,0,0,0,508,502,1,0,0,0,508,503,1,0,0,0,508,
        504,1,0,0,0,508,505,1,0,0,0,508,506,1,0,0,0,508,507,1,0,0,0,509,
        512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,103,1,0,0,0,512,
        510,1,0,0,0,513,514,3,248,124,0,514,105,1,0,0,0,515,516,3,248,124,
        0,516,107,1,0,0,0,517,518,7,9,0,0,518,109,1,0,0,0,519,520,7,10,0,
        0,520,111,1,0,0,0,521,523,5,80,0,0,522,524,3,114,57,0,523,522,1,
        0,0,0,523,524,1,0,0,0,524,113,1,0,0,0,525,532,5,6,0,0,526,528,7,
        11,0,0,527,526,1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,530,1,
        0,0,0,530,532,1,0,0,0,531,525,1,0,0,0,531,527,1,0,0,0,532,115,1,
        0,0,0,533,534,5,28,0,0,534,535,3,118,59,0,535,117,1,0,0,0,536,537,
        7,12,0,0,537,119,1,0,0,0,538,541,5,77,0,0,539,542,3,128,64,0,540,
        542,3,132,66,0,541,539,1,0,0,0,541,540,1,0,0,0,542,543,1,0,0,0,543,
        541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,547,3,122,61,0,546,
        545,1,0,0,0,546,547,1,0,0,0,547,121,1,0,0,0,548,549,5,53,0,0,549,
        550,3,126,63,0,550,551,3,124,62,0,551,123,1,0,0,0,552,553,3,248,
        124,0,553,125,1,0,0,0,554,555,3,248,124,0,555,127,1,0,0,0,556,557,
        7,8,0,0,557,558,3,130,65,0,558,129,1,0,0,0,559,560,5,114,0,0,560,
        131,1,0,0,0,561,562,5,95,0,0,562,563,3,134,67,0,563,133,1,0,0,0,
        564,567,5,29,0,0,565,567,3,248,124,0,566,564,1,0,0,0,566,565,1,0,
        0,0,567,135,1,0,0,0,568,570,5,88,0,0,569,571,3,138,69,0,570,569,
        1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,574,3,140,70,0,573,572,
        1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,0,575,577,3,142,71,0,576,575,
        1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,580,3,144,72,0,579,578,
        1,0,0,0,579,580,1,0,0,0,580,137,1,0,0,0,581,585,5,6,0,0,582,583,
        5,14,0,0,583,585,5,114,0,0,584,581,1,0,0,0,584,582,1,0,0,0,585,139,
        1,0,0,0,586,587,7,13,0,0,587,141,1,0,0,0,588,589,7,14,0,0,589,143,
        1,0,0,0,590,591,7,15,0,0,591,145,1,0,0,0,592,593,5,19,0,0,593,594,
        3,138,69,0,594,595,3,148,74,0,595,147,1,0,0,0,596,597,5,118,0,0,
        597,149,1,0,0,0,598,600,5,110,0,0,599,601,3,138,69,0,600,599,1,0,
        0,0,600,601,1,0,0,0,601,603,1,0,0,0,602,604,3,152,76,0,603,602,1,
        0,0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,607,3,168,84,0,606,605,
        1,0,0,0,606,607,1,0,0,0,607,609,1,0,0,0,608,610,3,154,77,0,609,608,
        1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,3,156,78,0,612,151,
        1,0,0,0,613,614,5,114,0,0,614,153,1,0,0,0,615,619,5,7,0,0,616,617,
        5,95,0,0,617,619,3,248,124,0,618,615,1,0,0,0,618,616,1,0,0,0,619,
        155,1,0,0,0,620,622,5,51,0,0,621,623,3,158,79,0,622,621,1,0,0,0,
        623,624,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,157,1,0,0,0,
        626,628,3,236,118,0,627,626,1,0,0,0,628,629,1,0,0,0,629,627,1,0,
        0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,633,3,162,81,0,632,631,1,
        0,0,0,632,633,1,0,0,0,633,635,1,0,0,0,634,636,3,164,82,0,635,634,
        1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,639,3,166,83,0,638,637,
        1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,642,3,160,80,0,641,640,
        1,0,0,0,642,643,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,159,
        1,0,0,0,645,646,5,113,0,0,646,161,1,0,0,0,647,648,7,16,0,0,648,163,
        1,0,0,0,649,650,7,17,0,0,650,165,1,0,0,0,651,652,7,18,0,0,652,167,
        1,0,0,0,653,657,3,170,85,0,654,657,3,174,87,0,655,657,3,172,86,0,
        656,653,1,0,0,0,656,654,1,0,0,0,656,655,1,0,0,0,657,169,1,0,0,0,
        658,660,5,59,0,0,659,661,3,172,86,0,660,659,1,0,0,0,660,661,1,0,
        0,0,661,171,1,0,0,0,662,673,5,15,0,0,663,673,5,102,0,0,664,673,5,
        11,0,0,665,673,5,49,0,0,666,673,5,79,0,0,667,673,5,8,0,0,668,670,
        5,46,0,0,669,671,5,48,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,673,
        1,0,0,0,672,662,1,0,0,0,672,663,1,0,0,0,672,664,1,0,0,0,672,665,
        1,0,0,0,672,666,1,0,0,0,672,667,1,0,0,0,672,668,1,0,0,0,673,674,
        1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,173,1,0,0,0,676,678,
        7,4,0,0,677,679,3,172,86,0,678,677,1,0,0,0,678,679,1,0,0,0,679,175,
        1,0,0,0,680,681,5,74,0,0,681,682,3,178,89,0,682,683,3,180,90,0,683,
        177,1,0,0,0,684,686,7,19,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,
        687,1,0,0,0,687,688,3,248,124,0,688,179,1,0,0,0,689,691,7,19,0,0,
        690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,3,248,124,
        0,693,181,1,0,0,0,694,698,5,21,0,0,695,697,3,184,92,0,696,695,1,
        0,0,0,697,700,1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,704,1,
        0,0,0,700,698,1,0,0,0,701,703,3,186,93,0,702,701,1,0,0,0,703,706,
        1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,710,1,0,0,0,706,704,
        1,0,0,0,707,709,3,188,94,0,708,707,1,0,0,0,709,712,1,0,0,0,710,708,
        1,0,0,0,710,711,1,0,0,0,711,716,1,0,0,0,712,710,1,0,0,0,713,715,
        3,190,95,0,714,713,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,
        1,0,0,0,717,183,1,0,0,0,718,716,1,0,0,0,719,720,7,20,0,0,720,185,
        1,0,0,0,721,722,7,21,0,0,722,187,1,0,0,0,723,724,7,22,0,0,724,189,
        1,0,0,0,725,726,7,23,0,0,726,191,1,0,0,0,727,728,5,69,0,0,728,729,
        3,194,97,0,729,730,5,89,0,0,730,731,3,196,98,0,731,732,3,198,99,
        0,732,733,5,67,0,0,733,734,3,200,100,0,734,735,3,202,101,0,735,193,
        1,0,0,0,736,737,5,118,0,0,737,195,1,0,0,0,738,739,3,248,124,0,739,
        197,1,0,0,0,740,741,3,248,124,0,741,199,1,0,0,0,742,743,3,248,124,
        0,743,201,1,0,0,0,744,745,3,248,124,0,745,203,1,0,0,0,746,747,5,
        68,0,0,747,748,3,206,103,0,748,205,1,0,0,0,749,750,5,114,0,0,750,
        207,1,0,0,0,751,754,3,210,105,0,752,754,3,212,106,0,753,751,1,0,
        0,0,753,752,1,0,0,0,754,209,1,0,0,0,755,758,5,38,0,0,756,759,3,218,
        109,0,757,759,3,220,110,0,758,756,1,0,0,0,758,757,1,0,0,0,759,761,
        1,0,0,0,760,762,3,222,111,0,761,760,1,0,0,0,761,762,1,0,0,0,762,
        764,1,0,0,0,763,765,3,226,113,0,764,763,1,0,0,0,764,765,1,0,0,0,
        765,767,1,0,0,0,766,768,3,228,114,0,767,766,1,0,0,0,767,768,1,0,
        0,0,768,770,1,0,0,0,769,771,3,230,115,0,770,769,1,0,0,0,770,771,
        1,0,0,0,771,773,1,0,0,0,772,774,3,232,116,0,773,772,1,0,0,0,773,
        774,1,0,0,0,774,211,1,0,0,0,775,778,5,38,0,0,776,779,3,218,109,0,
        777,779,3,220,110,0,778,776,1,0,0,0,778,777,1,0,0,0,779,781,1,0,
        0,0,780,782,3,214,107,0,781,780,1,0,0,0,781,782,1,0,0,0,782,784,
        1,0,0,0,783,785,3,226,113,0,784,783,1,0,0,0,784,785,1,0,0,0,785,
        787,1,0,0,0,786,788,3,228,114,0,787,786,1,0,0,0,787,788,1,0,0,0,
        788,790,1,0,0,0,789,791,3,230,115,0,790,789,1,0,0,0,790,791,1,0,
        0,0,791,793,1,0,0,0,792,794,3,232,116,0,793,792,1,0,0,0,793,794,
        1,0,0,0,794,213,1,0,0,0,795,796,5,37,0,0,796,797,3,216,108,0,797,
        215,1,0,0,0,798,799,7,24,0,0,799,217,1,0,0,0,800,802,3,236,118,0,
        801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,804,3,238,119,
        0,804,219,1,0,0,0,805,806,3,236,118,0,806,807,5,17,0,0,807,808,3,
        240,120,0,808,809,5,18,0,0,809,810,3,242,121,0,810,221,1,0,0,0,811,
        812,5,26,0,0,812,813,3,224,112,0,813,223,1,0,0,0,814,815,7,25,0,
        0,815,225,1,0,0,0,816,817,5,43,0,0,817,818,3,248,124,0,818,227,1,
        0,0,0,819,820,5,81,0,0,820,821,3,248,124,0,821,229,1,0,0,0,822,823,
        5,19,0,0,823,824,3,234,117,0,824,231,1,0,0,0,825,826,5,105,0,0,826,
        827,3,234,117,0,827,233,1,0,0,0,828,829,5,118,0,0,829,235,1,0,0,
        0,830,831,5,118,0,0,831,237,1,0,0,0,832,833,5,118,0,0,833,239,1,
        0,0,0,834,835,5,118,0,0,835,241,1,0,0,0,836,837,5,118,0,0,837,243,
        1,0,0,0,838,839,5,27,0,0,839,840,3,246,123,0,840,842,5,41,0,0,841,
        843,3,2,1,0,842,841,1,0,0,0,843,844,1,0,0,0,844,842,1,0,0,0,844,
        845,1,0,0,0,845,846,1,0,0,0,846,847,5,35,0,0,847,245,1,0,0,0,848,
        849,5,118,0,0,849,247,1,0,0,0,850,852,5,114,0,0,851,853,7,26,0,0,
        852,851,1,0,0,0,852,853,1,0,0,0,853,249,1,0,0,0,91,253,272,276,281,
        297,300,303,306,309,322,324,331,335,341,347,353,361,364,367,372,
        376,380,386,390,401,404,407,410,413,417,435,453,457,460,463,476,
        478,481,508,510,523,529,531,541,543,546,566,570,573,576,579,584,
        600,603,606,609,618,624,629,632,635,638,643,656,660,670,672,674,
        678,685,690,698,704,710,716,753,758,761,764,767,770,773,778,781,
        784,787,790,793,801,844,852
    ]

class OGLParser ( Parser ):

    grammarFileName = "OGL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>", "DOT", "LPAREN", "RPAREN", "ABSOLUTE", 
                      "ACROSS", "ALL", "AUTO", "BALANCE", "BOLD", "BOTH", 
                      "BOTTOM", "BOTTOMLEFT", "BOTTOMRIGHT", "BOX", "CENTER", 
                      "CHAR", "CHARSET", "CODEPAGE", "COLOR", "COLUMN", 
                      "CONTROL", "CORNERLENGTH", "CPI", "DARK", "DASHED", 
                      "DDNAME", "DEFINE", "DIAGONAL", "DIAMETER", "DOTTED", 
                      "DRAWBOX", "DRAWRULE", "DOWN", "ENCODED", "ENDDEF", 
                      "ERROR", "FILETYPE", "FONT", "FONT38PP", "FONTDD", 
                      "GROUP", "HALF", "HEIGHT", "HEX", "IN", "JUSTIFY", 
                      "LARGE", "LASTNO", "LEFT", "LIGHT", "LINE", "LINESP", 
                      "LOCATION", "LPI", "MAX", "MM", "MEDIUM", "MIRROR", 
                      "MODERN", "NEGATIVE", "NOMIRROR", "NONEGATIVE", "NOSTORE", 
                      "NOSOSI", "NOSUMMARY", "NOUNDERLINE", "OFFSET", "ORIENT", 
                      "OVERLAY", "PATTERN", "PELS", "PLACE", "POINTS", "POSITION", 
                      "POSITIONING", "PSEG38PP", "REPEAT", "REPLACE", "RIGHT", 
                      "ROUNDED", "SCALE", "SCREEN", "SEGDD", "SEGID", "SEGMENT", 
                      "SETTEXT", "SETUNITS", "SHADE", "SIZE", "SMALL", "SOLID", 
                      "SOSI", "SOSI1", "SOSI2", "SPACED", "SQUARE", "STANDARD", 
                      "STORE", "SUMMARY", "TATE", "TEXTMARGIN", "TOP", "TOPLEFT", 
                      "TOPRIGHT", "UCOLOR", "UNDERLINE", "UP", "WARN", "WHOLE", 
                      "WITHTEXT", "XDARK", "XLIGHT", "STRINGLITERAL", "INTEGERLITERAL", 
                      "COMMENT", "NEWLINE", "WS", "IDENTIFIER" ]

    RULE_startRule = 0
    RULE_command = 1
    RULE_segmentCommand = 2
    RULE_segmentName = 3
    RULE_segmentDDName = 4
    RULE_segmentDDNameName = 5
    RULE_segmentFileType = 6
    RULE_placePatternCommand = 7
    RULE_patternColor = 8
    RULE_patternColorName = 9
    RULE_mirrorOption = 10
    RULE_negativeOption = 11
    RULE_patternShade = 12
    RULE_definepatternCommand = 13
    RULE_lineCoding = 14
    RULE_lineCodingPels = 15
    RULE_lineCodingEncoded = 16
    RULE_coded_line = 17
    RULE_patternName = 18
    RULE_settextCommand = 19
    RULE_settextFormat = 20
    RULE_settextFormatModern = 21
    RULE_settextFormatPlacement = 22
    RULE_settextFormatColumn = 23
    RULE_settextAlignment = 24
    RULE_settextAlignmentAuto = 25
    RULE_settextAlignmentSpaced = 26
    RULE_settextAlignmentValue = 27
    RULE_setunitsCommand = 28
    RULE_setunitsDefault = 29
    RULE_primaryDefault = 30
    RULE_secondaryDefault = 31
    RULE_setunitsLineSp = 32
    RULE_setunitsCornerLength = 33
    RULE_conrnerLengthValue = 34
    RULE_setunitsTextMargin = 35
    RULE_textMarginValue = 36
    RULE_setUnitsPositioning = 37
    RULE_positionValue = 38
    RULE_placeCommand = 39
    RULE_drawruleCommand = 40
    RULE_ruleDirection = 41
    RULE_ruleLength = 42
    RULE_ruleThickness = 43
    RULE_ruleType = 44
    RULE_ruleRepeated = 45
    RULE_ruleRepeatAcross = 46
    RULE_ruleRepetition = 47
    RULE_ruleRepeatLocation = 48
    RULE_ruleRepeatVerticalCoordinate = 49
    RULE_ruleRepeatHorizonalCoordinate = 50
    RULE_drawboxCommand = 51
    RULE_boxWidth = 52
    RULE_boxHeight = 53
    RULE_boxBorderThickness = 54
    RULE_boxBorderType = 55
    RULE_boxRounded = 56
    RULE_boxRoundedOption = 57
    RULE_boxDiagonal = 58
    RULE_boxDiagonalOption = 59
    RULE_boxRepeat = 60
    RULE_boxRepeatLocation = 61
    RULE_boxRepeatVerticalCoordinate = 62
    RULE_boxRepeatHorizonalCoordinate = 63
    RULE_boxRepeatAcrossDown = 64
    RULE_boxRepetition = 65
    RULE_boxRepeatSpaced = 66
    RULE_spacedValue = 67
    RULE_boxShade = 68
    RULE_box = 69
    RULE_shadeArea = 70
    RULE_shadePattern = 71
    RULE_shadeType = 72
    RULE_boxColor = 73
    RULE_boxColorName = 74
    RULE_boxWithtext = 75
    RULE_boxWithtextOrient = 76
    RULE_boxWithtextLineSpacing = 77
    RULE_line = 78
    RULE_line_part = 79
    RULE_text = 80
    RULE_lineSosiMode = 81
    RULE_lineUnderlying = 82
    RULE_lineTextType = 83
    RULE_boxWithtextFormat = 84
    RULE_boxWithtextFormatModern = 85
    RULE_boxWithtextFormatPlacement = 86
    RULE_boxWithtextFormatColumn = 87
    RULE_positionCommand = 88
    RULE_positionX = 89
    RULE_positionY = 90
    RULE_controlCommand = 91
    RULE_controlStorage = 92
    RULE_controlMessage = 93
    RULE_controlSummary = 94
    RULE_controlSosiOption = 95
    RULE_overlayCommand = 96
    RULE_overlayName = 97
    RULE_overlayWidth = 98
    RULE_overlayHeight = 99
    RULE_overlayHorizonalCoordinate = 100
    RULE_overlayVerticalCoordinate = 101
    RULE_orientCommand = 102
    RULE_orientRotatedDegree = 103
    RULE_fontCommand = 104
    RULE_fontCommandMVS = 105
    RULE_fontCommandVM = 106
    RULE_fontFileType = 107
    RULE_fileTypeName = 108
    RULE_fontWithMemID = 109
    RULE_fontWithCharSet = 110
    RULE_fontDDName = 111
    RULE_ddNameName = 112
    RULE_fontHeight = 113
    RULE_fontScale = 114
    RULE_fontColor = 115
    RULE_fontUColor = 116
    RULE_fontColorName = 117
    RULE_fontName = 118
    RULE_memId = 119
    RULE_charSetName = 120
    RULE_codePageName = 121
    RULE_defineGroupCommand = 122
    RULE_groupName = 123
    RULE_oglMeasurement = 124

    ruleNames =  [ "startRule", "command", "segmentCommand", "segmentName", 
                   "segmentDDName", "segmentDDNameName", "segmentFileType", 
                   "placePatternCommand", "patternColor", "patternColorName", 
                   "mirrorOption", "negativeOption", "patternShade", "definepatternCommand", 
                   "lineCoding", "lineCodingPels", "lineCodingEncoded", 
                   "coded_line", "patternName", "settextCommand", "settextFormat", 
                   "settextFormatModern", "settextFormatPlacement", "settextFormatColumn", 
                   "settextAlignment", "settextAlignmentAuto", "settextAlignmentSpaced", 
                   "settextAlignmentValue", "setunitsCommand", "setunitsDefault", 
                   "primaryDefault", "secondaryDefault", "setunitsLineSp", 
                   "setunitsCornerLength", "conrnerLengthValue", "setunitsTextMargin", 
                   "textMarginValue", "setUnitsPositioning", "positionValue", 
                   "placeCommand", "drawruleCommand", "ruleDirection", "ruleLength", 
                   "ruleThickness", "ruleType", "ruleRepeated", "ruleRepeatAcross", 
                   "ruleRepetition", "ruleRepeatLocation", "ruleRepeatVerticalCoordinate", 
                   "ruleRepeatHorizonalCoordinate", "drawboxCommand", "boxWidth", 
                   "boxHeight", "boxBorderThickness", "boxBorderType", "boxRounded", 
                   "boxRoundedOption", "boxDiagonal", "boxDiagonalOption", 
                   "boxRepeat", "boxRepeatLocation", "boxRepeatVerticalCoordinate", 
                   "boxRepeatHorizonalCoordinate", "boxRepeatAcrossDown", 
                   "boxRepetition", "boxRepeatSpaced", "spacedValue", "boxShade", 
                   "box", "shadeArea", "shadePattern", "shadeType", "boxColor", 
                   "boxColorName", "boxWithtext", "boxWithtextOrient", "boxWithtextLineSpacing", 
                   "line", "line_part", "text", "lineSosiMode", "lineUnderlying", 
                   "lineTextType", "boxWithtextFormat", "boxWithtextFormatModern", 
                   "boxWithtextFormatPlacement", "boxWithtextFormatColumn", 
                   "positionCommand", "positionX", "positionY", "controlCommand", 
                   "controlStorage", "controlMessage", "controlSummary", 
                   "controlSosiOption", "overlayCommand", "overlayName", 
                   "overlayWidth", "overlayHeight", "overlayHorizonalCoordinate", 
                   "overlayVerticalCoordinate", "orientCommand", "orientRotatedDegree", 
                   "fontCommand", "fontCommandMVS", "fontCommandVM", "fontFileType", 
                   "fileTypeName", "fontWithMemID", "fontWithCharSet", "fontDDName", 
                   "ddNameName", "fontHeight", "fontScale", "fontColor", 
                   "fontUColor", "fontColorName", "fontName", "memId", "charSetName", 
                   "codePageName", "defineGroupCommand", "groupName", "oglMeasurement" ]

    EOF = Token.EOF
    DOT=1
    LPAREN=2
    RPAREN=3
    ABSOLUTE=4
    ACROSS=5
    ALL=6
    AUTO=7
    BALANCE=8
    BOLD=9
    BOTH=10
    BOTTOM=11
    BOTTOMLEFT=12
    BOTTOMRIGHT=13
    BOX=14
    CENTER=15
    CHAR=16
    CHARSET=17
    CODEPAGE=18
    COLOR=19
    COLUMN=20
    CONTROL=21
    CORNERLENGTH=22
    CPI=23
    DARK=24
    DASHED=25
    DDNAME=26
    DEFINE=27
    DIAGONAL=28
    DIAMETER=29
    DOTTED=30
    DRAWBOX=31
    DRAWRULE=32
    DOWN=33
    ENCODED=34
    ENDDEF=35
    ERROR=36
    FILETYPE=37
    FONT=38
    FONT38PP=39
    FONTDD=40
    GROUP=41
    HALF=42
    HEIGHT=43
    HEX=44
    IN=45
    JUSTIFY=46
    LARGE=47
    LASTNO=48
    LEFT=49
    LIGHT=50
    LINE=51
    LINESP=52
    LOCATION=53
    LPI=54
    MAX=55
    MM=56
    MEDIUM=57
    MIRROR=58
    MODERN=59
    NEGATIVE=60
    NOMIRROR=61
    NONEGATIVE=62
    NOSTORE=63
    NOSOSI=64
    NOSUMMARY=65
    NOUNDERLINE=66
    OFFSET=67
    ORIENT=68
    OVERLAY=69
    PATTERN=70
    PELS=71
    PLACE=72
    POINTS=73
    POSITION=74
    POSITIONING=75
    PSEG38PP=76
    REPEAT=77
    REPLACE=78
    RIGHT=79
    ROUNDED=80
    SCALE=81
    SCREEN=82
    SEGDD=83
    SEGID=84
    SEGMENT=85
    SETTEXT=86
    SETUNITS=87
    SHADE=88
    SIZE=89
    SMALL=90
    SOLID=91
    SOSI=92
    SOSI1=93
    SOSI2=94
    SPACED=95
    SQUARE=96
    STANDARD=97
    STORE=98
    SUMMARY=99
    TATE=100
    TEXTMARGIN=101
    TOP=102
    TOPLEFT=103
    TOPRIGHT=104
    UCOLOR=105
    UNDERLINE=106
    UP=107
    WARN=108
    WHOLE=109
    WITHTEXT=110
    XDARK=111
    XLIGHT=112
    STRINGLITERAL=113
    INTEGERLITERAL=114
    COMMENT=115
    NEWLINE=116
    WS=117
    IDENTIFIER=118

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(OGLParser.EOF, 0)

        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.CommandContext)
            else:
                return self.getTypedRuleContext(OGLParser.CommandContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = OGLParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 281456672768) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 917587) != 0):
                self.state = 250
                self.command()
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 256
            self.match(OGLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controlCommand(self):
            return self.getTypedRuleContext(OGLParser.ControlCommandContext,0)


        def overlayCommand(self):
            return self.getTypedRuleContext(OGLParser.OverlayCommandContext,0)


        def orientCommand(self):
            return self.getTypedRuleContext(OGLParser.OrientCommandContext,0)


        def fontCommand(self):
            return self.getTypedRuleContext(OGLParser.FontCommandContext,0)


        def defineGroupCommand(self):
            return self.getTypedRuleContext(OGLParser.DefineGroupCommandContext,0)


        def positionCommand(self):
            return self.getTypedRuleContext(OGLParser.PositionCommandContext,0)


        def drawboxCommand(self):
            return self.getTypedRuleContext(OGLParser.DrawboxCommandContext,0)


        def drawruleCommand(self):
            return self.getTypedRuleContext(OGLParser.DrawruleCommandContext,0)


        def placeCommand(self):
            return self.getTypedRuleContext(OGLParser.PlaceCommandContext,0)


        def setunitsCommand(self):
            return self.getTypedRuleContext(OGLParser.SetunitsCommandContext,0)


        def settextCommand(self):
            return self.getTypedRuleContext(OGLParser.SettextCommandContext,0)


        def definepatternCommand(self):
            return self.getTypedRuleContext(OGLParser.DefinepatternCommandContext,0)


        def placePatternCommand(self):
            return self.getTypedRuleContext(OGLParser.PlacePatternCommandContext,0)


        def segmentCommand(self):
            return self.getTypedRuleContext(OGLParser.SegmentCommandContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommand" ):
                return visitor.visitCommand(self)
            else:
                return visitor.visitChildren(self)




    def command(self):

        localctx = OGLParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_command)
        try:
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.controlCommand()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.overlayCommand()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.orientCommand()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 261
                self.fontCommand()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 262
                self.defineGroupCommand()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 263
                self.positionCommand()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 264
                self.drawboxCommand()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 265
                self.drawruleCommand()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 266
                self.placeCommand()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 267
                self.setunitsCommand()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 268
                self.settextCommand()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 269
                self.definepatternCommand()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 270
                self.placePatternCommand()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 271
                self.segmentCommand()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEGMENT(self):
            return self.getToken(OGLParser.SEGMENT, 0)

        def memId(self):
            return self.getTypedRuleContext(OGLParser.MemIdContext,0)


        def segmentName(self):
            return self.getTypedRuleContext(OGLParser.SegmentNameContext,0)


        def segmentDDName(self):
            return self.getTypedRuleContext(OGLParser.SegmentDDNameContext,0)


        def segmentFileType(self):
            return self.getTypedRuleContext(OGLParser.SegmentFileTypeContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_segmentCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegmentCommand" ):
                listener.enterSegmentCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegmentCommand" ):
                listener.exitSegmentCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegmentCommand" ):
                return visitor.visitSegmentCommand(self)
            else:
                return visitor.visitChildren(self)




    def segmentCommand(self):

        localctx = OGLParser.SegmentCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_segmentCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(OGLParser.SEGMENT)
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 275
                self.segmentName()


            self.state = 278
            self.memId()
            self.state = 281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 279
                self.segmentDDName()
                pass
            elif token in [37]:
                self.state = 280
                self.segmentFileType()
                pass
            elif token in [-1, 21, 27, 31, 32, 35, 38, 68, 69, 72, 74, 85, 86, 87]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_segmentName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegmentName" ):
                listener.enterSegmentName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegmentName" ):
                listener.exitSegmentName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegmentName" ):
                return visitor.visitSegmentName(self)
            else:
                return visitor.visitChildren(self)




    def segmentName(self):

        localctx = OGLParser.SegmentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_segmentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentDDNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DDNAME(self):
            return self.getToken(OGLParser.DDNAME, 0)

        def segmentDDNameName(self):
            return self.getTypedRuleContext(OGLParser.SegmentDDNameNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_segmentDDName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegmentDDName" ):
                listener.enterSegmentDDName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegmentDDName" ):
                listener.exitSegmentDDName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegmentDDName" ):
                return visitor.visitSegmentDDName(self)
            else:
                return visitor.visitChildren(self)




    def segmentDDName(self):

        localctx = OGLParser.SegmentDDNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_segmentDDName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(OGLParser.DDNAME)
            self.state = 286
            self.segmentDDNameName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentDDNameNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def SEGDD(self):
            return self.getToken(OGLParser.SEGDD, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_segmentDDNameName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegmentDDNameName" ):
                listener.enterSegmentDDNameName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegmentDDNameName" ):
                listener.exitSegmentDDNameName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegmentDDNameName" ):
                return visitor.visitSegmentDDNameName(self)
            else:
                return visitor.visitChildren(self)




    def segmentDDNameName(self):

        localctx = OGLParser.SegmentDDNameNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_segmentDDNameName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            _la = self._input.LA(1)
            if not(_la==83 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentFileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILETYPE(self):
            return self.getToken(OGLParser.FILETYPE, 0)

        def fileTypeName(self):
            return self.getTypedRuleContext(OGLParser.FileTypeNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_segmentFileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegmentFileType" ):
                listener.enterSegmentFileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegmentFileType" ):
                listener.exitSegmentFileType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegmentFileType" ):
                return visitor.visitSegmentFileType(self)
            else:
                return visitor.visitChildren(self)




    def segmentFileType(self):

        localctx = OGLParser.SegmentFileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_segmentFileType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(OGLParser.FILETYPE)
            self.state = 291
            self.fileTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlacePatternCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACE(self):
            return self.getToken(OGLParser.PLACE, 0)

        def PATTERN(self):
            return self.getToken(OGLParser.PATTERN, 0)

        def patternName(self):
            return self.getTypedRuleContext(OGLParser.PatternNameContext,0)


        def orientRotatedDegree(self):
            return self.getTypedRuleContext(OGLParser.OrientRotatedDegreeContext,0)


        def patternShade(self):
            return self.getTypedRuleContext(OGLParser.PatternShadeContext,0)


        def mirrorOption(self):
            return self.getTypedRuleContext(OGLParser.MirrorOptionContext,0)


        def negativeOption(self):
            return self.getTypedRuleContext(OGLParser.NegativeOptionContext,0)


        def patternColor(self):
            return self.getTypedRuleContext(OGLParser.PatternColorContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_placePatternCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlacePatternCommand" ):
                listener.enterPlacePatternCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlacePatternCommand" ):
                listener.exitPlacePatternCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlacePatternCommand" ):
                return visitor.visitPlacePatternCommand(self)
            else:
                return visitor.visitChildren(self)




    def placePatternCommand(self):

        localctx = OGLParser.PlacePatternCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_placePatternCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(OGLParser.PLACE)
            self.state = 294
            self.match(OGLParser.PATTERN)
            self.state = 295
            self.patternName()
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 296
                self.orientRotatedDegree()


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 145241087999475712) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 5905612801) != 0):
                self.state = 299
                self.patternShade()


            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58 or _la==61:
                self.state = 302
                self.mirrorOption()


            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60 or _la==62:
                self.state = 305
                self.negativeOption()


            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 308
                self.patternColor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternColorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLOR(self):
            return self.getToken(OGLParser.COLOR, 0)

        def patternColorName(self):
            return self.getTypedRuleContext(OGLParser.PatternColorNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_patternColor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternColor" ):
                listener.enterPatternColor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternColor" ):
                listener.exitPatternColor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternColor" ):
                return visitor.visitPatternColor(self)
            else:
                return visitor.visitChildren(self)




    def patternColor(self):

        localctx = OGLParser.PatternColorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_patternColor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(OGLParser.COLOR)
            self.state = 312
            self.patternColorName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternColorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_patternColorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternColorName" ):
                listener.enterPatternColorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternColorName" ):
                listener.exitPatternColorName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternColorName" ):
                return visitor.visitPatternColorName(self)
            else:
                return visitor.visitChildren(self)




    def patternColorName(self):

        localctx = OGLParser.PatternColorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_patternColorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MirrorOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOMIRROR(self):
            return self.getToken(OGLParser.NOMIRROR, 0)

        def MIRROR(self):
            return self.getToken(OGLParser.MIRROR, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_mirrorOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirrorOption" ):
                listener.enterMirrorOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirrorOption" ):
                listener.exitMirrorOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMirrorOption" ):
                return visitor.visitMirrorOption(self)
            else:
                return visitor.visitChildren(self)




    def mirrorOption(self):

        localctx = OGLParser.MirrorOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_mirrorOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            _la = self._input.LA(1)
            if not(_la==58 or _la==61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NegativeOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEGATIVE(self):
            return self.getToken(OGLParser.NEGATIVE, 0)

        def NONEGATIVE(self):
            return self.getToken(OGLParser.NONEGATIVE, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_negativeOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegativeOption" ):
                listener.enterNegativeOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegativeOption" ):
                listener.exitNegativeOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegativeOption" ):
                return visitor.visitNegativeOption(self)
            else:
                return visitor.visitChildren(self)




    def negativeOption(self):

        localctx = OGLParser.NegativeOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_negativeOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            _la = self._input.LA(1)
            if not(_la==60 or _la==62):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternShadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shadePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.ShadePatternContext)
            else:
                return self.getTypedRuleContext(OGLParser.ShadePatternContext,i)


        def shadeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.ShadeTypeContext)
            else:
                return self.getTypedRuleContext(OGLParser.ShadeTypeContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_patternShade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternShade" ):
                listener.enterPatternShade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternShade" ):
                listener.exitPatternShade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternShade" ):
                return visitor.visitPatternShade(self)
            else:
                return visitor.visitChildren(self)




    def patternShade(self):

        localctx = OGLParser.PatternShadeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_patternShade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 322
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [82, 97]:
                    self.state = 320
                    self.shadePattern()
                    pass
                elif token in [24, 50, 57, 111, 112, 114]:
                    self.state = 321
                    self.shadeType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 324 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 145241087999475712) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 5905612801) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinepatternCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(OGLParser.DEFINE, 0)

        def patternName(self):
            return self.getTypedRuleContext(OGLParser.PatternNameContext,0)


        def PATTERN(self):
            return self.getToken(OGLParser.PATTERN, 0)

        def lineCoding(self):
            return self.getTypedRuleContext(OGLParser.LineCodingContext,0)


        def ENDDEF(self):
            return self.getToken(OGLParser.ENDDEF, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_definepatternCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinepatternCommand" ):
                listener.enterDefinepatternCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinepatternCommand" ):
                listener.exitDefinepatternCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinepatternCommand" ):
                return visitor.visitDefinepatternCommand(self)
            else:
                return visitor.visitChildren(self)




    def definepatternCommand(self):

        localctx = OGLParser.DefinepatternCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_definepatternCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(OGLParser.DEFINE)
            self.state = 327
            self.patternName()
            self.state = 328
            self.match(OGLParser.PATTERN)
            self.state = 329
            self.lineCoding()
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 330
                self.match(OGLParser.ENDDEF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineCodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineCodingPels(self):
            return self.getTypedRuleContext(OGLParser.LineCodingPelsContext,0)


        def lineCodingEncoded(self):
            return self.getTypedRuleContext(OGLParser.LineCodingEncodedContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_lineCoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineCoding" ):
                listener.enterLineCoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineCoding" ):
                listener.exitLineCoding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineCoding" ):
                return visitor.visitLineCoding(self)
            else:
                return visitor.visitChildren(self)




    def lineCoding(self):

        localctx = OGLParser.LineCodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lineCoding)
        try:
            self.state = 335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.lineCodingPels()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.lineCodingEncoded()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineCodingPelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PELS(self):
            return self.getToken(OGLParser.PELS, 0)

        def coded_line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.Coded_lineContext)
            else:
                return self.getTypedRuleContext(OGLParser.Coded_lineContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_lineCodingPels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineCodingPels" ):
                listener.enterLineCodingPels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineCodingPels" ):
                listener.exitLineCodingPels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineCodingPels" ):
                return visitor.visitLineCodingPels(self)
            else:
                return visitor.visitChildren(self)




    def lineCodingPels(self):

        localctx = OGLParser.LineCodingPelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_lineCodingPels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(OGLParser.PELS)
            self.state = 339 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 338
                self.coded_line()
                self.state = 341 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineCodingEncodedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODED(self):
            return self.getToken(OGLParser.ENCODED, 0)

        def coded_line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.Coded_lineContext)
            else:
                return self.getTypedRuleContext(OGLParser.Coded_lineContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_lineCodingEncoded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineCodingEncoded" ):
                listener.enterLineCodingEncoded(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineCodingEncoded" ):
                listener.exitLineCodingEncoded(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineCodingEncoded" ):
                return visitor.visitLineCodingEncoded(self)
            else:
                return visitor.visitChildren(self)




    def lineCodingEncoded(self):

        localctx = OGLParser.LineCodingEncodedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_lineCodingEncoded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(OGLParser.ENCODED)
            self.state = 345 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 344
                self.coded_line()
                self.state = 347 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coded_lineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(OGLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OGLParser.RPAREN, 0)

        def INTEGERLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.INTEGERLITERAL)
            else:
                return self.getToken(OGLParser.INTEGERLITERAL, i)

        def getRuleIndex(self):
            return OGLParser.RULE_coded_line

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoded_line" ):
                listener.enterCoded_line(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoded_line" ):
                listener.exitCoded_line(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoded_line" ):
                return visitor.visitCoded_line(self)
            else:
                return visitor.visitChildren(self)




    def coded_line(self):

        localctx = OGLParser.Coded_lineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_coded_line)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(OGLParser.LPAREN)
            self.state = 351 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 350
                self.match(OGLParser.INTEGERLITERAL)
                self.state = 353 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==114):
                    break

            self.state = 355
            self.match(OGLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_patternName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternName" ):
                listener.enterPatternName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternName" ):
                listener.exitPatternName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternName" ):
                return visitor.visitPatternName(self)
            else:
                return visitor.visitChildren(self)




    def patternName(self):

        localctx = OGLParser.PatternNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_patternName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTEXT(self):
            return self.getToken(OGLParser.SETTEXT, 0)

        def orientRotatedDegree(self):
            return self.getTypedRuleContext(OGLParser.OrientRotatedDegreeContext,0)


        def settextFormat(self):
            return self.getTypedRuleContext(OGLParser.SettextFormatContext,0)


        def settextAlignment(self):
            return self.getTypedRuleContext(OGLParser.SettextAlignmentContext,0)


        def line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.LineContext)
            else:
                return self.getTypedRuleContext(OGLParser.LineContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_settextCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextCommand" ):
                listener.enterSettextCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextCommand" ):
                listener.exitSettextCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextCommand" ):
                return visitor.visitSettextCommand(self)
            else:
                return visitor.visitChildren(self)




    def settextCommand(self):

        localctx = OGLParser.SettextCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_settextCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(OGLParser.SETTEXT)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 360
                self.orientRotatedDegree()


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==59 or _la==100:
                self.state = 363
                self.settextFormat()


            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==95:
                self.state = 366
                self.settextAlignment()


            self.state = 370 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 369
                self.line()
                self.state = 372 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==51):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settextFormatModern(self):
            return self.getTypedRuleContext(OGLParser.SettextFormatModernContext,0)


        def settextFormatColumn(self):
            return self.getTypedRuleContext(OGLParser.SettextFormatColumnContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_settextFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextFormat" ):
                listener.enterSettextFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextFormat" ):
                listener.exitSettextFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextFormat" ):
                return visitor.visitSettextFormat(self)
            else:
                return visitor.visitChildren(self)




    def settextFormat(self):

        localctx = OGLParser.SettextFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_settextFormat)
        try:
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.settextFormatModern()
                pass
            elif token in [20, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.settextFormatColumn()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextFormatModernContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODERN(self):
            return self.getToken(OGLParser.MODERN, 0)

        def settextFormatPlacement(self):
            return self.getTypedRuleContext(OGLParser.SettextFormatPlacementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_settextFormatModern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextFormatModern" ):
                listener.enterSettextFormatModern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextFormatModern" ):
                listener.exitSettextFormatModern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextFormatModern" ):
                return visitor.visitSettextFormatModern(self)
            else:
                return visitor.visitChildren(self)




    def settextFormatModern(self):

        localctx = OGLParser.SettextFormatModernContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_settextFormatModern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(OGLParser.MODERN)
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 562949953456128) != 0) or _la==79 or _la==102:
                self.state = 379
                self.settextFormatPlacement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextFormatPlacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CENTER(self):
            return self.getToken(OGLParser.CENTER, 0)

        def TOP(self):
            return self.getToken(OGLParser.TOP, 0)

        def LEFT(self):
            return self.getToken(OGLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(OGLParser.RIGHT, 0)

        def BOTTOM(self):
            return self.getToken(OGLParser.BOTTOM, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_settextFormatPlacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextFormatPlacement" ):
                listener.enterSettextFormatPlacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextFormatPlacement" ):
                listener.exitSettextFormatPlacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextFormatPlacement" ):
                return visitor.visitSettextFormatPlacement(self)
            else:
                return visitor.visitChildren(self)




    def settextFormatPlacement(self):

        localctx = OGLParser.SettextFormatPlacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_settextFormatPlacement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 562949953456128) != 0) or _la==79 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextFormatColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(OGLParser.COLUMN, 0)

        def TATE(self):
            return self.getToken(OGLParser.TATE, 0)

        def settextFormatPlacement(self):
            return self.getTypedRuleContext(OGLParser.SettextFormatPlacementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_settextFormatColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextFormatColumn" ):
                listener.enterSettextFormatColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextFormatColumn" ):
                listener.exitSettextFormatColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextFormatColumn" ):
                return visitor.visitSettextFormatColumn(self)
            else:
                return visitor.visitChildren(self)




    def settextFormatColumn(self):

        localctx = OGLParser.SettextFormatColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_settextFormatColumn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            _la = self._input.LA(1)
            if not(_la==20 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 562949953456128) != 0) or _la==79 or _la==102:
                self.state = 385
                self.settextFormatPlacement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextAlignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settextAlignmentAuto(self):
            return self.getTypedRuleContext(OGLParser.SettextAlignmentAutoContext,0)


        def settextAlignmentSpaced(self):
            return self.getTypedRuleContext(OGLParser.SettextAlignmentSpacedContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_settextAlignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextAlignment" ):
                listener.enterSettextAlignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextAlignment" ):
                listener.exitSettextAlignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextAlignment" ):
                return visitor.visitSettextAlignment(self)
            else:
                return visitor.visitChildren(self)




    def settextAlignment(self):

        localctx = OGLParser.SettextAlignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_settextAlignment)
        try:
            self.state = 390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                self.settextAlignmentAuto()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 389
                self.settextAlignmentSpaced()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextAlignmentAutoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(OGLParser.AUTO, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_settextAlignmentAuto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextAlignmentAuto" ):
                listener.enterSettextAlignmentAuto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextAlignmentAuto" ):
                listener.exitSettextAlignmentAuto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextAlignmentAuto" ):
                return visitor.visitSettextAlignmentAuto(self)
            else:
                return visitor.visitChildren(self)




    def settextAlignmentAuto(self):

        localctx = OGLParser.SettextAlignmentAutoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_settextAlignmentAuto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(OGLParser.AUTO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextAlignmentSpacedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPACED(self):
            return self.getToken(OGLParser.SPACED, 0)

        def settextAlignmentValue(self):
            return self.getTypedRuleContext(OGLParser.SettextAlignmentValueContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_settextAlignmentSpaced

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextAlignmentSpaced" ):
                listener.enterSettextAlignmentSpaced(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextAlignmentSpaced" ):
                listener.exitSettextAlignmentSpaced(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextAlignmentSpaced" ):
                return visitor.visitSettextAlignmentSpaced(self)
            else:
                return visitor.visitChildren(self)




    def settextAlignmentSpaced(self):

        localctx = OGLParser.SettextAlignmentSpacedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_settextAlignmentSpaced)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(OGLParser.SPACED)
            self.state = 395
            self.settextAlignmentValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettextAlignmentValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_settextAlignmentValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettextAlignmentValue" ):
                listener.enterSettextAlignmentValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettextAlignmentValue" ):
                listener.exitSettextAlignmentValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettextAlignmentValue" ):
                return visitor.visitSettextAlignmentValue(self)
            else:
                return visitor.visitChildren(self)




    def settextAlignmentValue(self):

        localctx = OGLParser.SettextAlignmentValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_settextAlignmentValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetunitsCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETUNITS(self):
            return self.getToken(OGLParser.SETUNITS, 0)

        def setunitsDefault(self):
            return self.getTypedRuleContext(OGLParser.SetunitsDefaultContext,0)


        def setunitsLineSp(self):
            return self.getTypedRuleContext(OGLParser.SetunitsLineSpContext,0)


        def setunitsCornerLength(self):
            return self.getTypedRuleContext(OGLParser.SetunitsCornerLengthContext,0)


        def setunitsTextMargin(self):
            return self.getTypedRuleContext(OGLParser.SetunitsTextMarginContext,0)


        def setUnitsPositioning(self):
            return self.getTypedRuleContext(OGLParser.SetUnitsPositioningContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_setunitsCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetunitsCommand" ):
                listener.enterSetunitsCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetunitsCommand" ):
                listener.exitSetunitsCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetunitsCommand" ):
                return visitor.visitSetunitsCommand(self)
            else:
                return visitor.visitChildren(self)




    def setunitsCommand(self):

        localctx = OGLParser.SetunitsCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_setunitsCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(OGLParser.SETUNITS)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 400
                self.setunitsDefault()


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 403
                self.setunitsLineSp()


            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 406
                self.setunitsCornerLength()


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 409
                self.setunitsTextMargin()


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 412
                self.setUnitsPositioning()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetunitsDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryDefault(self):
            return self.getTypedRuleContext(OGLParser.PrimaryDefaultContext,0)


        def secondaryDefault(self):
            return self.getTypedRuleContext(OGLParser.SecondaryDefaultContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_setunitsDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetunitsDefault" ):
                listener.enterSetunitsDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetunitsDefault" ):
                listener.exitSetunitsDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetunitsDefault" ):
                return visitor.visitSetunitsDefault(self)
            else:
                return visitor.visitChildren(self)




    def setunitsDefault(self):

        localctx = OGLParser.SetunitsDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_setunitsDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.primaryDefault()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 416
                self.secondaryDefault()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_primaryDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryDefault" ):
                listener.enterPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryDefault" ):
                listener.exitPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryDefault" ):
                return visitor.visitPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)




    def primaryDefault(self):

        localctx = OGLParser.PrimaryDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_primaryDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecondaryDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_secondaryDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryDefault" ):
                listener.enterSecondaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryDefault" ):
                listener.exitSecondaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecondaryDefault" ):
                return visitor.visitSecondaryDefault(self)
            else:
                return visitor.visitChildren(self)




    def secondaryDefault(self):

        localctx = OGLParser.SecondaryDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_secondaryDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetunitsLineSpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINESP(self):
            return self.getToken(OGLParser.LINESP, 0)

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_setunitsLineSp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetunitsLineSp" ):
                listener.enterSetunitsLineSp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetunitsLineSp" ):
                listener.exitSetunitsLineSp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetunitsLineSp" ):
                return visitor.visitSetunitsLineSp(self)
            else:
                return visitor.visitChildren(self)




    def setunitsLineSp(self):

        localctx = OGLParser.SetunitsLineSpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_setunitsLineSp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(OGLParser.LINESP)
            self.state = 424
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetunitsCornerLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CORNERLENGTH(self):
            return self.getToken(OGLParser.CORNERLENGTH, 0)

        def conrnerLengthValue(self):
            return self.getTypedRuleContext(OGLParser.ConrnerLengthValueContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_setunitsCornerLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetunitsCornerLength" ):
                listener.enterSetunitsCornerLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetunitsCornerLength" ):
                listener.exitSetunitsCornerLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetunitsCornerLength" ):
                return visitor.visitSetunitsCornerLength(self)
            else:
                return visitor.visitChildren(self)




    def setunitsCornerLength(self):

        localctx = OGLParser.SetunitsCornerLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_setunitsCornerLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(OGLParser.CORNERLENGTH)
            self.state = 427
            self.conrnerLengthValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConrnerLengthValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def MEDIUM(self):
            return self.getToken(OGLParser.MEDIUM, 0)

        def SMALL(self):
            return self.getToken(OGLParser.SMALL, 0)

        def LARGE(self):
            return self.getToken(OGLParser.LARGE, 0)

        def HALF(self):
            return self.getToken(OGLParser.HALF, 0)

        def MAX(self):
            return self.getToken(OGLParser.MAX, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_conrnerLengthValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConrnerLengthValue" ):
                listener.enterConrnerLengthValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConrnerLengthValue" ):
                listener.exitConrnerLengthValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConrnerLengthValue" ):
                return visitor.visitConrnerLengthValue(self)
            else:
                return visitor.visitChildren(self)




    def conrnerLengthValue(self):

        localctx = OGLParser.ConrnerLengthValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_conrnerLengthValue)
        try:
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.oglMeasurement()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.match(OGLParser.MEDIUM)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 3)
                self.state = 431
                self.match(OGLParser.SMALL)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 4)
                self.state = 432
                self.match(OGLParser.LARGE)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 5)
                self.state = 433
                self.match(OGLParser.HALF)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 434
                self.match(OGLParser.MAX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetunitsTextMarginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXTMARGIN(self):
            return self.getToken(OGLParser.TEXTMARGIN, 0)

        def textMarginValue(self):
            return self.getTypedRuleContext(OGLParser.TextMarginValueContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_setunitsTextMargin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetunitsTextMargin" ):
                listener.enterSetunitsTextMargin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetunitsTextMargin" ):
                listener.exitSetunitsTextMargin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetunitsTextMargin" ):
                return visitor.visitSetunitsTextMargin(self)
            else:
                return visitor.visitChildren(self)




    def setunitsTextMargin(self):

        localctx = OGLParser.SetunitsTextMarginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_setunitsTextMargin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(OGLParser.TEXTMARGIN)
            self.state = 438
            self.textMarginValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextMarginValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROUNDED(self):
            return self.getToken(OGLParser.ROUNDED, 0)

        def SQUARE(self):
            return self.getToken(OGLParser.SQUARE, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_textMarginValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextMarginValue" ):
                listener.enterTextMarginValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextMarginValue" ):
                listener.exitTextMarginValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextMarginValue" ):
                return visitor.visitTextMarginValue(self)
            else:
                return visitor.visitChildren(self)




    def textMarginValue(self):

        localctx = OGLParser.TextMarginValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_textMarginValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            _la = self._input.LA(1)
            if not(_la==80 or _la==96):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetUnitsPositioningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITIONING(self):
            return self.getToken(OGLParser.POSITIONING, 0)

        def positionValue(self):
            return self.getTypedRuleContext(OGLParser.PositionValueContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_setUnitsPositioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetUnitsPositioning" ):
                listener.enterSetUnitsPositioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetUnitsPositioning" ):
                listener.exitSetUnitsPositioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetUnitsPositioning" ):
                return visitor.visitSetUnitsPositioning(self)
            else:
                return visitor.visitChildren(self)




    def setUnitsPositioning(self):

        localctx = OGLParser.SetUnitsPositioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_setUnitsPositioning)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(OGLParser.POSITIONING)
            self.state = 443
            self.positionValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOPLEFT(self):
            return self.getToken(OGLParser.TOPLEFT, 0)

        def CENTER(self):
            return self.getToken(OGLParser.CENTER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_positionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionValue" ):
                listener.enterPositionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionValue" ):
                listener.exitPositionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionValue" ):
                return visitor.visitPositionValue(self)
            else:
                return visitor.visitChildren(self)




    def positionValue(self):

        localctx = OGLParser.PositionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_positionValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            _la = self._input.LA(1)
            if not(_la==15 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACE(self):
            return self.getToken(OGLParser.PLACE, 0)

        def groupName(self):
            return self.getTypedRuleContext(OGLParser.GroupNameContext,0)


        def SEGID(self):
            return self.getToken(OGLParser.SEGID, 0)

        def GROUP(self):
            return self.getToken(OGLParser.GROUP, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_placeCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlaceCommand" ):
                listener.enterPlaceCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlaceCommand" ):
                listener.exitPlaceCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceCommand" ):
                return visitor.visitPlaceCommand(self)
            else:
                return visitor.visitChildren(self)




    def placeCommand(self):

        localctx = OGLParser.PlaceCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_placeCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(OGLParser.PLACE)
            self.state = 448
            _la = self._input.LA(1)
            if not(_la==41 or _la==84):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 449
            self.groupName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawruleCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DRAWRULE(self):
            return self.getToken(OGLParser.DRAWRULE, 0)

        def ruleLength(self):
            return self.getTypedRuleContext(OGLParser.RuleLengthContext,0)


        def ruleDirection(self):
            return self.getTypedRuleContext(OGLParser.RuleDirectionContext,0)


        def ruleThickness(self):
            return self.getTypedRuleContext(OGLParser.RuleThicknessContext,0)


        def ruleType(self):
            return self.getTypedRuleContext(OGLParser.RuleTypeContext,0)


        def ruleRepeated(self):
            return self.getTypedRuleContext(OGLParser.RuleRepeatedContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_drawruleCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrawruleCommand" ):
                listener.enterDrawruleCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrawruleCommand" ):
                listener.exitDrawruleCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrawruleCommand" ):
                return visitor.visitDrawruleCommand(self)
            else:
                return visitor.visitChildren(self)




    def drawruleCommand(self):

        localctx = OGLParser.DrawruleCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_drawruleCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(OGLParser.DRAWRULE)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5 or _la==33:
                self.state = 452
                self.ruleDirection()


            self.state = 455
            self.ruleLength()
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 145241087982699008) != 0) or _la==114:
                self.state = 456
                self.ruleThickness()


            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25 or _la==30 or _la==91:
                self.state = 459
                self.ruleType()


            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 462
                self.ruleRepeated()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACROSS(self):
            return self.getToken(OGLParser.ACROSS, 0)

        def DOWN(self):
            return self.getToken(OGLParser.DOWN, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_ruleDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleDirection" ):
                listener.enterRuleDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleDirection" ):
                listener.exitRuleDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleDirection" ):
                return visitor.visitRuleDirection(self)
            else:
                return visitor.visitChildren(self)




    def ruleDirection(self):

        localctx = OGLParser.RuleDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ruleDirection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            _la = self._input.LA(1)
            if not(_la==5 or _la==33):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_ruleLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleLength" ):
                listener.enterRuleLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleLength" ):
                listener.exitRuleLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleLength" ):
                return visitor.visitRuleLength(self)
            else:
                return visitor.visitChildren(self)




    def ruleLength(self):

        localctx = OGLParser.RuleLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ruleLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleThicknessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIUM(self):
            return self.getToken(OGLParser.MEDIUM, 0)

        def LIGHT(self):
            return self.getToken(OGLParser.LIGHT, 0)

        def BOLD(self):
            return self.getToken(OGLParser.BOLD, 0)

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_ruleThickness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleThickness" ):
                listener.enterRuleThickness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleThickness" ):
                listener.exitRuleThickness(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleThickness" ):
                return visitor.visitRuleThickness(self)
            else:
                return visitor.visitChildren(self)




    def ruleThickness(self):

        localctx = OGLParser.RuleThicknessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ruleThickness)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 145241087982699008) != 0) or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLID(self):
            return self.getToken(OGLParser.SOLID, 0)

        def DASHED(self):
            return self.getToken(OGLParser.DASHED, 0)

        def DOTTED(self):
            return self.getToken(OGLParser.DOTTED, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_ruleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleType" ):
                listener.enterRuleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleType" ):
                listener.exitRuleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleType" ):
                return visitor.visitRuleType(self)
            else:
                return visitor.visitChildren(self)




    def ruleType(self):

        localctx = OGLParser.RuleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ruleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            _la = self._input.LA(1)
            if not(_la==25 or _la==30 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRepeatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self):
            return self.getToken(OGLParser.REPEAT, 0)

        def ruleRepeatAcross(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.RuleRepeatAcrossContext)
            else:
                return self.getTypedRuleContext(OGLParser.RuleRepeatAcrossContext,i)


        def ruleRepeatLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.RuleRepeatLocationContext)
            else:
                return self.getTypedRuleContext(OGLParser.RuleRepeatLocationContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_ruleRepeated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRepeated" ):
                listener.enterRuleRepeated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRepeated" ):
                listener.exitRuleRepeated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleRepeated" ):
                return visitor.visitRuleRepeated(self)
            else:
                return visitor.visitChildren(self)




    def ruleRepeated(self):

        localctx = OGLParser.RuleRepeatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ruleRepeated)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(OGLParser.REPEAT)
            self.state = 476 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 476
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5, 33, 114]:
                    self.state = 474
                    self.ruleRepeatAcross()
                    pass
                elif token in [53]:
                    self.state = 475
                    self.ruleRepeatLocation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 478 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 9007207844675616) != 0) or _la==114):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRepeatAcrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleRepetition(self):
            return self.getTypedRuleContext(OGLParser.RuleRepetitionContext,0)


        def SPACED(self):
            return self.getToken(OGLParser.SPACED, 0)

        def spacedValue(self):
            return self.getTypedRuleContext(OGLParser.SpacedValueContext,0)


        def ACROSS(self):
            return self.getToken(OGLParser.ACROSS, 0)

        def DOWN(self):
            return self.getToken(OGLParser.DOWN, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_ruleRepeatAcross

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRepeatAcross" ):
                listener.enterRuleRepeatAcross(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRepeatAcross" ):
                listener.exitRuleRepeatAcross(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleRepeatAcross" ):
                return visitor.visitRuleRepeatAcross(self)
            else:
                return visitor.visitChildren(self)




    def ruleRepeatAcross(self):

        localctx = OGLParser.RuleRepeatAcrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ruleRepeatAcross)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5 or _la==33:
                self.state = 480
                _la = self._input.LA(1)
                if not(_la==5 or _la==33):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 483
            self.ruleRepetition()
            self.state = 484
            self.match(OGLParser.SPACED)
            self.state = 485
            self.spacedValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRepetitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_ruleRepetition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRepetition" ):
                listener.enterRuleRepetition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRepetition" ):
                listener.exitRuleRepetition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleRepetition" ):
                return visitor.visitRuleRepetition(self)
            else:
                return visitor.visitChildren(self)




    def ruleRepetition(self):

        localctx = OGLParser.RuleRepetitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ruleRepetition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(OGLParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRepeatLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(OGLParser.LOCATION, 0)

        def ruleRepeatHorizonalCoordinate(self):
            return self.getTypedRuleContext(OGLParser.RuleRepeatHorizonalCoordinateContext,0)


        def ruleRepeatVerticalCoordinate(self):
            return self.getTypedRuleContext(OGLParser.RuleRepeatVerticalCoordinateContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_ruleRepeatLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRepeatLocation" ):
                listener.enterRuleRepeatLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRepeatLocation" ):
                listener.exitRuleRepeatLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleRepeatLocation" ):
                return visitor.visitRuleRepeatLocation(self)
            else:
                return visitor.visitChildren(self)




    def ruleRepeatLocation(self):

        localctx = OGLParser.RuleRepeatLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ruleRepeatLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(OGLParser.LOCATION)
            self.state = 490
            self.ruleRepeatHorizonalCoordinate()
            self.state = 491
            self.ruleRepeatVerticalCoordinate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRepeatVerticalCoordinateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_ruleRepeatVerticalCoordinate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRepeatVerticalCoordinate" ):
                listener.enterRuleRepeatVerticalCoordinate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRepeatVerticalCoordinate" ):
                listener.exitRuleRepeatVerticalCoordinate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleRepeatVerticalCoordinate" ):
                return visitor.visitRuleRepeatVerticalCoordinate(self)
            else:
                return visitor.visitChildren(self)




    def ruleRepeatVerticalCoordinate(self):

        localctx = OGLParser.RuleRepeatVerticalCoordinateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ruleRepeatVerticalCoordinate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleRepeatHorizonalCoordinateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_ruleRepeatHorizonalCoordinate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleRepeatHorizonalCoordinate" ):
                listener.enterRuleRepeatHorizonalCoordinate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleRepeatHorizonalCoordinate" ):
                listener.exitRuleRepeatHorizonalCoordinate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuleRepeatHorizonalCoordinate" ):
                return visitor.visitRuleRepeatHorizonalCoordinate(self)
            else:
                return visitor.visitChildren(self)




    def ruleRepeatHorizonalCoordinate(self):

        localctx = OGLParser.RuleRepeatHorizonalCoordinateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ruleRepeatHorizonalCoordinate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawboxCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DRAWBOX(self):
            return self.getToken(OGLParser.DRAWBOX, 0)

        def boxWidth(self):
            return self.getTypedRuleContext(OGLParser.BoxWidthContext,0)


        def boxHeight(self):
            return self.getTypedRuleContext(OGLParser.BoxHeightContext,0)


        def boxBorderThickness(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxBorderThicknessContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxBorderThicknessContext,i)


        def boxBorderType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxBorderTypeContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxBorderTypeContext,i)


        def boxRounded(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxRoundedContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxRoundedContext,i)


        def boxDiagonal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxDiagonalContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxDiagonalContext,i)


        def boxRepeat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxRepeatContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxRepeatContext,i)


        def boxShade(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxShadeContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxShadeContext,i)


        def boxColor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxColorContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxColorContext,i)


        def boxWithtext(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxWithtextContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxWithtextContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_drawboxCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrawboxCommand" ):
                listener.enterDrawboxCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrawboxCommand" ):
                listener.exitDrawboxCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrawboxCommand" ):
                return visitor.visitDrawboxCommand(self)
            else:
                return visitor.visitChildren(self)




    def drawboxCommand(self):

        localctx = OGLParser.DrawboxCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_drawboxCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(OGLParser.DRAWBOX)
            self.state = 498
            self.boxWidth()
            self.state = 499
            self.boxHeight()
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 145241089358955008) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 146028906505) != 0):
                self.state = 508
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [9, 50, 57, 114]:
                    self.state = 500
                    self.boxBorderThickness()
                    pass
                elif token in [25, 30, 91]:
                    self.state = 501
                    self.boxBorderType()
                    pass
                elif token in [80]:
                    self.state = 502
                    self.boxRounded()
                    pass
                elif token in [28]:
                    self.state = 503
                    self.boxDiagonal()
                    pass
                elif token in [77]:
                    self.state = 504
                    self.boxRepeat()
                    pass
                elif token in [88]:
                    self.state = 505
                    self.boxShade()
                    pass
                elif token in [19]:
                    self.state = 506
                    self.boxColor()
                    pass
                elif token in [110]:
                    self.state = 507
                    self.boxWithtext()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWidthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxWidth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWidth" ):
                listener.enterBoxWidth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWidth" ):
                listener.exitBoxWidth(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWidth" ):
                return visitor.visitBoxWidth(self)
            else:
                return visitor.visitChildren(self)




    def boxWidth(self):

        localctx = OGLParser.BoxWidthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_boxWidth)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxHeightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxHeight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxHeight" ):
                listener.enterBoxHeight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxHeight" ):
                listener.exitBoxHeight(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxHeight" ):
                return visitor.visitBoxHeight(self)
            else:
                return visitor.visitChildren(self)




    def boxHeight(self):

        localctx = OGLParser.BoxHeightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_boxHeight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxBorderThicknessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIUM(self):
            return self.getToken(OGLParser.MEDIUM, 0)

        def LIGHT(self):
            return self.getToken(OGLParser.LIGHT, 0)

        def BOLD(self):
            return self.getToken(OGLParser.BOLD, 0)

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_boxBorderThickness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxBorderThickness" ):
                listener.enterBoxBorderThickness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxBorderThickness" ):
                listener.exitBoxBorderThickness(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxBorderThickness" ):
                return visitor.visitBoxBorderThickness(self)
            else:
                return visitor.visitChildren(self)




    def boxBorderThickness(self):

        localctx = OGLParser.BoxBorderThicknessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_boxBorderThickness)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 145241087982699008) != 0) or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxBorderTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLID(self):
            return self.getToken(OGLParser.SOLID, 0)

        def DASHED(self):
            return self.getToken(OGLParser.DASHED, 0)

        def DOTTED(self):
            return self.getToken(OGLParser.DOTTED, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_boxBorderType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxBorderType" ):
                listener.enterBoxBorderType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxBorderType" ):
                listener.exitBoxBorderType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxBorderType" ):
                return visitor.visitBoxBorderType(self)
            else:
                return visitor.visitChildren(self)




    def boxBorderType(self):

        localctx = OGLParser.BoxBorderTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_boxBorderType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            _la = self._input.LA(1)
            if not(_la==25 or _la==30 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRoundedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROUNDED(self):
            return self.getToken(OGLParser.ROUNDED, 0)

        def boxRoundedOption(self):
            return self.getTypedRuleContext(OGLParser.BoxRoundedOptionContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxRounded

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRounded" ):
                listener.enterBoxRounded(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRounded" ):
                listener.exitBoxRounded(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRounded" ):
                return visitor.visitBoxRounded(self)
            else:
                return visitor.visitChildren(self)




    def boxRounded(self):

        localctx = OGLParser.BoxRoundedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_boxRounded)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(OGLParser.ROUNDED)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 12352) != 0) or _la==103 or _la==104:
                self.state = 522
                self.boxRoundedOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRoundedOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(OGLParser.ALL, 0)

        def TOPLEFT(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.TOPLEFT)
            else:
                return self.getToken(OGLParser.TOPLEFT, i)

        def TOPRIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.TOPRIGHT)
            else:
                return self.getToken(OGLParser.TOPRIGHT, i)

        def BOTTOMLEFT(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.BOTTOMLEFT)
            else:
                return self.getToken(OGLParser.BOTTOMLEFT, i)

        def BOTTOMRIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.BOTTOMRIGHT)
            else:
                return self.getToken(OGLParser.BOTTOMRIGHT, i)

        def getRuleIndex(self):
            return OGLParser.RULE_boxRoundedOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRoundedOption" ):
                listener.enterBoxRoundedOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRoundedOption" ):
                listener.exitBoxRoundedOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRoundedOption" ):
                return visitor.visitBoxRoundedOption(self)
            else:
                return visitor.visitChildren(self)




    def boxRoundedOption(self):

        localctx = OGLParser.BoxRoundedOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_boxRoundedOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.state = 525
                self.match(OGLParser.ALL)
                pass
            elif token in [12, 13, 103, 104]:
                self.state = 527 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 526
                    _la = self._input.LA(1)
                    if not(_la==12 or _la==13 or _la==103 or _la==104):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 529 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==12 or _la==13 or _la==103 or _la==104):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxDiagonalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIAGONAL(self):
            return self.getToken(OGLParser.DIAGONAL, 0)

        def boxDiagonalOption(self):
            return self.getTypedRuleContext(OGLParser.BoxDiagonalOptionContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxDiagonal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxDiagonal" ):
                listener.enterBoxDiagonal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxDiagonal" ):
                listener.exitBoxDiagonal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxDiagonal" ):
                return visitor.visitBoxDiagonal(self)
            else:
                return visitor.visitChildren(self)




    def boxDiagonal(self):

        localctx = OGLParser.BoxDiagonalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_boxDiagonal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(OGLParser.DIAGONAL)
            self.state = 534
            self.boxDiagonalOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxDiagonalOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(OGLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(OGLParser.RIGHT, 0)

        def BOTH(self):
            return self.getToken(OGLParser.BOTH, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_boxDiagonalOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxDiagonalOption" ):
                listener.enterBoxDiagonalOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxDiagonalOption" ):
                listener.exitBoxDiagonalOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxDiagonalOption" ):
                return visitor.visitBoxDiagonalOption(self)
            else:
                return visitor.visitChildren(self)




    def boxDiagonalOption(self):

        localctx = OGLParser.BoxDiagonalOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_boxDiagonalOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            _la = self._input.LA(1)
            if not(_la==10 or _la==49 or _la==79):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRepeatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self):
            return self.getToken(OGLParser.REPEAT, 0)

        def boxRepeatAcrossDown(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxRepeatAcrossDownContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxRepeatAcrossDownContext,i)


        def boxRepeatSpaced(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.BoxRepeatSpacedContext)
            else:
                return self.getTypedRuleContext(OGLParser.BoxRepeatSpacedContext,i)


        def boxRepeatLocation(self):
            return self.getTypedRuleContext(OGLParser.BoxRepeatLocationContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxRepeat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRepeat" ):
                listener.enterBoxRepeat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRepeat" ):
                listener.exitBoxRepeat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRepeat" ):
                return visitor.visitBoxRepeat(self)
            else:
                return visitor.visitChildren(self)




    def boxRepeat(self):

        localctx = OGLParser.BoxRepeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_boxRepeat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(OGLParser.REPEAT)
            self.state = 541 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 541
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5, 33]:
                    self.state = 539
                    self.boxRepeatAcrossDown()
                    pass
                elif token in [95]:
                    self.state = 540
                    self.boxRepeatSpaced()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 543 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==5 or _la==33 or _la==95):
                    break

            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 545
                self.boxRepeatLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRepeatLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(OGLParser.LOCATION, 0)

        def boxRepeatHorizonalCoordinate(self):
            return self.getTypedRuleContext(OGLParser.BoxRepeatHorizonalCoordinateContext,0)


        def boxRepeatVerticalCoordinate(self):
            return self.getTypedRuleContext(OGLParser.BoxRepeatVerticalCoordinateContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxRepeatLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRepeatLocation" ):
                listener.enterBoxRepeatLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRepeatLocation" ):
                listener.exitBoxRepeatLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRepeatLocation" ):
                return visitor.visitBoxRepeatLocation(self)
            else:
                return visitor.visitChildren(self)




    def boxRepeatLocation(self):

        localctx = OGLParser.BoxRepeatLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_boxRepeatLocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(OGLParser.LOCATION)
            self.state = 549
            self.boxRepeatHorizonalCoordinate()
            self.state = 550
            self.boxRepeatVerticalCoordinate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRepeatVerticalCoordinateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxRepeatVerticalCoordinate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRepeatVerticalCoordinate" ):
                listener.enterBoxRepeatVerticalCoordinate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRepeatVerticalCoordinate" ):
                listener.exitBoxRepeatVerticalCoordinate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRepeatVerticalCoordinate" ):
                return visitor.visitBoxRepeatVerticalCoordinate(self)
            else:
                return visitor.visitChildren(self)




    def boxRepeatVerticalCoordinate(self):

        localctx = OGLParser.BoxRepeatVerticalCoordinateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_boxRepeatVerticalCoordinate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRepeatHorizonalCoordinateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxRepeatHorizonalCoordinate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRepeatHorizonalCoordinate" ):
                listener.enterBoxRepeatHorizonalCoordinate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRepeatHorizonalCoordinate" ):
                listener.exitBoxRepeatHorizonalCoordinate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRepeatHorizonalCoordinate" ):
                return visitor.visitBoxRepeatHorizonalCoordinate(self)
            else:
                return visitor.visitChildren(self)




    def boxRepeatHorizonalCoordinate(self):

        localctx = OGLParser.BoxRepeatHorizonalCoordinateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_boxRepeatHorizonalCoordinate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRepeatAcrossDownContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boxRepetition(self):
            return self.getTypedRuleContext(OGLParser.BoxRepetitionContext,0)


        def ACROSS(self):
            return self.getToken(OGLParser.ACROSS, 0)

        def DOWN(self):
            return self.getToken(OGLParser.DOWN, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_boxRepeatAcrossDown

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRepeatAcrossDown" ):
                listener.enterBoxRepeatAcrossDown(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRepeatAcrossDown" ):
                listener.exitBoxRepeatAcrossDown(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRepeatAcrossDown" ):
                return visitor.visitBoxRepeatAcrossDown(self)
            else:
                return visitor.visitChildren(self)




    def boxRepeatAcrossDown(self):

        localctx = OGLParser.BoxRepeatAcrossDownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_boxRepeatAcrossDown)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            _la = self._input.LA(1)
            if not(_la==5 or _la==33):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 557
            self.boxRepetition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRepetitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_boxRepetition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRepetition" ):
                listener.enterBoxRepetition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRepetition" ):
                listener.exitBoxRepetition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRepetition" ):
                return visitor.visitBoxRepetition(self)
            else:
                return visitor.visitChildren(self)




    def boxRepetition(self):

        localctx = OGLParser.BoxRepetitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_boxRepetition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(OGLParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxRepeatSpacedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPACED(self):
            return self.getToken(OGLParser.SPACED, 0)

        def spacedValue(self):
            return self.getTypedRuleContext(OGLParser.SpacedValueContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxRepeatSpaced

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxRepeatSpaced" ):
                listener.enterBoxRepeatSpaced(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxRepeatSpaced" ):
                listener.exitBoxRepeatSpaced(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxRepeatSpaced" ):
                return visitor.visitBoxRepeatSpaced(self)
            else:
                return visitor.visitChildren(self)




    def boxRepeatSpaced(self):

        localctx = OGLParser.BoxRepeatSpacedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_boxRepeatSpaced)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(OGLParser.SPACED)
            self.state = 562
            self.spacedValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpacedValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIAMETER(self):
            return self.getToken(OGLParser.DIAMETER, 0)

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_spacedValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpacedValue" ):
                listener.enterSpacedValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpacedValue" ):
                listener.exitSpacedValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpacedValue" ):
                return visitor.visitSpacedValue(self)
            else:
                return visitor.visitChildren(self)




    def spacedValue(self):

        localctx = OGLParser.SpacedValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_spacedValue)
        try:
            self.state = 566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.match(OGLParser.DIAMETER)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.oglMeasurement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxShadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHADE(self):
            return self.getToken(OGLParser.SHADE, 0)

        def box(self):
            return self.getTypedRuleContext(OGLParser.BoxContext,0)


        def shadeArea(self):
            return self.getTypedRuleContext(OGLParser.ShadeAreaContext,0)


        def shadePattern(self):
            return self.getTypedRuleContext(OGLParser.ShadePatternContext,0)


        def shadeType(self):
            return self.getTypedRuleContext(OGLParser.ShadeTypeContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxShade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxShade" ):
                listener.enterBoxShade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxShade" ):
                listener.exitBoxShade(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxShade" ):
                return visitor.visitBoxShade(self)
            else:
                return visitor.visitChildren(self)




    def boxShade(self):

        localctx = OGLParser.BoxShadeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_boxShade)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(OGLParser.SHADE)
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==14:
                self.state = 569
                self.box()


            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==49 or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1082130433) != 0):
                self.state = 572
                self.shadeArea()


            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==97:
                self.state = 575
                self.shadePattern()


            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 578
                self.shadeType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(OGLParser.ALL, 0)

        def BOX(self):
            return self.getToken(OGLParser.BOX, 0)

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_box

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBox" ):
                listener.enterBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBox" ):
                listener.exitBox(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBox" ):
                return visitor.visitBox(self)
            else:
                return visitor.visitChildren(self)




    def box(self):

        localctx = OGLParser.BoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_box)
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.match(OGLParser.ALL)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.match(OGLParser.BOX)
                self.state = 583
                self.match(OGLParser.INTEGERLITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShadeAreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHOLE(self):
            return self.getToken(OGLParser.WHOLE, 0)

        def LEFT(self):
            return self.getToken(OGLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(OGLParser.RIGHT, 0)

        def TOP(self):
            return self.getToken(OGLParser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(OGLParser.BOTTOM, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_shadeArea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShadeArea" ):
                listener.enterShadeArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShadeArea" ):
                listener.exitShadeArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShadeArea" ):
                return visitor.visitShadeArea(self)
            else:
                return visitor.visitChildren(self)




    def shadeArea(self):

        localctx = OGLParser.ShadeAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_shadeArea)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            _la = self._input.LA(1)
            if not(_la==11 or _la==49 or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1082130433) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShadePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDARD(self):
            return self.getToken(OGLParser.STANDARD, 0)

        def SCREEN(self):
            return self.getToken(OGLParser.SCREEN, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_shadePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShadePattern" ):
                listener.enterShadePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShadePattern" ):
                listener.exitShadePattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShadePattern" ):
                return visitor.visitShadePattern(self)
            else:
                return visitor.visitChildren(self)




    def shadePattern(self):

        localctx = OGLParser.ShadePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_shadePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            _la = self._input.LA(1)
            if not(_la==82 or _la==97):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShadeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIUM(self):
            return self.getToken(OGLParser.MEDIUM, 0)

        def XLIGHT(self):
            return self.getToken(OGLParser.XLIGHT, 0)

        def LIGHT(self):
            return self.getToken(OGLParser.LIGHT, 0)

        def DARK(self):
            return self.getToken(OGLParser.DARK, 0)

        def XDARK(self):
            return self.getToken(OGLParser.XDARK, 0)

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_shadeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShadeType" ):
                listener.enterShadeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShadeType" ):
                listener.exitShadeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShadeType" ):
                return visitor.visitShadeType(self)
            else:
                return visitor.visitChildren(self)




    def shadeType(self):

        localctx = OGLParser.ShadeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_shadeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 145241087999475712) != 0) or ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 11) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxColorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLOR(self):
            return self.getToken(OGLParser.COLOR, 0)

        def box(self):
            return self.getTypedRuleContext(OGLParser.BoxContext,0)


        def boxColorName(self):
            return self.getTypedRuleContext(OGLParser.BoxColorNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxColor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxColor" ):
                listener.enterBoxColor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxColor" ):
                listener.exitBoxColor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxColor" ):
                return visitor.visitBoxColor(self)
            else:
                return visitor.visitChildren(self)




    def boxColor(self):

        localctx = OGLParser.BoxColorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_boxColor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(OGLParser.COLOR)
            self.state = 593
            self.box()
            self.state = 594
            self.boxColorName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxColorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_boxColorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxColorName" ):
                listener.enterBoxColorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxColorName" ):
                listener.exitBoxColorName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxColorName" ):
                return visitor.visitBoxColorName(self)
            else:
                return visitor.visitChildren(self)




    def boxColorName(self):

        localctx = OGLParser.BoxColorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_boxColorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWithtextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHTEXT(self):
            return self.getToken(OGLParser.WITHTEXT, 0)

        def line(self):
            return self.getTypedRuleContext(OGLParser.LineContext,0)


        def box(self):
            return self.getTypedRuleContext(OGLParser.BoxContext,0)


        def boxWithtextOrient(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextOrientContext,0)


        def boxWithtextFormat(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextFormatContext,0)


        def boxWithtextLineSpacing(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextLineSpacingContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxWithtext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWithtext" ):
                listener.enterBoxWithtext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWithtext" ):
                listener.exitBoxWithtext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWithtext" ):
                return visitor.visitBoxWithtext(self)
            else:
                return visitor.visitChildren(self)




    def boxWithtext(self):

        localctx = OGLParser.BoxWithtextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_boxWithtext)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(OGLParser.WITHTEXT)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==14:
                self.state = 599
                self.box()


            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 602
                self.boxWithtextOrient()


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 577094071002106112) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 10485761) != 0):
                self.state = 605
                self.boxWithtextFormat()


            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==95:
                self.state = 608
                self.boxWithtextLineSpacing()


            self.state = 611
            self.line()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWithtextOrientContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_boxWithtextOrient

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWithtextOrient" ):
                listener.enterBoxWithtextOrient(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWithtextOrient" ):
                listener.exitBoxWithtextOrient(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWithtextOrient" ):
                return visitor.visitBoxWithtextOrient(self)
            else:
                return visitor.visitChildren(self)




    def boxWithtextOrient(self):

        localctx = OGLParser.BoxWithtextOrientContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_boxWithtextOrient)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(OGLParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWithtextLineSpacingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(OGLParser.AUTO, 0)

        def SPACED(self):
            return self.getToken(OGLParser.SPACED, 0)

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxWithtextLineSpacing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWithtextLineSpacing" ):
                listener.enterBoxWithtextLineSpacing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWithtextLineSpacing" ):
                listener.exitBoxWithtextLineSpacing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWithtextLineSpacing" ):
                return visitor.visitBoxWithtextLineSpacing(self)
            else:
                return visitor.visitChildren(self)




    def boxWithtextLineSpacing(self):

        localctx = OGLParser.BoxWithtextLineSpacingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_boxWithtextLineSpacing)
        try:
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 615
                self.match(OGLParser.AUTO)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.match(OGLParser.SPACED)
                self.state = 617
                self.oglMeasurement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE(self):
            return self.getToken(OGLParser.LINE, 0)

        def line_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.Line_partContext)
            else:
                return self.getTypedRuleContext(OGLParser.Line_partContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_line

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine" ):
                listener.enterLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine" ):
                listener.exitLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine" ):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = OGLParser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_line)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(OGLParser.LINE)
            self.state = 622 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 621
                self.line_part()
                self.state = 624 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==118):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fontName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.FontNameContext)
            else:
                return self.getTypedRuleContext(OGLParser.FontNameContext,i)


        def lineSosiMode(self):
            return self.getTypedRuleContext(OGLParser.LineSosiModeContext,0)


        def lineUnderlying(self):
            return self.getTypedRuleContext(OGLParser.LineUnderlyingContext,0)


        def lineTextType(self):
            return self.getTypedRuleContext(OGLParser.LineTextTypeContext,0)


        def text(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.TextContext)
            else:
                return self.getTypedRuleContext(OGLParser.TextContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_line_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_part" ):
                listener.enterLine_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_part" ):
                listener.exitLine_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine_part" ):
                return visitor.visitLine_part(self)
            else:
                return visitor.visitChildren(self)




    def line_part(self):

        localctx = OGLParser.Line_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_line_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 626
                self.fontName()
                self.state = 629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==118):
                    break

            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93 or _la==94:
                self.state = 631
                self.lineSosiMode()


            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==106:
                self.state = 634
                self.lineUnderlying()


            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16 or _la==44:
                self.state = 637
                self.lineTextType()


            self.state = 641 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 640
                self.text()
                self.state = 643 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==113):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGLITERAL(self):
            return self.getToken(OGLParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterText" ):
                listener.enterText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitText" ):
                listener.exitText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitText" ):
                return visitor.visitText(self)
            else:
                return visitor.visitChildren(self)




    def text(self):

        localctx = OGLParser.TextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(OGLParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineSosiModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOSI1(self):
            return self.getToken(OGLParser.SOSI1, 0)

        def SOSI2(self):
            return self.getToken(OGLParser.SOSI2, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_lineSosiMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineSosiMode" ):
                listener.enterLineSosiMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineSosiMode" ):
                listener.exitLineSosiMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineSosiMode" ):
                return visitor.visitLineSosiMode(self)
            else:
                return visitor.visitChildren(self)




    def lineSosiMode(self):

        localctx = OGLParser.LineSosiModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_lineSosiMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            _la = self._input.LA(1)
            if not(_la==93 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineUnderlyingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOUNDERLINE(self):
            return self.getToken(OGLParser.NOUNDERLINE, 0)

        def UNDERLINE(self):
            return self.getToken(OGLParser.UNDERLINE, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_lineUnderlying

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineUnderlying" ):
                listener.enterLineUnderlying(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineUnderlying" ):
                listener.exitLineUnderlying(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineUnderlying" ):
                return visitor.visitLineUnderlying(self)
            else:
                return visitor.visitChildren(self)




    def lineUnderlying(self):

        localctx = OGLParser.LineUnderlyingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_lineUnderlying)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            _la = self._input.LA(1)
            if not(_la==66 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineTextTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(OGLParser.CHAR, 0)

        def HEX(self):
            return self.getToken(OGLParser.HEX, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_lineTextType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineTextType" ):
                listener.enterLineTextType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineTextType" ):
                listener.exitLineTextType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineTextType" ):
                return visitor.visitLineTextType(self)
            else:
                return visitor.visitChildren(self)




    def lineTextType(self):

        localctx = OGLParser.LineTextTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_lineTextType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            _la = self._input.LA(1)
            if not(_la==16 or _la==44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWithtextFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boxWithtextFormatModern(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextFormatModernContext,0)


        def boxWithtextFormatColumn(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextFormatColumnContext,0)


        def boxWithtextFormatPlacement(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextFormatPlacementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxWithtextFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWithtextFormat" ):
                listener.enterBoxWithtextFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWithtextFormat" ):
                listener.exitBoxWithtextFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWithtextFormat" ):
                return visitor.visitBoxWithtextFormat(self)
            else:
                return visitor.visitChildren(self)




    def boxWithtextFormat(self):

        localctx = OGLParser.BoxWithtextFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_boxWithtextFormat)
        try:
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.boxWithtextFormatModern()
                pass
            elif token in [20, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.boxWithtextFormatColumn()
                pass
            elif token in [8, 11, 15, 46, 49, 79, 102]:
                self.enterOuterAlt(localctx, 3)
                self.state = 655
                self.boxWithtextFormatPlacement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWithtextFormatModernContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODERN(self):
            return self.getToken(OGLParser.MODERN, 0)

        def boxWithtextFormatPlacement(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextFormatPlacementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxWithtextFormatModern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWithtextFormatModern" ):
                listener.enterBoxWithtextFormatModern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWithtextFormatModern" ):
                listener.exitBoxWithtextFormatModern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWithtextFormatModern" ):
                return visitor.visitBoxWithtextFormatModern(self)
            else:
                return visitor.visitChildren(self)




    def boxWithtextFormatModern(self):

        localctx = OGLParser.BoxWithtextFormatModernContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_boxWithtextFormatModern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(OGLParser.MODERN)
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 633318697634048) != 0) or _la==79 or _la==102:
                self.state = 659
                self.boxWithtextFormatPlacement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWithtextFormatPlacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CENTER(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.CENTER)
            else:
                return self.getToken(OGLParser.CENTER, i)

        def TOP(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.TOP)
            else:
                return self.getToken(OGLParser.TOP, i)

        def BOTTOM(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.BOTTOM)
            else:
                return self.getToken(OGLParser.BOTTOM, i)

        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.LEFT)
            else:
                return self.getToken(OGLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.RIGHT)
            else:
                return self.getToken(OGLParser.RIGHT, i)

        def BALANCE(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.BALANCE)
            else:
                return self.getToken(OGLParser.BALANCE, i)

        def JUSTIFY(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.JUSTIFY)
            else:
                return self.getToken(OGLParser.JUSTIFY, i)

        def LASTNO(self, i:int=None):
            if i is None:
                return self.getTokens(OGLParser.LASTNO)
            else:
                return self.getToken(OGLParser.LASTNO, i)

        def getRuleIndex(self):
            return OGLParser.RULE_boxWithtextFormatPlacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWithtextFormatPlacement" ):
                listener.enterBoxWithtextFormatPlacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWithtextFormatPlacement" ):
                listener.exitBoxWithtextFormatPlacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWithtextFormatPlacement" ):
                return visitor.visitBoxWithtextFormatPlacement(self)
            else:
                return visitor.visitChildren(self)




    def boxWithtextFormatPlacement(self):

        localctx = OGLParser.BoxWithtextFormatPlacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_boxWithtextFormatPlacement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 672
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 662
                    self.match(OGLParser.CENTER)
                    pass
                elif token in [102]:
                    self.state = 663
                    self.match(OGLParser.TOP)
                    pass
                elif token in [11]:
                    self.state = 664
                    self.match(OGLParser.BOTTOM)
                    pass
                elif token in [49]:
                    self.state = 665
                    self.match(OGLParser.LEFT)
                    pass
                elif token in [79]:
                    self.state = 666
                    self.match(OGLParser.RIGHT)
                    pass
                elif token in [8]:
                    self.state = 667
                    self.match(OGLParser.BALANCE)
                    pass
                elif token in [46]:
                    self.state = 668
                    self.match(OGLParser.JUSTIFY)
                    self.state = 670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==48:
                        self.state = 669
                        self.match(OGLParser.LASTNO)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 674 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 633318697634048) != 0) or _la==79 or _la==102):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWithtextFormatColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(OGLParser.COLUMN, 0)

        def TATE(self):
            return self.getToken(OGLParser.TATE, 0)

        def boxWithtextFormatPlacement(self):
            return self.getTypedRuleContext(OGLParser.BoxWithtextFormatPlacementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_boxWithtextFormatColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWithtextFormatColumn" ):
                listener.enterBoxWithtextFormatColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWithtextFormatColumn" ):
                listener.exitBoxWithtextFormatColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWithtextFormatColumn" ):
                return visitor.visitBoxWithtextFormatColumn(self)
            else:
                return visitor.visitChildren(self)




    def boxWithtextFormatColumn(self):

        localctx = OGLParser.BoxWithtextFormatColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_boxWithtextFormatColumn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            _la = self._input.LA(1)
            if not(_la==20 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 633318697634048) != 0) or _la==79 or _la==102:
                self.state = 677
                self.boxWithtextFormatPlacement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITION(self):
            return self.getToken(OGLParser.POSITION, 0)

        def positionX(self):
            return self.getTypedRuleContext(OGLParser.PositionXContext,0)


        def positionY(self):
            return self.getTypedRuleContext(OGLParser.PositionYContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_positionCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionCommand" ):
                listener.enterPositionCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionCommand" ):
                listener.exitPositionCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionCommand" ):
                return visitor.visitPositionCommand(self)
            else:
                return visitor.visitChildren(self)




    def positionCommand(self):

        localctx = OGLParser.PositionCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_positionCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(OGLParser.POSITION)
            self.state = 681
            self.positionX()
            self.state = 682
            self.positionY()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionXContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def ABSOLUTE(self):
            return self.getToken(OGLParser.ABSOLUTE, 0)

        def LEFT(self):
            return self.getToken(OGLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(OGLParser.RIGHT, 0)

        def UP(self):
            return self.getToken(OGLParser.UP, 0)

        def DOWN(self):
            return self.getToken(OGLParser.DOWN, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_positionX

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionX" ):
                listener.enterPositionX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionX" ):
                listener.exitPositionX(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionX" ):
                return visitor.visitPositionX(self)
            else:
                return visitor.visitChildren(self)




    def positionX(self):

        localctx = OGLParser.PositionXContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_positionX)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 562958543355920) != 0) or _la==79 or _la==107:
                self.state = 684
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 562958543355920) != 0) or _la==79 or _la==107):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 687
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionYContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def ABSOLUTE(self):
            return self.getToken(OGLParser.ABSOLUTE, 0)

        def LEFT(self):
            return self.getToken(OGLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(OGLParser.RIGHT, 0)

        def UP(self):
            return self.getToken(OGLParser.UP, 0)

        def DOWN(self):
            return self.getToken(OGLParser.DOWN, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_positionY

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionY" ):
                listener.enterPositionY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionY" ):
                listener.exitPositionY(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionY" ):
                return visitor.visitPositionY(self)
            else:
                return visitor.visitChildren(self)




    def positionY(self):

        localctx = OGLParser.PositionYContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_positionY)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 562958543355920) != 0) or _la==79 or _la==107:
                self.state = 689
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 562958543355920) != 0) or _la==79 or _la==107):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 692
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(OGLParser.CONTROL, 0)

        def controlStorage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.ControlStorageContext)
            else:
                return self.getTypedRuleContext(OGLParser.ControlStorageContext,i)


        def controlMessage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.ControlMessageContext)
            else:
                return self.getTypedRuleContext(OGLParser.ControlMessageContext,i)


        def controlSummary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.ControlSummaryContext)
            else:
                return self.getTypedRuleContext(OGLParser.ControlSummaryContext,i)


        def controlSosiOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.ControlSosiOptionContext)
            else:
                return self.getTypedRuleContext(OGLParser.ControlSosiOptionContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_controlCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlCommand" ):
                listener.enterControlCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlCommand" ):
                listener.exitControlCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlCommand" ):
                return visitor.visitControlCommand(self)
            else:
                return visitor.visitChildren(self)




    def controlCommand(self):

        localctx = OGLParser.ControlCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_controlCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(OGLParser.CONTROL)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 34359771137) != 0):
                self.state = 695
                self.controlStorage()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==36 or _la==108:
                self.state = 701
                self.controlMessage()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65 or _la==99:
                self.state = 707
                self.controlSummary()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64 or _la==92:
                self.state = 713
                self.controlSosiOption()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStorageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOSTORE(self):
            return self.getToken(OGLParser.NOSTORE, 0)

        def STORE(self):
            return self.getToken(OGLParser.STORE, 0)

        def REPLACE(self):
            return self.getToken(OGLParser.REPLACE, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_controlStorage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStorage" ):
                listener.enterControlStorage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStorage" ):
                listener.exitControlStorage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStorage" ):
                return visitor.visitControlStorage(self)
            else:
                return visitor.visitChildren(self)




    def controlStorage(self):

        localctx = OGLParser.ControlStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_controlStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            _la = self._input.LA(1)
            if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 34359771137) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlMessageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(OGLParser.ALL, 0)

        def WARN(self):
            return self.getToken(OGLParser.WARN, 0)

        def ERROR(self):
            return self.getToken(OGLParser.ERROR, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_controlMessage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlMessage" ):
                listener.enterControlMessage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlMessage" ):
                listener.exitControlMessage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlMessage" ):
                return visitor.visitControlMessage(self)
            else:
                return visitor.visitChildren(self)




    def controlMessage(self):

        localctx = OGLParser.ControlMessageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_controlMessage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            _la = self._input.LA(1)
            if not(_la==6 or _la==36 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlSummaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOSUMMARY(self):
            return self.getToken(OGLParser.NOSUMMARY, 0)

        def SUMMARY(self):
            return self.getToken(OGLParser.SUMMARY, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_controlSummary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlSummary" ):
                listener.enterControlSummary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlSummary" ):
                listener.exitControlSummary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlSummary" ):
                return visitor.visitControlSummary(self)
            else:
                return visitor.visitChildren(self)




    def controlSummary(self):

        localctx = OGLParser.ControlSummaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_controlSummary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            _la = self._input.LA(1)
            if not(_la==65 or _la==99):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlSosiOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOSI(self):
            return self.getToken(OGLParser.SOSI, 0)

        def NOSOSI(self):
            return self.getToken(OGLParser.NOSOSI, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_controlSosiOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlSosiOption" ):
                listener.enterControlSosiOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlSosiOption" ):
                listener.exitControlSosiOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlSosiOption" ):
                return visitor.visitControlSosiOption(self)
            else:
                return visitor.visitChildren(self)




    def controlSosiOption(self):

        localctx = OGLParser.ControlSosiOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_controlSosiOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            _la = self._input.LA(1)
            if not(_la==64 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverlayCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERLAY(self):
            return self.getToken(OGLParser.OVERLAY, 0)

        def overlayName(self):
            return self.getTypedRuleContext(OGLParser.OverlayNameContext,0)


        def SIZE(self):
            return self.getToken(OGLParser.SIZE, 0)

        def overlayWidth(self):
            return self.getTypedRuleContext(OGLParser.OverlayWidthContext,0)


        def overlayHeight(self):
            return self.getTypedRuleContext(OGLParser.OverlayHeightContext,0)


        def OFFSET(self):
            return self.getToken(OGLParser.OFFSET, 0)

        def overlayHorizonalCoordinate(self):
            return self.getTypedRuleContext(OGLParser.OverlayHorizonalCoordinateContext,0)


        def overlayVerticalCoordinate(self):
            return self.getTypedRuleContext(OGLParser.OverlayVerticalCoordinateContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_overlayCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlayCommand" ):
                listener.enterOverlayCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlayCommand" ):
                listener.exitOverlayCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlayCommand" ):
                return visitor.visitOverlayCommand(self)
            else:
                return visitor.visitChildren(self)




    def overlayCommand(self):

        localctx = OGLParser.OverlayCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_overlayCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(OGLParser.OVERLAY)
            self.state = 728
            self.overlayName()
            self.state = 729
            self.match(OGLParser.SIZE)
            self.state = 730
            self.overlayWidth()
            self.state = 731
            self.overlayHeight()
            self.state = 732
            self.match(OGLParser.OFFSET)
            self.state = 733
            self.overlayHorizonalCoordinate()
            self.state = 734
            self.overlayVerticalCoordinate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverlayNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_overlayName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlayName" ):
                listener.enterOverlayName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlayName" ):
                listener.exitOverlayName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlayName" ):
                return visitor.visitOverlayName(self)
            else:
                return visitor.visitChildren(self)




    def overlayName(self):

        localctx = OGLParser.OverlayNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_overlayName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverlayWidthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_overlayWidth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlayWidth" ):
                listener.enterOverlayWidth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlayWidth" ):
                listener.exitOverlayWidth(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlayWidth" ):
                return visitor.visitOverlayWidth(self)
            else:
                return visitor.visitChildren(self)




    def overlayWidth(self):

        localctx = OGLParser.OverlayWidthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_overlayWidth)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverlayHeightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_overlayHeight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlayHeight" ):
                listener.enterOverlayHeight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlayHeight" ):
                listener.exitOverlayHeight(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlayHeight" ):
                return visitor.visitOverlayHeight(self)
            else:
                return visitor.visitChildren(self)




    def overlayHeight(self):

        localctx = OGLParser.OverlayHeightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_overlayHeight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverlayHorizonalCoordinateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_overlayHorizonalCoordinate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlayHorizonalCoordinate" ):
                listener.enterOverlayHorizonalCoordinate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlayHorizonalCoordinate" ):
                listener.exitOverlayHorizonalCoordinate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlayHorizonalCoordinate" ):
                return visitor.visitOverlayHorizonalCoordinate(self)
            else:
                return visitor.visitChildren(self)




    def overlayHorizonalCoordinate(self):

        localctx = OGLParser.OverlayHorizonalCoordinateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_overlayHorizonalCoordinate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverlayVerticalCoordinateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_overlayVerticalCoordinate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlayVerticalCoordinate" ):
                listener.enterOverlayVerticalCoordinate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlayVerticalCoordinate" ):
                listener.exitOverlayVerticalCoordinate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlayVerticalCoordinate" ):
                return visitor.visitOverlayVerticalCoordinate(self)
            else:
                return visitor.visitChildren(self)




    def overlayVerticalCoordinate(self):

        localctx = OGLParser.OverlayVerticalCoordinateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_overlayVerticalCoordinate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrientCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORIENT(self):
            return self.getToken(OGLParser.ORIENT, 0)

        def orientRotatedDegree(self):
            return self.getTypedRuleContext(OGLParser.OrientRotatedDegreeContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_orientCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientCommand" ):
                listener.enterOrientCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientCommand" ):
                listener.exitOrientCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrientCommand" ):
                return visitor.visitOrientCommand(self)
            else:
                return visitor.visitChildren(self)




    def orientCommand(self):

        localctx = OGLParser.OrientCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_orientCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(OGLParser.ORIENT)
            self.state = 747
            self.orientRotatedDegree()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrientRotatedDegreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_orientRotatedDegree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientRotatedDegree" ):
                listener.enterOrientRotatedDegree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientRotatedDegree" ):
                listener.exitOrientRotatedDegree(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrientRotatedDegree" ):
                return visitor.visitOrientRotatedDegree(self)
            else:
                return visitor.visitChildren(self)




    def orientRotatedDegree(self):

        localctx = OGLParser.OrientRotatedDegreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_orientRotatedDegree)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(OGLParser.INTEGERLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fontCommandMVS(self):
            return self.getTypedRuleContext(OGLParser.FontCommandMVSContext,0)


        def fontCommandVM(self):
            return self.getTypedRuleContext(OGLParser.FontCommandVMContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontCommand" ):
                listener.enterFontCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontCommand" ):
                listener.exitFontCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontCommand" ):
                return visitor.visitFontCommand(self)
            else:
                return visitor.visitChildren(self)




    def fontCommand(self):

        localctx = OGLParser.FontCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_fontCommand)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.fontCommandMVS()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.fontCommandVM()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontCommandMVSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FONT(self):
            return self.getToken(OGLParser.FONT, 0)

        def fontWithMemID(self):
            return self.getTypedRuleContext(OGLParser.FontWithMemIDContext,0)


        def fontWithCharSet(self):
            return self.getTypedRuleContext(OGLParser.FontWithCharSetContext,0)


        def fontDDName(self):
            return self.getTypedRuleContext(OGLParser.FontDDNameContext,0)


        def fontHeight(self):
            return self.getTypedRuleContext(OGLParser.FontHeightContext,0)


        def fontScale(self):
            return self.getTypedRuleContext(OGLParser.FontScaleContext,0)


        def fontColor(self):
            return self.getTypedRuleContext(OGLParser.FontColorContext,0)


        def fontUColor(self):
            return self.getTypedRuleContext(OGLParser.FontUColorContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontCommandMVS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontCommandMVS" ):
                listener.enterFontCommandMVS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontCommandMVS" ):
                listener.exitFontCommandMVS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontCommandMVS" ):
                return visitor.visitFontCommandMVS(self)
            else:
                return visitor.visitChildren(self)




    def fontCommandMVS(self):

        localctx = OGLParser.FontCommandMVSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_fontCommandMVS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(OGLParser.FONT)
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 756
                self.fontWithMemID()
                pass

            elif la_ == 2:
                self.state = 757
                self.fontWithCharSet()
                pass


            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 760
                self.fontDDName()


            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 763
                self.fontHeight()


            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 766
                self.fontScale()


            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 769
                self.fontColor()


            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 772
                self.fontUColor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontCommandVMContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FONT(self):
            return self.getToken(OGLParser.FONT, 0)

        def fontWithMemID(self):
            return self.getTypedRuleContext(OGLParser.FontWithMemIDContext,0)


        def fontWithCharSet(self):
            return self.getTypedRuleContext(OGLParser.FontWithCharSetContext,0)


        def fontFileType(self):
            return self.getTypedRuleContext(OGLParser.FontFileTypeContext,0)


        def fontHeight(self):
            return self.getTypedRuleContext(OGLParser.FontHeightContext,0)


        def fontScale(self):
            return self.getTypedRuleContext(OGLParser.FontScaleContext,0)


        def fontColor(self):
            return self.getTypedRuleContext(OGLParser.FontColorContext,0)


        def fontUColor(self):
            return self.getTypedRuleContext(OGLParser.FontUColorContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontCommandVM

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontCommandVM" ):
                listener.enterFontCommandVM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontCommandVM" ):
                listener.exitFontCommandVM(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontCommandVM" ):
                return visitor.visitFontCommandVM(self)
            else:
                return visitor.visitChildren(self)




    def fontCommandVM(self):

        localctx = OGLParser.FontCommandVMContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_fontCommandVM)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(OGLParser.FONT)
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 776
                self.fontWithMemID()
                pass

            elif la_ == 2:
                self.state = 777
                self.fontWithCharSet()
                pass


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 780
                self.fontFileType()


            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 783
                self.fontHeight()


            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 786
                self.fontScale()


            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 789
                self.fontColor()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 792
                self.fontUColor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontFileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILETYPE(self):
            return self.getToken(OGLParser.FILETYPE, 0)

        def fileTypeName(self):
            return self.getTypedRuleContext(OGLParser.FileTypeNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontFileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontFileType" ):
                listener.enterFontFileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontFileType" ):
                listener.exitFontFileType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontFileType" ):
                return visitor.visitFontFileType(self)
            else:
                return visitor.visitChildren(self)




    def fontFileType(self):

        localctx = OGLParser.FontFileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_fontFileType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(OGLParser.FILETYPE)
            self.state = 796
            self.fileTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FONT38PP(self):
            return self.getToken(OGLParser.FONT38PP, 0)

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def PSEG38PP(self):
            return self.getToken(OGLParser.PSEG38PP, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_fileTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileTypeName" ):
                listener.enterFileTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileTypeName" ):
                listener.exitFileTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileTypeName" ):
                return visitor.visitFileTypeName(self)
            else:
                return visitor.visitChildren(self)




    def fileTypeName(self):

        localctx = OGLParser.FileTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_fileTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            _la = self._input.LA(1)
            if not(_la==39 or _la==76 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontWithMemIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memId(self):
            return self.getTypedRuleContext(OGLParser.MemIdContext,0)


        def fontName(self):
            return self.getTypedRuleContext(OGLParser.FontNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontWithMemID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontWithMemID" ):
                listener.enterFontWithMemID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontWithMemID" ):
                listener.exitFontWithMemID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontWithMemID" ):
                return visitor.visitFontWithMemID(self)
            else:
                return visitor.visitChildren(self)




    def fontWithMemID(self):

        localctx = OGLParser.FontWithMemIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_fontWithMemID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 800
                self.fontName()


            self.state = 803
            self.memId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontWithCharSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fontName(self):
            return self.getTypedRuleContext(OGLParser.FontNameContext,0)


        def CHARSET(self):
            return self.getToken(OGLParser.CHARSET, 0)

        def charSetName(self):
            return self.getTypedRuleContext(OGLParser.CharSetNameContext,0)


        def CODEPAGE(self):
            return self.getToken(OGLParser.CODEPAGE, 0)

        def codePageName(self):
            return self.getTypedRuleContext(OGLParser.CodePageNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontWithCharSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontWithCharSet" ):
                listener.enterFontWithCharSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontWithCharSet" ):
                listener.exitFontWithCharSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontWithCharSet" ):
                return visitor.visitFontWithCharSet(self)
            else:
                return visitor.visitChildren(self)




    def fontWithCharSet(self):

        localctx = OGLParser.FontWithCharSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_fontWithCharSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.fontName()
            self.state = 806
            self.match(OGLParser.CHARSET)
            self.state = 807
            self.charSetName()
            self.state = 808
            self.match(OGLParser.CODEPAGE)
            self.state = 809
            self.codePageName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontDDNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DDNAME(self):
            return self.getToken(OGLParser.DDNAME, 0)

        def ddNameName(self):
            return self.getTypedRuleContext(OGLParser.DdNameNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontDDName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontDDName" ):
                listener.enterFontDDName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontDDName" ):
                listener.exitFontDDName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontDDName" ):
                return visitor.visitFontDDName(self)
            else:
                return visitor.visitChildren(self)




    def fontDDName(self):

        localctx = OGLParser.FontDDNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_fontDDName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(OGLParser.DDNAME)
            self.state = 812
            self.ddNameName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdNameNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def FONTDD(self):
            return self.getToken(OGLParser.FONTDD, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_ddNameName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdNameName" ):
                listener.enterDdNameName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdNameName" ):
                listener.exitDdNameName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdNameName" ):
                return visitor.visitDdNameName(self)
            else:
                return visitor.visitChildren(self)




    def ddNameName(self):

        localctx = OGLParser.DdNameNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_ddNameName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            _la = self._input.LA(1)
            if not(_la==40 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontHeightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEIGHT(self):
            return self.getToken(OGLParser.HEIGHT, 0)

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontHeight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontHeight" ):
                listener.enterFontHeight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontHeight" ):
                listener.exitFontHeight(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontHeight" ):
                return visitor.visitFontHeight(self)
            else:
                return visitor.visitChildren(self)




    def fontHeight(self):

        localctx = OGLParser.FontHeightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_fontHeight)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(OGLParser.HEIGHT)
            self.state = 817
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCALE(self):
            return self.getToken(OGLParser.SCALE, 0)

        def oglMeasurement(self):
            return self.getTypedRuleContext(OGLParser.OglMeasurementContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontScale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontScale" ):
                listener.enterFontScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontScale" ):
                listener.exitFontScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontScale" ):
                return visitor.visitFontScale(self)
            else:
                return visitor.visitChildren(self)




    def fontScale(self):

        localctx = OGLParser.FontScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_fontScale)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(OGLParser.SCALE)
            self.state = 820
            self.oglMeasurement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontColorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLOR(self):
            return self.getToken(OGLParser.COLOR, 0)

        def fontColorName(self):
            return self.getTypedRuleContext(OGLParser.FontColorNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontColor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontColor" ):
                listener.enterFontColor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontColor" ):
                listener.exitFontColor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontColor" ):
                return visitor.visitFontColor(self)
            else:
                return visitor.visitChildren(self)




    def fontColor(self):

        localctx = OGLParser.FontColorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_fontColor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(OGLParser.COLOR)
            self.state = 823
            self.fontColorName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontUColorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UCOLOR(self):
            return self.getToken(OGLParser.UCOLOR, 0)

        def fontColorName(self):
            return self.getTypedRuleContext(OGLParser.FontColorNameContext,0)


        def getRuleIndex(self):
            return OGLParser.RULE_fontUColor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontUColor" ):
                listener.enterFontUColor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontUColor" ):
                listener.exitFontUColor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontUColor" ):
                return visitor.visitFontUColor(self)
            else:
                return visitor.visitChildren(self)




    def fontUColor(self):

        localctx = OGLParser.FontUColorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_fontUColor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(OGLParser.UCOLOR)
            self.state = 826
            self.fontColorName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontColorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_fontColorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontColorName" ):
                listener.enterFontColorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontColorName" ):
                listener.exitFontColorName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontColorName" ):
                return visitor.visitFontColorName(self)
            else:
                return visitor.visitChildren(self)




    def fontColorName(self):

        localctx = OGLParser.FontColorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_fontColorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FontNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_fontName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFontName" ):
                listener.enterFontName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFontName" ):
                listener.exitFontName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFontName" ):
                return visitor.visitFontName(self)
            else:
                return visitor.visitChildren(self)




    def fontName(self):

        localctx = OGLParser.FontNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_fontName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_memId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemId" ):
                listener.enterMemId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemId" ):
                listener.exitMemId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemId" ):
                return visitor.visitMemId(self)
            else:
                return visitor.visitChildren(self)




    def memId(self):

        localctx = OGLParser.MemIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_memId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharSetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_charSetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharSetName" ):
                listener.enterCharSetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharSetName" ):
                listener.exitCharSetName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharSetName" ):
                return visitor.visitCharSetName(self)
            else:
                return visitor.visitChildren(self)




    def charSetName(self):

        localctx = OGLParser.CharSetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_charSetName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodePageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_codePageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodePageName" ):
                listener.enterCodePageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodePageName" ):
                listener.exitCodePageName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodePageName" ):
                return visitor.visitCodePageName(self)
            else:
                return visitor.visitChildren(self)




    def codePageName(self):

        localctx = OGLParser.CodePageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_codePageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefineGroupCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(OGLParser.DEFINE, 0)

        def groupName(self):
            return self.getTypedRuleContext(OGLParser.GroupNameContext,0)


        def GROUP(self):
            return self.getToken(OGLParser.GROUP, 0)

        def ENDDEF(self):
            return self.getToken(OGLParser.ENDDEF, 0)

        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OGLParser.CommandContext)
            else:
                return self.getTypedRuleContext(OGLParser.CommandContext,i)


        def getRuleIndex(self):
            return OGLParser.RULE_defineGroupCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefineGroupCommand" ):
                listener.enterDefineGroupCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefineGroupCommand" ):
                listener.exitDefineGroupCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefineGroupCommand" ):
                return visitor.visitDefineGroupCommand(self)
            else:
                return visitor.visitChildren(self)




    def defineGroupCommand(self):

        localctx = OGLParser.DefineGroupCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_defineGroupCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(OGLParser.DEFINE)
            self.state = 839
            self.groupName()
            self.state = 840
            self.match(OGLParser.GROUP)
            self.state = 842 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 841
                self.command()
                self.state = 844 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 281456672768) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 917587) != 0)):
                    break

            self.state = 846
            self.match(OGLParser.ENDDEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(OGLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_groupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupName" ):
                listener.enterGroupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupName" ):
                listener.exitGroupName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupName" ):
                return visitor.visitGroupName(self)
            else:
                return visitor.visitChildren(self)




    def groupName(self):

        localctx = OGLParser.GroupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_groupName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(OGLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OglMeasurementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(OGLParser.INTEGERLITERAL, 0)

        def PELS(self):
            return self.getToken(OGLParser.PELS, 0)

        def IN(self):
            return self.getToken(OGLParser.IN, 0)

        def MM(self):
            return self.getToken(OGLParser.MM, 0)

        def CPI(self):
            return self.getToken(OGLParser.CPI, 0)

        def LPI(self):
            return self.getToken(OGLParser.LPI, 0)

        def POINTS(self):
            return self.getToken(OGLParser.POINTS, 0)

        def getRuleIndex(self):
            return OGLParser.RULE_oglMeasurement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOglMeasurement" ):
                listener.enterOglMeasurement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOglMeasurement" ):
                listener.exitOglMeasurement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOglMeasurement" ):
                return visitor.visitOglMeasurement(self)
            else:
                return visitor.visitChildren(self)




    def oglMeasurement(self):

        localctx = OGLParser.OglMeasurementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oglMeasurement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(OGLParser.INTEGERLITERAL)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 1407385625165825) != 0):
                self.state = 851
                _la = self._input.LA(1)
                if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 1407385625165825) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





