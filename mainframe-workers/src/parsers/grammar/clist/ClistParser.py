# Generated from grammar/clist/Clist.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,139,1447,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,1,0,1,0,1,1,1,1,1,1,5,1,384,8,1,10,
        1,12,1,387,9,1,1,1,1,1,5,1,391,8,1,10,1,12,1,394,9,1,1,1,1,1,3,1,
        398,8,1,1,2,1,2,1,2,1,2,3,2,404,8,2,1,3,1,3,1,3,3,3,409,8,3,1,3,
        3,3,412,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,3,6,423,8,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,468,8,7,1,8,1,8,5,8,
        472,8,8,10,8,12,8,475,9,8,1,9,1,9,1,10,1,10,1,10,5,10,482,8,10,10,
        10,12,10,485,9,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,5,13,494,8,
        13,10,13,12,13,497,9,13,1,14,1,14,1,15,1,15,5,15,503,8,15,10,15,
        12,15,506,9,15,1,16,1,16,3,16,510,8,16,1,17,1,17,5,17,514,8,17,10,
        17,12,17,517,9,17,1,18,1,18,5,18,521,8,18,10,18,12,18,524,9,18,1,
        18,5,18,527,8,18,10,18,12,18,530,9,18,1,19,1,19,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,3,23,546,8,23,1,24,1,
        24,1,24,4,24,551,8,24,11,24,12,24,552,1,24,3,24,556,8,24,1,24,1,
        24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,
        28,5,28,573,8,28,10,28,12,28,576,9,28,1,29,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,5,30,586,8,30,10,30,12,30,589,9,30,1,30,1,30,1,31,1,
        31,1,32,1,32,1,32,1,33,1,33,5,33,600,8,33,10,33,12,33,603,9,33,1,
        34,1,34,1,35,1,35,4,35,609,8,35,11,35,12,35,610,1,35,5,35,614,8,
        35,10,35,12,35,617,9,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,
        1,38,1,39,1,39,1,39,3,39,631,8,39,1,40,1,40,4,40,635,8,40,11,40,
        12,40,636,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,657,8,41,1,42,1,42,3,42,
        661,8,42,1,43,1,43,1,44,1,44,5,44,667,8,44,10,44,12,44,670,9,44,
        1,45,1,45,1,46,1,46,5,46,676,8,46,10,46,12,46,679,9,46,1,47,1,47,
        1,48,1,48,1,48,1,49,1,49,1,50,1,50,5,50,690,8,50,10,50,12,50,693,
        9,50,1,51,1,51,1,52,1,52,1,52,5,52,700,8,52,10,52,12,52,703,9,52,
        1,53,1,53,1,54,1,54,1,54,5,54,710,8,54,10,54,12,54,713,9,54,1,55,
        1,55,1,56,1,56,1,56,3,56,720,8,56,1,56,5,56,723,8,56,10,56,12,56,
        726,9,56,1,57,1,57,1,57,1,58,1,58,1,58,3,58,734,8,58,1,58,1,58,3,
        58,738,8,58,1,58,5,58,741,8,58,10,58,12,58,744,9,58,1,59,1,59,1,
        59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,
        62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,3,65,773,
        8,65,1,66,1,66,1,66,1,66,3,66,779,8,66,1,66,5,66,782,8,66,10,66,
        12,66,785,9,66,1,67,1,67,1,68,1,68,1,68,1,68,3,68,793,8,68,1,68,
        5,68,796,8,68,10,68,12,68,799,9,68,1,69,1,69,1,70,1,70,1,70,5,70,
        806,8,70,10,70,12,70,809,9,70,1,71,1,71,1,72,1,72,1,73,1,73,3,73,
        817,8,73,1,73,3,73,820,8,73,1,73,3,73,823,8,73,1,74,1,74,1,74,1,
        74,1,74,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,77,1,77,3,77,839,8,
        77,1,78,1,78,1,79,1,79,1,79,5,79,846,8,79,10,79,12,79,849,9,79,1,
        80,1,80,1,80,5,80,854,8,80,10,80,12,80,857,9,80,1,81,1,81,1,81,4,
        81,862,8,81,11,81,12,81,863,1,81,1,81,1,81,1,81,1,81,1,81,5,81,872,
        8,81,10,81,12,81,875,9,81,3,81,877,8,81,1,82,1,82,1,83,1,83,1,84,
        1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,893,8,85,1,86,
        1,86,1,86,1,86,1,86,4,86,900,8,86,11,86,12,86,901,1,87,1,87,1,88,
        1,88,1,88,1,88,1,88,1,88,5,88,912,8,88,10,88,12,88,915,9,88,1,89,
        1,89,1,89,1,89,1,89,1,89,5,89,923,8,89,10,89,12,89,926,9,89,1,90,
        1,90,1,90,1,90,1,90,3,90,933,8,90,1,91,1,91,1,91,1,92,1,92,1,92,
        1,93,1,93,1,93,3,93,944,8,93,1,94,1,94,1,95,1,95,1,95,3,95,951,8,
        95,1,95,5,95,954,8,95,10,95,12,95,957,9,95,1,96,1,96,1,97,1,97,1,
        98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,3,99,973,8,99,1,
        100,1,100,5,100,977,8,100,10,100,12,100,980,9,100,1,101,1,101,1,
        101,3,101,985,8,101,1,102,1,102,1,102,1,102,1,102,3,102,992,8,102,
        1,103,1,103,1,104,1,104,1,104,5,104,999,8,104,10,104,12,104,1002,
        9,104,1,104,4,104,1005,8,104,11,104,12,104,1006,3,104,1009,8,104,
        1,105,1,105,1,105,1,105,1,105,1,105,3,105,1017,8,105,1,106,1,106,
        1,106,1,106,1,106,4,106,1024,8,106,11,106,12,106,1025,1,107,1,107,
        1,107,4,107,1031,8,107,11,107,12,107,1032,1,107,1,107,1,108,1,108,
        1,108,4,108,1040,8,108,11,108,12,108,1041,1,108,1,108,1,109,3,109,
        1047,8,109,1,109,1,109,1,110,1,110,1,110,5,110,1054,8,110,10,110,
        12,110,1057,9,110,1,110,1,110,1,110,5,110,1062,8,110,10,110,12,110,
        1065,9,110,3,110,1067,8,110,1,110,1,110,1,111,1,111,1,111,4,111,
        1074,8,111,11,111,12,111,1075,1,111,1,111,1,112,1,112,1,112,1,112,
        1,112,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
        1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,117,
        1,117,1,117,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,
        1,121,1,122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,125,1,125,
        1,125,1,125,1,125,1,125,4,125,1132,8,125,11,125,12,125,1133,1,125,
        3,125,1137,8,125,1,126,1,126,1,126,1,127,1,127,1,127,1,127,3,127,
        1146,8,127,1,127,3,127,1149,8,127,1,128,1,128,1,129,1,129,1,129,
        1,130,1,130,3,130,1158,8,130,1,131,1,131,3,131,1162,8,131,1,132,
        1,132,1,133,1,133,5,133,1168,8,133,10,133,12,133,1171,9,133,1,134,
        1,134,1,134,3,134,1176,8,134,1,135,3,135,1179,8,135,1,135,1,135,
        1,136,1,136,1,136,1,136,1,136,3,136,1188,8,136,1,137,1,137,1,138,
        1,138,1,138,3,138,1195,8,138,1,138,1,138,3,138,1199,8,138,1,139,
        1,139,1,140,1,140,1,141,1,141,1,141,1,142,1,142,5,142,1210,8,142,
        10,142,12,142,1213,9,142,1,143,1,143,1,144,1,144,1,144,3,144,1220,
        8,144,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,146,5,146,
        1231,8,146,10,146,12,146,1234,9,146,1,147,1,147,1,148,1,148,1,148,
        1,149,1,149,1,149,1,149,5,149,1245,8,149,10,149,12,149,1248,9,149,
        1,150,1,150,1,151,1,151,1,152,1,152,1,153,1,153,1,153,1,154,1,154,
        1,155,1,155,1,155,5,155,1264,8,155,10,155,12,155,1267,9,155,1,156,
        1,156,3,156,1271,8,156,1,157,1,157,1,157,1,157,5,157,1277,8,157,
        10,157,12,157,1280,9,157,1,158,1,158,1,159,1,159,1,159,1,159,1,159,
        1,160,1,160,1,161,1,161,1,161,1,161,1,161,1,162,1,162,1,163,1,163,
        5,163,1300,8,163,10,163,12,163,1303,9,163,1,164,1,164,1,164,1,164,
        3,164,1309,8,164,1,165,1,165,4,165,1313,8,165,11,165,12,165,1314,
        1,166,1,166,1,166,1,167,1,167,1,168,1,168,1,169,1,169,1,169,3,169,
        1327,8,169,1,170,1,170,5,170,1331,8,170,10,170,12,170,1334,9,170,
        1,171,1,171,1,171,1,171,1,171,1,171,3,171,1342,8,171,3,171,1344,
        8,171,1,172,1,172,1,172,5,172,1349,8,172,10,172,12,172,1352,9,172,
        1,172,3,172,1355,8,172,1,172,1,172,1,172,3,172,1360,8,172,1,173,
        1,173,1,174,1,174,1,174,1,174,3,174,1368,8,174,1,175,1,175,1,175,
        5,175,1373,8,175,10,175,12,175,1376,9,175,1,175,1,175,1,176,1,176,
        1,176,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,179,1,179,
        1,179,1,179,1,179,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,181,
        1,181,1,182,1,182,1,183,1,183,3,183,1409,8,183,1,184,1,184,3,184,
        1413,8,184,1,185,1,185,1,185,1,185,1,185,1,185,1,186,1,186,1,186,
        3,186,1424,8,186,5,186,1426,8,186,10,186,12,186,1429,9,186,1,186,
        1,186,3,186,1433,8,186,1,187,1,187,1,187,1,187,3,187,1439,8,187,
        1,187,3,187,1442,8,187,1,188,1,188,1,188,1,188,1,1232,2,176,178,
        189,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
        252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
        284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
        316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
        348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,0,20,
        2,0,69,69,75,75,1,0,103,104,2,0,75,75,100,100,2,0,107,107,114,114,
        2,0,45,45,58,68,2,0,12,12,15,15,2,0,16,16,19,19,2,0,3,3,139,139,
        1,0,29,30,4,0,40,41,85,85,105,105,137,137,2,0,28,28,134,135,10,0,
        27,28,33,33,37,37,49,50,94,94,100,100,102,102,112,112,125,125,137,
        137,3,0,18,18,116,116,118,118,3,0,13,14,23,23,106,106,2,0,47,47,
        139,139,1,0,98,99,2,0,119,119,130,130,1,0,131,132,2,0,115,115,139,
        139,2,0,75,75,139,139,1468,0,378,1,0,0,0,2,380,1,0,0,0,4,399,1,0,
        0,0,6,405,1,0,0,0,8,413,1,0,0,0,10,417,1,0,0,0,12,422,1,0,0,0,14,
        467,1,0,0,0,16,469,1,0,0,0,18,476,1,0,0,0,20,478,1,0,0,0,22,486,
        1,0,0,0,24,488,1,0,0,0,26,490,1,0,0,0,28,498,1,0,0,0,30,500,1,0,
        0,0,32,509,1,0,0,0,34,511,1,0,0,0,36,518,1,0,0,0,38,531,1,0,0,0,
        40,533,1,0,0,0,42,538,1,0,0,0,44,540,1,0,0,0,46,542,1,0,0,0,48,547,
        1,0,0,0,50,559,1,0,0,0,52,562,1,0,0,0,54,566,1,0,0,0,56,570,1,0,
        0,0,58,577,1,0,0,0,60,580,1,0,0,0,62,592,1,0,0,0,64,594,1,0,0,0,
        66,597,1,0,0,0,68,604,1,0,0,0,70,606,1,0,0,0,72,618,1,0,0,0,74,620,
        1,0,0,0,76,623,1,0,0,0,78,627,1,0,0,0,80,632,1,0,0,0,82,638,1,0,
        0,0,84,658,1,0,0,0,86,662,1,0,0,0,88,664,1,0,0,0,90,671,1,0,0,0,
        92,673,1,0,0,0,94,680,1,0,0,0,96,682,1,0,0,0,98,685,1,0,0,0,100,
        687,1,0,0,0,102,694,1,0,0,0,104,696,1,0,0,0,106,704,1,0,0,0,108,
        706,1,0,0,0,110,714,1,0,0,0,112,716,1,0,0,0,114,727,1,0,0,0,116,
        730,1,0,0,0,118,745,1,0,0,0,120,750,1,0,0,0,122,755,1,0,0,0,124,
        757,1,0,0,0,126,762,1,0,0,0,128,767,1,0,0,0,130,769,1,0,0,0,132,
        774,1,0,0,0,134,786,1,0,0,0,136,788,1,0,0,0,138,800,1,0,0,0,140,
        802,1,0,0,0,142,810,1,0,0,0,144,812,1,0,0,0,146,814,1,0,0,0,148,
        824,1,0,0,0,150,829,1,0,0,0,152,834,1,0,0,0,154,836,1,0,0,0,156,
        840,1,0,0,0,158,842,1,0,0,0,160,850,1,0,0,0,162,876,1,0,0,0,164,
        878,1,0,0,0,166,880,1,0,0,0,168,882,1,0,0,0,170,892,1,0,0,0,172,
        899,1,0,0,0,174,903,1,0,0,0,176,905,1,0,0,0,178,916,1,0,0,0,180,
        932,1,0,0,0,182,934,1,0,0,0,184,937,1,0,0,0,186,940,1,0,0,0,188,
        945,1,0,0,0,190,947,1,0,0,0,192,958,1,0,0,0,194,960,1,0,0,0,196,
        962,1,0,0,0,198,967,1,0,0,0,200,974,1,0,0,0,202,984,1,0,0,0,204,
        986,1,0,0,0,206,993,1,0,0,0,208,1008,1,0,0,0,210,1016,1,0,0,0,212,
        1018,1,0,0,0,214,1027,1,0,0,0,216,1036,1,0,0,0,218,1046,1,0,0,0,
        220,1050,1,0,0,0,222,1070,1,0,0,0,224,1079,1,0,0,0,226,1084,1,0,
        0,0,228,1089,1,0,0,0,230,1094,1,0,0,0,232,1099,1,0,0,0,234,1104,
        1,0,0,0,236,1109,1,0,0,0,238,1111,1,0,0,0,240,1113,1,0,0,0,242,1115,
        1,0,0,0,244,1117,1,0,0,0,246,1119,1,0,0,0,248,1121,1,0,0,0,250,1123,
        1,0,0,0,252,1138,1,0,0,0,254,1141,1,0,0,0,256,1150,1,0,0,0,258,1152,
        1,0,0,0,260,1155,1,0,0,0,262,1161,1,0,0,0,264,1163,1,0,0,0,266,1165,
        1,0,0,0,268,1172,1,0,0,0,270,1178,1,0,0,0,272,1187,1,0,0,0,274,1189,
        1,0,0,0,276,1194,1,0,0,0,278,1200,1,0,0,0,280,1202,1,0,0,0,282,1204,
        1,0,0,0,284,1207,1,0,0,0,286,1214,1,0,0,0,288,1216,1,0,0,0,290,1221,
        1,0,0,0,292,1232,1,0,0,0,294,1235,1,0,0,0,296,1237,1,0,0,0,298,1240,
        1,0,0,0,300,1249,1,0,0,0,302,1251,1,0,0,0,304,1253,1,0,0,0,306,1255,
        1,0,0,0,308,1258,1,0,0,0,310,1260,1,0,0,0,312,1270,1,0,0,0,314,1272,
        1,0,0,0,316,1281,1,0,0,0,318,1283,1,0,0,0,320,1288,1,0,0,0,322,1290,
        1,0,0,0,324,1295,1,0,0,0,326,1297,1,0,0,0,328,1308,1,0,0,0,330,1312,
        1,0,0,0,332,1316,1,0,0,0,334,1319,1,0,0,0,336,1321,1,0,0,0,338,1323,
        1,0,0,0,340,1328,1,0,0,0,342,1343,1,0,0,0,344,1345,1,0,0,0,346,1361,
        1,0,0,0,348,1367,1,0,0,0,350,1369,1,0,0,0,352,1379,1,0,0,0,354,1382,
        1,0,0,0,356,1384,1,0,0,0,358,1390,1,0,0,0,360,1398,1,0,0,0,362,1402,
        1,0,0,0,364,1404,1,0,0,0,366,1408,1,0,0,0,368,1412,1,0,0,0,370,1414,
        1,0,0,0,372,1432,1,0,0,0,374,1441,1,0,0,0,376,1443,1,0,0,0,378,379,
        3,2,1,0,379,1,1,0,0,0,380,381,5,73,0,0,381,385,5,138,0,0,382,384,
        3,6,3,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,
        1,0,0,0,386,392,1,0,0,0,387,385,1,0,0,0,388,391,3,14,7,0,389,391,
        3,8,4,0,390,388,1,0,0,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,
        1,0,0,0,392,393,1,0,0,0,393,397,1,0,0,0,394,392,1,0,0,0,395,398,
        3,4,2,0,396,398,7,0,0,0,397,395,1,0,0,0,397,396,1,0,0,0,397,398,
        1,0,0,0,398,3,1,0,0,0,399,400,3,12,6,0,400,403,5,11,0,0,401,404,
        5,75,0,0,402,404,3,284,142,0,403,401,1,0,0,0,403,402,1,0,0,0,404,
        5,1,0,0,0,405,411,5,139,0,0,406,408,5,9,0,0,407,409,5,139,0,0,408,
        407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,5,10,0,0,411,
        406,1,0,0,0,411,412,1,0,0,0,412,7,1,0,0,0,413,414,3,12,6,0,414,415,
        5,11,0,0,415,416,3,14,7,0,416,9,1,0,0,0,417,418,5,21,0,0,418,419,
        5,139,0,0,419,11,1,0,0,0,420,423,3,264,132,0,421,423,5,139,0,0,422,
        420,1,0,0,0,422,421,1,0,0,0,423,13,1,0,0,0,424,468,3,340,170,0,425,
        468,3,338,169,0,426,468,3,344,172,0,427,468,3,336,168,0,428,468,
        3,334,167,0,429,468,3,326,163,0,430,468,3,314,157,0,431,468,3,310,
        155,0,432,468,3,306,153,0,433,468,3,298,149,0,434,468,3,296,148,
        0,435,468,3,288,144,0,436,468,3,284,142,0,437,468,3,282,141,0,438,
        468,3,254,127,0,439,468,3,252,126,0,440,468,3,212,106,0,441,468,
        3,200,100,0,442,468,3,198,99,0,443,468,3,196,98,0,444,468,3,190,
        95,0,445,468,3,186,93,0,446,468,3,184,92,0,447,468,3,182,91,0,448,
        468,3,76,38,0,449,468,3,82,41,0,450,468,3,80,40,0,451,468,3,74,37,
        0,452,468,3,70,35,0,453,468,3,66,33,0,454,468,3,64,32,0,455,468,
        3,62,31,0,456,468,3,60,30,0,457,468,3,58,29,0,458,468,3,56,28,0,
        459,468,3,48,24,0,460,468,3,46,23,0,461,468,3,36,18,0,462,468,3,
        34,17,0,463,468,3,30,15,0,464,468,3,26,13,0,465,468,3,20,10,0,466,
        468,3,16,8,0,467,424,1,0,0,0,467,425,1,0,0,0,467,426,1,0,0,0,467,
        427,1,0,0,0,467,428,1,0,0,0,467,429,1,0,0,0,467,430,1,0,0,0,467,
        431,1,0,0,0,467,432,1,0,0,0,467,433,1,0,0,0,467,434,1,0,0,0,467,
        435,1,0,0,0,467,436,1,0,0,0,467,437,1,0,0,0,467,438,1,0,0,0,467,
        439,1,0,0,0,467,440,1,0,0,0,467,441,1,0,0,0,467,442,1,0,0,0,467,
        443,1,0,0,0,467,444,1,0,0,0,467,445,1,0,0,0,467,446,1,0,0,0,467,
        447,1,0,0,0,467,448,1,0,0,0,467,449,1,0,0,0,467,450,1,0,0,0,467,
        451,1,0,0,0,467,452,1,0,0,0,467,453,1,0,0,0,467,454,1,0,0,0,467,
        455,1,0,0,0,467,456,1,0,0,0,467,457,1,0,0,0,467,458,1,0,0,0,467,
        459,1,0,0,0,467,460,1,0,0,0,467,461,1,0,0,0,467,462,1,0,0,0,467,
        463,1,0,0,0,467,464,1,0,0,0,467,465,1,0,0,0,467,466,1,0,0,0,468,
        15,1,0,0,0,469,473,5,77,0,0,470,472,3,18,9,0,471,470,1,0,0,0,472,
        475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,17,1,0,0,0,475,473,
        1,0,0,0,476,477,3,250,125,0,477,19,1,0,0,0,478,479,5,82,0,0,479,
        483,3,22,11,0,480,482,3,24,12,0,481,480,1,0,0,0,482,485,1,0,0,0,
        483,481,1,0,0,0,483,484,1,0,0,0,484,21,1,0,0,0,485,483,1,0,0,0,486,
        487,3,172,86,0,487,23,1,0,0,0,488,489,3,250,125,0,489,25,1,0,0,0,
        490,491,5,42,0,0,491,495,3,372,186,0,492,494,3,28,14,0,493,492,1,
        0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,27,1,0,
        0,0,497,495,1,0,0,0,498,499,3,250,125,0,499,29,1,0,0,0,500,504,5,
        57,0,0,501,503,3,32,16,0,502,501,1,0,0,0,503,506,1,0,0,0,504,502,
        1,0,0,0,504,505,1,0,0,0,505,31,1,0,0,0,506,504,1,0,0,0,507,510,3,
        250,125,0,508,510,3,220,110,0,509,507,1,0,0,0,509,508,1,0,0,0,510,
        33,1,0,0,0,511,515,5,49,0,0,512,514,3,40,20,0,513,512,1,0,0,0,514,
        517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,35,1,0,0,0,517,515,
        1,0,0,0,518,522,5,50,0,0,519,521,3,40,20,0,520,519,1,0,0,0,521,524,
        1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,528,1,0,0,0,524,522,
        1,0,0,0,525,527,3,38,19,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,
        1,0,0,0,528,529,1,0,0,0,529,37,1,0,0,0,530,528,1,0,0,0,531,532,3,
        250,125,0,532,39,1,0,0,0,533,534,3,42,21,0,534,535,5,9,0,0,535,536,
        3,44,22,0,536,537,5,10,0,0,537,41,1,0,0,0,538,539,3,170,85,0,539,
        43,1,0,0,0,540,541,3,170,85,0,541,45,1,0,0,0,542,545,7,1,0,0,543,
        546,3,372,186,0,544,546,3,222,111,0,545,543,1,0,0,0,545,544,1,0,
        0,0,546,47,1,0,0,0,547,548,5,55,0,0,548,550,3,52,26,0,549,551,3,
        54,27,0,550,549,1,0,0,0,551,552,1,0,0,0,552,550,1,0,0,0,552,553,
        1,0,0,0,553,555,1,0,0,0,554,556,3,50,25,0,555,554,1,0,0,0,555,556,
        1,0,0,0,556,557,1,0,0,0,557,558,7,2,0,0,558,49,1,0,0,0,559,560,5,
        78,0,0,560,561,3,14,7,0,561,51,1,0,0,0,562,563,5,9,0,0,563,564,3,
        328,164,0,564,565,5,10,0,0,565,53,1,0,0,0,566,567,5,76,0,0,567,568,
        3,266,133,0,568,569,3,14,7,0,569,55,1,0,0,0,570,574,5,79,0,0,571,
        573,3,328,164,0,572,571,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,
        574,575,1,0,0,0,575,57,1,0,0,0,576,574,1,0,0,0,577,578,5,91,0,0,
        578,579,3,248,124,0,579,59,1,0,0,0,580,581,5,48,0,0,581,582,5,93,
        0,0,582,587,3,266,133,0,583,586,3,14,7,0,584,586,3,8,4,0,585,583,
        1,0,0,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,
        1,0,0,0,588,590,1,0,0,0,589,587,1,0,0,0,590,591,7,2,0,0,591,61,1,
        0,0,0,592,593,5,95,0,0,593,63,1,0,0,0,594,595,5,94,0,0,595,596,3,
        14,7,0,596,65,1,0,0,0,597,601,5,92,0,0,598,600,3,68,34,0,599,598,
        1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,67,1,
        0,0,0,603,601,1,0,0,0,604,605,3,250,125,0,605,69,1,0,0,0,606,608,
        7,3,0,0,607,609,3,218,109,0,608,607,1,0,0,0,609,610,1,0,0,0,610,
        608,1,0,0,0,610,611,1,0,0,0,611,615,1,0,0,0,612,614,3,72,36,0,613,
        612,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,
        71,1,0,0,0,617,615,1,0,0,0,618,619,3,250,125,0,619,73,1,0,0,0,620,
        621,5,112,0,0,621,622,3,372,186,0,622,75,1,0,0,0,623,624,5,136,0,
        0,624,625,3,328,164,0,625,626,3,78,39,0,626,77,1,0,0,0,627,630,5,
        23,0,0,628,631,3,170,85,0,629,631,3,174,87,0,630,628,1,0,0,0,630,
        629,1,0,0,0,630,631,1,0,0,0,631,79,1,0,0,0,632,634,5,113,0,0,633,
        635,3,328,164,0,634,633,1,0,0,0,635,636,1,0,0,0,636,634,1,0,0,0,
        636,637,1,0,0,0,637,81,1,0,0,0,638,656,5,124,0,0,639,657,3,158,79,
        0,640,657,3,154,77,0,641,657,3,146,73,0,642,657,3,140,70,0,643,657,
        3,132,66,0,644,657,3,136,68,0,645,657,3,130,65,0,646,657,3,160,80,
        0,647,657,3,112,56,0,648,657,3,116,58,0,649,657,3,114,57,0,650,657,
        3,104,52,0,651,657,3,100,50,0,652,657,3,96,48,0,653,657,3,92,46,
        0,654,657,3,88,44,0,655,657,3,84,42,0,656,639,1,0,0,0,656,640,1,
        0,0,0,656,641,1,0,0,0,656,642,1,0,0,0,656,643,1,0,0,0,656,644,1,
        0,0,0,656,645,1,0,0,0,656,646,1,0,0,0,656,647,1,0,0,0,656,648,1,
        0,0,0,656,649,1,0,0,0,656,650,1,0,0,0,656,651,1,0,0,0,656,652,1,
        0,0,0,656,653,1,0,0,0,656,654,1,0,0,0,656,655,1,0,0,0,657,83,1,0,
        0,0,658,660,5,44,0,0,659,661,3,86,43,0,660,659,1,0,0,0,660,661,1,
        0,0,0,661,85,1,0,0,0,662,663,5,139,0,0,663,87,1,0,0,0,664,668,5,
        101,0,0,665,667,3,90,45,0,666,665,1,0,0,0,667,670,1,0,0,0,668,666,
        1,0,0,0,668,669,1,0,0,0,669,89,1,0,0,0,670,668,1,0,0,0,671,672,3,
        250,125,0,672,91,1,0,0,0,673,677,5,125,0,0,674,676,3,94,47,0,675,
        674,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,
        93,1,0,0,0,679,677,1,0,0,0,680,681,3,250,125,0,681,95,1,0,0,0,682,
        683,5,102,0,0,683,684,3,98,49,0,684,97,1,0,0,0,685,686,3,250,125,
        0,686,99,1,0,0,0,687,691,5,43,0,0,688,690,3,102,51,0,689,688,1,0,
        0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,101,1,0,
        0,0,693,691,1,0,0,0,694,695,3,250,125,0,695,103,1,0,0,0,696,697,
        3,106,53,0,697,701,3,108,54,0,698,700,3,110,55,0,699,698,1,0,0,0,
        700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,105,1,0,0,0,
        703,701,1,0,0,0,704,705,7,4,0,0,705,107,1,0,0,0,706,711,3,332,166,
        0,707,708,5,24,0,0,708,710,3,332,166,0,709,707,1,0,0,0,710,713,1,
        0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,109,1,0,0,0,713,711,1,
        0,0,0,714,715,3,250,125,0,715,111,1,0,0,0,716,717,5,70,0,0,717,719,
        3,234,117,0,718,720,3,222,111,0,719,718,1,0,0,0,719,720,1,0,0,0,
        720,724,1,0,0,0,721,723,3,128,64,0,722,721,1,0,0,0,723,726,1,0,0,
        0,724,722,1,0,0,0,724,725,1,0,0,0,725,113,1,0,0,0,726,724,1,0,0,
        0,727,728,5,72,0,0,728,729,3,234,117,0,729,115,1,0,0,0,730,731,5,
        71,0,0,731,733,3,124,62,0,732,734,3,118,59,0,733,732,1,0,0,0,733,
        734,1,0,0,0,734,735,1,0,0,0,735,737,3,126,63,0,736,738,3,120,60,
        0,737,736,1,0,0,0,737,738,1,0,0,0,738,742,1,0,0,0,739,741,3,122,
        61,0,740,739,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,
        0,0,743,117,1,0,0,0,744,742,1,0,0,0,745,746,5,53,0,0,746,747,5,9,
        0,0,747,748,3,192,96,0,748,749,5,10,0,0,749,119,1,0,0,0,750,751,
        5,54,0,0,751,752,5,9,0,0,752,753,3,192,96,0,753,754,5,10,0,0,754,
        121,1,0,0,0,755,756,3,250,125,0,756,123,1,0,0,0,757,758,5,51,0,0,
        758,759,5,9,0,0,759,760,3,170,85,0,760,761,5,10,0,0,761,125,1,0,
        0,0,762,763,5,52,0,0,763,764,5,9,0,0,764,765,3,170,85,0,765,766,
        5,10,0,0,766,127,1,0,0,0,767,768,3,250,125,0,768,129,1,0,0,0,769,
        770,5,129,0,0,770,772,3,192,96,0,771,773,3,228,114,0,772,771,1,0,
        0,0,772,773,1,0,0,0,773,131,1,0,0,0,774,778,5,123,0,0,775,779,3,
        222,111,0,776,779,3,220,110,0,777,779,3,234,117,0,778,775,1,0,0,
        0,778,776,1,0,0,0,778,777,1,0,0,0,778,779,1,0,0,0,779,783,1,0,0,
        0,780,782,3,134,67,0,781,780,1,0,0,0,782,785,1,0,0,0,783,781,1,0,
        0,0,783,784,1,0,0,0,784,133,1,0,0,0,785,783,1,0,0,0,786,787,3,250,
        125,0,787,135,1,0,0,0,788,792,5,56,0,0,789,793,3,222,111,0,790,793,
        3,220,110,0,791,793,3,234,117,0,792,789,1,0,0,0,792,790,1,0,0,0,
        792,791,1,0,0,0,792,793,1,0,0,0,793,797,1,0,0,0,794,796,3,138,69,
        0,795,794,1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,
        0,798,137,1,0,0,0,799,797,1,0,0,0,800,801,3,250,125,0,801,139,1,
        0,0,0,802,803,5,128,0,0,803,807,3,142,71,0,804,806,3,144,72,0,805,
        804,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,
        141,1,0,0,0,809,807,1,0,0,0,810,811,5,139,0,0,811,143,1,0,0,0,812,
        813,5,139,0,0,813,145,1,0,0,0,814,816,5,127,0,0,815,817,3,148,74,
        0,816,815,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,820,3,150,
        75,0,819,818,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,823,3,152,
        76,0,822,821,1,0,0,0,822,823,1,0,0,0,823,147,1,0,0,0,824,825,5,139,
        0,0,825,826,5,9,0,0,826,827,3,192,96,0,827,828,5,10,0,0,828,149,
        1,0,0,0,829,830,5,33,0,0,830,831,5,9,0,0,831,832,5,139,0,0,832,833,
        5,10,0,0,833,151,1,0,0,0,834,835,5,139,0,0,835,153,1,0,0,0,836,838,
        5,126,0,0,837,839,3,156,78,0,838,837,1,0,0,0,838,839,1,0,0,0,839,
        155,1,0,0,0,840,841,5,139,0,0,841,157,1,0,0,0,842,843,5,121,0,0,
        843,847,3,162,81,0,844,846,3,166,83,0,845,844,1,0,0,0,846,849,1,
        0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,159,1,0,0,0,849,847,1,
        0,0,0,850,851,5,122,0,0,851,855,3,162,81,0,852,854,3,168,84,0,853,
        852,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,
        161,1,0,0,0,857,855,1,0,0,0,858,877,5,139,0,0,859,861,5,9,0,0,860,
        862,3,164,82,0,861,860,1,0,0,0,862,863,1,0,0,0,863,861,1,0,0,0,863,
        864,1,0,0,0,864,865,1,0,0,0,865,866,5,10,0,0,866,877,1,0,0,0,867,
        868,5,9,0,0,868,873,3,164,82,0,869,870,5,25,0,0,870,872,3,164,82,
        0,871,869,1,0,0,0,872,875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,
        0,874,877,1,0,0,0,875,873,1,0,0,0,876,858,1,0,0,0,876,859,1,0,0,
        0,876,867,1,0,0,0,877,163,1,0,0,0,878,879,3,170,85,0,879,165,1,0,
        0,0,880,881,3,170,85,0,881,167,1,0,0,0,882,883,3,170,85,0,883,169,
        1,0,0,0,884,893,5,139,0,0,885,893,5,3,0,0,886,893,3,348,174,0,887,
        893,5,138,0,0,888,893,3,328,164,0,889,893,3,172,86,0,890,893,3,372,
        186,0,891,893,3,264,132,0,892,884,1,0,0,0,892,885,1,0,0,0,892,886,
        1,0,0,0,892,887,1,0,0,0,892,888,1,0,0,0,892,889,1,0,0,0,892,890,
        1,0,0,0,892,891,1,0,0,0,893,171,1,0,0,0,894,900,3,328,164,0,895,
        900,3,348,174,0,896,900,5,138,0,0,897,900,5,11,0,0,898,900,5,3,0,
        0,899,894,1,0,0,0,899,895,1,0,0,0,899,896,1,0,0,0,899,897,1,0,0,
        0,899,898,1,0,0,0,900,901,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,
        0,902,173,1,0,0,0,903,904,3,176,88,0,904,175,1,0,0,0,905,906,6,88,
        -1,0,906,907,3,178,89,0,907,913,1,0,0,0,908,909,10,2,0,0,909,910,
        7,5,0,0,910,912,3,178,89,0,911,908,1,0,0,0,912,915,1,0,0,0,913,911,
        1,0,0,0,913,914,1,0,0,0,914,177,1,0,0,0,915,913,1,0,0,0,916,917,
        6,89,-1,0,917,918,3,180,90,0,918,924,1,0,0,0,919,920,10,2,0,0,920,
        921,7,6,0,0,921,923,3,180,90,0,922,919,1,0,0,0,923,926,1,0,0,0,924,
        922,1,0,0,0,924,925,1,0,0,0,925,179,1,0,0,0,926,924,1,0,0,0,927,
        928,5,9,0,0,928,929,3,176,88,0,929,930,5,10,0,0,930,933,1,0,0,0,
        931,933,3,170,85,0,932,927,1,0,0,0,932,931,1,0,0,0,933,181,1,0,0,
        0,934,935,5,36,0,0,935,936,3,248,124,0,936,183,1,0,0,0,937,938,5,
        83,0,0,938,939,3,248,124,0,939,185,1,0,0,0,940,941,5,81,0,0,941,
        943,3,248,124,0,942,944,3,188,94,0,943,942,1,0,0,0,943,944,1,0,0,
        0,944,187,1,0,0,0,945,946,5,139,0,0,946,189,1,0,0,0,947,948,5,46,
        0,0,948,950,3,372,186,0,949,951,3,192,96,0,950,949,1,0,0,0,950,951,
        1,0,0,0,951,955,1,0,0,0,952,954,3,194,97,0,953,952,1,0,0,0,954,957,
        1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,191,1,0,0,0,957,955,
        1,0,0,0,958,959,7,7,0,0,959,193,1,0,0,0,960,961,5,139,0,0,961,195,
        1,0,0,0,962,963,5,37,0,0,963,964,3,232,116,0,964,965,3,14,7,0,965,
        966,7,2,0,0,966,197,1,0,0,0,967,968,5,35,0,0,968,969,3,224,112,0,
        969,970,3,226,113,0,970,972,3,228,114,0,971,973,3,230,115,0,972,
        971,1,0,0,0,972,973,1,0,0,0,973,199,1,0,0,0,974,978,7,8,0,0,975,
        977,3,202,101,0,976,975,1,0,0,0,977,980,1,0,0,0,978,976,1,0,0,0,
        978,979,1,0,0,0,979,201,1,0,0,0,980,978,1,0,0,0,981,985,3,220,110,
        0,982,985,3,222,111,0,983,985,3,204,102,0,984,981,1,0,0,0,984,982,
        1,0,0,0,984,983,1,0,0,0,985,203,1,0,0,0,986,991,3,206,103,0,987,
        988,5,9,0,0,988,989,3,208,104,0,989,990,5,10,0,0,990,992,1,0,0,0,
        991,987,1,0,0,0,991,992,1,0,0,0,992,205,1,0,0,0,993,994,3,262,131,
        0,994,207,1,0,0,0,995,1000,3,210,105,0,996,997,5,25,0,0,997,999,
        3,210,105,0,998,996,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,
        1001,1,0,0,0,1001,1009,1,0,0,0,1002,1000,1,0,0,0,1003,1005,3,210,
        105,0,1004,1003,1,0,0,0,1005,1006,1,0,0,0,1006,1004,1,0,0,0,1006,
        1007,1,0,0,0,1007,1009,1,0,0,0,1008,995,1,0,0,0,1008,1004,1,0,0,
        0,1009,209,1,0,0,0,1010,1017,3,262,131,0,1011,1017,5,138,0,0,1012,
        1017,5,137,0,0,1013,1017,3,218,109,0,1014,1017,5,19,0,0,1015,1017,
        3,372,186,0,1016,1010,1,0,0,0,1016,1011,1,0,0,0,1016,1012,1,0,0,
        0,1016,1013,1,0,0,0,1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,211,
        1,0,0,0,1018,1023,5,84,0,0,1019,1024,3,220,110,0,1020,1024,3,216,
        108,0,1021,1024,3,214,107,0,1022,1024,3,222,111,0,1023,1019,1,0,
        0,0,1023,1020,1,0,0,0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,1025,
        1,0,0,0,1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,213,1,0,0,0,1027,
        1028,5,111,0,0,1028,1030,5,9,0,0,1029,1031,3,218,109,0,1030,1029,
        1,0,0,0,1031,1032,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,
        1034,1,0,0,0,1034,1035,5,10,0,0,1035,215,1,0,0,0,1036,1037,5,114,
        0,0,1037,1039,5,9,0,0,1038,1040,3,218,109,0,1039,1038,1,0,0,0,1040,
        1041,1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,
        0,1043,1044,5,10,0,0,1044,217,1,0,0,0,1045,1047,5,17,0,0,1046,1045,
        1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1049,5,139,0,0,
        1049,219,1,0,0,0,1050,1051,7,9,0,0,1051,1066,5,9,0,0,1052,1054,3,
        248,124,0,1053,1052,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,
        1055,1056,1,0,0,0,1056,1067,1,0,0,0,1057,1055,1,0,0,0,1058,1063,
        3,248,124,0,1059,1060,5,25,0,0,1060,1062,3,248,124,0,1061,1059,1,
        0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,
        1067,1,0,0,0,1065,1063,1,0,0,0,1066,1055,1,0,0,0,1066,1058,1,0,0,
        0,1067,1068,1,0,0,0,1068,1069,5,10,0,0,1069,221,1,0,0,0,1070,1071,
        7,10,0,0,1071,1073,5,9,0,0,1072,1074,3,372,186,0,1073,1072,1,0,0,
        0,1074,1075,1,0,0,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,1077,
        1,0,0,0,1077,1078,5,10,0,0,1078,223,1,0,0,0,1079,1080,5,31,0,0,1080,
        1081,5,9,0,0,1081,1082,3,242,121,0,1082,1083,5,10,0,0,1083,225,1,
        0,0,0,1084,1085,5,32,0,0,1085,1086,5,9,0,0,1086,1087,3,240,120,0,
        1087,1088,5,10,0,0,1088,227,1,0,0,0,1089,1090,5,33,0,0,1090,1091,
        5,9,0,0,1091,1092,3,244,122,0,1092,1093,5,10,0,0,1093,229,1,0,0,
        0,1094,1095,5,34,0,0,1095,1096,5,9,0,0,1096,1097,3,246,123,0,1097,
        1098,5,10,0,0,1098,231,1,0,0,0,1099,1100,5,38,0,0,1100,1101,5,9,
        0,0,1101,1102,3,238,119,0,1102,1103,5,10,0,0,1103,233,1,0,0,0,1104,
        1105,5,120,0,0,1105,1106,5,9,0,0,1106,1107,3,236,118,0,1107,1108,
        5,10,0,0,1108,235,1,0,0,0,1109,1110,5,139,0,0,1110,237,1,0,0,0,1111,
        1112,5,139,0,0,1112,239,1,0,0,0,1113,1114,5,139,0,0,1114,241,1,0,
        0,0,1115,1116,5,139,0,0,1116,243,1,0,0,0,1117,1118,7,7,0,0,1118,
        245,1,0,0,0,1119,1120,5,3,0,0,1120,247,1,0,0,0,1121,1122,3,262,131,
        0,1122,249,1,0,0,0,1123,1136,3,170,85,0,1124,1131,5,9,0,0,1125,1132,
        3,262,131,0,1126,1132,3,218,109,0,1127,1132,5,138,0,0,1128,1132,
        3,328,164,0,1129,1132,3,376,188,0,1130,1132,5,3,0,0,1131,1125,1,
        0,0,0,1131,1126,1,0,0,0,1131,1127,1,0,0,0,1131,1128,1,0,0,0,1131,
        1129,1,0,0,0,1131,1130,1,0,0,0,1132,1133,1,0,0,0,1133,1131,1,0,0,
        0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1137,5,10,0,0,1136,1124,
        1,0,0,0,1136,1137,1,0,0,0,1137,251,1,0,0,0,1138,1139,5,110,0,0,1139,
        1140,3,12,6,0,1140,253,1,0,0,0,1141,1142,5,87,0,0,1142,1143,3,266,
        133,0,1143,1145,3,258,129,0,1144,1146,3,260,130,0,1145,1144,1,0,
        0,0,1145,1146,1,0,0,0,1146,1148,1,0,0,0,1147,1149,3,256,128,0,1148,
        1147,1,0,0,0,1148,1149,1,0,0,0,1149,255,1,0,0,0,1150,1151,7,2,0,
        0,1151,257,1,0,0,0,1152,1153,5,88,0,0,1153,1154,3,14,7,0,1154,259,
        1,0,0,0,1155,1157,5,117,0,0,1156,1158,3,14,7,0,1157,1156,1,0,0,0,
        1157,1158,1,0,0,0,1158,261,1,0,0,0,1159,1162,5,139,0,0,1160,1162,
        3,264,132,0,1161,1159,1,0,0,0,1161,1160,1,0,0,0,1162,263,1,0,0,0,
        1163,1164,7,11,0,0,1164,265,1,0,0,0,1165,1169,3,270,135,0,1166,1168,
        3,268,134,0,1167,1166,1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,0,
        0,1169,1170,1,0,0,0,1170,267,1,0,0,0,1171,1169,1,0,0,0,1172,1175,
        7,12,0,0,1173,1176,3,270,135,0,1174,1176,5,138,0,0,1175,1173,1,0,
        0,0,1175,1174,1,0,0,0,1176,269,1,0,0,0,1177,1179,5,115,0,0,1178,
        1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1181,3,272,
        136,0,1181,271,1,0,0,0,1182,1183,5,9,0,0,1183,1184,3,266,133,0,1184,
        1185,5,10,0,0,1185,1188,1,0,0,0,1186,1188,3,274,137,0,1187,1182,
        1,0,0,0,1187,1186,1,0,0,0,1188,273,1,0,0,0,1189,1190,3,276,138,0,
        1190,275,1,0,0,0,1191,1192,3,278,139,0,1192,1193,3,280,140,0,1193,
        1195,1,0,0,0,1194,1191,1,0,0,0,1194,1195,1,0,0,0,1195,1198,1,0,0,
        0,1196,1199,3,278,139,0,1197,1199,5,75,0,0,1198,1196,1,0,0,0,1198,
        1197,1,0,0,0,1199,277,1,0,0,0,1200,1201,3,170,85,0,1201,279,1,0,
        0,0,1202,1203,7,13,0,0,1203,281,1,0,0,0,1204,1205,5,86,0,0,1205,
        1206,3,370,185,0,1206,283,1,0,0,0,1207,1211,5,69,0,0,1208,1210,3,
        286,143,0,1209,1208,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,
        1211,1212,1,0,0,0,1212,285,1,0,0,0,1213,1211,1,0,0,0,1214,1215,3,
        250,125,0,1215,287,1,0,0,0,1216,1219,5,133,0,0,1217,1220,3,372,186,
        0,1218,1220,3,290,145,0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,
        289,1,0,0,0,1221,1222,5,19,0,0,1222,1223,5,75,0,0,1223,1224,5,9,
        0,0,1224,1225,3,294,147,0,1225,1226,5,10,0,0,1226,1227,3,292,146,
        0,1227,1228,3,294,147,0,1228,291,1,0,0,0,1229,1231,9,0,0,0,1230,
        1229,1,0,0,0,1231,1234,1,0,0,0,1232,1233,1,0,0,0,1232,1230,1,0,0,
        0,1233,293,1,0,0,0,1234,1232,1,0,0,0,1235,1236,5,20,0,0,1236,295,
        1,0,0,0,1237,1238,5,22,0,0,1238,1239,7,14,0,0,1239,297,1,0,0,0,1240,
        1241,5,80,0,0,1241,1242,3,302,151,0,1242,1246,3,304,152,0,1243,1245,
        3,300,150,0,1244,1243,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,
        0,1246,1247,1,0,0,0,1247,299,1,0,0,0,1248,1246,1,0,0,0,1249,1250,
        3,250,125,0,1250,301,1,0,0,0,1251,1252,5,3,0,0,1252,303,1,0,0,0,
        1253,1254,3,172,86,0,1254,305,1,0,0,0,1255,1256,5,89,0,0,1256,1257,
        3,308,154,0,1257,307,1,0,0,0,1258,1259,5,3,0,0,1259,309,1,0,0,0,
        1260,1261,5,56,0,0,1261,1265,3,372,186,0,1262,1264,3,312,156,0,1263,
        1262,1,0,0,0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,
        0,1266,311,1,0,0,0,1267,1265,1,0,0,0,1268,1271,3,262,131,0,1269,
        1271,5,75,0,0,1270,1268,1,0,0,0,1270,1269,1,0,0,0,1271,313,1,0,0,
        0,1272,1273,7,15,0,0,1273,1274,3,316,158,0,1274,1278,3,320,160,0,
        1275,1277,3,324,162,0,1276,1275,1,0,0,0,1277,1280,1,0,0,0,1278,1276,
        1,0,0,0,1278,1279,1,0,0,0,1279,315,1,0,0,0,1280,1278,1,0,0,0,1281,
        1282,3,318,159,0,1282,317,1,0,0,0,1283,1284,7,16,0,0,1284,1285,5,
        9,0,0,1285,1286,3,372,186,0,1286,1287,5,10,0,0,1287,319,1,0,0,0,
        1288,1289,3,322,161,0,1289,321,1,0,0,0,1290,1291,7,17,0,0,1291,1292,
        5,9,0,0,1292,1293,3,372,186,0,1293,1294,5,10,0,0,1294,323,1,0,0,
        0,1295,1296,7,18,0,0,1296,325,1,0,0,0,1297,1301,5,90,0,0,1298,1300,
        3,328,164,0,1299,1298,1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,
        0,1301,1302,1,0,0,0,1302,327,1,0,0,0,1303,1301,1,0,0,0,1304,1309,
        5,139,0,0,1305,1309,3,332,166,0,1306,1309,3,264,132,0,1307,1309,
        3,330,165,0,1308,1304,1,0,0,0,1308,1305,1,0,0,0,1308,1306,1,0,0,
        0,1308,1307,1,0,0,0,1309,329,1,0,0,0,1310,1313,5,139,0,0,1311,1313,
        3,332,166,0,1312,1310,1,0,0,0,1312,1311,1,0,0,0,1313,1314,1,0,0,
        0,1314,1312,1,0,0,0,1314,1315,1,0,0,0,1315,331,1,0,0,0,1316,1317,
        5,21,0,0,1317,1318,3,262,131,0,1318,333,1,0,0,0,1319,1320,5,1,0,
        0,1320,335,1,0,0,0,1321,1322,5,1,0,0,1322,337,1,0,0,0,1323,1326,
        5,26,0,0,1324,1327,5,27,0,0,1325,1327,3,14,7,0,1326,1324,1,0,0,0,
        1326,1325,1,0,0,0,1327,339,1,0,0,0,1328,1332,5,43,0,0,1329,1331,
        3,342,171,0,1330,1329,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,
        0,1332,1333,1,0,0,0,1333,341,1,0,0,0,1334,1332,1,0,0,0,1335,1344,
        3,262,131,0,1336,1341,7,19,0,0,1337,1338,5,9,0,0,1338,1339,3,262,
        131,0,1339,1340,5,10,0,0,1340,1342,1,0,0,0,1341,1337,1,0,0,0,1341,
        1342,1,0,0,0,1342,1344,1,0,0,0,1343,1335,1,0,0,0,1343,1336,1,0,0,
        0,1344,343,1,0,0,0,1345,1354,5,48,0,0,1346,1349,3,14,7,0,1347,1349,
        3,8,4,0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,1352,1,0,0,0,1350,
        1348,1,0,0,0,1350,1351,1,0,0,0,1351,1355,1,0,0,0,1352,1350,1,0,0,
        0,1353,1355,3,346,173,0,1354,1350,1,0,0,0,1354,1353,1,0,0,0,1355,
        1359,1,0,0,0,1356,1360,5,75,0,0,1357,1360,5,100,0,0,1358,1360,3,
        4,2,0,1359,1356,1,0,0,0,1359,1357,1,0,0,0,1359,1358,1,0,0,0,1360,
        345,1,0,0,0,1361,1362,5,139,0,0,1362,347,1,0,0,0,1363,1368,3,370,
        185,0,1364,1368,3,358,179,0,1365,1368,3,356,178,0,1366,1368,3,350,
        175,0,1367,1363,1,0,0,0,1367,1364,1,0,0,0,1367,1365,1,0,0,0,1367,
        1366,1,0,0,0,1368,349,1,0,0,0,1369,1370,3,352,176,0,1370,1374,5,
        9,0,0,1371,1373,3,354,177,0,1372,1371,1,0,0,0,1373,1376,1,0,0,0,
        1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,1377,1,0,0,0,1376,1374,
        1,0,0,0,1377,1378,5,10,0,0,1378,351,1,0,0,0,1379,1380,5,21,0,0,1380,
        1381,3,262,131,0,1381,353,1,0,0,0,1382,1383,3,170,85,0,1383,355,
        1,0,0,0,1384,1385,5,21,0,0,1385,1386,5,74,0,0,1386,1387,5,9,0,0,
        1387,1388,3,172,86,0,1388,1389,5,10,0,0,1389,357,1,0,0,0,1390,1391,
        5,21,0,0,1391,1392,5,108,0,0,1392,1393,5,9,0,0,1393,1394,3,360,180,
        0,1394,1395,5,25,0,0,1395,1396,3,368,184,0,1396,1397,5,10,0,0,1397,
        359,1,0,0,0,1398,1399,3,362,181,0,1399,1400,5,11,0,0,1400,1401,3,
        364,182,0,1401,361,1,0,0,0,1402,1403,3,366,183,0,1403,363,1,0,0,
        0,1404,1405,3,366,183,0,1405,365,1,0,0,0,1406,1409,5,138,0,0,1407,
        1409,3,332,166,0,1408,1406,1,0,0,0,1408,1407,1,0,0,0,1409,367,1,
        0,0,0,1410,1413,5,3,0,0,1411,1413,3,328,164,0,1412,1410,1,0,0,0,
        1412,1411,1,0,0,0,1413,369,1,0,0,0,1414,1415,5,21,0,0,1415,1416,
        5,109,0,0,1416,1417,5,9,0,0,1417,1418,5,3,0,0,1418,1419,5,10,0,0,
        1419,371,1,0,0,0,1420,1427,3,374,187,0,1421,1423,5,24,0,0,1422,1424,
        3,374,187,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1426,1,0,0,
        0,1425,1421,1,0,0,0,1426,1429,1,0,0,0,1427,1425,1,0,0,0,1427,1428,
        1,0,0,0,1428,1433,1,0,0,0,1429,1427,1,0,0,0,1430,1433,5,3,0,0,1431,
        1433,5,19,0,0,1432,1420,1,0,0,0,1432,1430,1,0,0,0,1432,1431,1,0,
        0,0,1433,373,1,0,0,0,1434,1438,5,139,0,0,1435,1436,5,9,0,0,1436,
        1437,5,139,0,0,1437,1439,5,10,0,0,1438,1435,1,0,0,0,1438,1439,1,
        0,0,0,1439,1442,1,0,0,0,1440,1442,3,328,164,0,1441,1434,1,0,0,0,
        1441,1440,1,0,0,0,1442,375,1,0,0,0,1443,1444,7,5,0,0,1444,1445,5,
        138,0,0,1445,377,1,0,0,0,122,385,390,392,397,403,408,411,422,467,
        473,483,495,504,509,515,522,528,545,552,555,574,585,587,601,610,
        615,630,636,656,660,668,677,691,701,711,719,724,733,737,742,772,
        778,783,792,797,807,816,819,822,838,847,855,863,873,876,892,899,
        901,913,924,932,943,950,955,972,978,984,991,1000,1006,1008,1016,
        1023,1025,1032,1041,1046,1055,1063,1066,1075,1131,1133,1136,1145,
        1148,1157,1161,1169,1175,1178,1187,1194,1198,1211,1219,1232,1246,
        1265,1270,1278,1301,1308,1312,1314,1326,1332,1341,1343,1348,1350,
        1354,1359,1367,1374,1408,1412,1423,1427,1432,1438,1441
    ]

class ClistParser ( Parser ):

    grammarFileName = "Clist.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "', '", "',\\n'", "<INVALID>", 
                     "'('", "')'", "':'", "'+'", "'>'", "'<'", "'-'", "'/'", 
                     "'\\'", "'|'", "'*'", "'@@'", "'&'", "'%'", "'='", 
                     "'.'", "','" ]

    symbolicNames = [ "<INVALID>", "WRITESTATMENT", "COMMENTLINE_2", "STRING", 
                      "NEWLINE", "WS", "SEPARATOR", "SEPARATOR_2", "DATAENDDATASEQUENCE", 
                      "LPAREN", "RPAREN", "COLON", "PLUSCHAR", "GREATERTHANCHAR", 
                      "LESSTHANCHAR", "MINUSCHAR", "DIVCHAR", "SSLASH", 
                      "PIPECHAR", "ASTERISKCHAR", "DOUBLE_ADOTCHAR", "AMPCHAR", 
                      "PERCENTAGECHAR", "EQUALCHAR", "DOT", "COMMACHAR", 
                      "ATTN", "OFF", "DATA", "ALLOCATE", "ALLOC", "PROGRAM", 
                      "PLAN", "LIB", "PARMS", "RUN", "CLOSFILE", "DSN", 
                      "SYSTEM", "ENDDATA", "DDNAME", "DDN", "HRECOVER", 
                      "CONTROL", "FEN", "TB", "CALL", "CLEAR", "DO", "CANCEL", 
                      "OUTPUT", "FROMID", "TODATAID", "FROMMEM", "TOMEM", 
                      "SELECT", "EDIT", "KDSPRINT", "TBDISPL", "TBQUERY", 
                      "TBTOP", "TBSKIP", "TBDELETE", "TBSORT", "TBMOD", 
                      "TBOPEN", "TBCREATE", "TBEND", "TBCLOSE", "EXIT", 
                      "LMINIT", "LMCOPY", "LMFREE", "PROC", "LENGTH", "END", 
                      "WHEN", "HLIST", "OTHERWISE", "READDVAL", "CHANGE", 
                      "OPENFILE", "JPRINTR", "GETFILE", "FREE", "FILE", 
                      "INSERT", "IF", "THEN", "FIND", "READ", "PUTFILE", 
                      "LISTDMS", "WHILE", "ERROR", "RETURN", "WRITE", "WRITENR", 
                      "SMCOPY", "SMC", "ENDO", "ADDPOP", "LOG", "EXEC", 
                      "EX", "FI", "EQ", "ATTRIB", "SUBSTR", "STR", "GOTO", 
                      "ATTRLIST", "DELETE", "GLOBAL", "ATTR", "NOT", "AND", 
                      "ELSE", "OR", "FROMDATASET", "DATAID", "VGET", "VPUT", 
                      "BROWSE", "ISPEXEC", "DISPLAY", "FTOPEN", "FTCLOSE", 
                      "FTINCL", "FTERASE", "FDS", "TODATASET", "TDS", "SUBMIT", 
                      "DATASET", "DA", "SET", "F_CHAR", "NUMBER", "IDENTIFIER" ]

    RULE_startRule = 0
    RULE_procedure = 1
    RULE_labelEnd = 2
    RULE_procOption = 3
    RULE_label = 4
    RULE_commandName = 5
    RULE_labelName = 6
    RULE_statement = 7
    RULE_hlistStatement = 8
    RULE_hlistParameter = 9
    RULE_jprintrStatement = 10
    RULE_jprintContent = 11
    RULE_jprintParameter = 12
    RULE_hrecoverStatement = 13
    RULE_hrecoverParameter = 14
    RULE_kdsPrintStatement = 15
    RULE_kdsPrintParamater = 16
    RULE_cancelStatement = 17
    RULE_outputStatement = 18
    RULE_outputParameter = 19
    RULE_job_parameter = 20
    RULE_job_name = 21
    RULE_job_id = 22
    RULE_execStatement = 23
    RULE_selectStatement = 24
    RULE_otherwiseSelect = 25
    RULE_testExpression = 26
    RULE_whenSelect = 27
    RULE_readdvalStatement = 28
    RULE_putfileStatement = 29
    RULE_doWhileStatement = 30
    RULE_returnStatement = 31
    RULE_errorStatement = 32
    RULE_listDmsStatement = 33
    RULE_listDmsParameter = 34
    RULE_attributeStatement = 35
    RULE_attributeStatementParameter = 36
    RULE_deleteStatement = 37
    RULE_setStatement = 38
    RULE_variableAssignment = 39
    RULE_globalStatement = 40
    RULE_ispExecStatement = 41
    RULE_fenService = 42
    RULE_fenParameter = 43
    RULE_addpopService = 44
    RULE_addpopServiceParameter = 45
    RULE_displayService = 46
    RULE_displayParameter = 47
    RULE_logService = 48
    RULE_message = 49
    RULE_controlService = 50
    RULE_controlServiceParameter = 51
    RULE_tablebService = 52
    RULE_tableServiceName = 53
    RULE_table_name = 54
    RULE_tableParameter = 55
    RULE_lminitService = 56
    RULE_lmfreeService = 57
    RULE_lmcopyService = 58
    RULE_fromMem = 59
    RULE_toMem = 60
    RULE_lmcopyParameter = 61
    RULE_fromId = 62
    RULE_toDataId = 63
    RULE_lminitParameter = 64
    RULE_fteraseService = 65
    RULE_browseService = 66
    RULE_browseServiceParameter = 67
    RULE_editService = 68
    RULE_editServiceParameter = 69
    RULE_ftinclService = 70
    RULE_skel_name = 71
    RULE_ftinclParameter = 72
    RULE_ftCloseService = 73
    RULE_ftCloseName = 74
    RULE_ftCloseLibrary = 75
    RULE_ftCloseParameter = 76
    RULE_ftopenService = 77
    RULE_ftopenServiceParameter = 78
    RULE_vgetService = 79
    RULE_vputService = 80
    RULE_name_list = 81
    RULE_name_list_item = 82
    RULE_vgetParameter = 83
    RULE_vputParameter = 84
    RULE_value = 85
    RULE_stringExpression = 86
    RULE_calcExpression = 87
    RULE_expression = 88
    RULE_term = 89
    RULE_factor = 90
    RULE_closefileStatement = 91
    RULE_getfileStatement = 92
    RULE_openfileStatement = 93
    RULE_openfileOption = 94
    RULE_callStatement = 95
    RULE_member_name = 96
    RULE_callOption = 97
    RULE_dsnEndStatement = 98
    RULE_runStatement = 99
    RULE_allocStatement = 100
    RULE_allocParameter = 101
    RULE_otherAllocParameter = 102
    RULE_allocParameterName = 103
    RULE_allocParameterParams = 104
    RULE_allocParameterParam = 105
    RULE_freeFileStatement = 106
    RULE_clist_attribute_list_presentation = 107
    RULE_clist_attribute_presentation = 108
    RULE_attribute_name = 109
    RULE_clist_file_presentation = 110
    RULE_clist_dataset_presentation = 111
    RULE_clist_program_presentation = 112
    RULE_clist_plan_presentation = 113
    RULE_clist_library_presentation = 114
    RULE_clist_params_presentation = 115
    RULE_clist_system_presentation = 116
    RULE_clist_data_id_presentation = 117
    RULE_data_id = 118
    RULE_system_name = 119
    RULE_plan_name = 120
    RULE_program_name = 121
    RULE_library_name = 122
    RULE_params_name = 123
    RULE_fileName = 124
    RULE_generalStatementParemeter = 125
    RULE_gotoStatement = 126
    RULE_ifStatement = 127
    RULE_endIf = 128
    RULE_thenIf = 129
    RULE_elseIf = 130
    RULE_clistKeyword = 131
    RULE_charDataKeyword = 132
    RULE_condition = 133
    RULE_andOrCondition = 134
    RULE_combinableCondition = 135
    RULE_simpleCondition = 136
    RULE_relationCondition = 137
    RULE_relationArithmeticComparison = 138
    RULE_arithmeticExpression = 139
    RULE_relationalOperator = 140
    RULE_insertStatement = 141
    RULE_exitStatement = 142
    RULE_exitParameters = 143
    RULE_submitStatement = 144
    RULE_jcl_code_submited = 145
    RULE_jcl_code = 146
    RULE_jcl_code_start_and_end_symbol = 147
    RULE_inlineStatement = 148
    RULE_changeStatement = 149
    RULE_changeParameter = 150
    RULE_changeString = 151
    RULE_orignalString = 152
    RULE_findStatement = 153
    RULE_findString = 154
    RULE_editStatement = 155
    RULE_editOption = 156
    RULE_smCopyStatement = 157
    RULE_smCopyFrom = 158
    RULE_fromDataset = 159
    RULE_smCopyTo = 160
    RULE_toDataset = 161
    RULE_smCopyOption = 162
    RULE_readStatement = 163
    RULE_variable = 164
    RULE_normalVariableCombineWithReferenced = 165
    RULE_referencedVariable = 166
    RULE_writeNrStatement = 167
    RULE_writeStatement = 168
    RULE_attnStatement = 169
    RULE_controlStatement = 170
    RULE_controlOption = 171
    RULE_doEndStatement = 172
    RULE_clist_file_name = 173
    RULE_buildInFuntion = 174
    RULE_otherBuildInFunction = 175
    RULE_function_name = 176
    RULE_function_parameter = 177
    RULE_lengthFunction = 178
    RULE_subStringFunction = 179
    RULE_partToSubString = 180
    RULE_startIndex = 181
    RULE_endIndex = 182
    RULE_intergerLiteral = 183
    RULE_stringToSubString = 184
    RULE_stringFuntion = 185
    RULE_dataset_name = 186
    RULE_dataset_part = 187
    RULE_signed_number = 188

    ruleNames =  [ "startRule", "procedure", "labelEnd", "procOption", "label", 
                   "commandName", "labelName", "statement", "hlistStatement", 
                   "hlistParameter", "jprintrStatement", "jprintContent", 
                   "jprintParameter", "hrecoverStatement", "hrecoverParameter", 
                   "kdsPrintStatement", "kdsPrintParamater", "cancelStatement", 
                   "outputStatement", "outputParameter", "job_parameter", 
                   "job_name", "job_id", "execStatement", "selectStatement", 
                   "otherwiseSelect", "testExpression", "whenSelect", "readdvalStatement", 
                   "putfileStatement", "doWhileStatement", "returnStatement", 
                   "errorStatement", "listDmsStatement", "listDmsParameter", 
                   "attributeStatement", "attributeStatementParameter", 
                   "deleteStatement", "setStatement", "variableAssignment", 
                   "globalStatement", "ispExecStatement", "fenService", 
                   "fenParameter", "addpopService", "addpopServiceParameter", 
                   "displayService", "displayParameter", "logService", "message", 
                   "controlService", "controlServiceParameter", "tablebService", 
                   "tableServiceName", "table_name", "tableParameter", "lminitService", 
                   "lmfreeService", "lmcopyService", "fromMem", "toMem", 
                   "lmcopyParameter", "fromId", "toDataId", "lminitParameter", 
                   "fteraseService", "browseService", "browseServiceParameter", 
                   "editService", "editServiceParameter", "ftinclService", 
                   "skel_name", "ftinclParameter", "ftCloseService", "ftCloseName", 
                   "ftCloseLibrary", "ftCloseParameter", "ftopenService", 
                   "ftopenServiceParameter", "vgetService", "vputService", 
                   "name_list", "name_list_item", "vgetParameter", "vputParameter", 
                   "value", "stringExpression", "calcExpression", "expression", 
                   "term", "factor", "closefileStatement", "getfileStatement", 
                   "openfileStatement", "openfileOption", "callStatement", 
                   "member_name", "callOption", "dsnEndStatement", "runStatement", 
                   "allocStatement", "allocParameter", "otherAllocParameter", 
                   "allocParameterName", "allocParameterParams", "allocParameterParam", 
                   "freeFileStatement", "clist_attribute_list_presentation", 
                   "clist_attribute_presentation", "attribute_name", "clist_file_presentation", 
                   "clist_dataset_presentation", "clist_program_presentation", 
                   "clist_plan_presentation", "clist_library_presentation", 
                   "clist_params_presentation", "clist_system_presentation", 
                   "clist_data_id_presentation", "data_id", "system_name", 
                   "plan_name", "program_name", "library_name", "params_name", 
                   "fileName", "generalStatementParemeter", "gotoStatement", 
                   "ifStatement", "endIf", "thenIf", "elseIf", "clistKeyword", 
                   "charDataKeyword", "condition", "andOrCondition", "combinableCondition", 
                   "simpleCondition", "relationCondition", "relationArithmeticComparison", 
                   "arithmeticExpression", "relationalOperator", "insertStatement", 
                   "exitStatement", "exitParameters", "submitStatement", 
                   "jcl_code_submited", "jcl_code", "jcl_code_start_and_end_symbol", 
                   "inlineStatement", "changeStatement", "changeParameter", 
                   "changeString", "orignalString", "findStatement", "findString", 
                   "editStatement", "editOption", "smCopyStatement", "smCopyFrom", 
                   "fromDataset", "smCopyTo", "toDataset", "smCopyOption", 
                   "readStatement", "variable", "normalVariableCombineWithReferenced", 
                   "referencedVariable", "writeNrStatement", "writeStatement", 
                   "attnStatement", "controlStatement", "controlOption", 
                   "doEndStatement", "clist_file_name", "buildInFuntion", 
                   "otherBuildInFunction", "function_name", "function_parameter", 
                   "lengthFunction", "subStringFunction", "partToSubString", 
                   "startIndex", "endIndex", "intergerLiteral", "stringToSubString", 
                   "stringFuntion", "dataset_name", "dataset_part", "signed_number" ]

    EOF = Token.EOF
    WRITESTATMENT=1
    COMMENTLINE_2=2
    STRING=3
    NEWLINE=4
    WS=5
    SEPARATOR=6
    SEPARATOR_2=7
    DATAENDDATASEQUENCE=8
    LPAREN=9
    RPAREN=10
    COLON=11
    PLUSCHAR=12
    GREATERTHANCHAR=13
    LESSTHANCHAR=14
    MINUSCHAR=15
    DIVCHAR=16
    SSLASH=17
    PIPECHAR=18
    ASTERISKCHAR=19
    DOUBLE_ADOTCHAR=20
    AMPCHAR=21
    PERCENTAGECHAR=22
    EQUALCHAR=23
    DOT=24
    COMMACHAR=25
    ATTN=26
    OFF=27
    DATA=28
    ALLOCATE=29
    ALLOC=30
    PROGRAM=31
    PLAN=32
    LIB=33
    PARMS=34
    RUN=35
    CLOSFILE=36
    DSN=37
    SYSTEM=38
    ENDDATA=39
    DDNAME=40
    DDN=41
    HRECOVER=42
    CONTROL=43
    FEN=44
    TB=45
    CALL=46
    CLEAR=47
    DO=48
    CANCEL=49
    OUTPUT=50
    FROMID=51
    TODATAID=52
    FROMMEM=53
    TOMEM=54
    SELECT=55
    EDIT=56
    KDSPRINT=57
    TBDISPL=58
    TBQUERY=59
    TBTOP=60
    TBSKIP=61
    TBDELETE=62
    TBSORT=63
    TBMOD=64
    TBOPEN=65
    TBCREATE=66
    TBEND=67
    TBCLOSE=68
    EXIT=69
    LMINIT=70
    LMCOPY=71
    LMFREE=72
    PROC=73
    LENGTH=74
    END=75
    WHEN=76
    HLIST=77
    OTHERWISE=78
    READDVAL=79
    CHANGE=80
    OPENFILE=81
    JPRINTR=82
    GETFILE=83
    FREE=84
    FILE=85
    INSERT=86
    IF=87
    THEN=88
    FIND=89
    READ=90
    PUTFILE=91
    LISTDMS=92
    WHILE=93
    ERROR=94
    RETURN=95
    WRITE=96
    WRITENR=97
    SMCOPY=98
    SMC=99
    ENDO=100
    ADDPOP=101
    LOG=102
    EXEC=103
    EX=104
    FI=105
    EQ=106
    ATTRIB=107
    SUBSTR=108
    STR=109
    GOTO=110
    ATTRLIST=111
    DELETE=112
    GLOBAL=113
    ATTR=114
    NOT=115
    AND=116
    ELSE=117
    OR=118
    FROMDATASET=119
    DATAID=120
    VGET=121
    VPUT=122
    BROWSE=123
    ISPEXEC=124
    DISPLAY=125
    FTOPEN=126
    FTCLOSE=127
    FTINCL=128
    FTERASE=129
    FDS=130
    TODATASET=131
    TDS=132
    SUBMIT=133
    DATASET=134
    DA=135
    SET=136
    F_CHAR=137
    NUMBER=138
    IDENTIFIER=139

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure(self):
            return self.getTypedRuleContext(ClistParser.ProcedureContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = ClistParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.procedure()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROC(self):
            return self.getToken(ClistParser.PROC, 0)

        def NUMBER(self):
            return self.getToken(ClistParser.NUMBER, 0)

        def procOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ProcOptionContext)
            else:
                return self.getTypedRuleContext(ClistParser.ProcOptionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.StatementContext)
            else:
                return self.getTypedRuleContext(ClistParser.StatementContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.LabelContext)
            else:
                return self.getTypedRuleContext(ClistParser.LabelContext,i)


        def labelEnd(self):
            return self.getTypedRuleContext(ClistParser.LabelEndContext,0)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def EXIT(self):
            return self.getToken(ClistParser.EXIT, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure" ):
                listener.enterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure" ):
                listener.exitProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure" ):
                return visitor.visitProcedure(self)
            else:
                return visitor.visitChildren(self)




    def procedure(self):

        localctx = ClistParser.ProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(ClistParser.PROC)
            self.state = 381
            self.match(ClistParser.NUMBER)
            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 382
                    self.procOption() 
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 390
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                    if la_ == 1:
                        self.state = 388
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 389
                        self.label()
                        pass

             
                self.state = 394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137, 139]:
                self.state = 395
                self.labelEnd()
                pass
            elif token in [69, 75]:
                self.state = 396
                _la = self._input.LA(1)
                if not(_la==69 or _la==75):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [-1]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(ClistParser.LabelNameContext,0)


        def COLON(self):
            return self.getToken(ClistParser.COLON, 0)

        def END(self):
            return self.getToken(ClistParser.END, 0)

        def exitStatement(self):
            return self.getTypedRuleContext(ClistParser.ExitStatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_labelEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelEnd" ):
                listener.enterLabelEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelEnd" ):
                listener.exitLabelEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelEnd" ):
                return visitor.visitLabelEnd(self)
            else:
                return visitor.visitChildren(self)




    def labelEnd(self):

        localctx = ClistParser.LabelEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_labelEnd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.labelName()
            self.state = 400
            self.match(ClistParser.COLON)
            self.state = 403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                self.state = 401
                self.match(ClistParser.END)
                pass
            elif token in [69]:
                self.state = 402
                self.exitStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.IDENTIFIER)
            else:
                return self.getToken(ClistParser.IDENTIFIER, i)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_procOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcOption" ):
                listener.enterProcOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcOption" ):
                listener.exitProcOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcOption" ):
                return visitor.visitProcOption(self)
            else:
                return visitor.visitChildren(self)




    def procOption(self):

        localctx = ClistParser.ProcOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_procOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(ClistParser.IDENTIFIER)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 406
                self.match(ClistParser.LPAREN)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 407
                    self.match(ClistParser.IDENTIFIER)


                self.state = 410
                self.match(ClistParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(ClistParser.LabelNameContext,0)


        def COLON(self):
            return self.getToken(ClistParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = ClistParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.labelName()
            self.state = 414
            self.match(ClistParser.COLON)
            self.state = 415
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPCHAR(self):
            return self.getToken(ClistParser.AMPCHAR, 0)

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_commandName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommandName" ):
                listener.enterCommandName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommandName" ):
                listener.exitCommandName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommandName" ):
                return visitor.visitCommandName(self)
            else:
                return visitor.visitChildren(self)




    def commandName(self):

        localctx = ClistParser.CommandNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_commandName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(ClistParser.AMPCHAR)
            self.state = 418
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charDataKeyword(self):
            return self.getTypedRuleContext(ClistParser.CharDataKeywordContext,0)


        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_labelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelName" ):
                listener.enterLabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelName" ):
                listener.exitLabelName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelName" ):
                return visitor.visitLabelName(self)
            else:
                return visitor.visitChildren(self)




    def labelName(self):

        localctx = ClistParser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_labelName)
        try:
            self.state = 422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.charDataKeyword()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.match(ClistParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controlStatement(self):
            return self.getTypedRuleContext(ClistParser.ControlStatementContext,0)


        def attnStatement(self):
            return self.getTypedRuleContext(ClistParser.AttnStatementContext,0)


        def doEndStatement(self):
            return self.getTypedRuleContext(ClistParser.DoEndStatementContext,0)


        def writeStatement(self):
            return self.getTypedRuleContext(ClistParser.WriteStatementContext,0)


        def writeNrStatement(self):
            return self.getTypedRuleContext(ClistParser.WriteNrStatementContext,0)


        def readStatement(self):
            return self.getTypedRuleContext(ClistParser.ReadStatementContext,0)


        def smCopyStatement(self):
            return self.getTypedRuleContext(ClistParser.SmCopyStatementContext,0)


        def editStatement(self):
            return self.getTypedRuleContext(ClistParser.EditStatementContext,0)


        def findStatement(self):
            return self.getTypedRuleContext(ClistParser.FindStatementContext,0)


        def changeStatement(self):
            return self.getTypedRuleContext(ClistParser.ChangeStatementContext,0)


        def inlineStatement(self):
            return self.getTypedRuleContext(ClistParser.InlineStatementContext,0)


        def submitStatement(self):
            return self.getTypedRuleContext(ClistParser.SubmitStatementContext,0)


        def exitStatement(self):
            return self.getTypedRuleContext(ClistParser.ExitStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(ClistParser.InsertStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(ClistParser.IfStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(ClistParser.GotoStatementContext,0)


        def freeFileStatement(self):
            return self.getTypedRuleContext(ClistParser.FreeFileStatementContext,0)


        def allocStatement(self):
            return self.getTypedRuleContext(ClistParser.AllocStatementContext,0)


        def runStatement(self):
            return self.getTypedRuleContext(ClistParser.RunStatementContext,0)


        def dsnEndStatement(self):
            return self.getTypedRuleContext(ClistParser.DsnEndStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(ClistParser.CallStatementContext,0)


        def openfileStatement(self):
            return self.getTypedRuleContext(ClistParser.OpenfileStatementContext,0)


        def getfileStatement(self):
            return self.getTypedRuleContext(ClistParser.GetfileStatementContext,0)


        def closefileStatement(self):
            return self.getTypedRuleContext(ClistParser.ClosefileStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(ClistParser.SetStatementContext,0)


        def ispExecStatement(self):
            return self.getTypedRuleContext(ClistParser.IspExecStatementContext,0)


        def globalStatement(self):
            return self.getTypedRuleContext(ClistParser.GlobalStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(ClistParser.DeleteStatementContext,0)


        def attributeStatement(self):
            return self.getTypedRuleContext(ClistParser.AttributeStatementContext,0)


        def listDmsStatement(self):
            return self.getTypedRuleContext(ClistParser.ListDmsStatementContext,0)


        def errorStatement(self):
            return self.getTypedRuleContext(ClistParser.ErrorStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(ClistParser.ReturnStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(ClistParser.DoWhileStatementContext,0)


        def putfileStatement(self):
            return self.getTypedRuleContext(ClistParser.PutfileStatementContext,0)


        def readdvalStatement(self):
            return self.getTypedRuleContext(ClistParser.ReaddvalStatementContext,0)


        def selectStatement(self):
            return self.getTypedRuleContext(ClistParser.SelectStatementContext,0)


        def execStatement(self):
            return self.getTypedRuleContext(ClistParser.ExecStatementContext,0)


        def outputStatement(self):
            return self.getTypedRuleContext(ClistParser.OutputStatementContext,0)


        def cancelStatement(self):
            return self.getTypedRuleContext(ClistParser.CancelStatementContext,0)


        def kdsPrintStatement(self):
            return self.getTypedRuleContext(ClistParser.KdsPrintStatementContext,0)


        def hrecoverStatement(self):
            return self.getTypedRuleContext(ClistParser.HrecoverStatementContext,0)


        def jprintrStatement(self):
            return self.getTypedRuleContext(ClistParser.JprintrStatementContext,0)


        def hlistStatement(self):
            return self.getTypedRuleContext(ClistParser.HlistStatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = ClistParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        try:
            self.state = 467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.controlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.attnStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.doEndStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 427
                self.writeStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 428
                self.writeNrStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 429
                self.readStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 430
                self.smCopyStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 431
                self.editStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 432
                self.findStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 433
                self.changeStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 434
                self.inlineStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 435
                self.submitStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 436
                self.exitStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 437
                self.insertStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 438
                self.ifStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 439
                self.gotoStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 440
                self.freeFileStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 441
                self.allocStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 442
                self.runStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 443
                self.dsnEndStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 444
                self.callStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 445
                self.openfileStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 446
                self.getfileStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 447
                self.closefileStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 448
                self.setStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 449
                self.ispExecStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 450
                self.globalStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 451
                self.deleteStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 452
                self.attributeStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 453
                self.listDmsStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 454
                self.errorStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 455
                self.returnStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 456
                self.doWhileStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 457
                self.putfileStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 458
                self.readdvalStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 459
                self.selectStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 460
                self.execStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 461
                self.outputStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 462
                self.cancelStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 463
                self.kdsPrintStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 464
                self.hrecoverStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 465
                self.jprintrStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 466
                self.hlistStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HlistStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HLIST(self):
            return self.getToken(ClistParser.HLIST, 0)

        def hlistParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.HlistParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.HlistParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_hlistStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHlistStatement" ):
                listener.enterHlistStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHlistStatement" ):
                listener.exitHlistStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHlistStatement" ):
                return visitor.visitHlistStatement(self)
            else:
                return visitor.visitChildren(self)




    def hlistStatement(self):

        localctx = ClistParser.HlistStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_hlistStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(ClistParser.HLIST)
            self.state = 473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 470
                    self.hlistParameter() 
                self.state = 475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HlistParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_hlistParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHlistParameter" ):
                listener.enterHlistParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHlistParameter" ):
                listener.exitHlistParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHlistParameter" ):
                return visitor.visitHlistParameter(self)
            else:
                return visitor.visitChildren(self)




    def hlistParameter(self):

        localctx = ClistParser.HlistParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_hlistParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JprintrStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JPRINTR(self):
            return self.getToken(ClistParser.JPRINTR, 0)

        def jprintContent(self):
            return self.getTypedRuleContext(ClistParser.JprintContentContext,0)


        def jprintParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.JprintParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.JprintParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_jprintrStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJprintrStatement" ):
                listener.enterJprintrStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJprintrStatement" ):
                listener.exitJprintrStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJprintrStatement" ):
                return visitor.visitJprintrStatement(self)
            else:
                return visitor.visitChildren(self)




    def jprintrStatement(self):

        localctx = ClistParser.JprintrStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_jprintrStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(ClistParser.JPRINTR)
            self.state = 479
            self.jprintContent()
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 480
                    self.jprintParameter() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JprintContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringExpression(self):
            return self.getTypedRuleContext(ClistParser.StringExpressionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_jprintContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJprintContent" ):
                listener.enterJprintContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJprintContent" ):
                listener.exitJprintContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJprintContent" ):
                return visitor.visitJprintContent(self)
            else:
                return visitor.visitChildren(self)




    def jprintContent(self):

        localctx = ClistParser.JprintContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_jprintContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.stringExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JprintParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_jprintParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJprintParameter" ):
                listener.enterJprintParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJprintParameter" ):
                listener.exitJprintParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJprintParameter" ):
                return visitor.visitJprintParameter(self)
            else:
                return visitor.visitChildren(self)




    def jprintParameter(self):

        localctx = ClistParser.JprintParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_jprintParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HrecoverStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HRECOVER(self):
            return self.getToken(ClistParser.HRECOVER, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def hrecoverParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.HrecoverParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.HrecoverParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_hrecoverStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHrecoverStatement" ):
                listener.enterHrecoverStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHrecoverStatement" ):
                listener.exitHrecoverStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHrecoverStatement" ):
                return visitor.visitHrecoverStatement(self)
            else:
                return visitor.visitChildren(self)




    def hrecoverStatement(self):

        localctx = ClistParser.HrecoverStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_hrecoverStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(ClistParser.HRECOVER)
            self.state = 491
            self.dataset_name()
            self.state = 495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 492
                    self.hrecoverParameter() 
                self.state = 497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HrecoverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_hrecoverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHrecoverParameter" ):
                listener.enterHrecoverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHrecoverParameter" ):
                listener.exitHrecoverParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHrecoverParameter" ):
                return visitor.visitHrecoverParameter(self)
            else:
                return visitor.visitChildren(self)




    def hrecoverParameter(self):

        localctx = ClistParser.HrecoverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_hrecoverParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KdsPrintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KDSPRINT(self):
            return self.getToken(ClistParser.KDSPRINT, 0)

        def kdsPrintParamater(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.KdsPrintParamaterContext)
            else:
                return self.getTypedRuleContext(ClistParser.KdsPrintParamaterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_kdsPrintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKdsPrintStatement" ):
                listener.enterKdsPrintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKdsPrintStatement" ):
                listener.exitKdsPrintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKdsPrintStatement" ):
                return visitor.visitKdsPrintStatement(self)
            else:
                return visitor.visitChildren(self)




    def kdsPrintStatement(self):

        localctx = ClistParser.KdsPrintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_kdsPrintStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(ClistParser.KDSPRINT)
            self.state = 504
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 501
                    self.kdsPrintParamater() 
                self.state = 506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KdsPrintParamaterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def clist_file_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_file_presentationContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_kdsPrintParamater

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKdsPrintParamater" ):
                listener.enterKdsPrintParamater(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKdsPrintParamater" ):
                listener.exitKdsPrintParamater(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKdsPrintParamater" ):
                return visitor.visitKdsPrintParamater(self)
            else:
                return visitor.visitChildren(self)




    def kdsPrintParamater(self):

        localctx = ClistParser.KdsPrintParamaterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_kdsPrintParamater)
        try:
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.generalStatementParemeter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.clist_file_presentation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(ClistParser.CANCEL, 0)

        def job_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Job_parameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.Job_parameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_cancelStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelStatement" ):
                listener.enterCancelStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelStatement" ):
                listener.exitCancelStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCancelStatement" ):
                return visitor.visitCancelStatement(self)
            else:
                return visitor.visitChildren(self)




    def cancelStatement(self):

        localctx = ClistParser.CancelStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_cancelStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(ClistParser.CANCEL)
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 512
                    self.job_parameter() 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(ClistParser.OUTPUT, 0)

        def job_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Job_parameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.Job_parameterContext,i)


        def outputParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.OutputParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.OutputParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_outputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputStatement" ):
                listener.enterOutputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputStatement" ):
                listener.exitOutputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputStatement" ):
                return visitor.visitOutputStatement(self)
            else:
                return visitor.visitChildren(self)




    def outputStatement(self):

        localctx = ClistParser.OutputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_outputStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(ClistParser.OUTPUT)
            self.state = 522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 519
                    self.job_parameter() 
                self.state = 524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 528
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 525
                    self.outputParameter() 
                self.state = 530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_outputParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputParameter" ):
                listener.enterOutputParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputParameter" ):
                listener.exitOutputParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputParameter" ):
                return visitor.visitOutputParameter(self)
            else:
                return visitor.visitChildren(self)




    def outputParameter(self):

        localctx = ClistParser.OutputParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_outputParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Job_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def job_name(self):
            return self.getTypedRuleContext(ClistParser.Job_nameContext,0)


        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def job_id(self):
            return self.getTypedRuleContext(ClistParser.Job_idContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_job_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJob_parameter" ):
                listener.enterJob_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJob_parameter" ):
                listener.exitJob_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJob_parameter" ):
                return visitor.visitJob_parameter(self)
            else:
                return visitor.visitChildren(self)




    def job_parameter(self):

        localctx = ClistParser.Job_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_job_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.job_name()
            self.state = 534
            self.match(ClistParser.LPAREN)
            self.state = 535
            self.job_id()
            self.state = 536
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Job_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_job_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJob_name" ):
                listener.enterJob_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJob_name" ):
                listener.exitJob_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJob_name" ):
                return visitor.visitJob_name(self)
            else:
                return visitor.visitChildren(self)




    def job_name(self):

        localctx = ClistParser.Job_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_job_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Job_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_job_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJob_id" ):
                listener.enterJob_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJob_id" ):
                listener.exitJob_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJob_id" ):
                return visitor.visitJob_id(self)
            else:
                return visitor.visitChildren(self)




    def job_id(self):

        localctx = ClistParser.Job_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_job_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(ClistParser.EXEC, 0)

        def EX(self):
            return self.getToken(ClistParser.EX, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def clist_dataset_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_dataset_presentationContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_execStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecStatement" ):
                listener.enterExecStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecStatement" ):
                listener.exitExecStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecStatement" ):
                return visitor.visitExecStatement(self)
            else:
                return visitor.visitChildren(self)




    def execStatement(self):

        localctx = ClistParser.ExecStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_execStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 543
                self.dataset_name()
                pass

            elif la_ == 2:
                self.state = 544
                self.clist_dataset_presentation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ClistParser.SELECT, 0)

        def testExpression(self):
            return self.getTypedRuleContext(ClistParser.TestExpressionContext,0)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def ENDO(self):
            return self.getToken(ClistParser.ENDO, 0)

        def whenSelect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.WhenSelectContext)
            else:
                return self.getTypedRuleContext(ClistParser.WhenSelectContext,i)


        def otherwiseSelect(self):
            return self.getTypedRuleContext(ClistParser.OtherwiseSelectContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_selectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStatement" ):
                listener.enterSelectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStatement" ):
                listener.exitSelectStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStatement" ):
                return visitor.visitSelectStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectStatement(self):

        localctx = ClistParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(ClistParser.SELECT)
            self.state = 548
            self.testExpression()
            self.state = 550 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 549
                self.whenSelect()
                self.state = 552 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==76):
                    break

            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 554
                self.otherwiseSelect()


            self.state = 557
            _la = self._input.LA(1)
            if not(_la==75 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherwiseSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(ClistParser.OTHERWISE, 0)

        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_otherwiseSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherwiseSelect" ):
                listener.enterOtherwiseSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherwiseSelect" ):
                listener.exitOtherwiseSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherwiseSelect" ):
                return visitor.visitOtherwiseSelect(self)
            else:
                return visitor.visitChildren(self)




    def otherwiseSelect(self):

        localctx = ClistParser.OtherwiseSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_otherwiseSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(ClistParser.OTHERWISE)
            self.state = 560
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(ClistParser.VariableContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_testExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestExpression" ):
                listener.enterTestExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestExpression" ):
                listener.exitTestExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestExpression" ):
                return visitor.visitTestExpression(self)
            else:
                return visitor.visitChildren(self)




    def testExpression(self):

        localctx = ClistParser.TestExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_testExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(ClistParser.LPAREN)
            self.state = 563
            self.variable()
            self.state = 564
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ClistParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(ClistParser.ConditionContext,0)


        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_whenSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenSelect" ):
                listener.enterWhenSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenSelect" ):
                listener.exitWhenSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenSelect" ):
                return visitor.visitWhenSelect(self)
            else:
                return visitor.visitChildren(self)




    def whenSelect(self):

        localctx = ClistParser.WhenSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_whenSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(ClistParser.WHEN)
            self.state = 567
            self.condition()
            self.state = 568
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReaddvalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READDVAL(self):
            return self.getToken(ClistParser.READDVAL, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.VariableContext)
            else:
                return self.getTypedRuleContext(ClistParser.VariableContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_readdvalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReaddvalStatement" ):
                listener.enterReaddvalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReaddvalStatement" ):
                listener.exitReaddvalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReaddvalStatement" ):
                return visitor.visitReaddvalStatement(self)
            else:
                return visitor.visitChildren(self)




    def readdvalStatement(self):

        localctx = ClistParser.ReaddvalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_readdvalStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(ClistParser.READDVAL)
            self.state = 574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 571
                    self.variable() 
                self.state = 576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutfileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUTFILE(self):
            return self.getToken(ClistParser.PUTFILE, 0)

        def fileName(self):
            return self.getTypedRuleContext(ClistParser.FileNameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_putfileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutfileStatement" ):
                listener.enterPutfileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutfileStatement" ):
                listener.exitPutfileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPutfileStatement" ):
                return visitor.visitPutfileStatement(self)
            else:
                return visitor.visitChildren(self)




    def putfileStatement(self):

        localctx = ClistParser.PutfileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_putfileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(ClistParser.PUTFILE)
            self.state = 578
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(ClistParser.DO, 0)

        def WHILE(self):
            return self.getToken(ClistParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(ClistParser.ConditionContext,0)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def ENDO(self):
            return self.getToken(ClistParser.ENDO, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.StatementContext)
            else:
                return self.getTypedRuleContext(ClistParser.StatementContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.LabelContext)
            else:
                return self.getTypedRuleContext(ClistParser.LabelContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = ClistParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_doWhileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(ClistParser.DO)
            self.state = 581
            self.match(ClistParser.WHILE)
            self.state = 582
            self.condition()
            self.state = 587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 585
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                    if la_ == 1:
                        self.state = 583
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 584
                        self.label()
                        pass

             
                self.state = 589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 590
            _la = self._input.LA(1)
            if not(_la==75 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(ClistParser.RETURN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = ClistParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(ClistParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(ClistParser.ERROR, 0)

        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_errorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStatement" ):
                listener.enterErrorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStatement" ):
                listener.exitErrorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorStatement" ):
                return visitor.visitErrorStatement(self)
            else:
                return visitor.visitChildren(self)




    def errorStatement(self):

        localctx = ClistParser.ErrorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_errorStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(ClistParser.ERROR)
            self.state = 595
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListDmsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LISTDMS(self):
            return self.getToken(ClistParser.LISTDMS, 0)

        def listDmsParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ListDmsParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.ListDmsParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_listDmsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListDmsStatement" ):
                listener.enterListDmsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListDmsStatement" ):
                listener.exitListDmsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListDmsStatement" ):
                return visitor.visitListDmsStatement(self)
            else:
                return visitor.visitChildren(self)




    def listDmsStatement(self):

        localctx = ClistParser.ListDmsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_listDmsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(ClistParser.LISTDMS)
            self.state = 601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 598
                    self.listDmsParameter() 
                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListDmsParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_listDmsParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListDmsParameter" ):
                listener.enterListDmsParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListDmsParameter" ):
                listener.exitListDmsParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListDmsParameter" ):
                return visitor.visitListDmsParameter(self)
            else:
                return visitor.visitChildren(self)




    def listDmsParameter(self):

        localctx = ClistParser.ListDmsParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_listDmsParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIB(self):
            return self.getToken(ClistParser.ATTRIB, 0)

        def ATTR(self):
            return self.getToken(ClistParser.ATTR, 0)

        def attribute_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Attribute_nameContext)
            else:
                return self.getTypedRuleContext(ClistParser.Attribute_nameContext,i)


        def attributeStatementParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.AttributeStatementParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.AttributeStatementParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_attributeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStatement" ):
                listener.enterAttributeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStatement" ):
                listener.exitAttributeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeStatement" ):
                return visitor.visitAttributeStatement(self)
            else:
                return visitor.visitChildren(self)




    def attributeStatement(self):

        localctx = ClistParser.AttributeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_attributeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            _la = self._input.LA(1)
            if not(_la==107 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 608 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 607
                    self.attribute_name()

                else:
                    raise NoViableAltException(self)
                self.state = 610 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 612
                    self.attributeStatementParameter() 
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStatementParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_attributeStatementParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStatementParameter" ):
                listener.enterAttributeStatementParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStatementParameter" ):
                listener.exitAttributeStatementParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeStatementParameter" ):
                return visitor.visitAttributeStatementParameter(self)
            else:
                return visitor.visitChildren(self)




    def attributeStatementParameter(self):

        localctx = ClistParser.AttributeStatementParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_attributeStatementParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(ClistParser.DELETE, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = ClistParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_deleteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(ClistParser.DELETE)
            self.state = 621
            self.dataset_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ClistParser.SET, 0)

        def variable(self):
            return self.getTypedRuleContext(ClistParser.VariableContext,0)


        def variableAssignment(self):
            return self.getTypedRuleContext(ClistParser.VariableAssignmentContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = ClistParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(ClistParser.SET)
            self.state = 624
            self.variable()
            self.state = 625
            self.variableAssignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALCHAR(self):
            return self.getToken(ClistParser.EQUALCHAR, 0)

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def calcExpression(self):
            return self.getTypedRuleContext(ClistParser.CalcExpressionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_variableAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableAssignment" ):
                listener.enterVariableAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableAssignment" ):
                listener.exitVariableAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableAssignment" ):
                return visitor.visitVariableAssignment(self)
            else:
                return visitor.visitChildren(self)




    def variableAssignment(self):

        localctx = ClistParser.VariableAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(ClistParser.EQUALCHAR)
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 628
                self.value()

            elif la_ == 2:
                self.state = 629
                self.calcExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(ClistParser.GLOBAL, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.VariableContext)
            else:
                return self.getTypedRuleContext(ClistParser.VariableContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalStatement" ):
                return visitor.visitGlobalStatement(self)
            else:
                return visitor.visitChildren(self)




    def globalStatement(self):

        localctx = ClistParser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_globalStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(ClistParser.GLOBAL)
            self.state = 634 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 633
                    self.variable()

                else:
                    raise NoViableAltException(self)
                self.state = 636 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IspExecStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISPEXEC(self):
            return self.getToken(ClistParser.ISPEXEC, 0)

        def vgetService(self):
            return self.getTypedRuleContext(ClistParser.VgetServiceContext,0)


        def ftopenService(self):
            return self.getTypedRuleContext(ClistParser.FtopenServiceContext,0)


        def ftCloseService(self):
            return self.getTypedRuleContext(ClistParser.FtCloseServiceContext,0)


        def ftinclService(self):
            return self.getTypedRuleContext(ClistParser.FtinclServiceContext,0)


        def browseService(self):
            return self.getTypedRuleContext(ClistParser.BrowseServiceContext,0)


        def editService(self):
            return self.getTypedRuleContext(ClistParser.EditServiceContext,0)


        def fteraseService(self):
            return self.getTypedRuleContext(ClistParser.FteraseServiceContext,0)


        def vputService(self):
            return self.getTypedRuleContext(ClistParser.VputServiceContext,0)


        def lminitService(self):
            return self.getTypedRuleContext(ClistParser.LminitServiceContext,0)


        def lmcopyService(self):
            return self.getTypedRuleContext(ClistParser.LmcopyServiceContext,0)


        def lmfreeService(self):
            return self.getTypedRuleContext(ClistParser.LmfreeServiceContext,0)


        def tablebService(self):
            return self.getTypedRuleContext(ClistParser.TablebServiceContext,0)


        def controlService(self):
            return self.getTypedRuleContext(ClistParser.ControlServiceContext,0)


        def logService(self):
            return self.getTypedRuleContext(ClistParser.LogServiceContext,0)


        def displayService(self):
            return self.getTypedRuleContext(ClistParser.DisplayServiceContext,0)


        def addpopService(self):
            return self.getTypedRuleContext(ClistParser.AddpopServiceContext,0)


        def fenService(self):
            return self.getTypedRuleContext(ClistParser.FenServiceContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_ispExecStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIspExecStatement" ):
                listener.enterIspExecStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIspExecStatement" ):
                listener.exitIspExecStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIspExecStatement" ):
                return visitor.visitIspExecStatement(self)
            else:
                return visitor.visitChildren(self)




    def ispExecStatement(self):

        localctx = ClistParser.IspExecStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ispExecStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(ClistParser.ISPEXEC)
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.state = 639
                self.vgetService()
                pass
            elif token in [126]:
                self.state = 640
                self.ftopenService()
                pass
            elif token in [127]:
                self.state = 641
                self.ftCloseService()
                pass
            elif token in [128]:
                self.state = 642
                self.ftinclService()
                pass
            elif token in [123]:
                self.state = 643
                self.browseService()
                pass
            elif token in [56]:
                self.state = 644
                self.editService()
                pass
            elif token in [129]:
                self.state = 645
                self.fteraseService()
                pass
            elif token in [122]:
                self.state = 646
                self.vputService()
                pass
            elif token in [70]:
                self.state = 647
                self.lminitService()
                pass
            elif token in [71]:
                self.state = 648
                self.lmcopyService()
                pass
            elif token in [72]:
                self.state = 649
                self.lmfreeService()
                pass
            elif token in [45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68]:
                self.state = 650
                self.tablebService()
                pass
            elif token in [43]:
                self.state = 651
                self.controlService()
                pass
            elif token in [102]:
                self.state = 652
                self.logService()
                pass
            elif token in [125]:
                self.state = 653
                self.displayService()
                pass
            elif token in [101]:
                self.state = 654
                self.addpopService()
                pass
            elif token in [44]:
                self.state = 655
                self.fenService()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FenServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FEN(self):
            return self.getToken(ClistParser.FEN, 0)

        def fenParameter(self):
            return self.getTypedRuleContext(ClistParser.FenParameterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_fenService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFenService" ):
                listener.enterFenService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFenService" ):
                listener.exitFenService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFenService" ):
                return visitor.visitFenService(self)
            else:
                return visitor.visitChildren(self)




    def fenService(self):

        localctx = ClistParser.FenServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fenService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(ClistParser.FEN)
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 659
                self.fenParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FenParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_fenParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFenParameter" ):
                listener.enterFenParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFenParameter" ):
                listener.exitFenParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFenParameter" ):
                return visitor.visitFenParameter(self)
            else:
                return visitor.visitChildren(self)




    def fenParameter(self):

        localctx = ClistParser.FenParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fenParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddpopServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDPOP(self):
            return self.getToken(ClistParser.ADDPOP, 0)

        def addpopServiceParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.AddpopServiceParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.AddpopServiceParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_addpopService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddpopService" ):
                listener.enterAddpopService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddpopService" ):
                listener.exitAddpopService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddpopService" ):
                return visitor.visitAddpopService(self)
            else:
                return visitor.visitChildren(self)




    def addpopService(self):

        localctx = ClistParser.AddpopServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_addpopService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(ClistParser.ADDPOP)
            self.state = 668
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 665
                    self.addpopServiceParameter() 
                self.state = 670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddpopServiceParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_addpopServiceParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddpopServiceParameter" ):
                listener.enterAddpopServiceParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddpopServiceParameter" ):
                listener.exitAddpopServiceParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddpopServiceParameter" ):
                return visitor.visitAddpopServiceParameter(self)
            else:
                return visitor.visitChildren(self)




    def addpopServiceParameter(self):

        localctx = ClistParser.AddpopServiceParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_addpopServiceParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(ClistParser.DISPLAY, 0)

        def displayParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.DisplayParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.DisplayParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_displayService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayService" ):
                listener.enterDisplayService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayService" ):
                listener.exitDisplayService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayService" ):
                return visitor.visitDisplayService(self)
            else:
                return visitor.visitChildren(self)




    def displayService(self):

        localctx = ClistParser.DisplayServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_displayService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(ClistParser.DISPLAY)
            self.state = 677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 674
                    self.displayParameter() 
                self.state = 679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_displayParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayParameter" ):
                listener.enterDisplayParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayParameter" ):
                listener.exitDisplayParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayParameter" ):
                return visitor.visitDisplayParameter(self)
            else:
                return visitor.visitChildren(self)




    def displayParameter(self):

        localctx = ClistParser.DisplayParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_displayParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(ClistParser.LOG, 0)

        def message(self):
            return self.getTypedRuleContext(ClistParser.MessageContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_logService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogService" ):
                listener.enterLogService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogService" ):
                listener.exitLogService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogService" ):
                return visitor.visitLogService(self)
            else:
                return visitor.visitChildren(self)




    def logService(self):

        localctx = ClistParser.LogServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_logService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(ClistParser.LOG)
            self.state = 683
            self.message()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessage" ):
                listener.enterMessage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessage" ):
                listener.exitMessage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessage" ):
                return visitor.visitMessage(self)
            else:
                return visitor.visitChildren(self)




    def message(self):

        localctx = ClistParser.MessageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(ClistParser.CONTROL, 0)

        def controlServiceParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ControlServiceParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.ControlServiceParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_controlService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlService" ):
                listener.enterControlService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlService" ):
                listener.exitControlService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlService" ):
                return visitor.visitControlService(self)
            else:
                return visitor.visitChildren(self)




    def controlService(self):

        localctx = ClistParser.ControlServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_controlService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(ClistParser.CONTROL)
            self.state = 691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 688
                    self.controlServiceParameter() 
                self.state = 693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlServiceParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_controlServiceParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlServiceParameter" ):
                listener.enterControlServiceParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlServiceParameter" ):
                listener.exitControlServiceParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlServiceParameter" ):
                return visitor.visitControlServiceParameter(self)
            else:
                return visitor.visitChildren(self)




    def controlServiceParameter(self):

        localctx = ClistParser.ControlServiceParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_controlServiceParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablebServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableServiceName(self):
            return self.getTypedRuleContext(ClistParser.TableServiceNameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(ClistParser.Table_nameContext,0)


        def tableParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.TableParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.TableParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_tablebService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablebService" ):
                listener.enterTablebService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablebService" ):
                listener.exitTablebService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablebService" ):
                return visitor.visitTablebService(self)
            else:
                return visitor.visitChildren(self)




    def tablebService(self):

        localctx = ClistParser.TablebServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_tablebService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.tableServiceName()
            self.state = 697
            self.table_name()
            self.state = 701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 698
                    self.tableParameter() 
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableServiceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TBDISPL(self):
            return self.getToken(ClistParser.TBDISPL, 0)

        def TBQUERY(self):
            return self.getToken(ClistParser.TBQUERY, 0)

        def TBTOP(self):
            return self.getToken(ClistParser.TBTOP, 0)

        def TBSKIP(self):
            return self.getToken(ClistParser.TBSKIP, 0)

        def TBDELETE(self):
            return self.getToken(ClistParser.TBDELETE, 0)

        def TBSORT(self):
            return self.getToken(ClistParser.TBSORT, 0)

        def TBMOD(self):
            return self.getToken(ClistParser.TBMOD, 0)

        def TBOPEN(self):
            return self.getToken(ClistParser.TBOPEN, 0)

        def TBCREATE(self):
            return self.getToken(ClistParser.TBCREATE, 0)

        def TBEND(self):
            return self.getToken(ClistParser.TBEND, 0)

        def TBCLOSE(self):
            return self.getToken(ClistParser.TBCLOSE, 0)

        def TB(self):
            return self.getToken(ClistParser.TB, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_tableServiceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableServiceName" ):
                listener.enterTableServiceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableServiceName" ):
                listener.exitTableServiceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableServiceName" ):
                return visitor.visitTableServiceName(self)
            else:
                return visitor.visitChildren(self)




    def tableServiceName(self):

        localctx = ClistParser.TableServiceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_tableServiceName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            _la = self._input.LA(1)
            if not(((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & 16769025) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referencedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ReferencedVariableContext)
            else:
                return self.getTypedRuleContext(ClistParser.ReferencedVariableContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.DOT)
            else:
                return self.getToken(ClistParser.DOT, i)

        def getRuleIndex(self):
            return ClistParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = ClistParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.referencedVariable()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 707
                self.match(ClistParser.DOT)
                self.state = 708
                self.referencedVariable()
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_tableParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableParameter" ):
                listener.enterTableParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableParameter" ):
                listener.exitTableParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableParameter" ):
                return visitor.visitTableParameter(self)
            else:
                return visitor.visitChildren(self)




    def tableParameter(self):

        localctx = ClistParser.TableParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_tableParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LminitServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LMINIT(self):
            return self.getToken(ClistParser.LMINIT, 0)

        def clist_data_id_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_data_id_presentationContext,0)


        def clist_dataset_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_dataset_presentationContext,0)


        def lminitParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.LminitParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.LminitParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_lminitService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLminitService" ):
                listener.enterLminitService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLminitService" ):
                listener.exitLminitService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLminitService" ):
                return visitor.visitLminitService(self)
            else:
                return visitor.visitChildren(self)




    def lminitService(self):

        localctx = ClistParser.LminitServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_lminitService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(ClistParser.LMINIT)
            self.state = 717
            self.clist_data_id_presentation()
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 718
                self.clist_dataset_presentation()


            self.state = 724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 721
                    self.lminitParameter() 
                self.state = 726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LmfreeServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LMFREE(self):
            return self.getToken(ClistParser.LMFREE, 0)

        def clist_data_id_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_data_id_presentationContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_lmfreeService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLmfreeService" ):
                listener.enterLmfreeService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLmfreeService" ):
                listener.exitLmfreeService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLmfreeService" ):
                return visitor.visitLmfreeService(self)
            else:
                return visitor.visitChildren(self)




    def lmfreeService(self):

        localctx = ClistParser.LmfreeServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_lmfreeService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(ClistParser.LMFREE)
            self.state = 728
            self.clist_data_id_presentation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LmcopyServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LMCOPY(self):
            return self.getToken(ClistParser.LMCOPY, 0)

        def fromId(self):
            return self.getTypedRuleContext(ClistParser.FromIdContext,0)


        def toDataId(self):
            return self.getTypedRuleContext(ClistParser.ToDataIdContext,0)


        def fromMem(self):
            return self.getTypedRuleContext(ClistParser.FromMemContext,0)


        def toMem(self):
            return self.getTypedRuleContext(ClistParser.ToMemContext,0)


        def lmcopyParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.LmcopyParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.LmcopyParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_lmcopyService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLmcopyService" ):
                listener.enterLmcopyService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLmcopyService" ):
                listener.exitLmcopyService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLmcopyService" ):
                return visitor.visitLmcopyService(self)
            else:
                return visitor.visitChildren(self)




    def lmcopyService(self):

        localctx = ClistParser.LmcopyServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_lmcopyService)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(ClistParser.LMCOPY)
            self.state = 731
            self.fromId()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 732
                self.fromMem()


            self.state = 735
            self.toDataId()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 736
                self.toMem()


            self.state = 742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 739
                    self.lmcopyParameter() 
                self.state = 744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromMemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROMMEM(self):
            return self.getToken(ClistParser.FROMMEM, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def member_name(self):
            return self.getTypedRuleContext(ClistParser.Member_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_fromMem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromMem" ):
                listener.enterFromMem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromMem" ):
                listener.exitFromMem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromMem" ):
                return visitor.visitFromMem(self)
            else:
                return visitor.visitChildren(self)




    def fromMem(self):

        localctx = ClistParser.FromMemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fromMem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(ClistParser.FROMMEM)
            self.state = 746
            self.match(ClistParser.LPAREN)
            self.state = 747
            self.member_name()
            self.state = 748
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToMemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOMEM(self):
            return self.getToken(ClistParser.TOMEM, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def member_name(self):
            return self.getTypedRuleContext(ClistParser.Member_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_toMem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToMem" ):
                listener.enterToMem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToMem" ):
                listener.exitToMem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToMem" ):
                return visitor.visitToMem(self)
            else:
                return visitor.visitChildren(self)




    def toMem(self):

        localctx = ClistParser.ToMemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_toMem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(ClistParser.TOMEM)
            self.state = 751
            self.match(ClistParser.LPAREN)
            self.state = 752
            self.member_name()
            self.state = 753
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LmcopyParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_lmcopyParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLmcopyParameter" ):
                listener.enterLmcopyParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLmcopyParameter" ):
                listener.exitLmcopyParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLmcopyParameter" ):
                return visitor.visitLmcopyParameter(self)
            else:
                return visitor.visitChildren(self)




    def lmcopyParameter(self):

        localctx = ClistParser.LmcopyParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_lmcopyParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROMID(self):
            return self.getToken(ClistParser.FROMID, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_fromId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromId" ):
                listener.enterFromId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromId" ):
                listener.exitFromId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromId" ):
                return visitor.visitFromId(self)
            else:
                return visitor.visitChildren(self)




    def fromId(self):

        localctx = ClistParser.FromIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fromId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(ClistParser.FROMID)
            self.state = 758
            self.match(ClistParser.LPAREN)
            self.state = 759
            self.value()
            self.state = 760
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToDataIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TODATAID(self):
            return self.getToken(ClistParser.TODATAID, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_toDataId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToDataId" ):
                listener.enterToDataId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToDataId" ):
                listener.exitToDataId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToDataId" ):
                return visitor.visitToDataId(self)
            else:
                return visitor.visitChildren(self)




    def toDataId(self):

        localctx = ClistParser.ToDataIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_toDataId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(ClistParser.TODATAID)
            self.state = 763
            self.match(ClistParser.LPAREN)
            self.state = 764
            self.value()
            self.state = 765
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LminitParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_lminitParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLminitParameter" ):
                listener.enterLminitParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLminitParameter" ):
                listener.exitLminitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLminitParameter" ):
                return visitor.visitLminitParameter(self)
            else:
                return visitor.visitChildren(self)




    def lminitParameter(self):

        localctx = ClistParser.LminitParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_lminitParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FteraseServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FTERASE(self):
            return self.getToken(ClistParser.FTERASE, 0)

        def member_name(self):
            return self.getTypedRuleContext(ClistParser.Member_nameContext,0)


        def clist_library_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_library_presentationContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_fteraseService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFteraseService" ):
                listener.enterFteraseService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFteraseService" ):
                listener.exitFteraseService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFteraseService" ):
                return visitor.visitFteraseService(self)
            else:
                return visitor.visitChildren(self)




    def fteraseService(self):

        localctx = ClistParser.FteraseServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fteraseService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(ClistParser.FTERASE)
            self.state = 770
            self.member_name()
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 771
                self.clist_library_presentation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrowseServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROWSE(self):
            return self.getToken(ClistParser.BROWSE, 0)

        def clist_dataset_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_dataset_presentationContext,0)


        def clist_file_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_file_presentationContext,0)


        def clist_data_id_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_data_id_presentationContext,0)


        def browseServiceParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.BrowseServiceParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.BrowseServiceParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_browseService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBrowseService" ):
                listener.enterBrowseService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBrowseService" ):
                listener.exitBrowseService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBrowseService" ):
                return visitor.visitBrowseService(self)
            else:
                return visitor.visitChildren(self)




    def browseService(self):

        localctx = ClistParser.BrowseServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_browseService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(ClistParser.BROWSE)
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 775
                self.clist_dataset_presentation()

            elif la_ == 2:
                self.state = 776
                self.clist_file_presentation()

            elif la_ == 3:
                self.state = 777
                self.clist_data_id_presentation()


            self.state = 783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 780
                    self.browseServiceParameter() 
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrowseServiceParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_browseServiceParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBrowseServiceParameter" ):
                listener.enterBrowseServiceParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBrowseServiceParameter" ):
                listener.exitBrowseServiceParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBrowseServiceParameter" ):
                return visitor.visitBrowseServiceParameter(self)
            else:
                return visitor.visitChildren(self)




    def browseServiceParameter(self):

        localctx = ClistParser.BrowseServiceParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_browseServiceParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EditServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EDIT(self):
            return self.getToken(ClistParser.EDIT, 0)

        def clist_dataset_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_dataset_presentationContext,0)


        def clist_file_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_file_presentationContext,0)


        def clist_data_id_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_data_id_presentationContext,0)


        def editServiceParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.EditServiceParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.EditServiceParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_editService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEditService" ):
                listener.enterEditService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEditService" ):
                listener.exitEditService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEditService" ):
                return visitor.visitEditService(self)
            else:
                return visitor.visitChildren(self)




    def editService(self):

        localctx = ClistParser.EditServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_editService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(ClistParser.EDIT)
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 789
                self.clist_dataset_presentation()

            elif la_ == 2:
                self.state = 790
                self.clist_file_presentation()

            elif la_ == 3:
                self.state = 791
                self.clist_data_id_presentation()


            self.state = 797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 794
                    self.editServiceParameter() 
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EditServiceParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_editServiceParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEditServiceParameter" ):
                listener.enterEditServiceParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEditServiceParameter" ):
                listener.exitEditServiceParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEditServiceParameter" ):
                return visitor.visitEditServiceParameter(self)
            else:
                return visitor.visitChildren(self)




    def editServiceParameter(self):

        localctx = ClistParser.EditServiceParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_editServiceParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtinclServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FTINCL(self):
            return self.getToken(ClistParser.FTINCL, 0)

        def skel_name(self):
            return self.getTypedRuleContext(ClistParser.Skel_nameContext,0)


        def ftinclParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.FtinclParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.FtinclParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_ftinclService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtinclService" ):
                listener.enterFtinclService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtinclService" ):
                listener.exitFtinclService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtinclService" ):
                return visitor.visitFtinclService(self)
            else:
                return visitor.visitChildren(self)




    def ftinclService(self):

        localctx = ClistParser.FtinclServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_ftinclService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(ClistParser.FTINCL)
            self.state = 803
            self.skel_name()
            self.state = 807
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 804
                    self.ftinclParameter() 
                self.state = 809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Skel_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_skel_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkel_name" ):
                listener.enterSkel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkel_name" ):
                listener.exitSkel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkel_name" ):
                return visitor.visitSkel_name(self)
            else:
                return visitor.visitChildren(self)




    def skel_name(self):

        localctx = ClistParser.Skel_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_skel_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtinclParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_ftinclParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtinclParameter" ):
                listener.enterFtinclParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtinclParameter" ):
                listener.exitFtinclParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtinclParameter" ):
                return visitor.visitFtinclParameter(self)
            else:
                return visitor.visitChildren(self)




    def ftinclParameter(self):

        localctx = ClistParser.FtinclParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_ftinclParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtCloseServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FTCLOSE(self):
            return self.getToken(ClistParser.FTCLOSE, 0)

        def ftCloseName(self):
            return self.getTypedRuleContext(ClistParser.FtCloseNameContext,0)


        def ftCloseLibrary(self):
            return self.getTypedRuleContext(ClistParser.FtCloseLibraryContext,0)


        def ftCloseParameter(self):
            return self.getTypedRuleContext(ClistParser.FtCloseParameterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_ftCloseService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtCloseService" ):
                listener.enterFtCloseService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtCloseService" ):
                listener.exitFtCloseService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtCloseService" ):
                return visitor.visitFtCloseService(self)
            else:
                return visitor.visitChildren(self)




    def ftCloseService(self):

        localctx = ClistParser.FtCloseServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ftCloseService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(ClistParser.FTCLOSE)
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 815
                self.ftCloseName()


            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 818
                self.ftCloseLibrary()


            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 821
                self.ftCloseParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtCloseNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def member_name(self):
            return self.getTypedRuleContext(ClistParser.Member_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_ftCloseName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtCloseName" ):
                listener.enterFtCloseName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtCloseName" ):
                listener.exitFtCloseName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtCloseName" ):
                return visitor.visitFtCloseName(self)
            else:
                return visitor.visitChildren(self)




    def ftCloseName(self):

        localctx = ClistParser.FtCloseNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ftCloseName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(ClistParser.IDENTIFIER)
            self.state = 825
            self.match(ClistParser.LPAREN)
            self.state = 826
            self.member_name()
            self.state = 827
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtCloseLibraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIB(self):
            return self.getToken(ClistParser.LIB, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_ftCloseLibrary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtCloseLibrary" ):
                listener.enterFtCloseLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtCloseLibrary" ):
                listener.exitFtCloseLibrary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtCloseLibrary" ):
                return visitor.visitFtCloseLibrary(self)
            else:
                return visitor.visitChildren(self)




    def ftCloseLibrary(self):

        localctx = ClistParser.FtCloseLibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ftCloseLibrary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(ClistParser.LIB)
            self.state = 830
            self.match(ClistParser.LPAREN)
            self.state = 831
            self.match(ClistParser.IDENTIFIER)
            self.state = 832
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtCloseParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_ftCloseParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtCloseParameter" ):
                listener.enterFtCloseParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtCloseParameter" ):
                listener.exitFtCloseParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtCloseParameter" ):
                return visitor.visitFtCloseParameter(self)
            else:
                return visitor.visitChildren(self)




    def ftCloseParameter(self):

        localctx = ClistParser.FtCloseParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ftCloseParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtopenServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FTOPEN(self):
            return self.getToken(ClistParser.FTOPEN, 0)

        def ftopenServiceParameter(self):
            return self.getTypedRuleContext(ClistParser.FtopenServiceParameterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_ftopenService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtopenService" ):
                listener.enterFtopenService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtopenService" ):
                listener.exitFtopenService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtopenService" ):
                return visitor.visitFtopenService(self)
            else:
                return visitor.visitChildren(self)




    def ftopenService(self):

        localctx = ClistParser.FtopenServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_ftopenService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(ClistParser.FTOPEN)
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 837
                self.ftopenServiceParameter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FtopenServiceParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_ftopenServiceParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFtopenServiceParameter" ):
                listener.enterFtopenServiceParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFtopenServiceParameter" ):
                listener.exitFtopenServiceParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFtopenServiceParameter" ):
                return visitor.visitFtopenServiceParameter(self)
            else:
                return visitor.visitChildren(self)




    def ftopenServiceParameter(self):

        localctx = ClistParser.FtopenServiceParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_ftopenServiceParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VgetServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VGET(self):
            return self.getToken(ClistParser.VGET, 0)

        def name_list(self):
            return self.getTypedRuleContext(ClistParser.Name_listContext,0)


        def vgetParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.VgetParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.VgetParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_vgetService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVgetService" ):
                listener.enterVgetService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVgetService" ):
                listener.exitVgetService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVgetService" ):
                return visitor.visitVgetService(self)
            else:
                return visitor.visitChildren(self)




    def vgetService(self):

        localctx = ClistParser.VgetServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_vgetService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(ClistParser.VGET)
            self.state = 843
            self.name_list()
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 844
                    self.vgetParameter() 
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VputServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VPUT(self):
            return self.getToken(ClistParser.VPUT, 0)

        def name_list(self):
            return self.getTypedRuleContext(ClistParser.Name_listContext,0)


        def vputParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.VputParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.VputParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_vputService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVputService" ):
                listener.enterVputService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVputService" ):
                listener.exitVputService(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVputService" ):
                return visitor.visitVputService(self)
            else:
                return visitor.visitChildren(self)




    def vputService(self):

        localctx = ClistParser.VputServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_vputService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(ClistParser.VPUT)
            self.state = 851
            self.name_list()
            self.state = 855
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 852
                    self.vputParameter() 
                self.state = 857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def name_list_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Name_list_itemContext)
            else:
                return self.getTypedRuleContext(ClistParser.Name_list_itemContext,i)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.COMMACHAR)
            else:
                return self.getToken(ClistParser.COMMACHAR, i)

        def getRuleIndex(self):
            return ClistParser.RULE_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list" ):
                listener.enterName_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list" ):
                listener.exitName_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_list" ):
                return visitor.visitName_list(self)
            else:
                return visitor.visitChildren(self)




    def name_list(self):

        localctx = ClistParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_name_list)
        self._la = 0 # Token type
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.match(ClistParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.match(ClistParser.LPAREN)
                self.state = 861 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 860
                    self.name_list_item()
                    self.state = 863 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1688996294428680) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 61574798901569) != 0)):
                        break

                self.state = 865
                self.match(ClistParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 867
                self.match(ClistParser.LPAREN)
                self.state = 868
                self.name_list_item()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==25:
                    self.state = 869
                    self.match(ClistParser.COMMACHAR)
                    self.state = 870
                    self.name_list_item()
                    self.state = 875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_list_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_name_list_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list_item" ):
                listener.enterName_list_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list_item" ):
                listener.exitName_list_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_list_item" ):
                return visitor.visitName_list_item(self)
            else:
                return visitor.visitChildren(self)




    def name_list_item(self):

        localctx = ClistParser.Name_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_name_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VgetParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_vgetParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVgetParameter" ):
                listener.enterVgetParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVgetParameter" ):
                listener.exitVgetParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVgetParameter" ):
                return visitor.visitVgetParameter(self)
            else:
                return visitor.visitChildren(self)




    def vgetParameter(self):

        localctx = ClistParser.VgetParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_vgetParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VputParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_vputParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVputParameter" ):
                listener.enterVputParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVputParameter" ):
                listener.exitVputParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVputParameter" ):
                return visitor.visitVputParameter(self)
            else:
                return visitor.visitChildren(self)




    def vputParameter(self):

        localctx = ClistParser.VputParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_vputParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def buildInFuntion(self):
            return self.getTypedRuleContext(ClistParser.BuildInFuntionContext,0)


        def NUMBER(self):
            return self.getToken(ClistParser.NUMBER, 0)

        def variable(self):
            return self.getTypedRuleContext(ClistParser.VariableContext,0)


        def stringExpression(self):
            return self.getTypedRuleContext(ClistParser.StringExpressionContext,0)


        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def charDataKeyword(self):
            return self.getTypedRuleContext(ClistParser.CharDataKeywordContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = ClistParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_value)
        try:
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.match(ClistParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(ClistParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.buildInFuntion()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                self.match(ClistParser.NUMBER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 888
                self.variable()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 889
                self.stringExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 890
                self.dataset_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 891
                self.charDataKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.VariableContext)
            else:
                return self.getTypedRuleContext(ClistParser.VariableContext,i)


        def buildInFuntion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.BuildInFuntionContext)
            else:
                return self.getTypedRuleContext(ClistParser.BuildInFuntionContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.NUMBER)
            else:
                return self.getToken(ClistParser.NUMBER, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.COLON)
            else:
                return self.getToken(ClistParser.COLON, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.STRING)
            else:
                return self.getToken(ClistParser.STRING, i)

        def getRuleIndex(self):
            return ClistParser.RULE_stringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringExpression" ):
                listener.enterStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringExpression" ):
                listener.exitStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringExpression" ):
                return visitor.visitStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringExpression(self):

        localctx = ClistParser.StringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_stringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 899
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                    if la_ == 1:
                        self.state = 894
                        self.variable()
                        pass

                    elif la_ == 2:
                        self.state = 895
                        self.buildInFuntion()
                        pass

                    elif la_ == 3:
                        self.state = 896
                        self.match(ClistParser.NUMBER)
                        pass

                    elif la_ == 4:
                        self.state = 897
                        self.match(ClistParser.COLON)
                        pass

                    elif la_ == 5:
                        self.state = 898
                        self.match(ClistParser.STRING)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 901 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalcExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ClistParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_calcExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcExpression" ):
                listener.enterCalcExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcExpression" ):
                listener.exitCalcExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalcExpression" ):
                return visitor.visitCalcExpression(self)
            else:
                return visitor.visitChildren(self)




    def calcExpression(self):

        localctx = ClistParser.CalcExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_calcExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClistParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ToTermContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClistParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def term(self):
            return self.getTypedRuleContext(ClistParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToTerm" ):
                listener.enterToTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToTerm" ):
                listener.exitToTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToTerm" ):
                return visitor.visitToTerm(self)
            else:
                return visitor.visitChildren(self)


    class AddSubExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClistParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(ClistParser.ExpressionContext,0)

        def term(self):
            return self.getTypedRuleContext(ClistParser.TermContext,0)

        def MINUSCHAR(self):
            return self.getToken(ClistParser.MINUSCHAR, 0)
        def PLUSCHAR(self):
            return self.getToken(ClistParser.PLUSCHAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSubExpr" ):
                listener.enterAddSubExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSubExpr" ):
                listener.exitAddSubExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddSubExpr" ):
                return visitor.visitAddSubExpr(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClistParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = ClistParser.ToTermContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 906
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ClistParser.AddSubExprContext(self, ClistParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 908
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 909
                    _la = self._input.LA(1)
                    if not(_la==12 or _la==15):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 910
                    self.term(0) 
                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClistParser.RULE_term

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MulDivExprContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClistParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def term(self):
            return self.getTypedRuleContext(ClistParser.TermContext,0)

        def factor(self):
            return self.getTypedRuleContext(ClistParser.FactorContext,0)

        def ASTERISKCHAR(self):
            return self.getToken(ClistParser.ASTERISKCHAR, 0)
        def DIVCHAR(self):
            return self.getToken(ClistParser.DIVCHAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulDivExpr" ):
                listener.enterMulDivExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulDivExpr" ):
                listener.exitMulDivExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulDivExpr" ):
                return visitor.visitMulDivExpr(self)
            else:
                return visitor.visitChildren(self)


    class ToFactorContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClistParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def factor(self):
            return self.getTypedRuleContext(ClistParser.FactorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToFactor" ):
                listener.enterToFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToFactor" ):
                listener.exitToFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToFactor" ):
                return visitor.visitToFactor(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClistParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = ClistParser.ToFactorContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 917
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ClistParser.MulDivExprContext(self, ClistParser.TermContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 919
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 920
                    _la = self._input.LA(1)
                    if not(_la==16 or _la==19):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 921
                    self.factor() 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClistParser.RULE_factor

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NumberExprContext(FactorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClistParser.FactorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberExpr" ):
                listener.enterNumberExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberExpr" ):
                listener.exitNumberExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberExpr" ):
                return visitor.visitNumberExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(FactorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClistParser.FactorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(ClistParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def factor(self):

        localctx = ClistParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_factor)
        try:
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                localctx = ClistParser.ParenExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.match(ClistParser.LPAREN)
                self.state = 928
                self.expression(0)
                self.state = 929
                self.match(ClistParser.RPAREN)
                pass
            elif token in [3, 11, 19, 21, 27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137, 138, 139]:
                localctx = ClistParser.NumberExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.value()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosefileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSFILE(self):
            return self.getToken(ClistParser.CLOSFILE, 0)

        def fileName(self):
            return self.getTypedRuleContext(ClistParser.FileNameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_closefileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosefileStatement" ):
                listener.enterClosefileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosefileStatement" ):
                listener.exitClosefileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosefileStatement" ):
                return visitor.visitClosefileStatement(self)
            else:
                return visitor.visitChildren(self)




    def closefileStatement(self):

        localctx = ClistParser.ClosefileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_closefileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(ClistParser.CLOSFILE)
            self.state = 935
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetfileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETFILE(self):
            return self.getToken(ClistParser.GETFILE, 0)

        def fileName(self):
            return self.getTypedRuleContext(ClistParser.FileNameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_getfileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetfileStatement" ):
                listener.enterGetfileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetfileStatement" ):
                listener.exitGetfileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetfileStatement" ):
                return visitor.visitGetfileStatement(self)
            else:
                return visitor.visitChildren(self)




    def getfileStatement(self):

        localctx = ClistParser.GetfileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_getfileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(ClistParser.GETFILE)
            self.state = 938
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenfileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENFILE(self):
            return self.getToken(ClistParser.OPENFILE, 0)

        def fileName(self):
            return self.getTypedRuleContext(ClistParser.FileNameContext,0)


        def openfileOption(self):
            return self.getTypedRuleContext(ClistParser.OpenfileOptionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_openfileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenfileStatement" ):
                listener.enterOpenfileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenfileStatement" ):
                listener.exitOpenfileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenfileStatement" ):
                return visitor.visitOpenfileStatement(self)
            else:
                return visitor.visitChildren(self)




    def openfileStatement(self):

        localctx = ClistParser.OpenfileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_openfileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(ClistParser.OPENFILE)
            self.state = 941
            self.fileName()
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 942
                self.openfileOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenfileOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_openfileOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenfileOption" ):
                listener.enterOpenfileOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenfileOption" ):
                listener.exitOpenfileOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenfileOption" ):
                return visitor.visitOpenfileOption(self)
            else:
                return visitor.visitChildren(self)




    def openfileOption(self):

        localctx = ClistParser.OpenfileOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_openfileOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(ClistParser.CALL, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def member_name(self):
            return self.getTypedRuleContext(ClistParser.Member_nameContext,0)


        def callOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.CallOptionContext)
            else:
                return self.getTypedRuleContext(ClistParser.CallOptionContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = ClistParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_callStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(ClistParser.CALL)
            self.state = 948
            self.dataset_name()
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 949
                self.member_name()


            self.state = 955
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 952
                    self.callOption() 
                self.state = 957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_name" ):
                listener.enterMember_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_name" ):
                listener.exitMember_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMember_name" ):
                return visitor.visitMember_name(self)
            else:
                return visitor.visitChildren(self)




    def member_name(self):

        localctx = ClistParser.Member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_member_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            _la = self._input.LA(1)
            if not(_la==3 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_callOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallOption" ):
                listener.enterCallOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallOption" ):
                listener.exitCallOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallOption" ):
                return visitor.visitCallOption(self)
            else:
                return visitor.visitChildren(self)




    def callOption(self):

        localctx = ClistParser.CallOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_callOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DsnEndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DSN(self):
            return self.getToken(ClistParser.DSN, 0)

        def clist_system_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_system_presentationContext,0)


        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def ENDO(self):
            return self.getToken(ClistParser.ENDO, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_dsnEndStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDsnEndStatement" ):
                listener.enterDsnEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDsnEndStatement" ):
                listener.exitDsnEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDsnEndStatement" ):
                return visitor.visitDsnEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def dsnEndStatement(self):

        localctx = ClistParser.DsnEndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_dsnEndStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(ClistParser.DSN)
            self.state = 963
            self.clist_system_presentation()
            self.state = 964
            self.statement()
            self.state = 965
            _la = self._input.LA(1)
            if not(_la==75 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RunStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUN(self):
            return self.getToken(ClistParser.RUN, 0)

        def clist_program_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_program_presentationContext,0)


        def clist_plan_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_plan_presentationContext,0)


        def clist_library_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_library_presentationContext,0)


        def clist_params_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_params_presentationContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_runStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRunStatement" ):
                listener.enterRunStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRunStatement" ):
                listener.exitRunStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRunStatement" ):
                return visitor.visitRunStatement(self)
            else:
                return visitor.visitChildren(self)




    def runStatement(self):

        localctx = ClistParser.RunStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_runStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(ClistParser.RUN)
            self.state = 968
            self.clist_program_presentation()
            self.state = 969
            self.clist_plan_presentation()
            self.state = 970
            self.clist_library_presentation()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 971
                self.clist_params_presentation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOC(self):
            return self.getToken(ClistParser.ALLOC, 0)

        def ALLOCATE(self):
            return self.getToken(ClistParser.ALLOCATE, 0)

        def allocParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.AllocParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.AllocParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_allocStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocStatement" ):
                listener.enterAllocStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocStatement" ):
                listener.exitAllocStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocStatement" ):
                return visitor.visitAllocStatement(self)
            else:
                return visitor.visitChildren(self)




    def allocStatement(self):

        localctx = ClistParser.AllocStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_allocStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            _la = self._input.LA(1)
            if not(_la==29 or _la==30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 975
                    self.allocParameter() 
                self.state = 980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clist_file_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_file_presentationContext,0)


        def clist_dataset_presentation(self):
            return self.getTypedRuleContext(ClistParser.Clist_dataset_presentationContext,0)


        def otherAllocParameter(self):
            return self.getTypedRuleContext(ClistParser.OtherAllocParameterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_allocParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocParameter" ):
                listener.enterAllocParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocParameter" ):
                listener.exitAllocParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocParameter" ):
                return visitor.visitAllocParameter(self)
            else:
                return visitor.visitChildren(self)




    def allocParameter(self):

        localctx = ClistParser.AllocParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_allocParameter)
        try:
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.clist_file_presentation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.clist_dataset_presentation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.otherAllocParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherAllocParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allocParameterName(self):
            return self.getTypedRuleContext(ClistParser.AllocParameterNameContext,0)


        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def allocParameterParams(self):
            return self.getTypedRuleContext(ClistParser.AllocParameterParamsContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_otherAllocParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherAllocParameter" ):
                listener.enterOtherAllocParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherAllocParameter" ):
                listener.exitOtherAllocParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherAllocParameter" ):
                return visitor.visitOtherAllocParameter(self)
            else:
                return visitor.visitChildren(self)




    def otherAllocParameter(self):

        localctx = ClistParser.OtherAllocParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_otherAllocParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.allocParameterName()
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 987
                self.match(ClistParser.LPAREN)
                self.state = 988
                self.allocParameterParams()
                self.state = 989
                self.match(ClistParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clistKeyword(self):
            return self.getTypedRuleContext(ClistParser.ClistKeywordContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_allocParameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocParameterName" ):
                listener.enterAllocParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocParameterName" ):
                listener.exitAllocParameterName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocParameterName" ):
                return visitor.visitAllocParameterName(self)
            else:
                return visitor.visitChildren(self)




    def allocParameterName(self):

        localctx = ClistParser.AllocParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_allocParameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.clistKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocParameterParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allocParameterParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.AllocParameterParamContext)
            else:
                return self.getTypedRuleContext(ClistParser.AllocParameterParamContext,i)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.COMMACHAR)
            else:
                return self.getToken(ClistParser.COMMACHAR, i)

        def getRuleIndex(self):
            return ClistParser.RULE_allocParameterParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocParameterParams" ):
                listener.enterAllocParameterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocParameterParams" ):
                listener.exitAllocParameterParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocParameterParams" ):
                return visitor.visitAllocParameterParams(self)
            else:
                return visitor.visitChildren(self)




    def allocParameterParams(self):

        localctx = ClistParser.AllocParameterParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_allocParameterParams)
        self._la = 0 # Token type
        try:
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.allocParameterParam()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==25:
                    self.state = 996
                    self.match(ClistParser.COMMACHAR)
                    self.state = 997
                    self.allocParameterParam()
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1003
                    self.allocParameterParam()
                    self.state = 1006 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1688996294557704) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 61574798901569) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocParameterParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clistKeyword(self):
            return self.getTypedRuleContext(ClistParser.ClistKeywordContext,0)


        def NUMBER(self):
            return self.getToken(ClistParser.NUMBER, 0)

        def F_CHAR(self):
            return self.getToken(ClistParser.F_CHAR, 0)

        def attribute_name(self):
            return self.getTypedRuleContext(ClistParser.Attribute_nameContext,0)


        def ASTERISKCHAR(self):
            return self.getToken(ClistParser.ASTERISKCHAR, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_allocParameterParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocParameterParam" ):
                listener.enterAllocParameterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocParameterParam" ):
                listener.exitAllocParameterParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllocParameterParam" ):
                return visitor.visitAllocParameterParam(self)
            else:
                return visitor.visitChildren(self)




    def allocParameterParam(self):

        localctx = ClistParser.AllocParameterParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_allocParameterParam)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.clistKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.match(ClistParser.NUMBER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1012
                self.match(ClistParser.F_CHAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1013
                self.attribute_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1014
                self.match(ClistParser.ASTERISKCHAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1015
                self.dataset_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FreeFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FREE(self):
            return self.getToken(ClistParser.FREE, 0)

        def clist_file_presentation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Clist_file_presentationContext)
            else:
                return self.getTypedRuleContext(ClistParser.Clist_file_presentationContext,i)


        def clist_attribute_presentation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Clist_attribute_presentationContext)
            else:
                return self.getTypedRuleContext(ClistParser.Clist_attribute_presentationContext,i)


        def clist_attribute_list_presentation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Clist_attribute_list_presentationContext)
            else:
                return self.getTypedRuleContext(ClistParser.Clist_attribute_list_presentationContext,i)


        def clist_dataset_presentation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Clist_dataset_presentationContext)
            else:
                return self.getTypedRuleContext(ClistParser.Clist_dataset_presentationContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_freeFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreeFileStatement" ):
                listener.enterFreeFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreeFileStatement" ):
                listener.exitFreeFileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreeFileStatement" ):
                return visitor.visitFreeFileStatement(self)
            else:
                return visitor.visitChildren(self)




    def freeFileStatement(self):

        localctx = ClistParser.FreeFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_freeFileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(ClistParser.FREE)
            self.state = 1023 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1023
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [40, 41, 85, 105, 137]:
                        self.state = 1019
                        self.clist_file_presentation()
                        pass
                    elif token in [114]:
                        self.state = 1020
                        self.clist_attribute_presentation()
                        pass
                    elif token in [111]:
                        self.state = 1021
                        self.clist_attribute_list_presentation()
                        pass
                    elif token in [28, 134, 135]:
                        self.state = 1022
                        self.clist_dataset_presentation()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1025 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_attribute_list_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRLIST(self):
            return self.getToken(ClistParser.ATTRLIST, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def attribute_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Attribute_nameContext)
            else:
                return self.getTypedRuleContext(ClistParser.Attribute_nameContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_clist_attribute_list_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_attribute_list_presentation" ):
                listener.enterClist_attribute_list_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_attribute_list_presentation" ):
                listener.exitClist_attribute_list_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_attribute_list_presentation" ):
                return visitor.visitClist_attribute_list_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_attribute_list_presentation(self):

        localctx = ClistParser.Clist_attribute_list_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_clist_attribute_list_presentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(ClistParser.ATTRLIST)
            self.state = 1028
            self.match(ClistParser.LPAREN)
            self.state = 1030 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1029
                self.attribute_name()
                self.state = 1032 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==17 or _la==139):
                    break

            self.state = 1034
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_attribute_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTR(self):
            return self.getToken(ClistParser.ATTR, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def attribute_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Attribute_nameContext)
            else:
                return self.getTypedRuleContext(ClistParser.Attribute_nameContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_clist_attribute_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_attribute_presentation" ):
                listener.enterClist_attribute_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_attribute_presentation" ):
                listener.exitClist_attribute_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_attribute_presentation" ):
                return visitor.visitClist_attribute_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_attribute_presentation(self):

        localctx = ClistParser.Clist_attribute_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_clist_attribute_presentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(ClistParser.ATTR)
            self.state = 1037
            self.match(ClistParser.LPAREN)
            self.state = 1039 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1038
                self.attribute_name()
                self.state = 1041 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==17 or _la==139):
                    break

            self.state = 1043
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def SSLASH(self):
            return self.getToken(ClistParser.SSLASH, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_name" ):
                return visitor.visitAttribute_name(self)
            else:
                return visitor.visitChildren(self)




    def attribute_name(self):

        localctx = ClistParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_attribute_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 1045
                self.match(ClistParser.SSLASH)


            self.state = 1048
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_file_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def FILE(self):
            return self.getToken(ClistParser.FILE, 0)

        def F_CHAR(self):
            return self.getToken(ClistParser.F_CHAR, 0)

        def FI(self):
            return self.getToken(ClistParser.FI, 0)

        def DDNAME(self):
            return self.getToken(ClistParser.DDNAME, 0)

        def DDN(self):
            return self.getToken(ClistParser.DDN, 0)

        def fileName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.FileNameContext)
            else:
                return self.getTypedRuleContext(ClistParser.FileNameContext,i)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.COMMACHAR)
            else:
                return self.getToken(ClistParser.COMMACHAR, i)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_file_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_file_presentation" ):
                listener.enterClist_file_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_file_presentation" ):
                listener.exitClist_file_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_file_presentation" ):
                return visitor.visitClist_file_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_file_presentation(self):

        localctx = ClistParser.Clist_file_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_clist_file_presentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            _la = self._input.LA(1)
            if not(_la==40 or _la==41 or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 4503599628419073) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1051
            self.match(ClistParser.LPAREN)
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1688996291805184) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 43982612857153) != 0):
                    self.state = 1052
                    self.fileName()
                    self.state = 1057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1058
                self.fileName()
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==25:
                    self.state = 1059
                    self.match(ClistParser.COMMACHAR)
                    self.state = 1060
                    self.fileName()
                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1068
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_dataset_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def DATASET(self):
            return self.getToken(ClistParser.DATASET, 0)

        def DA(self):
            return self.getToken(ClistParser.DA, 0)

        def DATA(self):
            return self.getToken(ClistParser.DATA, 0)

        def dataset_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Dataset_nameContext)
            else:
                return self.getTypedRuleContext(ClistParser.Dataset_nameContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_clist_dataset_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_dataset_presentation" ):
                listener.enterClist_dataset_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_dataset_presentation" ):
                listener.exitClist_dataset_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_dataset_presentation" ):
                return visitor.visitClist_dataset_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_dataset_presentation(self):

        localctx = ClistParser.Clist_dataset_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_clist_dataset_presentation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            _la = self._input.LA(1)
            if not(_la==28 or _la==134 or _la==135):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1071
            self.match(ClistParser.LPAREN)
            self.state = 1073 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1072
                self.dataset_name()
                self.state = 1075 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1688996294426632) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 43982612857153) != 0)):
                    break

            self.state = 1077
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_program_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM(self):
            return self.getToken(ClistParser.PROGRAM, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def program_name(self):
            return self.getTypedRuleContext(ClistParser.Program_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_program_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_program_presentation" ):
                listener.enterClist_program_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_program_presentation" ):
                listener.exitClist_program_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_program_presentation" ):
                return visitor.visitClist_program_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_program_presentation(self):

        localctx = ClistParser.Clist_program_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_clist_program_presentation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(ClistParser.PROGRAM)
            self.state = 1080
            self.match(ClistParser.LPAREN)
            self.state = 1081
            self.program_name()
            self.state = 1082
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_plan_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLAN(self):
            return self.getToken(ClistParser.PLAN, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def plan_name(self):
            return self.getTypedRuleContext(ClistParser.Plan_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_plan_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_plan_presentation" ):
                listener.enterClist_plan_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_plan_presentation" ):
                listener.exitClist_plan_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_plan_presentation" ):
                return visitor.visitClist_plan_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_plan_presentation(self):

        localctx = ClistParser.Clist_plan_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_clist_plan_presentation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(ClistParser.PLAN)
            self.state = 1085
            self.match(ClistParser.LPAREN)
            self.state = 1086
            self.plan_name()
            self.state = 1087
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_library_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def library_name(self):
            return self.getTypedRuleContext(ClistParser.Library_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def LIB(self):
            return self.getToken(ClistParser.LIB, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_library_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_library_presentation" ):
                listener.enterClist_library_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_library_presentation" ):
                listener.exitClist_library_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_library_presentation" ):
                return visitor.visitClist_library_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_library_presentation(self):

        localctx = ClistParser.Clist_library_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_clist_library_presentation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(ClistParser.LIB)
            self.state = 1090
            self.match(ClistParser.LPAREN)
            self.state = 1091
            self.library_name()
            self.state = 1092
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_params_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARMS(self):
            return self.getToken(ClistParser.PARMS, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def params_name(self):
            return self.getTypedRuleContext(ClistParser.Params_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_params_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_params_presentation" ):
                listener.enterClist_params_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_params_presentation" ):
                listener.exitClist_params_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_params_presentation" ):
                return visitor.visitClist_params_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_params_presentation(self):

        localctx = ClistParser.Clist_params_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_clist_params_presentation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(ClistParser.PARMS)
            self.state = 1095
            self.match(ClistParser.LPAREN)
            self.state = 1096
            self.params_name()
            self.state = 1097
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_system_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEM(self):
            return self.getToken(ClistParser.SYSTEM, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def system_name(self):
            return self.getTypedRuleContext(ClistParser.System_nameContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_system_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_system_presentation" ):
                listener.enterClist_system_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_system_presentation" ):
                listener.exitClist_system_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_system_presentation" ):
                return visitor.visitClist_system_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_system_presentation(self):

        localctx = ClistParser.Clist_system_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_clist_system_presentation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(ClistParser.SYSTEM)
            self.state = 1100
            self.match(ClistParser.LPAREN)
            self.state = 1101
            self.system_name()
            self.state = 1102
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_data_id_presentationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATAID(self):
            return self.getToken(ClistParser.DATAID, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def data_id(self):
            return self.getTypedRuleContext(ClistParser.Data_idContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_data_id_presentation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_data_id_presentation" ):
                listener.enterClist_data_id_presentation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_data_id_presentation" ):
                listener.exitClist_data_id_presentation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_data_id_presentation" ):
                return visitor.visitClist_data_id_presentation(self)
            else:
                return visitor.visitChildren(self)




    def clist_data_id_presentation(self):

        localctx = ClistParser.Clist_data_id_presentationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_clist_data_id_presentation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(ClistParser.DATAID)
            self.state = 1105
            self.match(ClistParser.LPAREN)
            self.state = 1106
            self.data_id()
            self.state = 1107
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_data_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_id" ):
                listener.enterData_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_id" ):
                listener.exitData_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_id" ):
                return visitor.visitData_id(self)
            else:
                return visitor.visitChildren(self)




    def data_id(self):

        localctx = ClistParser.Data_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_data_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_system_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_name" ):
                listener.enterSystem_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_name" ):
                listener.exitSystem_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystem_name" ):
                return visitor.visitSystem_name(self)
            else:
                return visitor.visitChildren(self)




    def system_name(self):

        localctx = ClistParser.System_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_system_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plan_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_plan_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlan_name" ):
                listener.enterPlan_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlan_name" ):
                listener.exitPlan_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlan_name" ):
                return visitor.visitPlan_name(self)
            else:
                return visitor.visitChildren(self)




    def plan_name(self):

        localctx = ClistParser.Plan_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_plan_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_program_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_name" ):
                listener.enterProgram_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_name" ):
                listener.exitProgram_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram_name" ):
                return visitor.visitProgram_name(self)
            else:
                return visitor.visitChildren(self)




    def program_name(self):

        localctx = ClistParser.Program_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_program_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Library_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_library_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary_name" ):
                listener.enterLibrary_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary_name" ):
                listener.exitLibrary_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibrary_name" ):
                return visitor.visitLibrary_name(self)
            else:
                return visitor.visitChildren(self)




    def library_name(self):

        localctx = ClistParser.Library_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_library_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            _la = self._input.LA(1)
            if not(_la==3 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Params_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_params_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams_name" ):
                listener.enterParams_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams_name" ):
                listener.exitParams_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams_name" ):
                return visitor.visitParams_name(self)
            else:
                return visitor.visitChildren(self)




    def params_name(self):

        localctx = ClistParser.Params_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_params_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(ClistParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clistKeyword(self):
            return self.getTypedRuleContext(ClistParser.ClistKeywordContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_fileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileName" ):
                listener.enterFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileName" ):
                listener.exitFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileName" ):
                return visitor.visitFileName(self)
            else:
                return visitor.visitChildren(self)




    def fileName(self):

        localctx = ClistParser.FileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_fileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.clistKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneralStatementParemeterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def clistKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ClistKeywordContext)
            else:
                return self.getTypedRuleContext(ClistParser.ClistKeywordContext,i)


        def attribute_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Attribute_nameContext)
            else:
                return self.getTypedRuleContext(ClistParser.Attribute_nameContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.NUMBER)
            else:
                return self.getToken(ClistParser.NUMBER, i)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.VariableContext)
            else:
                return self.getTypedRuleContext(ClistParser.VariableContext,i)


        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(ClistParser.Signed_numberContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.STRING)
            else:
                return self.getToken(ClistParser.STRING, i)

        def getRuleIndex(self):
            return ClistParser.RULE_generalStatementParemeter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralStatementParemeter" ):
                listener.enterGeneralStatementParemeter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralStatementParemeter" ):
                listener.exitGeneralStatementParemeter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneralStatementParemeter" ):
                return visitor.visitGeneralStatementParemeter(self)
            else:
                return visitor.visitChildren(self)




    def generalStatementParemeter(self):

        localctx = ClistParser.GeneralStatementParemeterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_generalStatementParemeter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.value()
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1124
                self.match(ClistParser.LPAREN)
                self.state = 1131 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1131
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        self.state = 1125
                        self.clistKeyword()
                        pass

                    elif la_ == 2:
                        self.state = 1126
                        self.attribute_name()
                        pass

                    elif la_ == 3:
                        self.state = 1127
                        self.match(ClistParser.NUMBER)
                        pass

                    elif la_ == 4:
                        self.state = 1128
                        self.variable()
                        pass

                    elif la_ == 5:
                        self.state = 1129
                        self.signed_number()
                        pass

                    elif la_ == 6:
                        self.state = 1130
                        self.match(ClistParser.STRING)
                        pass


                    self.state = 1133 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1688996294070280) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 61574798901569) != 0)):
                        break

                self.state = 1135
                self.match(ClistParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(ClistParser.GOTO, 0)

        def labelName(self):
            return self.getTypedRuleContext(ClistParser.LabelNameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStatement" ):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def gotoStatement(self):

        localctx = ClistParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(ClistParser.GOTO)
            self.state = 1139
            self.labelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ClistParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(ClistParser.ConditionContext,0)


        def thenIf(self):
            return self.getTypedRuleContext(ClistParser.ThenIfContext,0)


        def elseIf(self):
            return self.getTypedRuleContext(ClistParser.ElseIfContext,0)


        def endIf(self):
            return self.getTypedRuleContext(ClistParser.EndIfContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = ClistParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(ClistParser.IF)
            self.state = 1142
            self.condition()
            self.state = 1143
            self.thenIf()
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1144
                self.elseIf()


            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 1147
                self.endIf()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(ClistParser.END, 0)

        def ENDO(self):
            return self.getToken(ClistParser.ENDO, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_endIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndIf" ):
                listener.enterEndIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndIf" ):
                listener.exitEndIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndIf" ):
                return visitor.visitEndIf(self)
            else:
                return visitor.visitChildren(self)




    def endIf(self):

        localctx = ClistParser.EndIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_endIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            _la = self._input.LA(1)
            if not(_la==75 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(ClistParser.THEN, 0)

        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_thenIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenIf" ):
                listener.enterThenIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenIf" ):
                listener.exitThenIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThenIf" ):
                return visitor.visitThenIf(self)
            else:
                return visitor.visitChildren(self)




    def thenIf(self):

        localctx = ClistParser.ThenIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_thenIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(ClistParser.THEN)
            self.state = 1153
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ClistParser.ELSE, 0)

        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_elseIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIf" ):
                listener.enterElseIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIf" ):
                listener.exitElseIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIf" ):
                return visitor.visitElseIf(self)
            else:
                return visitor.visitChildren(self)




    def elseIf(self):

        localctx = ClistParser.ElseIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_elseIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(ClistParser.ELSE)
            self.state = 1157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 1156
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClistKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def charDataKeyword(self):
            return self.getTypedRuleContext(ClistParser.CharDataKeywordContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_clistKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClistKeyword" ):
                listener.enterClistKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClistKeyword" ):
                listener.exitClistKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClistKeyword" ):
                return visitor.visitClistKeyword(self)
            else:
                return visitor.visitChildren(self)




    def clistKeyword(self):

        localctx = ClistParser.ClistKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_clistKeyword)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.match(ClistParser.IDENTIFIER)
                pass
            elif token in [27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.charDataKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DSN(self):
            return self.getToken(ClistParser.DSN, 0)

        def DELETE(self):
            return self.getToken(ClistParser.DELETE, 0)

        def F_CHAR(self):
            return self.getToken(ClistParser.F_CHAR, 0)

        def OFF(self):
            return self.getToken(ClistParser.OFF, 0)

        def CANCEL(self):
            return self.getToken(ClistParser.CANCEL, 0)

        def ERROR(self):
            return self.getToken(ClistParser.ERROR, 0)

        def LOG(self):
            return self.getToken(ClistParser.LOG, 0)

        def DISPLAY(self):
            return self.getToken(ClistParser.DISPLAY, 0)

        def ENDO(self):
            return self.getToken(ClistParser.ENDO, 0)

        def DATA(self):
            return self.getToken(ClistParser.DATA, 0)

        def OUTPUT(self):
            return self.getToken(ClistParser.OUTPUT, 0)

        def LIB(self):
            return self.getToken(ClistParser.LIB, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_charDataKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataKeyword" ):
                listener.enterCharDataKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataKeyword" ):
                listener.exitCharDataKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataKeyword" ):
                return visitor.visitCharDataKeyword(self)
            else:
                return visitor.visitChildren(self)




    def charDataKeyword(self):

        localctx = ClistParser.CharDataKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_charDataKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1688996291805184) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 8798240768321) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def combinableCondition(self):
            return self.getTypedRuleContext(ClistParser.CombinableConditionContext,0)


        def andOrCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.AndOrConditionContext)
            else:
                return self.getTypedRuleContext(ClistParser.AndOrConditionContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = ClistParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.combinableCondition()
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==116 or _la==118:
                self.state = 1166
                self.andOrCondition()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndOrConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(ClistParser.AND, 0)

        def OR(self):
            return self.getToken(ClistParser.OR, 0)

        def PIPECHAR(self):
            return self.getToken(ClistParser.PIPECHAR, 0)

        def combinableCondition(self):
            return self.getTypedRuleContext(ClistParser.CombinableConditionContext,0)


        def NUMBER(self):
            return self.getToken(ClistParser.NUMBER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_andOrCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOrCondition" ):
                listener.enterAndOrCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOrCondition" ):
                listener.exitAndOrCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOrCondition" ):
                return visitor.visitAndOrCondition(self)
            else:
                return visitor.visitChildren(self)




    def andOrCondition(self):

        localctx = ClistParser.AndOrConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_andOrCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            _la = self._input.LA(1)
            if not(_la==18 or _la==116 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1173
                self.combinableCondition()
                pass

            elif la_ == 2:
                self.state = 1174
                self.match(ClistParser.NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CombinableConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCondition(self):
            return self.getTypedRuleContext(ClistParser.SimpleConditionContext,0)


        def NOT(self):
            return self.getToken(ClistParser.NOT, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_combinableCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombinableCondition" ):
                listener.enterCombinableCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombinableCondition" ):
                listener.exitCombinableCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCombinableCondition" ):
                return visitor.visitCombinableCondition(self)
            else:
                return visitor.visitChildren(self)




    def combinableCondition(self):

        localctx = ClistParser.CombinableConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_combinableCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1177
                self.match(ClistParser.NOT)


            self.state = 1180
            self.simpleCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(ClistParser.ConditionContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def relationCondition(self):
            return self.getTypedRuleContext(ClistParser.RelationConditionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_simpleCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCondition" ):
                listener.enterSimpleCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCondition" ):
                listener.exitSimpleCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCondition" ):
                return visitor.visitSimpleCondition(self)
            else:
                return visitor.visitChildren(self)




    def simpleCondition(self):

        localctx = ClistParser.SimpleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_simpleCondition)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.match(ClistParser.LPAREN)
                self.state = 1183
                self.condition()
                self.state = 1184
                self.match(ClistParser.RPAREN)
                pass
            elif token in [3, 11, 19, 21, 27, 28, 33, 37, 49, 50, 75, 94, 100, 102, 112, 125, 137, 138, 139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1186
                self.relationCondition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationArithmeticComparison(self):
            return self.getTypedRuleContext(ClistParser.RelationArithmeticComparisonContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_relationCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationCondition" ):
                listener.enterRelationCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationCondition" ):
                listener.exitRelationCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationCondition" ):
                return visitor.visitRelationCondition(self)
            else:
                return visitor.visitChildren(self)




    def relationCondition(self):

        localctx = ClistParser.RelationConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_relationCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.relationArithmeticComparison()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationArithmeticComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ArithmeticExpressionContext)
            else:
                return self.getTypedRuleContext(ClistParser.ArithmeticExpressionContext,i)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def relationalOperator(self):
            return self.getTypedRuleContext(ClistParser.RelationalOperatorContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_relationArithmeticComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationArithmeticComparison" ):
                listener.enterRelationArithmeticComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationArithmeticComparison" ):
                listener.exitRelationArithmeticComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationArithmeticComparison" ):
                return visitor.visitRelationArithmeticComparison(self)
            else:
                return visitor.visitChildren(self)




    def relationArithmeticComparison(self):

        localctx = ClistParser.RelationArithmeticComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_relationArithmeticComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1191
                self.arithmeticExpression()
                self.state = 1192
                self.relationalOperator()


            self.state = 1198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 11, 19, 21, 27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137, 138, 139]:
                self.state = 1196
                self.arithmeticExpression()
                pass
            elif token in [75]:
                self.state = 1197
                self.match(ClistParser.END)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_arithmeticExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExpression" ):
                listener.enterArithmeticExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExpression" ):
                listener.exitArithmeticExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticExpression" ):
                return visitor.visitArithmeticExpression(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticExpression(self):

        localctx = ClistParser.ArithmeticExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_arithmeticExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALCHAR(self):
            return self.getToken(ClistParser.EQUALCHAR, 0)

        def GREATERTHANCHAR(self):
            return self.getToken(ClistParser.GREATERTHANCHAR, 0)

        def LESSTHANCHAR(self):
            return self.getToken(ClistParser.LESSTHANCHAR, 0)

        def EQ(self):
            return self.getToken(ClistParser.EQ, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_relationalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalOperator" ):
                listener.enterRelationalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalOperator" ):
                listener.exitRelationalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalOperator" ):
                return visitor.visitRelationalOperator(self)
            else:
                return visitor.visitChildren(self)




    def relationalOperator(self):

        localctx = ClistParser.RelationalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_relationalOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8413184) != 0) or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(ClistParser.INSERT, 0)

        def stringFuntion(self):
            return self.getTypedRuleContext(ClistParser.StringFuntionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = ClistParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_insertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(ClistParser.INSERT)
            self.state = 1205
            self.stringFuntion()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(ClistParser.EXIT, 0)

        def exitParameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ExitParametersContext)
            else:
                return self.getTypedRuleContext(ClistParser.ExitParametersContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_exitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStatement" ):
                listener.enterExitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStatement" ):
                listener.exitExitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitStatement" ):
                return visitor.visitExitStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitStatement(self):

        localctx = ClistParser.ExitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_exitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(ClistParser.EXIT)
            self.state = 1211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1208
                    self.exitParameters() 
                self.state = 1213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_exitParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitParameters" ):
                listener.enterExitParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitParameters" ):
                listener.exitExitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitParameters" ):
                return visitor.visitExitParameters(self)
            else:
                return visitor.visitChildren(self)




    def exitParameters(self):

        localctx = ClistParser.ExitParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_exitParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBMIT(self):
            return self.getToken(ClistParser.SUBMIT, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def jcl_code_submited(self):
            return self.getTypedRuleContext(ClistParser.Jcl_code_submitedContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_submitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubmitStatement" ):
                listener.enterSubmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubmitStatement" ):
                listener.exitSubmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubmitStatement" ):
                return visitor.visitSubmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def submitStatement(self):

        localctx = ClistParser.SubmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_submitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(ClistParser.SUBMIT)
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 1217
                self.dataset_name()
                pass

            elif la_ == 2:
                self.state = 1218
                self.jcl_code_submited()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Jcl_code_submitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISKCHAR(self):
            return self.getToken(ClistParser.ASTERISKCHAR, 0)

        def END(self):
            return self.getToken(ClistParser.END, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def jcl_code_start_and_end_symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Jcl_code_start_and_end_symbolContext)
            else:
                return self.getTypedRuleContext(ClistParser.Jcl_code_start_and_end_symbolContext,i)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def jcl_code(self):
            return self.getTypedRuleContext(ClistParser.Jcl_codeContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_jcl_code_submited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJcl_code_submited" ):
                listener.enterJcl_code_submited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJcl_code_submited" ):
                listener.exitJcl_code_submited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJcl_code_submited" ):
                return visitor.visitJcl_code_submited(self)
            else:
                return visitor.visitChildren(self)




    def jcl_code_submited(self):

        localctx = ClistParser.Jcl_code_submitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_jcl_code_submited)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(ClistParser.ASTERISKCHAR)
            self.state = 1222
            self.match(ClistParser.END)
            self.state = 1223
            self.match(ClistParser.LPAREN)
            self.state = 1224
            self.jcl_code_start_and_end_symbol()
            self.state = 1225
            self.match(ClistParser.RPAREN)
            self.state = 1226
            self.jcl_code()
            self.state = 1227
            self.jcl_code_start_and_end_symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Jcl_codeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClistParser.RULE_jcl_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJcl_code" ):
                listener.enterJcl_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJcl_code" ):
                listener.exitJcl_code(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJcl_code" ):
                return visitor.visitJcl_code(self)
            else:
                return visitor.visitChildren(self)




    def jcl_code(self):

        localctx = ClistParser.Jcl_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_jcl_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1229
                    self.matchWildcard() 
                self.state = 1234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Jcl_code_start_and_end_symbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_ADOTCHAR(self):
            return self.getToken(ClistParser.DOUBLE_ADOTCHAR, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_jcl_code_start_and_end_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJcl_code_start_and_end_symbol" ):
                listener.enterJcl_code_start_and_end_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJcl_code_start_and_end_symbol" ):
                listener.exitJcl_code_start_and_end_symbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJcl_code_start_and_end_symbol" ):
                return visitor.visitJcl_code_start_and_end_symbol(self)
            else:
                return visitor.visitChildren(self)




    def jcl_code_start_and_end_symbol(self):

        localctx = ClistParser.Jcl_code_start_and_end_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_jcl_code_start_and_end_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(ClistParser.DOUBLE_ADOTCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENTAGECHAR(self):
            return self.getToken(ClistParser.PERCENTAGECHAR, 0)

        def CLEAR(self):
            return self.getToken(ClistParser.CLEAR, 0)

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_inlineStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineStatement" ):
                listener.enterInlineStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineStatement" ):
                listener.exitInlineStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineStatement" ):
                return visitor.visitInlineStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineStatement(self):

        localctx = ClistParser.InlineStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_inlineStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(ClistParser.PERCENTAGECHAR)
            self.state = 1238
            _la = self._input.LA(1)
            if not(_la==47 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(ClistParser.CHANGE, 0)

        def changeString(self):
            return self.getTypedRuleContext(ClistParser.ChangeStringContext,0)


        def orignalString(self):
            return self.getTypedRuleContext(ClistParser.OrignalStringContext,0)


        def changeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ChangeParameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.ChangeParameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_changeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeStatement" ):
                listener.enterChangeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeStatement" ):
                listener.exitChangeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeStatement" ):
                return visitor.visitChangeStatement(self)
            else:
                return visitor.visitChildren(self)




    def changeStatement(self):

        localctx = ClistParser.ChangeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_changeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(ClistParser.CHANGE)
            self.state = 1241
            self.changeString()
            self.state = 1242
            self.orignalString()
            self.state = 1246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1243
                    self.changeParameter() 
                self.state = 1248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalStatementParemeter(self):
            return self.getTypedRuleContext(ClistParser.GeneralStatementParemeterContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_changeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeParameter" ):
                listener.enterChangeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeParameter" ):
                listener.exitChangeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeParameter" ):
                return visitor.visitChangeParameter(self)
            else:
                return visitor.visitChildren(self)




    def changeParameter(self):

        localctx = ClistParser.ChangeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_changeParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.generalStatementParemeter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_changeString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeString" ):
                listener.enterChangeString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeString" ):
                listener.exitChangeString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeString" ):
                return visitor.visitChangeString(self)
            else:
                return visitor.visitChildren(self)




    def changeString(self):

        localctx = ClistParser.ChangeStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_changeString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(ClistParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrignalStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringExpression(self):
            return self.getTypedRuleContext(ClistParser.StringExpressionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_orignalString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrignalString" ):
                listener.enterOrignalString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrignalString" ):
                listener.exitOrignalString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrignalString" ):
                return visitor.visitOrignalString(self)
            else:
                return visitor.visitChildren(self)




    def orignalString(self):

        localctx = ClistParser.OrignalStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_orignalString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.stringExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIND(self):
            return self.getToken(ClistParser.FIND, 0)

        def findString(self):
            return self.getTypedRuleContext(ClistParser.FindStringContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_findStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindStatement" ):
                listener.enterFindStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindStatement" ):
                listener.exitFindStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindStatement" ):
                return visitor.visitFindStatement(self)
            else:
                return visitor.visitChildren(self)




    def findStatement(self):

        localctx = ClistParser.FindStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_findStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(ClistParser.FIND)
            self.state = 1256
            self.findString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_findString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindString" ):
                listener.enterFindString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindString" ):
                listener.exitFindString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindString" ):
                return visitor.visitFindString(self)
            else:
                return visitor.visitChildren(self)




    def findString(self):

        localctx = ClistParser.FindStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_findString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(ClistParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EditStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EDIT(self):
            return self.getToken(ClistParser.EDIT, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def editOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.EditOptionContext)
            else:
                return self.getTypedRuleContext(ClistParser.EditOptionContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_editStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEditStatement" ):
                listener.enterEditStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEditStatement" ):
                listener.exitEditStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEditStatement" ):
                return visitor.visitEditStatement(self)
            else:
                return visitor.visitChildren(self)




    def editStatement(self):

        localctx = ClistParser.EditStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_editStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(ClistParser.EDIT)
            self.state = 1261
            self.dataset_name()
            self.state = 1265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1262
                    self.editOption() 
                self.state = 1267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EditOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clistKeyword(self):
            return self.getTypedRuleContext(ClistParser.ClistKeywordContext,0)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_editOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEditOption" ):
                listener.enterEditOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEditOption" ):
                listener.exitEditOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEditOption" ):
                return visitor.visitEditOption(self)
            else:
                return visitor.visitChildren(self)




    def editOption(self):

        localctx = ClistParser.EditOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_editOption)
        try:
            self.state = 1270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137, 139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1268
                self.clistKeyword()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.match(ClistParser.END)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmCopyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def smCopyFrom(self):
            return self.getTypedRuleContext(ClistParser.SmCopyFromContext,0)


        def smCopyTo(self):
            return self.getTypedRuleContext(ClistParser.SmCopyToContext,0)


        def SMCOPY(self):
            return self.getToken(ClistParser.SMCOPY, 0)

        def SMC(self):
            return self.getToken(ClistParser.SMC, 0)

        def smCopyOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.SmCopyOptionContext)
            else:
                return self.getTypedRuleContext(ClistParser.SmCopyOptionContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_smCopyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmCopyStatement" ):
                listener.enterSmCopyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmCopyStatement" ):
                listener.exitSmCopyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmCopyStatement" ):
                return visitor.visitSmCopyStatement(self)
            else:
                return visitor.visitChildren(self)




    def smCopyStatement(self):

        localctx = ClistParser.SmCopyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_smCopyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            _la = self._input.LA(1)
            if not(_la==98 or _la==99):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1273
            self.smCopyFrom()
            self.state = 1274
            self.smCopyTo()
            self.state = 1278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1275
                    self.smCopyOption() 
                self.state = 1280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmCopyFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromDataset(self):
            return self.getTypedRuleContext(ClistParser.FromDatasetContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_smCopyFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmCopyFrom" ):
                listener.enterSmCopyFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmCopyFrom" ):
                listener.exitSmCopyFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmCopyFrom" ):
                return visitor.visitSmCopyFrom(self)
            else:
                return visitor.visitChildren(self)




    def smCopyFrom(self):

        localctx = ClistParser.SmCopyFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_smCopyFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.fromDataset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromDatasetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def FROMDATASET(self):
            return self.getToken(ClistParser.FROMDATASET, 0)

        def FDS(self):
            return self.getToken(ClistParser.FDS, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_fromDataset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromDataset" ):
                listener.enterFromDataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromDataset" ):
                listener.exitFromDataset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromDataset" ):
                return visitor.visitFromDataset(self)
            else:
                return visitor.visitChildren(self)




    def fromDataset(self):

        localctx = ClistParser.FromDatasetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_fromDataset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            _la = self._input.LA(1)
            if not(_la==119 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1284
            self.match(ClistParser.LPAREN)

            self.state = 1285
            self.dataset_name()
            self.state = 1286
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmCopyToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def toDataset(self):
            return self.getTypedRuleContext(ClistParser.ToDatasetContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_smCopyTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmCopyTo" ):
                listener.enterSmCopyTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmCopyTo" ):
                listener.exitSmCopyTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmCopyTo" ):
                return visitor.visitSmCopyTo(self)
            else:
                return visitor.visitChildren(self)




    def smCopyTo(self):

        localctx = ClistParser.SmCopyToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_smCopyTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.toDataset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToDatasetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def TODATASET(self):
            return self.getToken(ClistParser.TODATASET, 0)

        def TDS(self):
            return self.getToken(ClistParser.TDS, 0)

        def dataset_name(self):
            return self.getTypedRuleContext(ClistParser.Dataset_nameContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_toDataset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToDataset" ):
                listener.enterToDataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToDataset" ):
                listener.exitToDataset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToDataset" ):
                return visitor.visitToDataset(self)
            else:
                return visitor.visitChildren(self)




    def toDataset(self):

        localctx = ClistParser.ToDatasetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_toDataset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            _la = self._input.LA(1)
            if not(_la==131 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1291
            self.match(ClistParser.LPAREN)

            self.state = 1292
            self.dataset_name()
            self.state = 1293
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmCopyOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def NOT(self):
            return self.getToken(ClistParser.NOT, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_smCopyOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmCopyOption" ):
                listener.enterSmCopyOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmCopyOption" ):
                listener.exitSmCopyOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmCopyOption" ):
                return visitor.visitSmCopyOption(self)
            else:
                return visitor.visitChildren(self)




    def smCopyOption(self):

        localctx = ClistParser.SmCopyOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_smCopyOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            _la = self._input.LA(1)
            if not(_la==115 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(ClistParser.READ, 0)

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.VariableContext)
            else:
                return self.getTypedRuleContext(ClistParser.VariableContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_readStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadStatement" ):
                listener.enterReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadStatement" ):
                listener.exitReadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadStatement" ):
                return visitor.visitReadStatement(self)
            else:
                return visitor.visitChildren(self)




    def readStatement(self):

        localctx = ClistParser.ReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_readStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(ClistParser.READ)
            self.state = 1301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1298
                    self.variable() 
                self.state = 1303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def referencedVariable(self):
            return self.getTypedRuleContext(ClistParser.ReferencedVariableContext,0)


        def charDataKeyword(self):
            return self.getTypedRuleContext(ClistParser.CharDataKeywordContext,0)


        def normalVariableCombineWithReferenced(self):
            return self.getTypedRuleContext(ClistParser.NormalVariableCombineWithReferencedContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = ClistParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_variable)
        try:
            self.state = 1308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1304
                self.match(ClistParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.referencedVariable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1306
                self.charDataKeyword()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1307
                self.normalVariableCombineWithReferenced()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalVariableCombineWithReferencedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.IDENTIFIER)
            else:
                return self.getToken(ClistParser.IDENTIFIER, i)

        def referencedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ReferencedVariableContext)
            else:
                return self.getTypedRuleContext(ClistParser.ReferencedVariableContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_normalVariableCombineWithReferenced

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalVariableCombineWithReferenced" ):
                listener.enterNormalVariableCombineWithReferenced(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalVariableCombineWithReferenced" ):
                listener.exitNormalVariableCombineWithReferenced(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalVariableCombineWithReferenced" ):
                return visitor.visitNormalVariableCombineWithReferenced(self)
            else:
                return visitor.visitChildren(self)




    def normalVariableCombineWithReferenced(self):

        localctx = ClistParser.NormalVariableCombineWithReferencedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_normalVariableCombineWithReferenced)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1312
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [139]:
                        self.state = 1310
                        self.match(ClistParser.IDENTIFIER)
                        pass
                    elif token in [21]:
                        self.state = 1311
                        self.referencedVariable()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1314 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferencedVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPCHAR(self):
            return self.getToken(ClistParser.AMPCHAR, 0)

        def clistKeyword(self):
            return self.getTypedRuleContext(ClistParser.ClistKeywordContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_referencedVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencedVariable" ):
                listener.enterReferencedVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencedVariable" ):
                listener.exitReferencedVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferencedVariable" ):
                return visitor.visitReferencedVariable(self)
            else:
                return visitor.visitChildren(self)




    def referencedVariable(self):

        localctx = ClistParser.ReferencedVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_referencedVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(ClistParser.AMPCHAR)

            self.state = 1317
            self.clistKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteNrStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITESTATMENT(self):
            return self.getToken(ClistParser.WRITESTATMENT, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_writeNrStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteNrStatement" ):
                listener.enterWriteNrStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteNrStatement" ):
                listener.exitWriteNrStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteNrStatement" ):
                return visitor.visitWriteNrStatement(self)
            else:
                return visitor.visitChildren(self)




    def writeNrStatement(self):

        localctx = ClistParser.WriteNrStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_writeNrStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(ClistParser.WRITESTATMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITESTATMENT(self):
            return self.getToken(ClistParser.WRITESTATMENT, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_writeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteStatement" ):
                return visitor.visitWriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def writeStatement(self):

        localctx = ClistParser.WriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_writeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(ClistParser.WRITESTATMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTN(self):
            return self.getToken(ClistParser.ATTN, 0)

        def OFF(self):
            return self.getToken(ClistParser.OFF, 0)

        def statement(self):
            return self.getTypedRuleContext(ClistParser.StatementContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_attnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttnStatement" ):
                listener.enterAttnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttnStatement" ):
                listener.exitAttnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttnStatement" ):
                return visitor.visitAttnStatement(self)
            else:
                return visitor.visitChildren(self)




    def attnStatement(self):

        localctx = ClistParser.AttnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_attnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(ClistParser.ATTN)
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 1324
                self.match(ClistParser.OFF)
                pass
            elif token in [1, 22, 26, 29, 30, 35, 36, 37, 42, 43, 46, 48, 49, 50, 55, 56, 57, 69, 77, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 94, 95, 98, 99, 103, 104, 107, 110, 112, 113, 114, 124, 133, 136]:
                self.state = 1325
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(ClistParser.CONTROL, 0)

        def controlOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.ControlOptionContext)
            else:
                return self.getTypedRuleContext(ClistParser.ControlOptionContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_controlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStatement" ):
                listener.enterControlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStatement" ):
                listener.exitControlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStatement" ):
                return visitor.visitControlStatement(self)
            else:
                return visitor.visitChildren(self)




    def controlStatement(self):

        localctx = ClistParser.ControlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_controlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(ClistParser.CONTROL)
            self.state = 1332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1329
                    self.controlOption() 
                self.state = 1334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def clistKeyword(self):
            return self.getTypedRuleContext(ClistParser.ClistKeywordContext,0)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_controlOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlOption" ):
                listener.enterControlOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlOption" ):
                listener.exitControlOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlOption" ):
                return visitor.visitControlOption(self)
            else:
                return visitor.visitChildren(self)




    def controlOption(self):

        localctx = ClistParser.ControlOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_controlOption)
        self._la = 0 # Token type
        try:
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self.clistKeyword()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1336
                _la = self._input.LA(1)
                if not(_la==75 or _la==139):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 1337
                    self.match(ClistParser.LPAREN)
                    self.state = 1338
                    self.clistKeyword()
                    self.state = 1339
                    self.match(ClistParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoEndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(ClistParser.DO, 0)

        def clist_file_name(self):
            return self.getTypedRuleContext(ClistParser.Clist_file_nameContext,0)


        def END(self):
            return self.getToken(ClistParser.END, 0)

        def ENDO(self):
            return self.getToken(ClistParser.ENDO, 0)

        def labelEnd(self):
            return self.getTypedRuleContext(ClistParser.LabelEndContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.StatementContext)
            else:
                return self.getTypedRuleContext(ClistParser.StatementContext,i)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.LabelContext)
            else:
                return self.getTypedRuleContext(ClistParser.LabelContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_doEndStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoEndStatement" ):
                listener.enterDoEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoEndStatement" ):
                listener.exitDoEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoEndStatement" ):
                return visitor.visitDoEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def doEndStatement(self):

        localctx = ClistParser.DoEndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_doEndStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(ClistParser.DO)
            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1348
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                        if la_ == 1:
                            self.state = 1346
                            self.statement()
                            pass

                        elif la_ == 2:
                            self.state = 1347
                            self.label()
                            pass

                 
                    self.state = 1352
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1353
                self.clist_file_name()
                pass


            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1356
                self.match(ClistParser.END)
                pass

            elif la_ == 2:
                self.state = 1357
                self.match(ClistParser.ENDO)
                pass

            elif la_ == 3:
                self.state = 1358
                self.labelEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clist_file_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClistParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_clist_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClist_file_name" ):
                listener.enterClist_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClist_file_name" ):
                listener.exitClist_file_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClist_file_name" ):
                return visitor.visitClist_file_name(self)
            else:
                return visitor.visitChildren(self)




    def clist_file_name(self):

        localctx = ClistParser.Clist_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_clist_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(ClistParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuildInFuntionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringFuntion(self):
            return self.getTypedRuleContext(ClistParser.StringFuntionContext,0)


        def subStringFunction(self):
            return self.getTypedRuleContext(ClistParser.SubStringFunctionContext,0)


        def lengthFunction(self):
            return self.getTypedRuleContext(ClistParser.LengthFunctionContext,0)


        def otherBuildInFunction(self):
            return self.getTypedRuleContext(ClistParser.OtherBuildInFunctionContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_buildInFuntion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuildInFuntion" ):
                listener.enterBuildInFuntion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuildInFuntion" ):
                listener.exitBuildInFuntion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuildInFuntion" ):
                return visitor.visitBuildInFuntion(self)
            else:
                return visitor.visitChildren(self)




    def buildInFuntion(self):

        localctx = ClistParser.BuildInFuntionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_buildInFuntion)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1363
                self.stringFuntion()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1364
                self.subStringFunction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1365
                self.lengthFunction()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1366
                self.otherBuildInFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherBuildInFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(ClistParser.Function_nameContext,0)


        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Function_parameterContext)
            else:
                return self.getTypedRuleContext(ClistParser.Function_parameterContext,i)


        def getRuleIndex(self):
            return ClistParser.RULE_otherBuildInFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherBuildInFunction" ):
                listener.enterOtherBuildInFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherBuildInFunction" ):
                listener.exitOtherBuildInFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherBuildInFunction" ):
                return visitor.visitOtherBuildInFunction(self)
            else:
                return visitor.visitChildren(self)




    def otherBuildInFunction(self):

        localctx = ClistParser.OtherBuildInFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_otherBuildInFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.function_name()
            self.state = 1370
            self.match(ClistParser.LPAREN)
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1688996294428680) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 61574798901569) != 0):
                self.state = 1371
                self.function_parameter()
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1377
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPCHAR(self):
            return self.getToken(ClistParser.AMPCHAR, 0)

        def clistKeyword(self):
            return self.getTypedRuleContext(ClistParser.ClistKeywordContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = ClistParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(ClistParser.AMPCHAR)
            self.state = 1380
            self.clistKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(ClistParser.ValueContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_parameter" ):
                listener.enterFunction_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_parameter" ):
                listener.exitFunction_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_parameter" ):
                return visitor.visitFunction_parameter(self)
            else:
                return visitor.visitChildren(self)




    def function_parameter(self):

        localctx = ClistParser.Function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_function_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPCHAR(self):
            return self.getToken(ClistParser.AMPCHAR, 0)

        def LENGTH(self):
            return self.getToken(ClistParser.LENGTH, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def stringExpression(self):
            return self.getTypedRuleContext(ClistParser.StringExpressionContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_lengthFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthFunction" ):
                listener.enterLengthFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthFunction" ):
                listener.exitLengthFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthFunction" ):
                return visitor.visitLengthFunction(self)
            else:
                return visitor.visitChildren(self)




    def lengthFunction(self):

        localctx = ClistParser.LengthFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_lengthFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(ClistParser.AMPCHAR)
            self.state = 1385
            self.match(ClistParser.LENGTH)
            self.state = 1386
            self.match(ClistParser.LPAREN)
            self.state = 1387
            self.stringExpression()
            self.state = 1388
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubStringFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPCHAR(self):
            return self.getToken(ClistParser.AMPCHAR, 0)

        def SUBSTR(self):
            return self.getToken(ClistParser.SUBSTR, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def partToSubString(self):
            return self.getTypedRuleContext(ClistParser.PartToSubStringContext,0)


        def COMMACHAR(self):
            return self.getToken(ClistParser.COMMACHAR, 0)

        def stringToSubString(self):
            return self.getTypedRuleContext(ClistParser.StringToSubStringContext,0)


        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_subStringFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubStringFunction" ):
                listener.enterSubStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubStringFunction" ):
                listener.exitSubStringFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubStringFunction" ):
                return visitor.visitSubStringFunction(self)
            else:
                return visitor.visitChildren(self)




    def subStringFunction(self):

        localctx = ClistParser.SubStringFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_subStringFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(ClistParser.AMPCHAR)
            self.state = 1391
            self.match(ClistParser.SUBSTR)
            self.state = 1392
            self.match(ClistParser.LPAREN)
            self.state = 1393
            self.partToSubString()
            self.state = 1394
            self.match(ClistParser.COMMACHAR)
            self.state = 1395
            self.stringToSubString()
            self.state = 1396
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartToSubStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startIndex(self):
            return self.getTypedRuleContext(ClistParser.StartIndexContext,0)


        def COLON(self):
            return self.getToken(ClistParser.COLON, 0)

        def endIndex(self):
            return self.getTypedRuleContext(ClistParser.EndIndexContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_partToSubString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartToSubString" ):
                listener.enterPartToSubString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartToSubString" ):
                listener.exitPartToSubString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartToSubString" ):
                return visitor.visitPartToSubString(self)
            else:
                return visitor.visitChildren(self)




    def partToSubString(self):

        localctx = ClistParser.PartToSubStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_partToSubString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.startIndex()
            self.state = 1399
            self.match(ClistParser.COLON)
            self.state = 1400
            self.endIndex()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intergerLiteral(self):
            return self.getTypedRuleContext(ClistParser.IntergerLiteralContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_startIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartIndex" ):
                listener.enterStartIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartIndex" ):
                listener.exitStartIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartIndex" ):
                return visitor.visitStartIndex(self)
            else:
                return visitor.visitChildren(self)




    def startIndex(self):

        localctx = ClistParser.StartIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_startIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.intergerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intergerLiteral(self):
            return self.getTypedRuleContext(ClistParser.IntergerLiteralContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_endIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndIndex" ):
                listener.enterEndIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndIndex" ):
                listener.exitEndIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndIndex" ):
                return visitor.visitEndIndex(self)
            else:
                return visitor.visitChildren(self)




    def endIndex(self):

        localctx = ClistParser.EndIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_endIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.intergerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntergerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ClistParser.NUMBER, 0)

        def referencedVariable(self):
            return self.getTypedRuleContext(ClistParser.ReferencedVariableContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_intergerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntergerLiteral" ):
                listener.enterIntergerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntergerLiteral" ):
                listener.exitIntergerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntergerLiteral" ):
                return visitor.visitIntergerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def intergerLiteral(self):

        localctx = ClistParser.IntergerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_intergerLiteral)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1406
                self.match(ClistParser.NUMBER)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1407
                self.referencedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringToSubStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def variable(self):
            return self.getTypedRuleContext(ClistParser.VariableContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_stringToSubString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringToSubString" ):
                listener.enterStringToSubString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringToSubString" ):
                listener.exitStringToSubString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringToSubString" ):
                return visitor.visitStringToSubString(self)
            else:
                return visitor.visitChildren(self)




    def stringToSubString(self):

        localctx = ClistParser.StringToSubStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_stringToSubString)
        try:
            self.state = 1412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(ClistParser.STRING)
                pass
            elif token in [21, 27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137, 139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1411
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringFuntionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPCHAR(self):
            return self.getToken(ClistParser.AMPCHAR, 0)

        def STR(self):
            return self.getToken(ClistParser.STR, 0)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_stringFuntion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringFuntion" ):
                listener.enterStringFuntion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringFuntion" ):
                listener.exitStringFuntion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringFuntion" ):
                return visitor.visitStringFuntion(self)
            else:
                return visitor.visitChildren(self)




    def stringFuntion(self):

        localctx = ClistParser.StringFuntionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_stringFuntion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(ClistParser.AMPCHAR)
            self.state = 1415
            self.match(ClistParser.STR)
            self.state = 1416
            self.match(ClistParser.LPAREN)
            self.state = 1417
            self.match(ClistParser.STRING)
            self.state = 1418
            self.match(ClistParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataset_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClistParser.Dataset_partContext)
            else:
                return self.getTypedRuleContext(ClistParser.Dataset_partContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.DOT)
            else:
                return self.getToken(ClistParser.DOT, i)

        def STRING(self):
            return self.getToken(ClistParser.STRING, 0)

        def ASTERISKCHAR(self):
            return self.getToken(ClistParser.ASTERISKCHAR, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_dataset_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_name" ):
                listener.enterDataset_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_name" ):
                listener.exitDataset_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataset_name" ):
                return visitor.visitDataset_name(self)
            else:
                return visitor.visitChildren(self)




    def dataset_name(self):

        localctx = ClistParser.Dataset_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_dataset_name)
        try:
            self.state = 1432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 27, 28, 33, 37, 49, 50, 94, 100, 102, 112, 125, 137, 139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1420
                self.dataset_part()
                self.state = 1427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1421
                        self.match(ClistParser.DOT)
                        self.state = 1423
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                        if la_ == 1:
                            self.state = 1422
                            self.dataset_part()

                 
                    self.state = 1429
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.match(ClistParser.STRING)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1431
                self.match(ClistParser.ASTERISKCHAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(ClistParser.IDENTIFIER)
            else:
                return self.getToken(ClistParser.IDENTIFIER, i)

        def LPAREN(self):
            return self.getToken(ClistParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClistParser.RPAREN, 0)

        def variable(self):
            return self.getTypedRuleContext(ClistParser.VariableContext,0)


        def getRuleIndex(self):
            return ClistParser.RULE_dataset_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_part" ):
                listener.enterDataset_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_part" ):
                listener.exitDataset_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataset_part" ):
                return visitor.visitDataset_part(self)
            else:
                return visitor.visitChildren(self)




    def dataset_part(self):

        localctx = ClistParser.Dataset_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_dataset_part)
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(ClistParser.IDENTIFIER)
                self.state = 1438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1435
                    self.match(ClistParser.LPAREN)
                    self.state = 1436
                    self.match(ClistParser.IDENTIFIER)
                    self.state = 1437
                    self.match(ClistParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1440
                self.variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(ClistParser.NUMBER, 0)

        def PLUSCHAR(self):
            return self.getToken(ClistParser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(ClistParser.MINUSCHAR, 0)

        def getRuleIndex(self):
            return ClistParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = ClistParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            _la = self._input.LA(1)
            if not(_la==12 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1444
            self.match(ClistParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[88] = self.expression_sempred
        self._predicates[89] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         




