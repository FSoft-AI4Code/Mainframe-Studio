# Generated from src/parsers/grammar/ibm_jcl/IBM_JCL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,54,422,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,
        1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,42,1,42,1,42,1,42,1,42,3,42,326,8,42,1,43,1,43,1,44,4,44,331,8,
        44,11,44,12,44,332,1,45,1,45,5,45,337,8,45,10,45,12,45,340,9,45,
        1,45,1,45,1,46,1,46,5,46,346,8,46,10,46,12,46,349,9,46,1,46,1,46,
        1,47,4,47,354,8,47,11,47,12,47,355,1,48,4,48,359,8,48,11,48,12,48,
        360,1,49,3,49,364,8,49,1,49,5,49,367,8,49,10,49,12,49,370,9,49,1,
        49,1,49,1,49,1,49,5,49,376,8,49,10,49,12,49,379,9,49,1,49,1,49,1,
        50,1,50,1,50,1,50,5,50,387,8,50,10,50,12,50,390,9,50,1,50,1,50,1,
        51,1,51,5,51,396,8,51,10,51,12,51,399,9,51,1,51,1,51,1,52,3,52,404,
        8,52,1,52,1,52,1,52,1,52,1,52,5,52,411,8,52,10,52,12,52,414,9,52,
        1,52,1,52,1,53,4,53,419,8,53,11,53,12,53,420,2,338,347,0,54,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,99,50,101,51,103,52,105,53,107,54,1,0,4,7,0,9,10,13,
        13,32,32,40,42,44,44,47,47,61,61,1,0,48,57,2,0,9,9,32,32,2,0,10,
        10,13,13,436,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
        1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,115,1,0,0,0,9,117,1,
        0,0,0,11,120,1,0,0,0,13,123,1,0,0,0,15,125,1,0,0,0,17,133,1,0,0,
        0,19,140,1,0,0,0,21,144,1,0,0,0,23,152,1,0,0,0,25,157,1,0,0,0,27,
        160,1,0,0,0,29,165,1,0,0,0,31,168,1,0,0,0,33,172,1,0,0,0,35,177,
        1,0,0,0,37,184,1,0,0,0,39,191,1,0,0,0,41,199,1,0,0,0,43,206,1,0,
        0,0,45,209,1,0,0,0,47,214,1,0,0,0,49,220,1,0,0,0,51,225,1,0,0,0,
        53,229,1,0,0,0,55,234,1,0,0,0,57,241,1,0,0,0,59,248,1,0,0,0,61,254,
        1,0,0,0,63,263,1,0,0,0,65,268,1,0,0,0,67,275,1,0,0,0,69,282,1,0,
        0,0,71,285,1,0,0,0,73,290,1,0,0,0,75,296,1,0,0,0,77,301,1,0,0,0,
        79,305,1,0,0,0,81,308,1,0,0,0,83,313,1,0,0,0,85,325,1,0,0,0,87,327,
        1,0,0,0,89,330,1,0,0,0,91,334,1,0,0,0,93,343,1,0,0,0,95,353,1,0,
        0,0,97,358,1,0,0,0,99,363,1,0,0,0,101,382,1,0,0,0,103,393,1,0,0,
        0,105,403,1,0,0,0,107,418,1,0,0,0,109,110,5,61,0,0,110,2,1,0,0,0,
        111,112,5,40,0,0,112,4,1,0,0,0,113,114,5,41,0,0,114,6,1,0,0,0,115,
        116,5,47,0,0,116,8,1,0,0,0,117,118,5,40,0,0,118,119,5,41,0,0,119,
        10,1,0,0,0,120,121,5,42,0,0,121,122,5,46,0,0,122,12,1,0,0,0,123,
        124,5,46,0,0,124,14,1,0,0,0,125,126,5,68,0,0,126,127,5,65,0,0,127,
        128,5,84,0,0,128,129,5,65,0,0,129,130,5,83,0,0,130,131,5,69,0,0,
        131,132,5,84,0,0,132,16,1,0,0,0,133,134,5,66,0,0,134,135,5,65,0,
        0,135,136,5,67,0,0,136,137,5,75,0,0,137,138,5,85,0,0,138,139,5,80,
        0,0,139,18,1,0,0,0,140,141,5,74,0,0,141,142,5,79,0,0,142,143,5,66,
        0,0,143,20,1,0,0,0,144,145,5,80,0,0,145,146,5,82,0,0,146,147,5,84,
        0,0,147,148,5,70,0,0,148,149,5,73,0,0,149,150,5,76,0,0,150,151,5,
        69,0,0,151,22,1,0,0,0,152,153,5,69,0,0,153,154,5,88,0,0,154,155,
        5,69,0,0,155,156,5,67,0,0,156,24,1,0,0,0,157,158,5,68,0,0,158,159,
        5,68,0,0,159,26,1,0,0,0,160,161,5,70,0,0,161,162,5,82,0,0,162,163,
        5,79,0,0,163,164,5,77,0,0,164,28,1,0,0,0,165,166,5,84,0,0,166,167,
        5,79,0,0,167,30,1,0,0,0,168,169,5,69,0,0,169,170,5,78,0,0,170,171,
        5,68,0,0,171,32,1,0,0,0,172,173,5,76,0,0,173,174,5,73,0,0,174,175,
        5,83,0,0,175,176,5,84,0,0,176,34,1,0,0,0,177,178,5,74,0,0,178,179,
        5,67,0,0,179,180,5,76,0,0,180,181,5,76,0,0,181,182,5,73,0,0,182,
        183,5,66,0,0,183,36,1,0,0,0,184,185,5,74,0,0,185,186,5,79,0,0,186,
        187,5,66,0,0,187,188,5,76,0,0,188,189,5,73,0,0,189,190,5,66,0,0,
        190,38,1,0,0,0,191,192,5,73,0,0,192,193,5,78,0,0,193,194,5,67,0,
        0,194,195,5,76,0,0,195,196,5,85,0,0,196,197,5,68,0,0,197,198,5,69,
        0,0,198,40,1,0,0,0,199,200,5,77,0,0,200,201,5,69,0,0,201,202,5,77,
        0,0,202,203,5,66,0,0,203,204,5,69,0,0,204,205,5,82,0,0,205,42,1,
        0,0,0,206,207,5,47,0,0,207,208,5,47,0,0,208,44,1,0,0,0,209,210,5,
        68,0,0,210,211,5,65,0,0,211,212,5,84,0,0,212,213,5,65,0,0,213,46,
        1,0,0,0,214,215,5,84,0,0,215,216,5,68,0,0,216,217,5,85,0,0,217,218,
        5,77,0,0,218,219,5,80,0,0,219,48,1,0,0,0,220,221,5,83,0,0,221,222,
        5,73,0,0,222,223,5,83,0,0,223,224,5,78,0,0,224,50,1,0,0,0,225,226,
        5,83,0,0,226,227,5,69,0,0,227,228,5,84,0,0,228,52,1,0,0,0,229,230,
        5,83,0,0,230,231,5,79,0,0,231,232,5,82,0,0,232,233,5,84,0,0,233,
        54,1,0,0,0,234,235,5,70,0,0,235,236,5,73,0,0,236,237,5,69,0,0,237,
        238,5,76,0,0,238,239,5,68,0,0,239,240,5,83,0,0,240,56,1,0,0,0,241,
        242,5,82,0,0,242,243,5,69,0,0,243,244,5,67,0,0,244,245,5,79,0,0,
        245,246,5,82,0,0,246,247,5,68,0,0,247,58,1,0,0,0,248,249,5,70,0,
        0,249,250,5,73,0,0,250,251,5,69,0,0,251,252,5,76,0,0,252,253,5,68,
        0,0,253,60,1,0,0,0,254,255,5,71,0,0,255,256,5,69,0,0,256,257,5,78,
        0,0,257,258,5,69,0,0,258,259,5,82,0,0,259,260,5,65,0,0,260,261,5,
        84,0,0,261,262,5,69,0,0,262,62,1,0,0,0,263,264,5,80,0,0,264,265,
        5,82,0,0,265,266,5,79,0,0,266,267,5,67,0,0,267,64,1,0,0,0,268,269,
        5,69,0,0,269,270,5,88,0,0,270,271,5,84,0,0,271,272,5,69,0,0,272,
        273,5,78,0,0,273,274,5,84,0,0,274,66,1,0,0,0,275,276,5,70,0,0,276,
        277,5,79,0,0,277,278,5,82,0,0,278,279,5,77,0,0,279,280,5,65,0,0,
        280,281,5,84,0,0,281,68,1,0,0,0,282,283,5,73,0,0,283,284,5,70,0,
        0,284,70,1,0,0,0,285,286,5,84,0,0,286,287,5,72,0,0,287,288,5,69,
        0,0,288,289,5,78,0,0,289,72,1,0,0,0,290,291,5,69,0,0,291,292,5,78,
        0,0,292,293,5,68,0,0,293,294,5,73,0,0,294,295,5,70,0,0,295,74,1,
        0,0,0,296,297,5,80,0,0,297,298,5,69,0,0,298,299,5,78,0,0,299,300,
        5,68,0,0,300,76,1,0,0,0,301,302,5,65,0,0,302,303,5,78,0,0,303,304,
        5,68,0,0,304,78,1,0,0,0,305,306,5,79,0,0,306,307,5,82,0,0,307,80,
        1,0,0,0,308,309,5,69,0,0,309,310,5,76,0,0,310,311,5,83,0,0,311,312,
        5,69,0,0,312,82,1,0,0,0,313,314,5,79,0,0,314,315,5,85,0,0,315,316,
        5,84,0,0,316,317,5,80,0,0,317,318,5,85,0,0,318,319,5,84,0,0,319,
        84,1,0,0,0,320,326,5,44,0,0,321,322,5,32,0,0,322,326,5,44,0,0,323,
        324,5,44,0,0,324,326,3,97,48,0,325,320,1,0,0,0,325,321,1,0,0,0,325,
        323,1,0,0,0,326,86,1,0,0,0,327,328,5,42,0,0,328,88,1,0,0,0,329,331,
        8,0,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,
        1,0,0,0,333,90,1,0,0,0,334,338,5,34,0,0,335,337,9,0,0,0,336,335,
        1,0,0,0,337,340,1,0,0,0,338,339,1,0,0,0,338,336,1,0,0,0,339,341,
        1,0,0,0,340,338,1,0,0,0,341,342,5,34,0,0,342,92,1,0,0,0,343,347,
        5,39,0,0,344,346,9,0,0,0,345,344,1,0,0,0,346,349,1,0,0,0,347,348,
        1,0,0,0,347,345,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,0,350,351,
        5,39,0,0,351,94,1,0,0,0,352,354,7,1,0,0,353,352,1,0,0,0,354,355,
        1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,96,1,0,0,0,357,359,7,
        2,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,
        0,0,0,361,98,1,0,0,0,362,364,3,97,48,0,363,362,1,0,0,0,363,364,1,
        0,0,0,364,368,1,0,0,0,365,367,5,47,0,0,366,365,1,0,0,0,367,370,1,
        0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,
        0,0,0,371,372,5,47,0,0,372,373,5,42,0,0,373,377,1,0,0,0,374,376,
        8,3,0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,
        1,0,0,0,378,380,1,0,0,0,379,377,1,0,0,0,380,381,6,49,0,0,381,100,
        1,0,0,0,382,383,5,60,0,0,383,384,5,61,0,0,384,388,1,0,0,0,385,387,
        8,3,0,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,
        1,0,0,0,389,391,1,0,0,0,390,388,1,0,0,0,391,392,6,50,0,0,392,102,
        1,0,0,0,393,397,5,60,0,0,394,396,8,3,0,0,395,394,1,0,0,0,396,399,
        1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,397,
        1,0,0,0,400,401,6,51,0,0,401,104,1,0,0,0,402,404,3,97,48,0,403,402,
        1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,45,0,0,406,407,
        5,45,0,0,407,408,5,62,0,0,408,412,1,0,0,0,409,411,8,3,0,0,410,409,
        1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,415,
        1,0,0,0,414,412,1,0,0,0,415,416,6,52,0,0,416,106,1,0,0,0,417,419,
        7,3,0,0,418,417,1,0,0,0,419,420,1,0,0,0,420,418,1,0,0,0,420,421,
        1,0,0,0,421,108,1,0,0,0,15,0,325,332,338,347,355,360,363,368,377,
        388,397,403,412,420,1,0,1,0
    ]

class IBM_JCLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    DATASET_ = 8
    BACKUP_ = 9
    JOB_ = 10
    PRTFILE_ = 11
    EXEC_ = 12
    DD_ = 13
    FROM_ = 14
    TO_ = 15
    END_ = 16
    LIST_ = 17
    JCLLIB_ = 18
    JOBLIB_ = 19
    INCLUDE_ = 20
    MEMBER_ = 21
    DSLASH_ = 22
    DATA_ = 23
    TDUMP_ = 24
    SISN_ = 25
    SET_ = 26
    SORT_ = 27
    FIELDS_ = 28
    RECORD_ = 29
    FIELD_ = 30
    GENERATE_ = 31
    PROC_ = 32
    EXTENT_ = 33
    FORMAT_ = 34
    IF_ = 35
    THEN_ = 36
    ENDIF_ = 37
    PEND_ = 38
    AND_ = 39
    OR_ = 40
    ELSE_ = 41
    OUTPUT_ = 42
    COMMA = 43
    STAR = 44
    IDENTIFIER = 45
    STRING = 46
    STRING2 = 47
    NUMBER = 48
    WS = 49
    LINECOMMENT = 50
    INLINECOMMENT = 51
    INLINECOMMENT_2 = 52
    INLINECOMMENT_3 = 53
    NEWLINE = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'/'", "'()'", "'*.'", "'.'", "'DATASET'", 
            "'BACKUP'", "'JOB'", "'PRTFILE'", "'EXEC'", "'DD'", "'FROM'", 
            "'TO'", "'END'", "'LIST'", "'JCLLIB'", "'JOBLIB'", "'INCLUDE'", 
            "'MEMBER'", "'//'", "'DATA'", "'TDUMP'", "'SISN'", "'SET'", 
            "'SORT'", "'FIELDS'", "'RECORD'", "'FIELD'", "'GENERATE'", "'PROC'", 
            "'EXTENT'", "'FORMAT'", "'IF'", "'THEN'", "'ENDIF'", "'PEND'", 
            "'AND'", "'OR'", "'ELSE'", "'OUTPUT'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "DATASET_", "BACKUP_", "JOB_", "PRTFILE_", "EXEC_", "DD_", "FROM_", 
            "TO_", "END_", "LIST_", "JCLLIB_", "JOBLIB_", "INCLUDE_", "MEMBER_", 
            "DSLASH_", "DATA_", "TDUMP_", "SISN_", "SET_", "SORT_", "FIELDS_", 
            "RECORD_", "FIELD_", "GENERATE_", "PROC_", "EXTENT_", "FORMAT_", 
            "IF_", "THEN_", "ENDIF_", "PEND_", "AND_", "OR_", "ELSE_", "OUTPUT_", 
            "COMMA", "STAR", "IDENTIFIER", "STRING", "STRING2", "NUMBER", 
            "WS", "LINECOMMENT", "INLINECOMMENT", "INLINECOMMENT_2", "INLINECOMMENT_3", 
            "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "DATASET_", "BACKUP_", "JOB_", "PRTFILE_", "EXEC_", "DD_", 
                  "FROM_", "TO_", "END_", "LIST_", "JCLLIB_", "JOBLIB_", 
                  "INCLUDE_", "MEMBER_", "DSLASH_", "DATA_", "TDUMP_", "SISN_", 
                  "SET_", "SORT_", "FIELDS_", "RECORD_", "FIELD_", "GENERATE_", 
                  "PROC_", "EXTENT_", "FORMAT_", "IF_", "THEN_", "ENDIF_", 
                  "PEND_", "AND_", "OR_", "ELSE_", "OUTPUT_", "COMMA", "STAR", 
                  "IDENTIFIER", "STRING", "STRING2", "NUMBER", "WS", "LINECOMMENT", 
                  "INLINECOMMENT", "INLINECOMMENT_2", "INLINECOMMENT_3", 
                  "NEWLINE" ]

    grammarFileName = "IBM_JCL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


