# Generated from ./src/parsers/grammar/ibm_jcl/IBM_JCL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,385,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,4,40,306,
        8,40,11,40,12,40,307,3,40,310,8,40,1,41,1,41,1,42,4,42,315,8,42,
        11,42,12,42,316,1,43,1,43,5,43,321,8,43,10,43,12,43,324,9,43,1,43,
        1,43,1,44,1,44,5,44,330,8,44,10,44,12,44,333,9,44,1,44,1,44,1,45,
        4,45,338,8,45,11,45,12,45,339,1,46,4,46,343,8,46,11,46,12,46,344,
        1,47,3,47,348,8,47,1,47,1,47,1,47,1,47,5,47,354,8,47,10,47,12,47,
        357,9,47,1,47,1,47,3,47,361,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
        48,5,48,370,8,48,10,48,12,48,373,9,48,1,48,1,48,3,48,377,8,48,1,
        48,1,48,1,49,4,49,382,8,49,11,49,12,49,383,2,322,331,0,50,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,99,50,1,0,4,7,0,9,10,13,13,32,32,40,42,44,44,47,47,61,
        61,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,398,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,
        0,0,0,5,105,1,0,0,0,7,107,1,0,0,0,9,109,1,0,0,0,11,112,1,0,0,0,13,
        115,1,0,0,0,15,117,1,0,0,0,17,125,1,0,0,0,19,132,1,0,0,0,21,136,
        1,0,0,0,23,144,1,0,0,0,25,149,1,0,0,0,27,152,1,0,0,0,29,157,1,0,
        0,0,31,160,1,0,0,0,33,164,1,0,0,0,35,169,1,0,0,0,37,176,1,0,0,0,
        39,183,1,0,0,0,41,191,1,0,0,0,43,198,1,0,0,0,45,201,1,0,0,0,47,206,
        1,0,0,0,49,212,1,0,0,0,51,217,1,0,0,0,53,221,1,0,0,0,55,226,1,0,
        0,0,57,233,1,0,0,0,59,240,1,0,0,0,61,246,1,0,0,0,63,255,1,0,0,0,
        65,260,1,0,0,0,67,267,1,0,0,0,69,274,1,0,0,0,71,277,1,0,0,0,73,282,
        1,0,0,0,75,288,1,0,0,0,77,293,1,0,0,0,79,297,1,0,0,0,81,309,1,0,
        0,0,83,311,1,0,0,0,85,314,1,0,0,0,87,318,1,0,0,0,89,327,1,0,0,0,
        91,337,1,0,0,0,93,342,1,0,0,0,95,347,1,0,0,0,97,364,1,0,0,0,99,381,
        1,0,0,0,101,102,5,61,0,0,102,2,1,0,0,0,103,104,5,40,0,0,104,4,1,
        0,0,0,105,106,5,41,0,0,106,6,1,0,0,0,107,108,5,47,0,0,108,8,1,0,
        0,0,109,110,5,40,0,0,110,111,5,41,0,0,111,10,1,0,0,0,112,113,5,42,
        0,0,113,114,5,46,0,0,114,12,1,0,0,0,115,116,5,46,0,0,116,14,1,0,
        0,0,117,118,5,68,0,0,118,119,5,65,0,0,119,120,5,84,0,0,120,121,5,
        65,0,0,121,122,5,83,0,0,122,123,5,69,0,0,123,124,5,84,0,0,124,16,
        1,0,0,0,125,126,5,66,0,0,126,127,5,65,0,0,127,128,5,67,0,0,128,129,
        5,75,0,0,129,130,5,85,0,0,130,131,5,80,0,0,131,18,1,0,0,0,132,133,
        5,74,0,0,133,134,5,79,0,0,134,135,5,66,0,0,135,20,1,0,0,0,136,137,
        5,80,0,0,137,138,5,82,0,0,138,139,5,84,0,0,139,140,5,70,0,0,140,
        141,5,73,0,0,141,142,5,76,0,0,142,143,5,69,0,0,143,22,1,0,0,0,144,
        145,5,69,0,0,145,146,5,88,0,0,146,147,5,69,0,0,147,148,5,67,0,0,
        148,24,1,0,0,0,149,150,5,68,0,0,150,151,5,68,0,0,151,26,1,0,0,0,
        152,153,5,70,0,0,153,154,5,82,0,0,154,155,5,79,0,0,155,156,5,77,
        0,0,156,28,1,0,0,0,157,158,5,84,0,0,158,159,5,79,0,0,159,30,1,0,
        0,0,160,161,5,69,0,0,161,162,5,78,0,0,162,163,5,68,0,0,163,32,1,
        0,0,0,164,165,5,76,0,0,165,166,5,73,0,0,166,167,5,83,0,0,167,168,
        5,84,0,0,168,34,1,0,0,0,169,170,5,74,0,0,170,171,5,67,0,0,171,172,
        5,76,0,0,172,173,5,76,0,0,173,174,5,73,0,0,174,175,5,66,0,0,175,
        36,1,0,0,0,176,177,5,74,0,0,177,178,5,79,0,0,178,179,5,66,0,0,179,
        180,5,76,0,0,180,181,5,73,0,0,181,182,5,66,0,0,182,38,1,0,0,0,183,
        184,5,73,0,0,184,185,5,78,0,0,185,186,5,67,0,0,186,187,5,76,0,0,
        187,188,5,85,0,0,188,189,5,68,0,0,189,190,5,69,0,0,190,40,1,0,0,
        0,191,192,5,77,0,0,192,193,5,69,0,0,193,194,5,77,0,0,194,195,5,66,
        0,0,195,196,5,69,0,0,196,197,5,82,0,0,197,42,1,0,0,0,198,199,5,47,
        0,0,199,200,5,47,0,0,200,44,1,0,0,0,201,202,5,68,0,0,202,203,5,65,
        0,0,203,204,5,84,0,0,204,205,5,65,0,0,205,46,1,0,0,0,206,207,5,84,
        0,0,207,208,5,68,0,0,208,209,5,85,0,0,209,210,5,77,0,0,210,211,5,
        80,0,0,211,48,1,0,0,0,212,213,5,83,0,0,213,214,5,73,0,0,214,215,
        5,83,0,0,215,216,5,78,0,0,216,50,1,0,0,0,217,218,5,83,0,0,218,219,
        5,69,0,0,219,220,5,84,0,0,220,52,1,0,0,0,221,222,5,83,0,0,222,223,
        5,79,0,0,223,224,5,82,0,0,224,225,5,84,0,0,225,54,1,0,0,0,226,227,
        5,70,0,0,227,228,5,73,0,0,228,229,5,69,0,0,229,230,5,76,0,0,230,
        231,5,68,0,0,231,232,5,83,0,0,232,56,1,0,0,0,233,234,5,82,0,0,234,
        235,5,69,0,0,235,236,5,67,0,0,236,237,5,79,0,0,237,238,5,82,0,0,
        238,239,5,68,0,0,239,58,1,0,0,0,240,241,5,70,0,0,241,242,5,73,0,
        0,242,243,5,69,0,0,243,244,5,76,0,0,244,245,5,68,0,0,245,60,1,0,
        0,0,246,247,5,71,0,0,247,248,5,69,0,0,248,249,5,78,0,0,249,250,5,
        69,0,0,250,251,5,82,0,0,251,252,5,65,0,0,252,253,5,84,0,0,253,254,
        5,69,0,0,254,62,1,0,0,0,255,256,5,80,0,0,256,257,5,82,0,0,257,258,
        5,79,0,0,258,259,5,67,0,0,259,64,1,0,0,0,260,261,5,69,0,0,261,262,
        5,88,0,0,262,263,5,84,0,0,263,264,5,69,0,0,264,265,5,78,0,0,265,
        266,5,84,0,0,266,66,1,0,0,0,267,268,5,70,0,0,268,269,5,79,0,0,269,
        270,5,82,0,0,270,271,5,77,0,0,271,272,5,65,0,0,272,273,5,84,0,0,
        273,68,1,0,0,0,274,275,5,73,0,0,275,276,5,70,0,0,276,70,1,0,0,0,
        277,278,5,84,0,0,278,279,5,72,0,0,279,280,5,69,0,0,280,281,5,78,
        0,0,281,72,1,0,0,0,282,283,5,69,0,0,283,284,5,78,0,0,284,285,5,68,
        0,0,285,286,5,73,0,0,286,287,5,70,0,0,287,74,1,0,0,0,288,289,5,80,
        0,0,289,290,5,69,0,0,290,291,5,78,0,0,291,292,5,68,0,0,292,76,1,
        0,0,0,293,294,5,65,0,0,294,295,5,78,0,0,295,296,5,68,0,0,296,78,
        1,0,0,0,297,298,5,79,0,0,298,299,5,82,0,0,299,80,1,0,0,0,300,310,
        5,44,0,0,301,302,5,44,0,0,302,310,5,32,0,0,303,305,5,44,0,0,304,
        306,3,93,46,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,
        308,1,0,0,0,308,310,1,0,0,0,309,300,1,0,0,0,309,301,1,0,0,0,309,
        303,1,0,0,0,310,82,1,0,0,0,311,312,5,42,0,0,312,84,1,0,0,0,313,315,
        8,0,0,0,314,313,1,0,0,0,315,316,1,0,0,0,316,314,1,0,0,0,316,317,
        1,0,0,0,317,86,1,0,0,0,318,322,5,34,0,0,319,321,9,0,0,0,320,319,
        1,0,0,0,321,324,1,0,0,0,322,323,1,0,0,0,322,320,1,0,0,0,323,325,
        1,0,0,0,324,322,1,0,0,0,325,326,5,34,0,0,326,88,1,0,0,0,327,331,
        5,39,0,0,328,330,9,0,0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,332,
        1,0,0,0,331,329,1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,
        5,39,0,0,335,90,1,0,0,0,336,338,7,1,0,0,337,336,1,0,0,0,338,339,
        1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,92,1,0,0,0,341,343,7,
        2,0,0,342,341,1,0,0,0,343,344,1,0,0,0,344,342,1,0,0,0,344,345,1,
        0,0,0,345,94,1,0,0,0,346,348,5,47,0,0,347,346,1,0,0,0,347,348,1,
        0,0,0,348,349,1,0,0,0,349,350,5,47,0,0,350,351,5,42,0,0,351,355,
        1,0,0,0,352,354,8,3,0,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,
        1,0,0,0,355,356,1,0,0,0,356,360,1,0,0,0,357,355,1,0,0,0,358,361,
        3,99,49,0,359,361,5,0,0,1,360,358,1,0,0,0,360,359,1,0,0,0,361,362,
        1,0,0,0,362,363,6,47,0,0,363,96,1,0,0,0,364,365,5,60,0,0,365,366,
        5,61,0,0,366,367,5,61,0,0,367,371,1,0,0,0,368,370,8,3,0,0,369,368,
        1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,376,
        1,0,0,0,373,371,1,0,0,0,374,377,3,99,49,0,375,377,5,0,0,1,376,374,
        1,0,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,379,6,48,0,0,379,98,
        1,0,0,0,380,382,7,3,0,0,381,380,1,0,0,0,382,383,1,0,0,0,383,381,
        1,0,0,0,383,384,1,0,0,0,384,100,1,0,0,0,14,0,307,309,316,322,331,
        339,344,347,355,360,371,376,383,1,0,1,0
    ]

class JCLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    DATASET_ = 8
    BACKUP_ = 9
    JOB_ = 10
    PRTFILE_ = 11
    EXEC_ = 12
    DD_ = 13
    FROM_ = 14
    TO_ = 15
    END_ = 16
    LIST_ = 17
    JCLLIB_ = 18
    JOBLIB_ = 19
    INCLUDE_ = 20
    MEMBER_ = 21
    DSLASH_ = 22
    DATA_ = 23
    TDUMP_ = 24
    SISN_ = 25
    SET_ = 26
    SORT_ = 27
    FIELDS_ = 28
    RECORD_ = 29
    FIELD_ = 30
    GENERATE_ = 31
    PROC_ = 32
    EXTENT_ = 33
    FORMAT_ = 34
    IF_ = 35
    THEN_ = 36
    ENDIF_ = 37
    PEND_ = 38
    AND_ = 39
    OR_ = 40
    COMMA = 41
    STAR = 42
    IDENTIFIER = 43
    STRING = 44
    STRING2 = 45
    NUMBER = 46
    WS = 47
    LINECOMMENT = 48
    INLINECOMMENT = 49
    NEWLINE = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'/'", "'()'", "'*.'", "'.'", "'DATASET'", 
            "'BACKUP'", "'JOB'", "'PRTFILE'", "'EXEC'", "'DD'", "'FROM'", 
            "'TO'", "'END'", "'LIST'", "'JCLLIB'", "'JOBLIB'", "'INCLUDE'", 
            "'MEMBER'", "'//'", "'DATA'", "'TDUMP'", "'SISN'", "'SET'", 
            "'SORT'", "'FIELDS'", "'RECORD'", "'FIELD'", "'GENERATE'", "'PROC'", 
            "'EXTENT'", "'FORMAT'", "'IF'", "'THEN'", "'ENDIF'", "'PEND'", 
            "'AND'", "'OR'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "DATASET_", "BACKUP_", "JOB_", "PRTFILE_", "EXEC_", "DD_", "FROM_", 
            "TO_", "END_", "LIST_", "JCLLIB_", "JOBLIB_", "INCLUDE_", "MEMBER_", 
            "DSLASH_", "DATA_", "TDUMP_", "SISN_", "SET_", "SORT_", "FIELDS_", 
            "RECORD_", "FIELD_", "GENERATE_", "PROC_", "EXTENT_", "FORMAT_", 
            "IF_", "THEN_", "ENDIF_", "PEND_", "AND_", "OR_", "COMMA", "STAR", 
            "IDENTIFIER", "STRING", "STRING2", "NUMBER", "WS", "LINECOMMENT", 
            "INLINECOMMENT", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "DATASET_", "BACKUP_", "JOB_", "PRTFILE_", "EXEC_", "DD_", 
                  "FROM_", "TO_", "END_", "LIST_", "JCLLIB_", "JOBLIB_", 
                  "INCLUDE_", "MEMBER_", "DSLASH_", "DATA_", "TDUMP_", "SISN_", 
                  "SET_", "SORT_", "FIELDS_", "RECORD_", "FIELD_", "GENERATE_", 
                  "PROC_", "EXTENT_", "FORMAT_", "IF_", "THEN_", "ENDIF_", 
                  "PEND_", "AND_", "OR_", "COMMA", "STAR", "IDENTIFIER", 
                  "STRING", "STRING2", "NUMBER", "WS", "LINECOMMENT", "INLINECOMMENT", 
                  "NEWLINE" ]

    grammarFileName = "IBM_JCL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


