# Generated from grammar/copybook/CopyBook.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,847,7002,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
        7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,
        2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,
        7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,
        2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,
        7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,7,598,
        2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,2,604,
        7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
        2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,
        7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
        2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,
        7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,
        2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,
        7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,
        2,643,7,643,2,644,7,644,1,0,1,0,1,0,1,1,4,1,1295,8,1,11,1,12,1,1296,
        1,2,1,2,3,2,1301,8,2,1,2,3,2,1304,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,5,4,1316,8,4,10,4,12,4,1319,9,4,1,5,1,5,1,5,1,5,1,
        5,1,5,3,5,1327,8,5,1,6,1,6,1,6,3,6,1332,8,6,1,6,1,6,3,6,1336,8,6,
        1,6,1,6,3,6,1340,8,6,3,6,1342,8,6,1,6,3,6,1345,8,6,1,6,3,6,1348,
        8,6,1,7,1,7,1,8,1,8,1,8,3,8,1355,8,8,1,8,1,8,1,8,3,8,1360,8,8,1,
        8,3,8,1363,8,8,1,9,1,9,1,9,3,9,1368,8,9,1,10,1,10,1,10,1,10,1,10,
        5,10,1375,8,10,10,10,12,10,1378,9,10,1,10,3,10,1381,8,10,1,10,3,
        10,1384,8,10,1,11,1,11,1,11,1,11,1,11,5,11,1391,8,11,10,11,12,11,
        1394,9,11,1,11,3,11,1397,8,11,1,11,3,11,1400,8,11,1,12,1,12,1,12,
        3,12,1405,8,12,1,13,1,13,1,13,3,13,1410,8,13,1,14,1,14,1,14,1,14,
        5,14,1416,8,14,10,14,12,14,1419,9,14,1,15,1,15,1,15,3,15,1424,8,
        15,1,16,1,16,1,16,1,16,5,16,1430,8,16,10,16,12,16,1433,9,16,1,17,
        1,17,1,17,3,17,1438,8,17,1,18,1,18,1,18,3,18,1443,8,18,1,18,1,18,
        3,18,1447,8,18,1,18,1,18,3,18,1451,8,18,1,18,1,18,1,19,1,19,1,19,
        3,19,1458,8,19,1,19,1,19,5,19,1462,8,19,10,19,12,19,1465,9,19,1,
        19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,1474,8,20,1,21,1,21,3,21,1478,
        8,21,1,21,1,21,3,21,1482,8,21,1,21,3,21,1485,8,21,1,22,1,22,3,22,
        1489,8,22,1,22,3,22,1492,8,22,1,22,1,22,3,22,1496,8,22,1,22,3,22,
        1499,8,22,1,23,3,23,1502,8,23,1,23,3,23,1505,8,23,1,23,1,23,3,23,
        1509,8,23,1,23,4,23,1512,8,23,11,23,12,23,1513,1,23,3,23,1517,8,
        23,1,23,3,23,1520,8,23,1,24,3,24,1523,8,24,1,24,1,24,3,24,1527,8,
        24,1,24,1,24,1,25,3,25,1532,8,25,1,25,1,25,3,25,1536,8,25,1,25,1,
        25,1,26,1,26,3,26,1542,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,
        28,1,28,4,28,1553,8,28,11,28,12,28,1554,1,28,1,28,3,28,1559,8,28,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,1572,
        8,29,1,30,1,30,3,30,1576,8,30,1,31,1,31,1,31,1,31,3,31,1582,8,31,
        1,31,3,31,1585,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,4,31,1594,
        8,31,11,31,12,31,1595,3,31,1598,8,31,1,32,1,32,1,32,4,32,1603,8,
        32,11,32,12,32,1604,3,32,1607,8,32,1,33,1,33,1,33,1,34,1,34,4,34,
        1614,8,34,11,34,12,34,1615,1,35,1,35,1,35,3,35,1621,8,35,1,35,1,
        35,3,35,1625,8,35,1,35,1,35,1,35,3,35,1630,8,35,1,36,1,36,1,36,3,
        36,1635,8,36,1,36,1,36,1,37,1,37,1,37,3,37,1642,8,37,1,37,3,37,1645,
        8,37,1,37,3,37,1648,8,37,1,37,4,37,1651,8,37,11,37,12,37,1652,1,
        38,1,38,1,38,3,38,1658,8,38,1,39,1,39,3,39,1662,8,39,1,40,1,40,3,
        40,1666,8,40,1,41,1,41,3,41,1670,8,41,1,41,3,41,1673,8,41,1,41,1,
        41,3,41,1677,8,41,1,41,1,41,1,41,3,41,1682,8,41,1,42,1,42,3,42,1686,
        8,42,1,42,1,42,1,43,1,43,3,43,1692,8,43,1,43,1,43,3,43,1696,8,43,
        3,43,1698,8,43,1,43,3,43,1701,8,43,1,43,1,43,3,43,1705,8,43,1,44,
        1,44,1,44,3,44,1710,8,44,3,44,1712,8,44,1,44,1,44,1,44,3,44,1717,
        8,44,3,44,1719,8,44,1,45,1,45,3,45,1723,8,45,1,45,1,45,3,45,1727,
        8,45,1,45,3,45,1730,8,45,1,46,1,46,3,46,1734,8,46,1,46,3,46,1737,
        8,46,1,46,1,46,1,46,3,46,1742,8,46,1,46,3,46,1745,8,46,1,46,3,46,
        1748,8,46,1,46,1,46,3,46,1752,8,46,1,46,3,46,1755,8,46,1,46,1,46,
        1,46,3,46,1760,8,46,1,46,3,46,1763,8,46,1,46,3,46,1766,8,46,3,46,
        1768,8,46,1,47,1,47,3,47,1772,8,47,1,47,1,47,1,48,1,48,3,48,1778,
        8,48,1,48,3,48,1781,8,48,1,48,3,48,1784,8,48,1,48,1,48,3,48,1788,
        8,48,1,49,1,49,3,49,1792,8,49,1,49,3,49,1795,8,49,1,49,3,49,1798,
        8,49,1,49,4,49,1801,8,49,11,49,12,49,1802,1,49,1,49,3,49,1807,8,
        49,1,50,4,50,1810,8,50,11,50,12,50,1811,1,50,3,50,1815,8,50,1,50,
        4,50,1818,8,50,11,50,12,50,1819,1,51,1,51,1,51,1,51,5,51,1826,8,
        51,10,51,12,51,1829,9,51,1,52,1,52,3,52,1833,8,52,1,53,1,53,3,53,
        1837,8,53,1,53,5,53,1840,8,53,10,53,12,53,1843,9,53,1,53,3,53,1846,
        8,53,1,54,1,54,5,54,1850,8,54,10,54,12,54,1853,9,54,4,54,1855,8,
        54,11,54,12,54,1856,1,54,3,54,1860,8,54,1,54,3,54,1863,8,54,1,55,
        1,55,3,55,1867,8,55,1,55,1,55,3,55,1871,8,55,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1884,8,56,1,57,1,57,3,57,
        1888,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        3,57,1901,8,57,1,58,1,58,1,58,3,58,1906,8,58,1,58,3,58,1909,8,58,
        1,58,3,58,1912,8,58,1,59,1,59,3,59,1916,8,59,3,59,1918,8,59,1,59,
        1,59,1,59,1,59,1,59,3,59,1925,8,59,1,59,1,59,1,60,1,60,3,60,1931,
        8,60,1,60,3,60,1934,8,60,1,60,1,60,3,60,1938,8,60,1,61,1,61,1,61,
        3,61,1943,8,61,1,61,1,61,1,61,3,61,1948,8,61,1,62,1,62,3,62,1952,
        8,62,1,62,3,62,1955,8,62,1,62,1,62,1,63,1,63,3,63,1961,8,63,1,63,
        3,63,1964,8,63,1,63,1,63,3,63,1968,8,63,1,63,3,63,1971,8,63,1,63,
        3,63,1974,8,63,1,64,1,64,3,64,1978,8,64,1,64,3,64,1981,8,64,1,64,
        3,64,1984,8,64,1,64,1,64,3,64,1988,8,64,1,64,3,64,1991,8,64,1,64,
        3,64,1994,8,64,1,65,1,65,3,65,1998,8,65,1,65,1,65,1,66,3,66,2003,
        8,66,1,66,1,66,3,66,2007,8,66,1,66,1,66,3,66,2011,8,66,1,67,1,67,
        3,67,2015,8,67,1,67,3,67,2018,8,67,1,67,1,67,1,68,1,68,1,68,1,68,
        1,68,3,68,2027,8,68,1,68,5,68,2030,8,68,10,68,12,68,2033,9,68,1,
        68,3,68,2036,8,68,1,69,1,69,1,69,1,69,3,69,2042,8,69,1,70,1,70,1,
        70,1,70,3,70,2048,8,70,3,70,2050,8,70,1,70,1,70,1,70,1,70,3,70,2056,
        8,70,1,71,1,71,1,71,1,72,3,72,2062,8,72,1,72,3,72,2065,8,72,1,72,
        1,72,1,72,1,72,1,73,1,73,3,73,2073,8,73,1,74,1,74,3,74,2077,8,74,
        1,74,3,74,2080,8,74,1,74,3,74,2083,8,74,1,74,4,74,2086,8,74,11,74,
        12,74,2087,1,75,1,75,1,75,3,75,2093,8,75,1,75,3,75,2096,8,75,1,75,
        4,75,2099,8,75,11,75,12,75,2100,1,76,1,76,1,76,3,76,2106,8,76,1,
        77,1,77,1,77,3,77,2111,8,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,2119,
        8,78,10,78,12,78,2122,9,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
        79,1,79,3,79,2133,8,79,1,80,1,80,1,80,1,80,5,80,2139,8,80,10,80,
        12,80,2142,9,80,1,81,1,81,1,81,3,81,2147,8,81,1,81,5,81,2150,8,81,
        10,81,12,81,2153,9,81,1,81,3,81,2156,8,81,1,81,5,81,2159,8,81,10,
        81,12,81,2162,9,81,1,81,1,81,1,81,3,81,2167,8,81,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2180,8,82,1,83,3,83,
        2183,8,83,1,83,1,83,1,84,3,84,2188,8,84,1,84,1,84,1,85,1,85,3,85,
        2194,8,85,1,85,1,85,3,85,2198,8,85,1,85,3,85,2201,8,85,1,86,1,86,
        1,86,1,87,1,87,1,87,1,87,3,87,2210,8,87,1,88,3,88,2213,8,88,1,88,
        1,88,3,88,2217,8,88,1,89,3,89,2220,8,89,1,89,1,89,3,89,2224,8,89,
        1,89,3,89,2227,8,89,1,89,3,89,2230,8,89,1,89,1,89,3,89,2234,8,89,
        1,89,3,89,2237,8,89,3,89,2239,8,89,1,89,1,89,3,89,2243,8,89,1,89,
        3,89,2246,8,89,1,90,3,90,2249,8,90,1,90,1,90,1,90,3,90,2254,8,90,
        1,91,1,91,1,91,1,92,1,92,1,92,3,92,2262,8,92,1,92,1,92,3,92,2266,
        8,92,3,92,2268,8,92,1,92,1,92,1,92,4,92,2273,8,92,11,92,12,92,2274,
        3,92,2277,8,92,1,93,1,93,1,93,4,93,2282,8,93,11,93,12,93,2283,1,
        94,1,94,3,94,2288,8,94,1,94,1,94,3,94,2292,8,94,1,95,1,95,1,95,3,
        95,2297,8,95,1,95,1,95,3,95,2301,8,95,3,95,2303,8,95,1,95,4,95,2306,
        8,95,11,95,12,95,2307,1,96,1,96,3,96,2312,8,96,1,96,1,96,3,96,2316,
        8,96,1,96,3,96,2319,8,96,1,96,5,96,2322,8,96,10,96,12,96,2325,9,
        96,1,97,1,97,1,97,3,97,2330,8,97,1,98,3,98,2333,8,98,1,98,1,98,3,
        98,2337,8,98,1,98,1,98,3,98,2341,8,98,1,99,3,99,2344,8,99,1,99,3,
        99,2347,8,99,1,99,1,99,1,99,3,99,2352,8,99,1,100,3,100,2355,8,100,
        1,100,3,100,2358,8,100,1,100,1,100,1,100,3,100,2363,8,100,1,101,
        1,101,3,101,2367,8,101,1,101,3,101,2370,8,101,1,101,1,101,1,102,
        1,102,1,103,1,103,3,103,2378,8,103,1,103,1,103,1,104,1,104,3,104,
        2384,8,104,1,104,1,104,3,104,2388,8,104,3,104,2390,8,104,1,104,4,
        104,2393,8,104,11,104,12,104,2394,1,105,1,105,1,105,1,105,5,105,
        2401,8,105,10,105,12,105,2404,9,105,1,106,1,106,1,106,1,106,1,106,
        1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,2418,8,107,1,107,
        1,107,1,107,1,107,3,107,2424,8,107,1,107,1,107,1,107,1,107,1,107,
        3,107,2431,8,107,4,107,2433,8,107,11,107,12,107,2434,1,108,1,108,
        1,108,1,108,5,108,2441,8,108,10,108,12,108,2444,9,108,1,109,1,109,
        1,109,1,109,1,109,5,109,2451,8,109,10,109,12,109,2454,9,109,1,110,
        1,110,1,110,3,110,2459,8,110,1,111,1,111,1,111,3,111,2464,8,111,
        1,111,3,111,2467,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,3,111,2479,8,111,1,111,5,111,2482,8,111,10,111,
        12,111,2485,9,111,1,111,1,111,1,112,1,112,1,112,3,112,2492,8,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,2501,8,112,10,112,
        12,112,2504,9,112,1,112,1,112,1,113,1,113,1,113,3,113,2511,8,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,2521,8,113,
        1,113,5,113,2524,8,113,10,113,12,113,2527,9,113,1,113,1,113,1,114,
        1,114,1,114,3,114,2534,8,114,1,114,1,114,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,4,115,2546,8,115,11,115,12,115,2547,3,115,
        2550,8,115,1,116,1,116,1,116,3,116,2555,8,116,1,116,1,116,1,117,
        1,117,1,117,3,117,2562,8,117,1,117,1,117,1,118,3,118,2567,8,118,
        1,118,1,118,3,118,2571,8,118,1,118,1,118,1,119,1,119,1,119,3,119,
        2578,8,119,1,119,1,119,1,120,1,120,1,120,3,120,2585,8,120,1,120,
        1,120,1,121,1,121,1,121,3,121,2592,8,121,1,121,1,121,1,122,3,122,
        2597,8,122,1,122,1,122,3,122,2601,8,122,1,122,1,122,1,123,3,123,
        2606,8,123,1,123,1,123,3,123,2610,8,123,1,123,1,123,1,124,3,124,
        2615,8,124,1,124,1,124,3,124,2619,8,124,1,124,1,124,1,125,3,125,
        2624,8,125,1,125,1,125,3,125,2628,8,125,1,125,1,125,1,126,3,126,
        2633,8,126,1,126,1,126,3,126,2637,8,126,1,126,1,126,1,127,1,127,
        1,127,3,127,2644,8,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,3,128,2655,8,128,1,128,5,128,2658,8,128,10,128,12,128,
        2661,9,128,1,129,1,129,1,129,1,129,5,129,2667,8,129,10,129,12,129,
        2670,9,129,1,130,1,130,1,130,3,130,2675,8,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,3,130,2695,8,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,5,130,2707,8,130,10,130,12,130,
        2710,9,130,1,130,1,130,1,131,1,131,1,131,1,132,1,132,1,133,1,133,
        1,134,1,134,1,134,1,135,1,135,1,136,1,136,1,137,1,137,1,138,1,138,
        1,139,1,139,3,139,2734,8,139,1,139,1,139,3,139,2738,8,139,1,140,
        1,140,3,140,2742,8,140,1,140,3,140,2745,8,140,1,140,3,140,2748,8,
        140,1,140,1,140,3,140,2752,8,140,1,141,1,141,3,141,2756,8,141,1,
        141,3,141,2759,8,141,1,141,3,141,2762,8,141,1,141,1,141,3,141,2766,
        8,141,1,142,1,142,3,142,2770,8,142,1,142,1,142,3,142,2774,8,142,
        1,143,1,143,3,143,2778,8,143,1,143,1,143,3,143,2782,8,143,1,144,
        1,144,3,144,2786,8,144,1,144,1,144,1,145,1,145,3,145,2792,8,145,
        1,145,1,145,1,146,1,146,3,146,2798,8,146,1,146,1,146,1,147,1,147,
        1,147,3,147,2805,8,147,1,147,3,147,2808,8,147,1,148,1,148,1,148,
        1,149,1,149,1,149,1,150,1,150,3,150,2818,8,150,1,150,1,150,1,151,
        1,151,3,151,2824,8,151,1,151,1,151,1,152,1,152,3,152,2830,8,152,
        1,153,1,153,3,153,2834,8,153,3,153,2836,8,153,1,153,1,153,1,153,
        3,153,2841,8,153,3,153,2843,8,153,1,154,1,154,1,155,1,155,1,156,
        1,156,1,157,1,157,3,157,2853,8,157,1,157,3,157,2856,8,157,1,157,
        1,157,3,157,2860,8,157,1,157,3,157,2863,8,157,1,158,1,158,1,158,
        3,158,2868,8,158,1,159,1,159,1,160,1,160,1,161,1,161,1,161,1,161,
        5,161,2878,8,161,10,161,12,161,2881,9,161,1,162,1,162,4,162,2885,
        8,162,11,162,12,162,2886,1,163,1,163,1,163,3,163,2892,8,163,1,163,
        1,163,3,163,2896,8,163,1,163,3,163,2899,8,163,1,163,3,163,2902,8,
        163,1,163,3,163,2905,8,163,3,163,2907,8,163,1,163,1,163,1,164,3,
        164,2912,8,164,1,164,1,164,1,165,1,165,1,165,3,165,2919,8,165,1,
        165,1,165,3,165,2923,8,165,3,165,2925,8,165,1,165,1,165,3,165,2929,
        8,165,1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,168,1,168,1,168,
        1,168,1,169,1,169,1,169,1,170,1,170,1,170,3,170,2948,8,170,1,171,
        1,171,1,171,3,171,2953,8,171,1,171,3,171,2956,8,171,1,171,1,171,
        3,171,2960,8,171,1,171,1,171,1,172,1,172,3,172,2966,8,172,1,172,
        3,172,2969,8,172,1,172,1,172,1,172,1,173,1,173,3,173,2976,8,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        3,173,2989,8,173,1,173,5,173,2992,8,173,10,173,12,173,2995,9,173,
        1,173,1,173,1,174,1,174,3,174,3001,8,174,1,174,1,174,1,175,1,175,
        3,175,3007,8,175,1,175,3,175,3010,8,175,1,175,1,175,1,176,1,176,
        3,176,3016,8,176,1,177,1,177,3,177,3020,8,177,1,178,3,178,3023,8,
        178,1,178,3,178,3026,8,178,1,178,3,178,3029,8,178,1,178,1,178,3,
        178,3033,8,178,1,179,1,179,3,179,3037,8,179,1,179,1,179,3,179,3041,
        8,179,1,180,1,180,1,180,1,181,1,181,1,181,3,181,3049,8,181,1,181,
        1,181,1,181,3,181,3054,8,181,1,182,1,182,1,182,1,183,1,183,1,183,
        1,184,1,184,3,184,3064,8,184,1,184,1,184,1,185,1,185,3,185,3070,
        8,185,1,185,1,185,3,185,3074,8,185,1,186,1,186,3,186,3078,8,186,
        1,186,1,186,1,186,3,186,3083,8,186,1,187,1,187,3,187,3087,8,187,
        1,187,1,187,1,188,1,188,1,188,3,188,3094,8,188,1,188,5,188,3097,
        8,188,10,188,12,188,3100,9,188,1,188,1,188,1,188,3,188,3105,8,188,
        1,188,5,188,3108,8,188,10,188,12,188,3111,9,188,3,188,3113,8,188,
        1,189,1,189,3,189,3117,8,189,1,189,1,189,1,189,1,189,1,189,1,189,
        1,189,3,189,3126,8,189,1,190,1,190,1,190,3,190,3131,8,190,1,191,
        1,191,1,191,3,191,3136,8,191,1,192,1,192,1,192,3,192,3141,8,192,
        1,192,1,192,3,192,3145,8,192,1,193,1,193,1,194,1,194,1,194,3,194,
        3152,8,194,1,194,1,194,3,194,3156,8,194,1,195,1,195,3,195,3160,8,
        195,3,195,3162,8,195,1,195,1,195,1,196,1,196,1,196,3,196,3169,8,
        196,1,197,1,197,1,197,3,197,3174,8,197,1,198,1,198,3,198,3178,8,
        198,1,198,1,198,1,199,1,199,1,199,1,199,5,199,3186,8,199,10,199,
        12,199,3189,9,199,1,200,1,200,3,200,3193,8,200,1,201,1,201,1,201,
        1,201,3,201,3199,8,201,1,201,3,201,3202,8,201,1,202,1,202,1,202,
        1,202,3,202,3208,8,202,1,202,3,202,3211,8,202,1,202,1,202,5,202,
        3215,8,202,10,202,12,202,3218,9,202,1,203,1,203,1,203,3,203,3223,
        8,203,1,203,3,203,3226,8,203,1,204,1,204,3,204,3230,8,204,1,204,
        1,204,3,204,3234,8,204,1,204,3,204,3237,8,204,1,204,3,204,3240,8,
        204,1,204,3,204,3243,8,204,1,205,1,205,1,205,1,205,1,206,1,206,3,
        206,3251,8,206,1,206,1,206,1,207,1,207,3,207,3257,8,207,1,207,1,
        207,1,208,1,208,1,208,3,208,3264,8,208,1,209,1,209,1,209,3,209,3269,
        8,209,1,209,3,209,3272,8,209,1,209,3,209,3275,8,209,1,209,3,209,
        3278,8,209,1,210,1,210,1,210,1,211,1,211,1,211,1,212,1,212,4,212,
        3288,8,212,11,212,12,212,3289,1,213,1,213,3,213,3294,8,213,1,214,
        1,214,4,214,3298,8,214,11,214,12,214,3299,1,215,1,215,3,215,3304,
        8,215,1,216,3,216,3307,8,216,1,216,1,216,1,217,3,217,3312,8,217,
        1,217,1,217,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,
        3324,8,218,1,219,1,219,1,219,1,219,1,219,1,219,3,219,3332,8,219,
        5,219,3334,8,219,10,219,12,219,3337,9,219,1,219,1,219,1,219,3,219,
        3342,8,219,1,220,1,220,1,220,1,221,1,221,1,221,1,221,1,221,3,221,
        3352,8,221,1,222,1,222,1,222,3,222,3357,8,222,1,222,1,222,3,222,
        3361,8,222,1,223,1,223,3,223,3365,8,223,1,224,1,224,1,224,5,224,
        3370,8,224,10,224,12,224,3373,9,224,1,225,1,225,1,225,5,225,3378,
        8,225,10,225,12,225,3381,9,225,1,225,3,225,3384,8,225,1,226,1,226,
        5,226,3388,8,226,10,226,12,226,3391,9,226,1,226,4,226,3394,8,226,
        11,226,12,226,3395,1,226,1,226,1,227,1,227,1,227,1,227,1,228,1,228,
        1,228,1,228,1,229,1,229,5,229,3410,8,229,10,229,12,229,3413,9,229,
        1,229,1,229,3,229,3417,8,229,1,230,1,230,5,230,3421,8,230,10,230,
        12,230,3424,9,230,1,230,1,230,3,230,3428,8,230,1,231,1,231,1,231,
        1,231,3,231,3434,8,231,1,232,1,232,1,232,1,232,3,232,3440,8,232,
        1,233,1,233,3,233,3444,8,233,1,234,1,234,3,234,3448,8,234,1,235,
        1,235,1,235,3,235,3453,8,235,1,236,1,236,3,236,3457,8,236,1,236,
        1,236,1,237,1,237,4,237,3463,8,237,11,237,12,237,3464,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,4,238,3576,8,238,
        11,238,12,238,3577,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
        1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
        1,239,1,239,1,239,4,239,3602,8,239,11,239,12,239,3603,1,240,1,240,
        3,240,3608,8,240,1,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,
        3617,8,241,1,242,1,242,3,242,3621,8,242,1,242,5,242,3624,8,242,10,
        242,12,242,3627,9,242,1,242,5,242,3630,8,242,10,242,12,242,3633,
        9,242,3,242,3635,8,242,1,242,3,242,3638,8,242,1,242,1,242,4,242,
        3642,8,242,11,242,12,242,3643,1,242,4,242,3647,8,242,11,242,12,242,
        3648,1,242,1,242,3,242,3653,8,242,1,243,1,243,1,244,1,244,1,244,
        3,244,3660,8,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,1,244,5,244,3685,8,244,10,244,12,244,3688,9,244,
        1,244,1,244,1,245,1,245,1,245,3,245,3695,8,245,1,245,1,245,1,246,
        1,246,1,246,1,246,1,246,3,246,3704,8,246,1,246,3,246,3707,8,246,
        1,247,1,247,1,247,3,247,3712,8,247,1,247,1,247,1,248,1,248,1,248,
        3,248,3719,8,248,1,248,1,248,1,249,1,249,1,249,1,249,1,249,1,250,
        1,250,1,250,1,250,1,250,1,251,4,251,3734,8,251,11,251,12,251,3735,
        1,251,3,251,3739,8,251,1,252,1,252,1,253,1,253,3,253,3745,8,253,
        1,253,1,253,1,254,1,254,1,255,3,255,3752,8,255,1,255,1,255,1,255,
        3,255,3757,8,255,1,256,3,256,3760,8,256,1,256,1,256,1,257,1,257,
        1,258,1,258,3,258,3768,8,258,1,259,1,259,1,259,3,259,3773,8,259,
        1,259,3,259,3776,8,259,1,259,1,259,3,259,3780,8,259,1,259,3,259,
        3783,8,259,1,259,5,259,3786,8,259,10,259,12,259,3789,9,259,1,259,
        1,259,3,259,3793,8,259,1,259,3,259,3796,8,259,1,259,4,259,3799,8,
        259,11,259,12,259,3800,3,259,3803,8,259,1,260,1,260,1,260,1,261,
        1,261,3,261,3810,8,261,1,261,3,261,3813,8,261,1,261,4,261,3816,8,
        261,11,261,12,261,3817,1,262,1,262,3,262,3822,8,262,1,262,1,262,
        1,263,4,263,3827,8,263,11,263,12,263,3828,1,263,3,263,3832,8,263,
        4,263,3834,8,263,11,263,12,263,3835,1,264,1,264,1,264,1,264,1,264,
        1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,
        1,264,1,264,3,264,3856,8,264,1,265,1,265,1,265,1,265,1,266,3,266,
        3863,8,266,1,266,3,266,3866,8,266,1,266,1,266,1,267,1,267,1,267,
        1,268,1,268,1,268,1,269,1,269,1,269,1,269,3,269,3880,8,269,1,270,
        1,270,3,270,3884,8,270,3,270,3886,8,270,1,270,1,270,1,270,3,270,
        3891,8,270,3,270,3893,8,270,1,271,1,271,3,271,3897,8,271,1,272,3,
        272,3900,8,272,1,272,1,272,1,273,1,273,3,273,3906,8,273,1,273,1,
        273,1,274,3,274,3911,8,274,1,274,1,274,1,275,1,275,3,275,3917,8,
        275,3,275,3919,8,275,1,275,1,275,3,275,3923,8,275,1,275,1,275,1,
        275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,
        1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,
        1,275,1,275,1,275,1,275,1,275,1,275,3,275,3955,8,275,1,276,1,276,
        1,276,3,276,3960,8,276,1,276,1,276,3,276,3964,8,276,1,277,1,277,
        3,277,3968,8,277,1,277,1,277,3,277,3972,8,277,3,277,3974,8,277,1,
        277,1,277,3,277,3978,8,277,1,277,5,277,3981,8,277,10,277,12,277,
        3984,9,277,1,278,1,278,3,278,3988,8,278,1,279,1,279,1,279,3,279,
        3993,8,279,1,280,1,280,1,280,1,281,3,281,3999,8,281,1,281,1,281,
        1,281,1,282,1,282,1,282,3,282,4007,8,282,1,282,3,282,4010,8,282,
        1,282,1,282,3,282,4014,8,282,1,282,1,282,1,283,1,283,4,283,4020,
        8,283,11,283,12,283,4021,1,284,1,284,1,284,1,285,1,285,3,285,4029,
        8,285,1,286,3,286,4032,8,286,1,286,3,286,4035,8,286,1,286,4,286,
        4038,8,286,11,286,12,286,4039,1,287,3,287,4043,8,287,1,287,1,287,
        3,287,4047,8,287,1,287,3,287,4050,8,287,1,288,3,288,4053,8,288,1,
        288,1,288,4,288,4057,8,288,11,288,12,288,4058,1,289,1,289,1,289,
        3,289,4064,8,289,1,290,1,290,1,290,4,290,4069,8,290,11,290,12,290,
        4070,1,290,3,290,4074,8,290,1,290,1,290,1,290,1,290,1,291,1,291,
        3,291,4082,8,291,1,291,3,291,4085,8,291,1,291,1,291,1,291,1,292,
        1,292,1,292,3,292,4093,8,292,1,293,1,293,5,293,4097,8,293,10,293,
        12,293,4100,9,293,1,294,1,294,1,294,1,294,1,295,5,295,4107,8,295,
        10,295,12,295,4110,9,295,1,295,5,295,4113,8,295,10,295,12,295,4116,
        9,295,1,296,1,296,1,296,1,296,5,296,4122,8,296,10,296,12,296,4125,
        9,296,3,296,4127,8,296,1,297,4,297,4130,8,297,11,297,12,297,4131,
        1,297,3,297,4135,8,297,1,297,1,297,3,297,4139,8,297,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,3,298,4196,
        8,298,1,299,1,299,1,299,1,299,1,299,3,299,4203,8,299,1,300,1,300,
        1,301,1,301,1,301,3,301,4210,8,301,1,301,1,301,1,301,3,301,4215,
        8,301,1,302,1,302,1,303,1,303,1,303,1,303,1,303,1,304,5,304,4225,
        8,304,10,304,12,304,4228,9,304,1,305,1,305,1,305,1,305,3,305,4234,
        8,305,1,305,1,305,3,305,4238,8,305,1,306,1,306,1,306,1,306,3,306,
        4244,8,306,1,307,1,307,4,307,4248,8,307,11,307,12,307,4249,1,308,
        1,308,1,308,1,308,3,308,4256,8,308,1,308,1,308,3,308,4260,8,308,
        1,309,1,309,1,309,3,309,4265,8,309,1,310,1,310,1,311,1,311,1,311,
        1,311,1,311,1,312,1,312,1,312,1,312,4,312,4278,8,312,11,312,12,312,
        4279,1,313,1,313,1,313,1,313,1,313,1,313,3,313,4288,8,313,1,313,
        3,313,4291,8,313,1,313,3,313,4294,8,313,1,313,3,313,4297,8,313,1,
        314,1,314,1,314,3,314,4302,8,314,1,314,1,314,3,314,4306,8,314,1,
        314,1,314,1,314,1,314,1,314,3,314,4313,8,314,1,314,1,314,1,314,1,
        314,3,314,4319,8,314,1,315,1,315,1,315,1,316,1,316,1,316,1,316,1,
        317,3,317,4329,8,317,1,317,1,317,1,318,1,318,1,318,1,318,3,318,4337,
        8,318,1,318,3,318,4340,8,318,1,318,3,318,4343,8,318,1,318,3,318,
        4346,8,318,1,319,4,319,4349,8,319,11,319,12,319,4350,1,319,1,319,
        4,319,4355,8,319,11,319,12,319,4356,1,320,4,320,4360,8,320,11,320,
        12,320,4361,1,320,1,320,4,320,4366,8,320,11,320,12,320,4367,3,320,
        4370,8,320,1,320,1,320,4,320,4374,8,320,11,320,12,320,4375,1,321,
        1,321,1,321,1,321,1,321,1,322,1,322,3,322,4385,8,322,1,323,1,323,
        3,323,4389,8,323,1,323,3,323,4392,8,323,1,324,1,324,1,324,3,324,
        4397,8,324,1,325,1,325,3,325,4401,8,325,1,326,1,326,3,326,4405,8,
        326,1,326,1,326,1,327,1,327,4,327,4411,8,327,11,327,12,327,4412,
        1,328,1,328,1,328,1,328,3,328,4419,8,328,1,328,1,328,1,329,1,329,
        1,329,3,329,4426,8,329,1,329,3,329,4429,8,329,1,329,3,329,4432,8,
        329,1,329,3,329,4435,8,329,1,329,3,329,4438,8,329,1,329,3,329,4441,
        8,329,1,329,3,329,4444,8,329,1,330,1,330,4,330,4448,8,330,11,330,
        12,330,4449,1,331,1,331,1,331,3,331,4455,8,331,1,332,3,332,4458,
        8,332,1,332,3,332,4461,8,332,1,332,4,332,4464,8,332,11,332,12,332,
        4465,1,333,1,333,1,333,1,333,3,333,4472,8,333,1,333,1,333,1,333,
        3,333,4477,8,333,1,333,3,333,4480,8,333,1,334,3,334,4483,8,334,1,
        334,1,334,4,334,4487,8,334,11,334,12,334,4488,1,335,1,335,1,335,
        1,335,3,335,4495,8,335,3,335,4497,8,335,1,335,1,335,3,335,4501,8,
        335,1,336,3,336,4504,8,336,1,336,1,336,4,336,4508,8,336,11,336,12,
        336,4509,1,337,1,337,1,337,1,337,3,337,4516,8,337,3,337,4518,8,337,
        1,337,1,337,1,337,3,337,4523,8,337,1,338,1,338,1,338,1,339,1,339,
        4,339,4530,8,339,11,339,12,339,4531,1,340,1,340,1,340,1,340,1,340,
        3,340,4539,8,340,1,341,1,341,4,341,4543,8,341,11,341,12,341,4544,
        1,342,1,342,1,342,1,342,3,342,4551,8,342,1,343,1,343,3,343,4555,
        8,343,1,343,3,343,4558,8,343,1,343,3,343,4561,8,343,1,343,1,343,
        1,343,3,343,4566,8,343,3,343,4568,8,343,1,344,3,344,4571,8,344,1,
        344,1,344,1,344,3,344,4576,8,344,1,345,3,345,4579,8,345,1,345,1,
        345,1,345,1,345,3,345,4585,8,345,1,345,1,345,4,345,4589,8,345,11,
        345,12,345,4590,3,345,4593,8,345,1,346,1,346,1,346,3,346,4598,8,
        346,1,347,1,347,3,347,4602,8,347,1,347,1,347,1,348,1,348,1,348,3,
        348,4609,8,348,1,349,1,349,3,349,4613,8,349,1,349,1,349,3,349,4617,
        8,349,1,350,1,350,4,350,4621,8,350,11,350,12,350,4622,1,350,1,350,
        1,350,3,350,4628,8,350,1,350,3,350,4631,8,350,1,350,3,350,4634,8,
        350,1,351,1,351,3,351,4638,8,351,1,352,1,352,1,353,1,353,1,353,3,
        353,4645,8,353,1,353,3,353,4648,8,353,1,353,3,353,4651,8,353,1,353,
        3,353,4654,8,353,1,354,1,354,1,354,3,354,4659,8,354,1,354,1,354,
        1,354,3,354,4664,8,354,1,354,1,354,3,354,4668,8,354,1,354,1,354,
        1,354,3,354,4673,8,354,1,355,1,355,4,355,4677,8,355,11,355,12,355,
        4678,1,355,3,355,4682,8,355,1,355,3,355,4685,8,355,1,355,3,355,4688,
        8,355,1,355,3,355,4691,8,355,1,356,1,356,3,356,4695,8,356,1,357,
        1,357,1,357,3,357,4700,8,357,1,358,1,358,1,358,3,358,4705,8,358,
        1,359,3,359,4708,8,359,1,359,1,359,1,359,1,360,1,360,1,360,3,360,
        4716,8,360,1,360,1,360,1,360,3,360,4721,8,360,1,360,3,360,4724,8,
        360,1,360,3,360,4727,8,360,1,360,3,360,4730,8,360,1,360,3,360,4733,
        8,360,1,361,1,361,4,361,4737,8,361,11,361,12,361,4738,1,362,1,362,
        1,362,3,362,4744,8,362,1,362,3,362,4747,8,362,1,363,1,363,1,363,
        3,363,4752,8,363,1,363,3,363,4755,8,363,1,364,1,364,4,364,4759,8,
        364,11,364,12,364,4760,1,365,1,365,3,365,4765,8,365,1,366,1,366,
        3,366,4769,8,366,1,367,1,367,1,367,1,368,1,368,1,368,3,368,4777,
        8,368,1,368,1,368,1,368,3,368,4782,8,368,1,368,1,368,3,368,4786,
        8,368,1,368,1,368,1,368,3,368,4791,8,368,1,369,1,369,1,369,1,369,
        4,369,4797,8,369,11,369,12,369,4798,3,369,4801,8,369,1,370,1,370,
        1,370,5,370,4806,8,370,10,370,12,370,4809,9,370,1,370,4,370,4812,
        8,370,11,370,12,370,4813,1,370,3,370,4817,8,370,1,370,1,370,1,371,
        1,371,1,371,1,371,4,371,4825,8,371,11,371,12,371,4826,1,371,1,371,
        1,371,1,371,1,371,3,371,4834,8,371,1,372,1,372,1,372,1,373,4,373,
        4840,8,373,11,373,12,373,4841,1,373,5,373,4845,8,373,10,373,12,373,
        4848,9,373,1,374,1,374,1,374,5,374,4853,8,374,10,374,12,374,4856,
        9,374,1,375,1,375,3,375,4860,8,375,1,375,4,375,4863,8,375,11,375,
        12,375,4864,1,375,3,375,4868,8,375,1,375,1,375,3,375,4872,8,375,
        1,376,1,376,1,376,1,377,1,377,1,377,1,378,1,378,1,378,5,378,4883,
        8,378,10,378,12,378,4886,9,378,1,379,1,379,1,379,3,379,4891,8,379,
        1,380,4,380,4894,8,380,11,380,12,380,4895,1,381,4,381,4899,8,381,
        11,381,12,381,4900,1,382,4,382,4904,8,382,11,382,12,382,4905,1,383,
        1,383,3,383,4910,8,383,1,383,3,383,4913,8,383,1,383,4,383,4916,8,
        383,11,383,12,383,4917,1,384,1,384,3,384,4922,8,384,1,385,1,385,
        3,385,4926,8,385,1,386,1,386,1,386,1,387,1,387,1,388,1,388,3,388,
        4935,8,388,1,388,1,388,3,388,4939,8,388,1,389,1,389,1,390,1,390,
        4,390,4945,8,390,11,390,12,390,4946,1,390,1,390,3,390,4951,8,390,
        1,390,3,390,4954,8,390,3,390,4956,8,390,1,391,1,391,1,391,1,391,
        3,391,4962,8,391,1,391,3,391,4965,8,391,1,392,3,392,4968,8,392,1,
        392,1,392,1,392,4,392,4973,8,392,11,392,12,392,4974,3,392,4977,8,
        392,1,393,1,393,1,393,1,393,5,393,4983,8,393,10,393,12,393,4986,
        9,393,3,393,4988,8,393,1,394,1,394,4,394,4992,8,394,11,394,12,394,
        4993,1,394,3,394,4997,8,394,1,395,1,395,4,395,5001,8,395,11,395,
        12,395,5002,1,396,1,396,3,396,5007,8,396,1,396,1,396,1,396,3,396,
        5012,8,396,1,397,1,397,4,397,5016,8,397,11,397,12,397,5017,1,398,
        1,398,1,398,1,398,1,398,1,398,3,398,5026,8,398,1,399,1,399,4,399,
        5030,8,399,11,399,12,399,5031,1,400,1,400,1,400,4,400,5037,8,400,
        11,400,12,400,5038,1,401,1,401,4,401,5043,8,401,11,401,12,401,5044,
        1,401,4,401,5048,8,401,11,401,12,401,5049,1,402,1,402,1,402,3,402,
        5055,8,402,1,402,1,402,5,402,5059,8,402,10,402,12,402,5062,9,402,
        1,403,1,403,1,403,1,403,4,403,5068,8,403,11,403,12,403,5069,1,404,
        1,404,5,404,5074,8,404,10,404,12,404,5077,9,404,1,405,1,405,1,405,
        5,405,5082,8,405,10,405,12,405,5085,9,405,1,406,1,406,4,406,5089,
        8,406,11,406,12,406,5090,1,407,1,407,4,407,5095,8,407,11,407,12,
        407,5096,1,408,1,408,1,408,3,408,5102,8,408,1,408,5,408,5105,8,408,
        10,408,12,408,5108,9,408,1,409,1,409,1,409,3,409,5113,8,409,1,409,
        1,409,5,409,5117,8,409,10,409,12,409,5120,9,409,1,410,1,410,1,410,
        1,410,3,410,5126,8,410,1,411,1,411,1,411,3,411,5131,8,411,1,412,
        1,412,3,412,5135,8,412,1,412,1,412,3,412,5139,8,412,1,413,1,413,
        1,413,4,413,5144,8,413,11,413,12,413,5145,1,413,3,413,5149,8,413,
        1,413,5,413,5152,8,413,10,413,12,413,5155,9,413,1,413,3,413,5158,
        8,413,1,413,5,413,5161,8,413,10,413,12,413,5164,9,413,1,414,3,414,
        5167,8,414,1,414,1,414,3,414,5171,8,414,1,414,4,414,5174,8,414,11,
        414,12,414,5175,1,415,3,415,5179,8,415,1,415,1,415,3,415,5183,8,
        415,1,415,4,415,5186,8,415,11,415,12,415,5187,1,415,3,415,5191,8,
        415,1,415,3,415,5194,8,415,1,416,3,416,5197,8,416,1,416,1,416,1,
        416,1,416,1,417,3,417,5204,8,417,1,417,1,417,3,417,5208,8,417,1,
        417,1,417,1,418,1,418,4,418,5214,8,418,11,418,12,418,5215,1,419,
        1,419,1,419,3,419,5221,8,419,1,419,1,419,3,419,5225,8,419,1,420,
        1,420,1,420,1,421,1,421,4,421,5232,8,421,11,421,12,421,5233,1,422,
        1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,3,422,5246,
        8,422,1,423,1,423,3,423,5250,8,423,1,423,1,423,3,423,5254,8,423,
        1,424,1,424,1,424,4,424,5259,8,424,11,424,12,424,5260,1,425,1,425,
        1,425,3,425,5266,8,425,1,426,1,426,1,426,1,426,4,426,5272,8,426,
        11,426,12,426,5273,1,427,1,427,1,428,1,428,1,428,3,428,5281,8,428,
        1,428,1,428,1,428,3,428,5286,8,428,1,428,3,428,5289,8,428,1,428,
        3,428,5292,8,428,1,428,3,428,5295,8,428,1,429,4,429,5298,8,429,11,
        429,12,429,5299,1,430,1,430,3,430,5304,8,430,1,431,1,431,1,431,4,
        431,5309,8,431,11,431,12,431,5310,1,432,1,432,3,432,5315,8,432,1,
        433,1,433,3,433,5319,8,433,1,434,1,434,1,434,1,434,1,434,4,434,5326,
        8,434,11,434,12,434,5327,1,435,1,435,4,435,5332,8,435,11,435,12,
        435,5333,1,436,1,436,1,436,3,436,5339,8,436,1,436,1,436,3,436,5343,
        8,436,1,437,1,437,4,437,5347,8,437,11,437,12,437,5348,1,438,1,438,
        3,438,5353,8,438,1,438,1,438,3,438,5357,8,438,1,439,1,439,4,439,
        5361,8,439,11,439,12,439,5362,1,440,1,440,4,440,5367,8,440,11,440,
        12,440,5368,1,441,1,441,1,441,3,441,5374,8,441,1,442,3,442,5377,
        8,442,1,442,5,442,5380,8,442,10,442,12,442,5383,9,442,1,442,1,442,
        1,442,1,442,1,442,3,442,5390,8,442,1,443,1,443,1,443,3,443,5395,
        8,443,1,443,3,443,5398,8,443,1,443,3,443,5401,8,443,1,444,1,444,
        1,444,3,444,5406,8,444,1,445,1,445,3,445,5410,8,445,1,445,1,445,
        1,446,3,446,5415,8,446,1,446,1,446,1,446,1,447,1,447,1,447,1,447,
        1,447,3,447,5425,8,447,3,447,5427,8,447,1,448,1,448,1,448,5,448,
        5432,8,448,10,448,12,448,5435,9,448,1,449,1,449,3,449,5439,8,449,
        1,449,1,449,1,449,1,449,1,450,1,450,1,450,1,451,1,451,1,451,1,451,
        3,451,5452,8,451,1,452,1,452,1,452,1,452,3,452,5458,8,452,1,453,
        3,453,5461,8,453,1,453,1,453,1,453,1,454,1,454,4,454,5468,8,454,
        11,454,12,454,5469,1,455,1,455,1,455,3,455,5475,8,455,1,455,3,455,
        5478,8,455,1,455,3,455,5481,8,455,1,455,3,455,5484,8,455,1,455,3,
        455,5487,8,455,1,455,3,455,5490,8,455,1,455,3,455,5493,8,455,1,455,
        3,455,5496,8,455,1,455,3,455,5499,8,455,1,455,3,455,5502,8,455,1,
        456,1,456,1,456,1,457,3,457,5508,8,457,1,457,1,457,1,457,3,457,5513,
        8,457,1,458,1,458,3,458,5517,8,458,1,458,1,458,1,459,1,459,1,459,
        3,459,5524,8,459,1,459,3,459,5527,8,459,1,459,3,459,5530,8,459,1,
        459,3,459,5533,8,459,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,
        460,5,460,5543,8,460,10,460,12,460,5546,9,460,1,461,1,461,1,461,
        1,461,1,461,1,461,3,461,5554,8,461,1,462,1,462,1,462,3,462,5559,
        8,462,1,462,1,462,3,462,5563,8,462,1,462,3,462,5566,8,462,1,463,
        1,463,1,463,5,463,5571,8,463,10,463,12,463,5574,9,463,1,464,1,464,
        1,464,5,464,5579,8,464,10,464,12,464,5582,9,464,1,465,1,465,3,465,
        5586,8,465,1,465,1,465,3,465,5590,8,465,1,466,3,466,5593,8,466,1,
        466,1,466,1,466,1,467,1,467,3,467,5600,8,467,1,467,1,467,1,468,1,
        468,3,468,5606,8,468,1,468,1,468,3,468,5610,8,468,1,469,1,469,3,
        469,5614,8,469,1,469,1,469,1,470,1,470,1,470,1,470,3,470,5622,8,
        470,1,471,1,471,1,471,3,471,5627,8,471,1,471,3,471,5630,8,471,1,
        471,1,471,3,471,5634,8,471,1,471,3,471,5637,8,471,1,472,1,472,1,
        472,1,473,1,473,1,473,3,473,5645,8,473,1,473,3,473,5648,8,473,1,
        473,3,473,5651,8,473,1,473,3,473,5654,8,473,1,474,1,474,1,474,1,
        475,1,475,3,475,5661,8,475,1,475,1,475,3,475,5665,8,475,1,475,3,
        475,5668,8,475,1,475,4,475,5671,8,475,11,475,12,475,5672,1,475,3,
        475,5676,8,475,1,476,1,476,1,476,1,477,1,477,1,477,1,477,1,477,5,
        477,5686,8,477,10,477,12,477,5689,9,477,3,477,5691,8,477,1,478,1,
        478,1,478,3,478,5696,8,478,1,478,3,478,5699,8,478,1,478,3,478,5702,
        8,478,1,479,1,479,3,479,5706,8,479,1,479,3,479,5709,8,479,1,479,
        3,479,5712,8,479,1,479,3,479,5715,8,479,1,479,3,479,5718,8,479,1,
        480,1,480,1,480,1,480,1,481,1,481,1,481,1,482,1,482,1,482,1,482,
        1,482,3,482,5732,8,482,1,483,1,483,3,483,5736,8,483,1,484,1,484,
        3,484,5740,8,484,1,484,1,484,1,484,3,484,5745,8,484,1,485,1,485,
        1,486,1,486,3,486,5751,8,486,1,486,3,486,5754,8,486,1,487,1,487,
        1,488,1,488,4,488,5760,8,488,11,488,12,488,5761,1,488,3,488,5765,
        8,488,1,489,4,489,5768,8,489,11,489,12,489,5769,1,489,1,489,4,489,
        5774,8,489,11,489,12,489,5775,1,490,4,490,5779,8,490,11,490,12,490,
        5780,1,490,1,490,1,490,1,490,3,490,5787,8,490,1,490,1,490,1,491,
        1,491,1,492,1,492,1,492,1,492,1,492,3,492,5798,8,492,1,492,1,492,
        1,492,1,492,3,492,5804,8,492,1,493,1,493,3,493,5808,8,493,1,494,
        1,494,1,494,4,494,5813,8,494,11,494,12,494,5814,1,494,3,494,5818,
        8,494,1,494,3,494,5821,8,494,1,494,3,494,5824,8,494,1,494,5,494,
        5827,8,494,10,494,12,494,5830,9,494,1,494,3,494,5833,8,494,1,494,
        5,494,5836,8,494,10,494,12,494,5839,9,494,1,495,3,495,5842,8,495,
        1,495,1,495,3,495,5846,8,495,1,495,4,495,5849,8,495,11,495,12,495,
        5850,1,496,3,496,5854,8,496,1,496,1,496,3,496,5858,8,496,1,496,3,
        496,5861,8,496,1,497,3,497,5864,8,497,1,497,1,497,3,497,5868,8,497,
        1,497,4,497,5871,8,497,11,497,12,497,5872,1,497,3,497,5876,8,497,
        1,497,3,497,5879,8,497,1,498,3,498,5882,8,498,1,498,1,498,1,498,
        1,498,1,499,3,499,5889,8,499,1,499,1,499,3,499,5893,8,499,1,499,
        1,499,1,500,1,500,1,500,3,500,5900,8,500,1,500,1,500,3,500,5904,
        8,500,1,501,1,501,1,501,1,502,1,502,4,502,5911,8,502,11,502,12,502,
        5912,1,503,1,503,1,503,3,503,5918,8,503,1,503,1,503,3,503,5922,8,
        503,1,504,1,504,1,504,1,505,1,505,4,505,5929,8,505,11,505,12,505,
        5930,1,506,1,506,1,506,1,506,1,506,1,506,1,506,1,506,1,506,1,506,
        3,506,5943,8,506,1,507,1,507,1,507,3,507,5948,8,507,1,507,3,507,
        5951,8,507,1,507,3,507,5954,8,507,1,507,3,507,5957,8,507,1,508,1,
        508,3,508,5961,8,508,1,508,1,508,3,508,5965,8,508,1,508,1,508,1,
        508,3,508,5970,8,508,1,508,1,508,1,508,1,508,3,508,5976,8,508,1,
        508,1,508,1,508,1,508,3,508,5982,8,508,1,508,1,508,1,508,3,508,5987,
        8,508,1,508,3,508,5990,8,508,1,508,1,508,1,509,1,509,1,509,3,509,
        5997,8,509,1,510,1,510,4,510,6001,8,510,11,510,12,510,6002,1,510,
        1,510,3,510,6007,8,510,1,510,3,510,6010,8,510,1,510,3,510,6013,8,
        510,1,510,3,510,6016,8,510,1,511,4,511,6019,8,511,11,511,12,511,
        6020,1,511,1,511,3,511,6025,8,511,1,512,1,512,3,512,6029,8,512,1,
        513,1,513,3,513,6033,8,513,1,513,1,513,1,513,3,513,6038,8,513,1,
        514,1,514,1,514,3,514,6043,8,514,1,515,1,515,1,515,1,516,3,516,6049,
        8,516,1,516,1,516,1,516,1,517,1,517,1,517,1,517,3,517,6058,8,517,
        1,517,3,517,6061,8,517,1,517,3,517,6064,8,517,1,517,3,517,6067,8,
        517,1,518,4,518,6070,8,518,11,518,12,518,6071,1,518,1,518,4,518,
        6076,8,518,11,518,12,518,6077,1,519,4,519,6081,8,519,11,519,12,519,
        6082,1,519,1,519,1,519,1,519,4,519,6089,8,519,11,519,12,519,6090,
        1,520,1,520,1,520,1,520,1,520,1,521,1,521,3,521,6100,8,521,1,522,
        1,522,3,522,6104,8,522,1,523,1,523,3,523,6108,8,523,1,524,1,524,
        3,524,6112,8,524,1,525,1,525,3,525,6116,8,525,1,526,1,526,1,526,
        1,526,1,526,3,526,6123,8,526,1,527,1,527,1,527,3,527,6128,8,527,
        1,527,3,527,6131,8,527,1,527,3,527,6134,8,527,1,528,5,528,6137,8,
        528,10,528,12,528,6140,9,528,1,529,1,529,1,529,3,529,6145,8,529,
        1,530,1,530,1,530,3,530,6150,8,530,1,530,3,530,6153,8,530,1,531,
        1,531,1,531,1,532,1,532,1,532,1,532,3,532,6162,8,532,1,532,3,532,
        6165,8,532,1,532,3,532,6168,8,532,1,532,3,532,6171,8,532,1,532,3,
        532,6174,8,532,1,533,1,533,1,533,5,533,6179,8,533,10,533,12,533,
        6182,9,533,3,533,6184,8,533,1,534,1,534,3,534,6188,8,534,1,534,3,
        534,6191,8,534,1,534,1,534,3,534,6195,8,534,1,535,1,535,3,535,6199,
        8,535,1,535,1,535,3,535,6203,8,535,1,536,1,536,4,536,6207,8,536,
        11,536,12,536,6208,1,537,1,537,3,537,6213,8,537,1,537,3,537,6216,
        8,537,1,538,1,538,3,538,6220,8,538,1,538,1,538,1,539,1,539,3,539,
        6226,8,539,1,539,1,539,1,540,3,540,6231,8,540,1,540,1,540,1,540,
        1,541,1,541,3,541,6238,8,541,1,541,1,541,1,542,1,542,1,542,1,542,
        1,542,3,542,6247,8,542,1,543,1,543,1,543,1,544,3,544,6253,8,544,
        1,544,1,544,3,544,6257,8,544,1,544,1,544,1,544,3,544,6262,8,544,
        1,544,1,544,1,545,1,545,1,545,1,545,1,545,4,545,6271,8,545,11,545,
        12,545,6272,3,545,6275,8,545,1,546,3,546,6278,8,546,1,546,1,546,
        3,546,6282,8,546,1,546,4,546,6285,8,546,11,546,12,546,6286,1,547,
        1,547,1,547,1,547,3,547,6293,8,547,1,547,3,547,6296,8,547,1,547,
        1,547,1,547,3,547,6301,8,547,1,548,3,548,6304,8,548,1,548,1,548,
        1,549,1,549,1,549,3,549,6311,8,549,1,549,3,549,6314,8,549,1,549,
        3,549,6317,8,549,1,549,3,549,6320,8,549,1,549,3,549,6323,8,549,1,
        549,3,549,6326,8,549,1,549,3,549,6329,8,549,1,550,1,550,1,550,3,
        550,6334,8,550,1,551,1,551,3,551,6338,8,551,1,551,1,551,1,551,3,
        551,6343,8,551,1,552,1,552,1,553,1,553,3,553,6349,8,553,1,553,3,
        553,6352,8,553,1,554,1,554,1,555,3,555,6357,8,555,1,555,1,555,5,
        555,6361,8,555,10,555,12,555,6364,9,555,1,556,1,556,3,556,6368,8,
        556,1,556,1,556,5,556,6372,8,556,10,556,12,556,6375,9,556,1,557,
        3,557,6378,8,557,1,557,1,557,5,557,6382,8,557,10,557,12,557,6385,
        9,557,1,558,1,558,3,558,6389,8,558,1,558,1,558,5,558,6393,8,558,
        10,558,12,558,6396,9,558,1,559,1,559,3,559,6400,8,559,1,559,5,559,
        6403,8,559,10,559,12,559,6406,9,559,1,560,1,560,1,560,3,560,6411,
        8,560,1,560,5,560,6414,8,560,10,560,12,560,6417,9,560,1,561,3,561,
        6420,8,561,1,561,1,561,5,561,6424,8,561,10,561,12,561,6427,9,561,
        1,562,1,562,3,562,6431,8,562,1,562,1,562,5,562,6435,8,562,10,562,
        12,562,6438,9,562,1,563,3,563,6441,8,563,1,563,1,563,1,563,5,563,
        6446,8,563,10,563,12,563,6449,9,563,1,564,1,564,3,564,6453,8,564,
        1,564,1,564,1,564,5,564,6458,8,564,10,564,12,564,6461,9,564,1,565,
        3,565,6464,8,565,1,565,1,565,5,565,6468,8,565,10,565,12,565,6471,
        9,565,1,566,1,566,3,566,6475,8,566,1,566,1,566,5,566,6479,8,566,
        10,566,12,566,6482,9,566,1,567,1,567,5,567,6486,8,567,10,567,12,
        567,6489,9,567,1,568,1,568,1,568,1,569,1,569,5,569,6496,8,569,10,
        569,12,569,6499,9,569,1,570,1,570,1,570,1,571,3,571,6505,8,571,1,
        571,1,571,5,571,6509,8,571,10,571,12,571,6512,9,571,1,572,1,572,
        1,572,1,573,1,573,1,573,1,573,1,573,1,573,1,573,3,573,6524,8,573,
        1,574,1,574,5,574,6528,8,574,10,574,12,574,6531,9,574,1,575,1,575,
        1,575,4,575,6536,8,575,11,575,12,575,6537,1,575,3,575,6541,8,575,
        1,576,3,576,6544,8,576,1,576,1,576,1,577,1,577,1,577,1,577,1,577,
        1,577,1,577,3,577,6555,8,577,1,578,1,578,3,578,6559,8,578,1,578,
        3,578,6562,8,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,3,578,
        6571,8,578,1,579,1,579,5,579,6575,8,579,10,579,12,579,6578,9,579,
        1,579,3,579,6581,8,579,1,579,5,579,6584,8,579,10,579,12,579,6587,
        9,579,1,579,5,579,6590,8,579,10,579,12,579,6593,9,579,3,579,6595,
        8,579,1,580,1,580,1,580,3,580,6600,8,580,1,580,5,580,6603,8,580,
        10,580,12,580,6606,9,580,1,580,1,580,1,581,1,581,1,581,3,581,6613,
        8,581,1,582,1,582,3,582,6617,8,582,1,582,3,582,6620,8,582,1,582,
        1,582,1,583,1,583,1,583,1,583,1,584,1,584,1,584,1,584,1,584,1,584,
        1,585,1,585,1,585,4,585,6637,8,585,11,585,12,585,6638,1,586,3,586,
        6642,8,586,1,586,3,586,6645,8,586,1,586,1,586,3,586,6649,8,586,1,
        586,1,586,1,586,3,586,6654,8,586,1,586,1,586,1,586,3,586,6659,8,
        586,1,586,3,586,6662,8,586,1,586,1,586,1,586,3,586,6667,8,586,1,
        586,1,586,1,586,3,586,6672,8,586,1,586,1,586,1,586,3,586,6677,8,
        586,1,586,1,586,1,586,3,586,6682,8,586,1,586,3,586,6685,8,586,1,
        587,3,587,6688,8,587,1,587,3,587,6691,8,587,1,587,1,587,1,587,1,
        587,1,587,1,587,3,587,6699,8,587,1,588,1,588,1,588,1,588,3,588,6705,
        8,588,1,589,1,589,1,589,1,589,3,589,6711,8,589,1,589,5,589,6714,
        8,589,10,589,12,589,6717,9,589,1,589,1,589,5,589,6721,8,589,10,589,
        12,589,6724,9,589,1,589,3,589,6727,8,589,1,590,1,590,1,590,1,590,
        1,590,3,590,6734,8,590,1,590,5,590,6737,8,590,10,590,12,590,6740,
        9,590,1,590,1,590,5,590,6744,8,590,10,590,12,590,6747,9,590,1,590,
        3,590,6750,8,590,1,591,1,591,1,591,1,591,3,591,6756,8,591,1,591,
        1,591,1,592,1,592,1,593,1,593,1,594,1,594,1,594,1,594,3,594,6768,
        8,594,1,594,1,594,3,594,6772,8,594,1,594,3,594,6775,8,594,1,595,
        1,595,1,595,1,595,3,595,6781,8,595,1,595,1,595,3,595,6785,8,595,
        1,595,3,595,6788,8,595,1,596,1,596,1,596,1,596,3,596,6794,8,596,
        1,597,1,597,3,597,6798,8,597,1,597,4,597,6801,8,597,11,597,12,597,
        6802,1,597,3,597,6806,8,597,1,597,3,597,6809,8,597,1,598,1,598,1,
        598,1,599,1,599,1,599,1,600,1,600,1,600,1,601,1,601,3,601,6822,8,
        601,1,602,1,602,1,602,1,603,1,603,1,603,1,604,1,604,1,604,1,605,
        1,605,1,605,1,606,1,606,1,606,1,607,1,607,1,607,1,608,1,608,1,609,
        1,609,1,610,1,610,1,611,1,611,1,612,1,612,1,613,1,613,1,614,1,614,
        1,615,1,615,1,616,1,616,1,616,3,616,6861,8,616,1,617,1,617,1,618,
        1,618,1,619,1,619,1,619,1,619,1,619,1,619,3,619,6873,8,619,1,620,
        1,620,1,621,1,621,1,622,1,622,1,623,1,623,1,624,1,624,1,625,1,625,
        3,625,6887,8,625,1,626,1,626,3,626,6891,8,626,1,626,3,626,6894,8,
        626,1,627,1,627,3,627,6898,8,627,1,628,1,628,1,629,1,629,1,630,1,
        630,1,631,1,631,1,632,1,632,3,632,6910,8,632,1,633,1,633,1,634,1,
        634,1,635,1,635,1,636,1,636,1,637,1,637,1,637,3,637,6923,8,637,1,
        638,1,638,1,639,1,639,1,639,1,639,3,639,6931,8,639,1,639,1,639,1,
        640,1,640,1,640,1,640,3,640,6939,8,640,1,640,1,640,1,641,1,641,1,
        641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,
        1,641,1,641,3,641,6958,8,641,1,642,1,642,1,642,1,642,1,642,1,642,
        1,642,1,642,1,642,1,642,1,642,1,642,1,642,1,642,1,642,3,642,6975,
        8,642,1,642,1,642,1,642,1,642,1,642,1,642,1,642,1,642,1,642,1,642,
        1,642,1,642,1,642,1,642,1,642,1,642,3,642,6993,8,642,1,643,4,643,
        6996,8,643,11,643,12,643,6997,1,644,1,644,1,644,1,4226,0,645,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
        320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
        352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
        384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
        416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
        448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,
        480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,
        512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,
        544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,
        576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,
        608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,
        640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,
        672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,
        704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,
        736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,
        768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,
        800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,
        832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,
        864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,
        896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,
        928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,
        960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,
        992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,
        1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,
        1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,
        1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,
        1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,
        1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,
        1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,
        1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,
        1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,
        1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,
        1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,
        1280,1282,1284,1286,1288,0,74,1,0,241,242,1,0,550,551,5,0,81,81,
        134,134,250,250,284,284,392,392,3,0,66,66,309,309,528,528,2,0,309,
        309,528,528,1,0,495,496,2,0,15,15,315,315,2,0,83,83,89,89,2,0,276,
        276,506,506,2,0,22,22,261,261,1,0,23,24,3,0,248,248,398,398,441,
        441,4,0,155,155,203,203,381,381,441,441,2,0,394,394,512,512,3,0,
        389,389,452,452,456,456,2,0,211,211,429,429,2,0,66,66,391,391,1,
        0,472,474,2,0,289,289,428,428,2,0,41,41,44,44,1,0,195,196,2,0,236,
        236,300,300,3,0,232,232,278,278,348,348,3,0,360,360,559,559,563,
        563,1,0,76,77,1,0,219,220,1,0,38,39,1,0,358,359,1,0,147,148,1,0,
        262,263,1,0,34,35,2,0,323,323,432,432,2,0,161,161,410,410,2,0,222,
        222,280,280,1,0,289,290,2,0,120,120,141,141,3,0,151,151,367,367,
        444,445,1,0,53,54,2,0,246,246,335,335,1,0,601,603,2,0,571,571,573,
        573,2,0,534,534,536,537,3,0,81,81,294,294,349,349,2,0,257,257,471,
        471,2,0,26,26,139,139,2,0,98,98,395,396,1,0,480,481,2,0,277,277,
        423,423,4,0,297,298,329,329,331,331,449,449,2,0,208,208,508,508,
        2,0,103,103,272,272,2,0,62,62,519,519,2,0,228,228,417,417,2,0,550,
        551,578,578,1,0,106,107,2,0,2,2,343,343,2,0,192,192,552,552,2,0,
        355,355,373,373,7,0,12,12,15,16,119,119,157,157,315,316,328,328,
        330,330,2,0,10,10,276,276,3,0,10,10,216,216,276,276,2,0,8,8,42,42,
        2,0,268,268,322,322,2,0,305,305,434,434,2,0,51,51,504,504,2,0,194,
        194,202,202,2,0,173,173,191,191,2,0,559,559,563,563,2,0,539,539,
        566,566,2,0,20,20,341,341,3,0,318,318,363,363,534,534,2,0,210,210,
        507,507,1,0,570,573,59,0,2,10,17,24,28,28,32,34,48,48,52,52,56,56,
        64,64,100,100,110,112,119,119,135,135,142,142,193,193,205,205,207,
        207,210,210,212,212,221,222,246,246,258,258,271,272,279,279,292,
        293,315,315,322,322,327,327,335,336,338,338,354,354,372,373,378,
        379,386,387,406,406,415,415,420,420,428,428,436,437,439,440,451,
        451,460,460,462,462,469,469,483,483,487,487,489,490,493,493,497,
        497,500,500,507,507,524,525,530,530,532,532,542,542,599,599,604,
        819,821,822,826,831,833,845,8001,0,1290,1,0,0,0,2,1294,1,0,0,0,4,
        1298,1,0,0,0,6,1305,1,0,0,0,8,1310,1,0,0,0,10,1326,1,0,0,0,12,1328,
        1,0,0,0,14,1349,1,0,0,0,16,1351,1,0,0,0,18,1364,1,0,0,0,20,1369,
        1,0,0,0,22,1385,1,0,0,0,24,1401,1,0,0,0,26,1406,1,0,0,0,28,1411,
        1,0,0,0,30,1423,1,0,0,0,32,1425,1,0,0,0,34,1437,1,0,0,0,36,1439,
        1,0,0,0,38,1454,1,0,0,0,40,1473,1,0,0,0,42,1475,1,0,0,0,44,1486,
        1,0,0,0,46,1501,1,0,0,0,48,1522,1,0,0,0,50,1531,1,0,0,0,52,1539,
        1,0,0,0,54,1545,1,0,0,0,56,1549,1,0,0,0,58,1571,1,0,0,0,60,1575,
        1,0,0,0,62,1577,1,0,0,0,64,1599,1,0,0,0,66,1608,1,0,0,0,68,1611,
        1,0,0,0,70,1617,1,0,0,0,72,1631,1,0,0,0,74,1638,1,0,0,0,76,1654,
        1,0,0,0,78,1661,1,0,0,0,80,1665,1,0,0,0,82,1667,1,0,0,0,84,1683,
        1,0,0,0,86,1689,1,0,0,0,88,1706,1,0,0,0,90,1729,1,0,0,0,92,1767,
        1,0,0,0,94,1769,1,0,0,0,96,1775,1,0,0,0,98,1789,1,0,0,0,100,1809,
        1,0,0,0,102,1821,1,0,0,0,104,1832,1,0,0,0,106,1834,1,0,0,0,108,1859,
        1,0,0,0,110,1864,1,0,0,0,112,1883,1,0,0,0,114,1885,1,0,0,0,116,1902,
        1,0,0,0,118,1917,1,0,0,0,120,1928,1,0,0,0,122,1939,1,0,0,0,124,1949,
        1,0,0,0,126,1958,1,0,0,0,128,1975,1,0,0,0,130,1995,1,0,0,0,132,2002,
        1,0,0,0,134,2012,1,0,0,0,136,2021,1,0,0,0,138,2041,1,0,0,0,140,2043,
        1,0,0,0,142,2057,1,0,0,0,144,2061,1,0,0,0,146,2070,1,0,0,0,148,2074,
        1,0,0,0,150,2089,1,0,0,0,152,2102,1,0,0,0,154,2107,1,0,0,0,156,2114,
        1,0,0,0,158,2132,1,0,0,0,160,2134,1,0,0,0,162,2166,1,0,0,0,164,2179,
        1,0,0,0,166,2182,1,0,0,0,168,2187,1,0,0,0,170,2191,1,0,0,0,172,2202,
        1,0,0,0,174,2205,1,0,0,0,176,2212,1,0,0,0,178,2219,1,0,0,0,180,2248,
        1,0,0,0,182,2255,1,0,0,0,184,2258,1,0,0,0,186,2278,1,0,0,0,188,2285,
        1,0,0,0,190,2293,1,0,0,0,192,2309,1,0,0,0,194,2329,1,0,0,0,196,2332,
        1,0,0,0,198,2343,1,0,0,0,200,2354,1,0,0,0,202,2364,1,0,0,0,204,2373,
        1,0,0,0,206,2375,1,0,0,0,208,2389,1,0,0,0,210,2396,1,0,0,0,212,2405,
        1,0,0,0,214,2410,1,0,0,0,216,2436,1,0,0,0,218,2445,1,0,0,0,220,2458,
        1,0,0,0,222,2460,1,0,0,0,224,2488,1,0,0,0,226,2507,1,0,0,0,228,2530,
        1,0,0,0,230,2537,1,0,0,0,232,2551,1,0,0,0,234,2558,1,0,0,0,236,2566,
        1,0,0,0,238,2574,1,0,0,0,240,2581,1,0,0,0,242,2588,1,0,0,0,244,2596,
        1,0,0,0,246,2605,1,0,0,0,248,2614,1,0,0,0,250,2623,1,0,0,0,252,2632,
        1,0,0,0,254,2640,1,0,0,0,256,2647,1,0,0,0,258,2662,1,0,0,0,260,2671,
        1,0,0,0,262,2713,1,0,0,0,264,2716,1,0,0,0,266,2718,1,0,0,0,268,2720,
        1,0,0,0,270,2723,1,0,0,0,272,2725,1,0,0,0,274,2727,1,0,0,0,276,2729,
        1,0,0,0,278,2731,1,0,0,0,280,2739,1,0,0,0,282,2753,1,0,0,0,284,2767,
        1,0,0,0,286,2775,1,0,0,0,288,2783,1,0,0,0,290,2789,1,0,0,0,292,2795,
        1,0,0,0,294,2801,1,0,0,0,296,2809,1,0,0,0,298,2812,1,0,0,0,300,2815,
        1,0,0,0,302,2821,1,0,0,0,304,2827,1,0,0,0,306,2835,1,0,0,0,308,2844,
        1,0,0,0,310,2846,1,0,0,0,312,2848,1,0,0,0,314,2850,1,0,0,0,316,2864,
        1,0,0,0,318,2869,1,0,0,0,320,2871,1,0,0,0,322,2873,1,0,0,0,324,2882,
        1,0,0,0,326,2888,1,0,0,0,328,2911,1,0,0,0,330,2915,1,0,0,0,332,2930,
        1,0,0,0,334,2933,1,0,0,0,336,2937,1,0,0,0,338,2941,1,0,0,0,340,2947,
        1,0,0,0,342,2949,1,0,0,0,344,2963,1,0,0,0,346,2973,1,0,0,0,348,2998,
        1,0,0,0,350,3004,1,0,0,0,352,3013,1,0,0,0,354,3017,1,0,0,0,356,3022,
        1,0,0,0,358,3034,1,0,0,0,360,3042,1,0,0,0,362,3045,1,0,0,0,364,3055,
        1,0,0,0,366,3058,1,0,0,0,368,3061,1,0,0,0,370,3067,1,0,0,0,372,3075,
        1,0,0,0,374,3084,1,0,0,0,376,3090,1,0,0,0,378,3114,1,0,0,0,380,3130,
        1,0,0,0,382,3135,1,0,0,0,384,3140,1,0,0,0,386,3146,1,0,0,0,388,3151,
        1,0,0,0,390,3161,1,0,0,0,392,3168,1,0,0,0,394,3173,1,0,0,0,396,3175,
        1,0,0,0,398,3181,1,0,0,0,400,3192,1,0,0,0,402,3194,1,0,0,0,404,3203,
        1,0,0,0,406,3219,1,0,0,0,408,3227,1,0,0,0,410,3244,1,0,0,0,412,3248,
        1,0,0,0,414,3254,1,0,0,0,416,3260,1,0,0,0,418,3265,1,0,0,0,420,3279,
        1,0,0,0,422,3282,1,0,0,0,424,3285,1,0,0,0,426,3293,1,0,0,0,428,3295,
        1,0,0,0,430,3303,1,0,0,0,432,3306,1,0,0,0,434,3311,1,0,0,0,436,3323,
        1,0,0,0,438,3325,1,0,0,0,440,3343,1,0,0,0,442,3346,1,0,0,0,444,3356,
        1,0,0,0,446,3364,1,0,0,0,448,3366,1,0,0,0,450,3374,1,0,0,0,452,3385,
        1,0,0,0,454,3399,1,0,0,0,456,3403,1,0,0,0,458,3407,1,0,0,0,460,3418,
        1,0,0,0,462,3433,1,0,0,0,464,3439,1,0,0,0,466,3441,1,0,0,0,468,3445,
        1,0,0,0,470,3449,1,0,0,0,472,3454,1,0,0,0,474,3462,1,0,0,0,476,3575,
        1,0,0,0,478,3601,1,0,0,0,480,3607,1,0,0,0,482,3616,1,0,0,0,484,3652,
        1,0,0,0,486,3654,1,0,0,0,488,3656,1,0,0,0,490,3691,1,0,0,0,492,3703,
        1,0,0,0,494,3708,1,0,0,0,496,3718,1,0,0,0,498,3722,1,0,0,0,500,3727,
        1,0,0,0,502,3733,1,0,0,0,504,3740,1,0,0,0,506,3742,1,0,0,0,508,3748,
        1,0,0,0,510,3751,1,0,0,0,512,3759,1,0,0,0,514,3763,1,0,0,0,516,3765,
        1,0,0,0,518,3769,1,0,0,0,520,3804,1,0,0,0,522,3807,1,0,0,0,524,3819,
        1,0,0,0,526,3833,1,0,0,0,528,3855,1,0,0,0,530,3857,1,0,0,0,532,3862,
        1,0,0,0,534,3869,1,0,0,0,536,3872,1,0,0,0,538,3875,1,0,0,0,540,3885,
        1,0,0,0,542,3894,1,0,0,0,544,3899,1,0,0,0,546,3903,1,0,0,0,548,3910,
        1,0,0,0,550,3918,1,0,0,0,552,3956,1,0,0,0,554,3973,1,0,0,0,556,3985,
        1,0,0,0,558,3992,1,0,0,0,560,3994,1,0,0,0,562,3998,1,0,0,0,564,4003,
        1,0,0,0,566,4017,1,0,0,0,568,4023,1,0,0,0,570,4028,1,0,0,0,572,4034,
        1,0,0,0,574,4049,1,0,0,0,576,4052,1,0,0,0,578,4063,1,0,0,0,580,4065,
        1,0,0,0,582,4079,1,0,0,0,584,4089,1,0,0,0,586,4094,1,0,0,0,588,4101,
        1,0,0,0,590,4108,1,0,0,0,592,4117,1,0,0,0,594,4129,1,0,0,0,596,4195,
        1,0,0,0,598,4197,1,0,0,0,600,4204,1,0,0,0,602,4206,1,0,0,0,604,4216,
        1,0,0,0,606,4218,1,0,0,0,608,4226,1,0,0,0,610,4229,1,0,0,0,612,4243,
        1,0,0,0,614,4247,1,0,0,0,616,4251,1,0,0,0,618,4264,1,0,0,0,620,4266,
        1,0,0,0,622,4268,1,0,0,0,624,4277,1,0,0,0,626,4281,1,0,0,0,628,4298,
        1,0,0,0,630,4320,1,0,0,0,632,4323,1,0,0,0,634,4328,1,0,0,0,636,4332,
        1,0,0,0,638,4348,1,0,0,0,640,4359,1,0,0,0,642,4377,1,0,0,0,644,4384,
        1,0,0,0,646,4388,1,0,0,0,648,4396,1,0,0,0,650,4398,1,0,0,0,652,4402,
        1,0,0,0,654,4408,1,0,0,0,656,4414,1,0,0,0,658,4422,1,0,0,0,660,4445,
        1,0,0,0,662,4454,1,0,0,0,664,4460,1,0,0,0,666,4479,1,0,0,0,668,4482,
        1,0,0,0,670,4496,1,0,0,0,672,4503,1,0,0,0,674,4522,1,0,0,0,676,4524,
        1,0,0,0,678,4527,1,0,0,0,680,4538,1,0,0,0,682,4540,1,0,0,0,684,4546,
        1,0,0,0,686,4552,1,0,0,0,688,4570,1,0,0,0,690,4584,1,0,0,0,692,4597,
        1,0,0,0,694,4599,1,0,0,0,696,4605,1,0,0,0,698,4610,1,0,0,0,700,4618,
        1,0,0,0,702,4635,1,0,0,0,704,4639,1,0,0,0,706,4641,1,0,0,0,708,4655,
        1,0,0,0,710,4674,1,0,0,0,712,4694,1,0,0,0,714,4696,1,0,0,0,716,4701,
        1,0,0,0,718,4707,1,0,0,0,720,4712,1,0,0,0,722,4734,1,0,0,0,724,4740,
        1,0,0,0,726,4748,1,0,0,0,728,4756,1,0,0,0,730,4762,1,0,0,0,732,4766,
        1,0,0,0,734,4770,1,0,0,0,736,4773,1,0,0,0,738,4792,1,0,0,0,740,4802,
        1,0,0,0,742,4824,1,0,0,0,744,4835,1,0,0,0,746,4839,1,0,0,0,748,4849,
        1,0,0,0,750,4871,1,0,0,0,752,4873,1,0,0,0,754,4876,1,0,0,0,756,4879,
        1,0,0,0,758,4890,1,0,0,0,760,4893,1,0,0,0,762,4898,1,0,0,0,764,4903,
        1,0,0,0,766,4907,1,0,0,0,768,4921,1,0,0,0,770,4923,1,0,0,0,772,4927,
        1,0,0,0,774,4930,1,0,0,0,776,4932,1,0,0,0,778,4940,1,0,0,0,780,4955,
        1,0,0,0,782,4957,1,0,0,0,784,4967,1,0,0,0,786,4978,1,0,0,0,788,4989,
        1,0,0,0,790,4998,1,0,0,0,792,5004,1,0,0,0,794,5013,1,0,0,0,796,5019,
        1,0,0,0,798,5027,1,0,0,0,800,5033,1,0,0,0,802,5040,1,0,0,0,804,5051,
        1,0,0,0,806,5063,1,0,0,0,808,5071,1,0,0,0,810,5078,1,0,0,0,812,5086,
        1,0,0,0,814,5092,1,0,0,0,816,5101,1,0,0,0,818,5112,1,0,0,0,820,5121,
        1,0,0,0,822,5127,1,0,0,0,824,5132,1,0,0,0,826,5140,1,0,0,0,828,5166,
        1,0,0,0,830,5178,1,0,0,0,832,5196,1,0,0,0,834,5203,1,0,0,0,836,5211,
        1,0,0,0,838,5217,1,0,0,0,840,5226,1,0,0,0,842,5229,1,0,0,0,844,5235,
        1,0,0,0,846,5247,1,0,0,0,848,5255,1,0,0,0,850,5265,1,0,0,0,852,5267,
        1,0,0,0,854,5275,1,0,0,0,856,5277,1,0,0,0,858,5297,1,0,0,0,860,5301,
        1,0,0,0,862,5305,1,0,0,0,864,5314,1,0,0,0,866,5316,1,0,0,0,868,5320,
        1,0,0,0,870,5329,1,0,0,0,872,5335,1,0,0,0,874,5344,1,0,0,0,876,5350,
        1,0,0,0,878,5358,1,0,0,0,880,5364,1,0,0,0,882,5370,1,0,0,0,884,5376,
        1,0,0,0,886,5391,1,0,0,0,888,5405,1,0,0,0,890,5409,1,0,0,0,892,5414,
        1,0,0,0,894,5426,1,0,0,0,896,5428,1,0,0,0,898,5438,1,0,0,0,900,5444,
        1,0,0,0,902,5447,1,0,0,0,904,5453,1,0,0,0,906,5460,1,0,0,0,908,5465,
        1,0,0,0,910,5471,1,0,0,0,912,5503,1,0,0,0,914,5507,1,0,0,0,916,5514,
        1,0,0,0,918,5520,1,0,0,0,920,5534,1,0,0,0,922,5553,1,0,0,0,924,5555,
        1,0,0,0,926,5567,1,0,0,0,928,5575,1,0,0,0,930,5583,1,0,0,0,932,5592,
        1,0,0,0,934,5597,1,0,0,0,936,5603,1,0,0,0,938,5611,1,0,0,0,940,5617,
        1,0,0,0,942,5623,1,0,0,0,944,5638,1,0,0,0,946,5641,1,0,0,0,948,5655,
        1,0,0,0,950,5658,1,0,0,0,952,5677,1,0,0,0,954,5680,1,0,0,0,956,5692,
        1,0,0,0,958,5705,1,0,0,0,960,5719,1,0,0,0,962,5723,1,0,0,0,964,5726,
        1,0,0,0,966,5733,1,0,0,0,968,5737,1,0,0,0,970,5746,1,0,0,0,972,5750,
        1,0,0,0,974,5755,1,0,0,0,976,5757,1,0,0,0,978,5767,1,0,0,0,980,5778,
        1,0,0,0,982,5790,1,0,0,0,984,5803,1,0,0,0,986,5807,1,0,0,0,988,5809,
        1,0,0,0,990,5841,1,0,0,0,992,5853,1,0,0,0,994,5863,1,0,0,0,996,5881,
        1,0,0,0,998,5888,1,0,0,0,1000,5896,1,0,0,0,1002,5905,1,0,0,0,1004,
        5908,1,0,0,0,1006,5914,1,0,0,0,1008,5923,1,0,0,0,1010,5926,1,0,0,
        0,1012,5932,1,0,0,0,1014,5944,1,0,0,0,1016,5958,1,0,0,0,1018,5993,
        1,0,0,0,1020,5998,1,0,0,0,1022,6018,1,0,0,0,1024,6028,1,0,0,0,1026,
        6030,1,0,0,0,1028,6039,1,0,0,0,1030,6044,1,0,0,0,1032,6048,1,0,0,
        0,1034,6053,1,0,0,0,1036,6069,1,0,0,0,1038,6080,1,0,0,0,1040,6092,
        1,0,0,0,1042,6099,1,0,0,0,1044,6101,1,0,0,0,1046,6107,1,0,0,0,1048,
        6109,1,0,0,0,1050,6113,1,0,0,0,1052,6122,1,0,0,0,1054,6124,1,0,0,
        0,1056,6138,1,0,0,0,1058,6141,1,0,0,0,1060,6146,1,0,0,0,1062,6154,
        1,0,0,0,1064,6157,1,0,0,0,1066,6175,1,0,0,0,1068,6185,1,0,0,0,1070,
        6196,1,0,0,0,1072,6204,1,0,0,0,1074,6210,1,0,0,0,1076,6217,1,0,0,
        0,1078,6223,1,0,0,0,1080,6230,1,0,0,0,1082,6235,1,0,0,0,1084,6241,
        1,0,0,0,1086,6248,1,0,0,0,1088,6252,1,0,0,0,1090,6274,1,0,0,0,1092,
        6277,1,0,0,0,1094,6300,1,0,0,0,1096,6303,1,0,0,0,1098,6307,1,0,0,
        0,1100,6330,1,0,0,0,1102,6335,1,0,0,0,1104,6344,1,0,0,0,1106,6348,
        1,0,0,0,1108,6353,1,0,0,0,1110,6356,1,0,0,0,1112,6365,1,0,0,0,1114,
        6377,1,0,0,0,1116,6386,1,0,0,0,1118,6397,1,0,0,0,1120,6407,1,0,0,
        0,1122,6419,1,0,0,0,1124,6428,1,0,0,0,1126,6440,1,0,0,0,1128,6450,
        1,0,0,0,1130,6463,1,0,0,0,1132,6472,1,0,0,0,1134,6483,1,0,0,0,1136,
        6490,1,0,0,0,1138,6493,1,0,0,0,1140,6500,1,0,0,0,1142,6504,1,0,0,
        0,1144,6513,1,0,0,0,1146,6523,1,0,0,0,1148,6525,1,0,0,0,1150,6532,
        1,0,0,0,1152,6543,1,0,0,0,1154,6554,1,0,0,0,1156,6556,1,0,0,0,1158,
        6572,1,0,0,0,1160,6596,1,0,0,0,1162,6612,1,0,0,0,1164,6614,1,0,0,
        0,1166,6623,1,0,0,0,1168,6627,1,0,0,0,1170,6633,1,0,0,0,1172,6641,
        1,0,0,0,1174,6687,1,0,0,0,1176,6704,1,0,0,0,1178,6706,1,0,0,0,1180,
        6728,1,0,0,0,1182,6751,1,0,0,0,1184,6759,1,0,0,0,1186,6761,1,0,0,
        0,1188,6774,1,0,0,0,1190,6787,1,0,0,0,1192,6793,1,0,0,0,1194,6797,
        1,0,0,0,1196,6810,1,0,0,0,1198,6813,1,0,0,0,1200,6816,1,0,0,0,1202,
        6821,1,0,0,0,1204,6823,1,0,0,0,1206,6826,1,0,0,0,1208,6829,1,0,0,
        0,1210,6832,1,0,0,0,1212,6835,1,0,0,0,1214,6838,1,0,0,0,1216,6841,
        1,0,0,0,1218,6843,1,0,0,0,1220,6845,1,0,0,0,1222,6847,1,0,0,0,1224,
        6849,1,0,0,0,1226,6851,1,0,0,0,1228,6853,1,0,0,0,1230,6855,1,0,0,
        0,1232,6860,1,0,0,0,1234,6862,1,0,0,0,1236,6864,1,0,0,0,1238,6872,
        1,0,0,0,1240,6874,1,0,0,0,1242,6876,1,0,0,0,1244,6878,1,0,0,0,1246,
        6880,1,0,0,0,1248,6882,1,0,0,0,1250,6886,1,0,0,0,1252,6893,1,0,0,
        0,1254,6897,1,0,0,0,1256,6899,1,0,0,0,1258,6901,1,0,0,0,1260,6903,
        1,0,0,0,1262,6905,1,0,0,0,1264,6909,1,0,0,0,1266,6911,1,0,0,0,1268,
        6913,1,0,0,0,1270,6915,1,0,0,0,1272,6917,1,0,0,0,1274,6922,1,0,0,
        0,1276,6924,1,0,0,0,1278,6926,1,0,0,0,1280,6934,1,0,0,0,1282,6957,
        1,0,0,0,1284,6992,1,0,0,0,1286,6995,1,0,0,0,1288,6999,1,0,0,0,1290,
        1291,3,2,1,0,1291,1292,5,0,0,1,1292,1,1,0,0,0,1293,1295,3,4,2,0,
        1294,1293,1,0,0,0,1295,1296,1,0,0,0,1296,1294,1,0,0,0,1296,1297,
        1,0,0,0,1297,3,1,0,0,0,1298,1300,3,8,4,0,1299,1301,3,28,14,0,1300,
        1299,1,0,0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,0,1302,1304,3,156,
        78,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,5,1,0,0,0,1305,1306,
        5,163,0,0,1306,1307,5,373,0,0,1307,1308,3,1254,627,0,1308,1309,5,
        550,0,0,1309,7,1,0,0,0,1310,1311,7,0,0,0,1311,1312,5,150,0,0,1312,
        1313,5,550,0,0,1313,1317,3,12,6,0,1314,1316,3,10,5,0,1315,1314,1,
        0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,
        9,1,0,0,0,1319,1317,1,0,0,0,1320,1327,3,16,8,0,1321,1327,3,18,9,
        0,1322,1327,3,20,10,0,1323,1327,3,22,11,0,1324,1327,3,24,12,0,1325,
        1327,3,26,13,0,1326,1320,1,0,0,0,1326,1321,1,0,0,0,1326,1322,1,0,
        0,0,1326,1323,1,0,0,0,1326,1324,1,0,0,0,1326,1325,1,0,0,0,1327,11,
        1,0,0,0,1328,1329,5,374,0,0,1329,1331,7,1,0,0,1330,1332,5,594,0,
        0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1341,
        3,1254,627,0,1334,1336,5,261,0,0,1335,1334,1,0,0,0,1335,1336,1,0,
        0,0,1336,1337,1,0,0,0,1337,1339,7,2,0,0,1338,1340,5,373,0,0,1339,
        1338,1,0,0,0,1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,1335,1,0,0,
        0,1341,1342,1,0,0,0,1342,1344,1,0,0,0,1343,1345,5,550,0,0,1344,1343,
        1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,1348,3,1286,643,
        0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,13,1,0,0,0,1349,1350,
        5,832,0,0,1350,15,1,0,0,0,1351,1352,5,33,0,0,1352,1354,7,1,0,0,1353,
        1355,5,594,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1359,1,0,
        0,0,1356,1357,3,14,7,0,1357,1358,5,550,0,0,1358,1360,1,0,0,0,1359,
        1356,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,1363,3,1286,
        643,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,17,1,0,0,0,1364,1365,
        5,256,0,0,1365,1367,5,550,0,0,1366,1368,3,1286,643,0,1367,1366,1,
        0,0,0,1367,1368,1,0,0,0,1368,19,1,0,0,0,1369,1370,5,116,0,0,1370,
        1376,7,1,0,0,1371,1375,5,832,0,0,1372,1375,3,482,241,0,1373,1375,
        5,594,0,0,1374,1371,1,0,0,0,1374,1372,1,0,0,0,1374,1373,1,0,0,0,
        1375,1378,1,0,0,0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,1380,
        1,0,0,0,1378,1376,1,0,0,0,1379,1381,5,550,0,0,1380,1379,1,0,0,0,
        1380,1381,1,0,0,0,1381,1383,1,0,0,0,1382,1384,3,1286,643,0,1383,
        1382,1,0,0,0,1383,1384,1,0,0,0,1384,21,1,0,0,0,1385,1386,5,115,0,
        0,1386,1392,7,1,0,0,1387,1391,5,832,0,0,1388,1391,3,482,241,0,1389,
        1391,5,594,0,0,1390,1387,1,0,0,0,1390,1388,1,0,0,0,1390,1389,1,0,
        0,0,1391,1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1396,
        1,0,0,0,1394,1392,1,0,0,0,1395,1397,5,550,0,0,1396,1395,1,0,0,0,
        1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1400,3,1286,643,0,1399,
        1398,1,0,0,0,1399,1400,1,0,0,0,1400,23,1,0,0,0,1401,1402,5,433,0,
        0,1402,1404,5,550,0,0,1403,1405,3,1286,643,0,1404,1403,1,0,0,0,1404,
        1405,1,0,0,0,1405,25,1,0,0,0,1406,1407,5,401,0,0,1407,1409,5,550,
        0,0,1408,1410,3,1286,643,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,
        27,1,0,0,0,1411,1412,5,190,0,0,1412,1413,5,150,0,0,1413,1417,5,550,
        0,0,1414,1416,3,30,15,0,1415,1414,1,0,0,0,1416,1419,1,0,0,0,1417,
        1415,1,0,0,0,1417,1418,1,0,0,0,1418,29,1,0,0,0,1419,1417,1,0,0,0,
        1420,1424,3,32,16,0,1421,1424,3,56,28,0,1422,1424,3,102,51,0,1423,
        1420,1,0,0,0,1423,1421,1,0,0,0,1423,1422,1,0,0,0,1424,31,1,0,0,0,
        1425,1426,5,96,0,0,1426,1427,5,431,0,0,1427,1431,5,550,0,0,1428,
        1430,3,34,17,0,1429,1428,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,
        0,0,1431,1432,1,0,0,0,1432,33,1,0,0,0,1433,1431,1,0,0,0,1434,1438,
        3,36,18,0,1435,1438,3,38,19,0,1436,1438,3,56,28,0,1437,1434,1,0,
        0,0,1437,1435,1,0,0,0,1437,1436,1,0,0,0,1438,35,1,0,0,0,1439,1440,
        5,461,0,0,1440,1442,7,1,0,0,1441,1443,5,594,0,0,1442,1441,1,0,0,
        0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1450,3,1226,613,0,1445,
        1447,5,527,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,
        0,0,1448,1449,5,128,0,0,1449,1451,5,307,0,0,1450,1446,1,0,0,0,1450,
        1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,5,550,0,0,1453,37,1,0,0,
        0,1454,1455,5,332,0,0,1455,1457,7,1,0,0,1456,1458,5,594,0,0,1457,
        1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1463,3,1226,
        613,0,1460,1462,3,40,20,0,1461,1460,1,0,0,0,1462,1465,1,0,0,0,1463,
        1461,1,0,0,0,1463,1464,1,0,0,0,1464,1466,1,0,0,0,1465,1463,1,0,0,
        0,1466,1467,5,550,0,0,1467,39,1,0,0,0,1468,1474,3,42,21,0,1469,1474,
        3,44,22,0,1470,1474,3,46,23,0,1471,1474,3,52,26,0,1472,1474,3,54,
        27,0,1473,1468,1,0,0,0,1473,1469,1,0,0,0,1473,1470,1,0,0,0,1473,
        1471,1,0,0,0,1473,1472,1,0,0,0,1474,41,1,0,0,0,1475,1477,5,303,0,
        0,1476,1478,5,451,0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1481,
        1,0,0,0,1479,1482,3,1276,638,0,1480,1482,3,480,240,0,1481,1479,1,
        0,0,0,1481,1480,1,0,0,0,1482,1484,1,0,0,0,1483,1485,7,3,0,0,1484,
        1483,1,0,0,0,1484,1485,1,0,0,0,1485,43,1,0,0,0,1486,1488,5,146,0,
        0,1487,1489,5,451,0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,1491,
        1,0,0,0,1490,1492,5,261,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,
        1492,1495,1,0,0,0,1493,1496,3,1276,638,0,1494,1496,3,480,240,0,1495,
        1493,1,0,0,0,1495,1494,1,0,0,0,1496,1498,1,0,0,0,1497,1499,7,4,0,
        0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,45,1,0,0,0,1500,1502,
        5,373,0,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1504,1,0,0,0,
        1503,1505,5,75,0,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1506,
        1,0,0,0,1506,1508,5,440,0,0,1507,1509,5,261,0,0,1508,1507,1,0,0,
        0,1508,1509,1,0,0,0,1509,1511,1,0,0,0,1510,1512,3,1216,608,0,1511,
        1510,1,0,0,0,1512,1513,1,0,0,0,1513,1511,1,0,0,0,1513,1514,1,0,0,
        0,1514,1516,1,0,0,0,1515,1517,3,48,24,0,1516,1515,1,0,0,0,1516,1517,
        1,0,0,0,1517,1519,1,0,0,0,1518,1520,3,50,25,0,1519,1518,1,0,0,0,
        1519,1520,1,0,0,0,1520,47,1,0,0,0,1521,1523,5,218,0,0,1522,1521,
        1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1526,5,15,0,0,1525,
        1527,5,261,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,
        0,0,1528,1529,3,1216,608,0,1529,49,1,0,0,0,1530,1532,5,218,0,0,1531,
        1530,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,1535,5,315,
        0,0,1534,1536,5,261,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,
        1537,1,0,0,0,1537,1538,3,1216,608,0,1538,51,1,0,0,0,1539,1541,5,
        435,0,0,1540,1542,5,261,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,
        1542,1543,1,0,0,0,1543,1544,3,1276,638,0,1544,53,1,0,0,0,1545,1546,
        5,65,0,0,1546,1547,5,442,0,0,1547,1548,5,550,0,0,1548,55,1,0,0,0,
        1549,1550,5,464,0,0,1550,1558,5,550,0,0,1551,1553,3,58,29,0,1552,
        1551,1,0,0,0,1553,1554,1,0,0,0,1554,1552,1,0,0,0,1554,1555,1,0,0,
        0,1555,1556,1,0,0,0,1556,1557,5,550,0,0,1557,1559,1,0,0,0,1558,1552,
        1,0,0,0,1558,1559,1,0,0,0,1559,57,1,0,0,0,1560,1572,3,72,36,0,1561,
        1572,3,94,47,0,1562,1572,3,60,30,0,1563,1572,3,74,37,0,1564,1572,
        3,82,41,0,1565,1572,3,84,42,0,1566,1572,3,98,49,0,1567,1572,3,90,
        45,0,1568,1572,3,88,44,0,1569,1572,3,86,43,0,1570,1572,3,96,48,0,
        1571,1560,1,0,0,0,1571,1561,1,0,0,0,1571,1562,1,0,0,0,1571,1563,
        1,0,0,0,1571,1564,1,0,0,0,1571,1565,1,0,0,0,1571,1566,1,0,0,0,1571,
        1567,1,0,0,0,1571,1568,1,0,0,0,1571,1569,1,0,0,0,1571,1570,1,0,0,
        0,1572,59,1,0,0,0,1573,1576,3,62,31,0,1574,1576,3,70,35,0,1575,1573,
        1,0,0,0,1575,1574,1,0,0,0,1576,61,1,0,0,0,1577,1578,5,11,0,0,1578,
        1581,3,1216,608,0,1579,1580,5,218,0,0,1580,1582,5,15,0,0,1581,1579,
        1,0,0,0,1581,1582,1,0,0,0,1582,1584,1,0,0,0,1583,1585,5,261,0,0,
        1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1597,1,0,0,0,1586,1598,
        5,156,0,0,1587,1598,5,27,0,0,1588,1598,5,466,0,0,1589,1598,5,467,
        0,0,1590,1598,5,317,0,0,1591,1598,3,480,240,0,1592,1594,3,64,32,
        0,1593,1592,1,0,0,0,1594,1595,1,0,0,0,1595,1593,1,0,0,0,1595,1596,
        1,0,0,0,1596,1598,1,0,0,0,1597,1586,1,0,0,0,1597,1587,1,0,0,0,1597,
        1588,1,0,0,0,1597,1589,1,0,0,0,1597,1590,1,0,0,0,1597,1591,1,0,0,
        0,1597,1593,1,0,0,0,1598,63,1,0,0,0,1599,1606,3,482,241,0,1600,1607,
        3,66,33,0,1601,1603,3,68,34,0,1602,1601,1,0,0,0,1603,1604,1,0,0,
        0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,1600,
        1,0,0,0,1606,1602,1,0,0,0,1606,1607,1,0,0,0,1607,65,1,0,0,0,1608,
        1609,7,5,0,0,1609,1610,3,482,241,0,1610,67,1,0,0,0,1611,1613,5,17,
        0,0,1612,1614,3,482,241,0,1613,1612,1,0,0,0,1614,1615,1,0,0,0,1615,
        1613,1,0,0,0,1615,1616,1,0,0,0,1616,69,1,0,0,0,1617,1618,5,11,0,
        0,1618,1620,3,1216,608,0,1619,1621,5,218,0,0,1620,1619,1,0,0,0,1620,
        1621,1,0,0,0,1621,1622,1,0,0,0,1622,1624,5,315,0,0,1623,1625,5,261,
        0,0,1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,1629,1,0,0,0,1626,1630,
        5,317,0,0,1627,1628,5,58,0,0,1628,1630,3,482,241,0,1629,1626,1,0,
        0,0,1629,1627,1,0,0,0,1630,71,1,0,0,0,1631,1632,5,64,0,0,1632,1634,
        3,1276,638,0,1633,1635,5,261,0,0,1634,1633,1,0,0,0,1634,1635,1,0,
        0,0,1635,1636,1,0,0,0,1636,1637,3,1248,624,0,1637,73,1,0,0,0,1638,
        1639,5,67,0,0,1639,1644,3,1224,612,0,1640,1642,5,218,0,0,1641,1640,
        1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1645,7,6,0,0,1644,
        1641,1,0,0,0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,1648,5,261,
        0,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1650,1,0,0,0,1649,1651,
        3,76,38,0,1650,1649,1,0,0,0,1651,1652,1,0,0,0,1652,1650,1,0,0,0,
        1652,1653,1,0,0,0,1653,75,1,0,0,0,1654,1657,3,78,39,0,1655,1656,
        7,5,0,0,1656,1658,3,80,40,0,1657,1655,1,0,0,0,1657,1658,1,0,0,0,
        1658,77,1,0,0,0,1659,1662,3,1176,588,0,1660,1662,3,482,241,0,1661,
        1659,1,0,0,0,1661,1660,1,0,0,0,1662,79,1,0,0,0,1663,1666,3,1176,
        588,0,1664,1666,3,482,241,0,1665,1663,1,0,0,0,1665,1664,1,0,0,0,
        1666,81,1,0,0,0,1667,1669,5,110,0,0,1668,1670,5,450,0,0,1669,1668,
        1,0,0,0,1669,1670,1,0,0,0,1670,1672,1,0,0,0,1671,1673,5,261,0,0,
        1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1681,
        3,482,241,0,1675,1677,5,527,0,0,1676,1675,1,0,0,0,1676,1677,1,0,
        0,0,1677,1678,1,0,0,0,1678,1679,5,359,0,0,1679,1680,5,478,0,0,1680,
        1682,3,482,241,0,1681,1676,1,0,0,0,1681,1682,1,0,0,0,1682,83,1,0,
        0,0,1683,1685,5,129,0,0,1684,1686,5,261,0,0,1685,1684,1,0,0,0,1685,
        1686,1,0,0,0,1686,1687,1,0,0,0,1687,1688,5,79,0,0,1688,85,1,0,0,
        0,1689,1691,5,132,0,0,1690,1692,7,7,0,0,1691,1690,1,0,0,0,1691,1692,
        1,0,0,0,1692,1697,1,0,0,0,1693,1695,5,450,0,0,1694,1696,5,261,0,
        0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,1693,
        1,0,0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,1701,7,8,0,0,1700,
        1699,1,0,0,0,1700,1701,1,0,0,0,1701,1702,1,0,0,0,1702,1704,5,439,
        0,0,1703,1705,5,65,0,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,
        87,1,0,0,0,1706,1711,5,133,0,0,1707,1709,5,450,0,0,1708,1710,5,261,
        0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1712,1,0,0,0,1711,1707,
        1,0,0,0,1711,1712,1,0,0,0,1712,1713,1,0,0,0,1713,1718,7,8,0,0,1714,
        1716,5,439,0,0,1715,1717,5,65,0,0,1716,1715,1,0,0,0,1716,1717,1,
        0,0,0,1717,1719,1,0,0,0,1718,1714,1,0,0,0,1718,1719,1,0,0,0,1719,
        89,1,0,0,0,1720,1722,3,1234,617,0,1721,1723,5,261,0,0,1722,1721,
        1,0,0,0,1722,1723,1,0,0,0,1723,1724,1,0,0,0,1724,1726,3,1248,624,
        0,1725,1727,3,92,46,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1730,
        1,0,0,0,1728,1730,3,92,46,0,1729,1720,1,0,0,0,1729,1728,1,0,0,0,
        1730,91,1,0,0,0,1731,1733,5,338,0,0,1732,1734,5,469,0,0,1733,1732,
        1,0,0,0,1733,1734,1,0,0,0,1734,1736,1,0,0,0,1735,1737,5,261,0,0,
        1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1738,1,0,0,0,1738,1747,
        3,1148,574,0,1739,1741,5,336,0,0,1740,1742,5,469,0,0,1741,1740,1,
        0,0,0,1741,1742,1,0,0,0,1742,1744,1,0,0,0,1743,1745,5,261,0,0,1744,
        1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,1748,3,1148,
        574,0,1747,1739,1,0,0,0,1747,1748,1,0,0,0,1748,1768,1,0,0,0,1749,
        1751,5,336,0,0,1750,1752,5,469,0,0,1751,1750,1,0,0,0,1751,1752,1,
        0,0,0,1752,1754,1,0,0,0,1753,1755,5,261,0,0,1754,1753,1,0,0,0,1754,
        1755,1,0,0,0,1755,1756,1,0,0,0,1756,1765,3,1148,574,0,1757,1759,
        5,338,0,0,1758,1760,5,469,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,
        0,1760,1762,1,0,0,0,1761,1763,5,261,0,0,1762,1761,1,0,0,0,1762,1763,
        1,0,0,0,1763,1764,1,0,0,0,1764,1766,3,1148,574,0,1765,1757,1,0,0,
        0,1765,1766,1,0,0,0,1766,1768,1,0,0,0,1767,1731,1,0,0,0,1767,1749,
        1,0,0,0,1768,93,1,0,0,0,1769,1771,5,334,0,0,1770,1772,5,261,0,0,
        1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1774,
        3,1248,624,0,1774,95,1,0,0,0,1775,1777,5,412,0,0,1776,1778,5,528,
        0,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,1780,1,0,0,0,1779,1781,
        5,293,0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1783,1,0,0,0,
        1782,1784,5,261,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1785,
        1,0,0,0,1785,1787,5,319,0,0,1786,1788,5,57,0,0,1787,1786,1,0,0,0,
        1787,1788,1,0,0,0,1788,97,1,0,0,0,1789,1791,5,479,0,0,1790,1792,
        5,66,0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,1797,1,0,0,0,1793,
        1795,5,218,0,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,
        0,0,1796,1798,7,6,0,0,1797,1794,1,0,0,0,1797,1798,1,0,0,0,1798,1800,
        1,0,0,0,1799,1801,3,100,50,0,1800,1799,1,0,0,0,1801,1802,1,0,0,0,
        1802,1800,1,0,0,0,1802,1803,1,0,0,0,1803,1806,1,0,0,0,1804,1805,
        5,246,0,0,1805,1807,3,1216,608,0,1806,1804,1,0,0,0,1806,1807,1,0,
        0,0,1807,99,1,0,0,0,1808,1810,3,1268,634,0,1809,1808,1,0,0,0,1810,
        1811,1,0,0,0,1811,1809,1,0,0,0,1811,1812,1,0,0,0,1812,1814,1,0,0,
        0,1813,1815,7,9,0,0,1814,1813,1,0,0,0,1814,1815,1,0,0,0,1815,1817,
        1,0,0,0,1816,1818,3,1276,638,0,1817,1816,1,0,0,0,1818,1819,1,0,0,
        0,1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,101,1,0,0,0,1821,1822,
        5,254,0,0,1822,1823,5,431,0,0,1823,1827,5,550,0,0,1824,1826,3,104,
        52,0,1825,1824,1,0,0,0,1826,1829,1,0,0,0,1827,1825,1,0,0,0,1827,
        1828,1,0,0,0,1828,103,1,0,0,0,1829,1827,1,0,0,0,1830,1833,3,106,
        53,0,1831,1833,3,136,68,0,1832,1830,1,0,0,0,1832,1831,1,0,0,0,1833,
        105,1,0,0,0,1834,1836,5,213,0,0,1835,1837,5,550,0,0,1836,1835,1,
        0,0,0,1836,1837,1,0,0,0,1837,1841,1,0,0,0,1838,1840,3,108,54,0,1839,
        1838,1,0,0,0,1840,1843,1,0,0,0,1841,1839,1,0,0,0,1841,1842,1,0,0,
        0,1842,1845,1,0,0,0,1843,1841,1,0,0,0,1844,1846,5,550,0,0,1845,1844,
        1,0,0,0,1845,1846,1,0,0,0,1846,107,1,0,0,0,1847,1851,3,110,55,0,
        1848,1850,3,112,56,0,1849,1848,1,0,0,0,1850,1853,1,0,0,0,1851,1849,
        1,0,0,0,1851,1852,1,0,0,0,1852,1855,1,0,0,0,1853,1851,1,0,0,0,1854,
        1847,1,0,0,0,1855,1856,1,0,0,0,1856,1854,1,0,0,0,1856,1857,1,0,0,
        0,1857,1860,1,0,0,0,1858,1860,3,438,219,0,1859,1854,1,0,0,0,1859,
        1858,1,0,0,0,1860,1862,1,0,0,0,1861,1863,7,1,0,0,1862,1861,1,0,0,
        0,1862,1863,1,0,0,0,1863,109,1,0,0,0,1864,1866,5,436,0,0,1865,1867,
        5,340,0,0,1866,1865,1,0,0,0,1866,1867,1,0,0,0,1867,1868,1,0,0,0,
        1868,1870,3,1236,618,0,1869,1871,7,1,0,0,1870,1869,1,0,0,0,1870,
        1871,1,0,0,0,1871,111,1,0,0,0,1872,1884,3,114,57,0,1873,1884,3,116,
        58,0,1874,1884,3,118,59,0,1875,1884,3,120,60,0,1876,1884,3,122,61,
        0,1877,1884,3,124,62,0,1878,1884,3,126,63,0,1879,1884,3,128,64,0,
        1880,1884,3,132,66,0,1881,1884,3,130,65,0,1882,1884,3,134,67,0,1883,
        1872,1,0,0,0,1883,1873,1,0,0,0,1883,1874,1,0,0,0,1883,1875,1,0,0,
        0,1883,1876,1,0,0,0,1883,1877,1,0,0,0,1883,1878,1,0,0,0,1883,1879,
        1,0,0,0,1883,1880,1,0,0,0,1883,1881,1,0,0,0,1883,1882,1,0,0,0,1884,
        113,1,0,0,0,1885,1887,5,28,0,0,1886,1888,5,501,0,0,1887,1886,1,0,
        0,0,1887,1888,1,0,0,0,1888,1900,1,0,0,0,1889,1901,5,146,0,0,1890,
        1901,5,147,0,0,1891,1901,5,270,0,0,1892,1901,5,364,0,0,1893,1901,
        5,365,0,0,1894,1901,5,382,0,0,1895,1901,5,383,0,0,1896,1901,5,486,
        0,0,1897,1901,5,523,0,0,1898,1901,3,1218,609,0,1899,1901,3,482,241,
        0,1900,1889,1,0,0,0,1900,1890,1,0,0,0,1900,1891,1,0,0,0,1900,1892,
        1,0,0,0,1900,1893,1,0,0,0,1900,1894,1,0,0,0,1900,1895,1,0,0,0,1900,
        1896,1,0,0,0,1900,1897,1,0,0,0,1900,1898,1,0,0,0,1900,1899,1,0,0,
        0,1901,115,1,0,0,0,1902,1905,5,412,0,0,1903,1906,5,322,0,0,1904,
        1906,3,1276,638,0,1905,1903,1,0,0,0,1905,1904,1,0,0,0,1906,1908,
        1,0,0,0,1907,1909,5,19,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,
        1911,1,0,0,0,1910,1912,7,10,0,0,1911,1910,1,0,0,0,1911,1912,1,0,
        0,0,1912,117,1,0,0,0,1913,1915,5,344,0,0,1914,1916,5,261,0,0,1915,
        1914,1,0,0,0,1915,1916,1,0,0,0,1916,1918,1,0,0,0,1917,1913,1,0,0,
        0,1917,1918,1,0,0,0,1918,1924,1,0,0,0,1919,1925,5,289,0,0,1920,1921,
        5,389,0,0,1921,1925,5,45,0,0,1922,1925,5,389,0,0,1923,1925,5,45,
        0,0,1924,1919,1,0,0,0,1924,1920,1,0,0,0,1924,1922,1,0,0,0,1924,1923,
        1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1927,7,11,0,0,1927,
        119,1,0,0,0,1928,1930,5,351,0,0,1929,1931,5,65,0,0,1930,1929,1,0,
        0,0,1930,1931,1,0,0,0,1931,1933,1,0,0,0,1932,1934,5,261,0,0,1933,
        1932,1,0,0,0,1933,1934,1,0,0,0,1934,1937,1,0,0,0,1935,1938,3,1192,
        596,0,1936,1938,3,482,241,0,1937,1935,1,0,0,0,1937,1936,1,0,0,0,
        1938,121,1,0,0,0,1939,1940,5,389,0,0,1940,1942,5,137,0,0,1941,1943,
        5,261,0,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,1947,1,0,0,0,
        1944,1948,5,466,0,0,1945,1948,5,244,0,0,1946,1948,3,1218,609,0,1947,
        1944,1,0,0,0,1947,1945,1,0,0,0,1947,1946,1,0,0,0,1948,123,1,0,0,
        0,1949,1951,5,4,0,0,1950,1952,5,307,0,0,1951,1950,1,0,0,0,1951,1952,
        1,0,0,0,1952,1954,1,0,0,0,1953,1955,5,261,0,0,1954,1953,1,0,0,0,
        1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,7,12,0,0,1957,125,
        1,0,0,0,1958,1960,5,389,0,0,1959,1961,5,269,0,0,1960,1959,1,0,0,
        0,1960,1961,1,0,0,0,1961,1963,1,0,0,0,1962,1964,5,261,0,0,1963,1962,
        1,0,0,0,1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1967,3,1192,596,
        0,1966,1968,3,130,65,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,
        1973,1,0,0,0,1969,1971,5,527,0,0,1970,1969,1,0,0,0,1970,1971,1,0,
        0,0,1971,1972,1,0,0,0,1972,1974,5,154,0,0,1973,1970,1,0,0,0,1973,
        1974,1,0,0,0,1974,127,1,0,0,0,1975,1977,5,19,0,0,1976,1978,5,389,
        0,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1980,1,0,0,0,1979,1981,
        5,269,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1983,1,0,0,0,
        1982,1984,5,261,0,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,
        1,0,0,0,1985,1987,3,1192,596,0,1986,1988,3,130,65,0,1987,1986,1,
        0,0,0,1987,1988,1,0,0,0,1988,1993,1,0,0,0,1989,1991,5,527,0,0,1990,
        1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,0,0,1992,1994,5,154,
        0,0,1993,1990,1,0,0,0,1993,1994,1,0,0,0,1994,129,1,0,0,0,1995,1997,
        5,354,0,0,1996,1998,5,261,0,0,1997,1996,1,0,0,0,1997,1998,1,0,0,
        0,1998,1999,1,0,0,0,1999,2000,3,1230,615,0,2000,131,1,0,0,0,2001,
        2003,5,212,0,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2004,1,0,
        0,0,2004,2006,5,469,0,0,2005,2007,5,261,0,0,2006,2005,1,0,0,0,2006,
        2007,1,0,0,0,2007,2008,1,0,0,0,2008,2010,3,1192,596,0,2009,2011,
        3,1192,596,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,133,1,0,0,
        0,2012,2014,5,398,0,0,2013,2015,5,269,0,0,2014,2013,1,0,0,0,2014,
        2015,1,0,0,0,2015,2017,1,0,0,0,2016,2018,5,261,0,0,2017,2016,1,0,
        0,0,2017,2018,1,0,0,0,2018,2019,1,0,0,0,2019,2020,3,1192,596,0,2020,
        135,1,0,0,0,2021,2022,5,240,0,0,2022,2026,5,550,0,0,2023,2024,3,
        1236,618,0,2024,2025,5,550,0,0,2025,2027,1,0,0,0,2026,2023,1,0,0,
        0,2026,2027,1,0,0,0,2027,2035,1,0,0,0,2028,2030,3,138,69,0,2029,
        2028,1,0,0,0,2030,2033,1,0,0,0,2031,2029,1,0,0,0,2031,2032,1,0,0,
        0,2032,2034,1,0,0,0,2033,2031,1,0,0,0,2034,2036,5,550,0,0,2035,2031,
        1,0,0,0,2035,2036,1,0,0,0,2036,137,1,0,0,0,2037,2042,3,140,70,0,
        2038,2042,3,148,74,0,2039,2042,3,150,75,0,2040,2042,3,154,77,0,2041,
        2037,1,0,0,0,2041,2038,1,0,0,0,2041,2039,1,0,0,0,2041,2040,1,0,0,
        0,2042,139,1,0,0,0,2043,2049,5,411,0,0,2044,2047,5,338,0,0,2045,
        2048,3,1218,609,0,2046,2048,3,1236,618,0,2047,2045,1,0,0,0,2047,
        2046,1,0,0,0,2048,2050,1,0,0,0,2049,2044,1,0,0,0,2049,2050,1,0,0,
        0,2050,2051,1,0,0,0,2051,2055,5,201,0,0,2052,2056,3,142,71,0,2053,
        2056,3,144,72,0,2054,2056,3,146,73,0,2055,2052,1,0,0,0,2055,2053,
        1,0,0,0,2055,2054,1,0,0,0,2056,141,1,0,0,0,2057,2058,3,1276,638,
        0,2058,2059,5,391,0,0,2059,143,1,0,0,0,2060,2062,5,163,0,0,2061,
        2060,1,0,0,0,2061,2062,1,0,0,0,2062,2064,1,0,0,0,2063,2065,5,335,
        0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2067,
        7,13,0,0,2067,2068,5,335,0,0,2068,2069,3,1236,618,0,2069,145,1,0,
        0,0,2070,2072,3,1276,638,0,2071,2073,5,69,0,0,2072,2071,1,0,0,0,
        2072,2073,1,0,0,0,2073,147,1,0,0,0,2074,2076,5,426,0,0,2075,2077,
        7,14,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2079,1,0,0,0,2078,
        2080,5,23,0,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,
        0,0,2081,2083,5,218,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,
        2085,1,0,0,0,2084,2086,3,1236,618,0,2085,2084,1,0,0,0,2086,2087,
        1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,149,1,0,0,0,2089,
        2090,5,312,0,0,2090,2092,5,212,0,0,2091,2093,5,486,0,0,2092,2091,
        1,0,0,0,2092,2093,1,0,0,0,2093,2095,1,0,0,0,2094,2096,5,97,0,0,2095,
        2094,1,0,0,0,2095,2096,1,0,0,0,2096,2098,1,0,0,0,2097,2099,3,152,
        76,0,2098,2097,1,0,0,0,2099,2100,1,0,0,0,2100,2098,1,0,0,0,2100,
        2101,1,0,0,0,2101,151,1,0,0,0,2102,2105,3,1236,618,0,2103,2104,5,
        362,0,0,2104,2106,3,1276,638,0,2105,2103,1,0,0,0,2105,2106,1,0,0,
        0,2106,153,1,0,0,0,2107,2108,5,80,0,0,2108,2110,5,100,0,0,2109,2111,
        5,218,0,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,2112,1,0,0,0,
        2112,2113,3,1236,618,0,2113,155,1,0,0,0,2114,2115,5,112,0,0,2115,
        2116,5,150,0,0,2116,2120,5,550,0,0,2117,2119,3,158,79,0,2118,2117,
        1,0,0,0,2119,2122,1,0,0,0,2120,2118,1,0,0,0,2120,2121,1,0,0,0,2121,
        157,1,0,0,0,2122,2120,1,0,0,0,2123,2133,3,160,80,0,2124,2133,3,210,
        105,0,2125,2133,3,214,107,0,2126,2133,3,216,108,0,2127,2133,3,218,
        109,0,2128,2133,3,256,128,0,2129,2133,3,258,129,0,2130,2133,3,322,
        161,0,2131,2133,3,398,199,0,2132,2123,1,0,0,0,2132,2124,1,0,0,0,
        2132,2125,1,0,0,0,2132,2126,1,0,0,0,2132,2127,1,0,0,0,2132,2128,
        1,0,0,0,2132,2129,1,0,0,0,2132,2130,1,0,0,0,2132,2131,1,0,0,0,2133,
        159,1,0,0,0,2134,2135,5,212,0,0,2135,2136,5,431,0,0,2136,2140,5,
        550,0,0,2137,2139,3,162,81,0,2138,2137,1,0,0,0,2139,2142,1,0,0,0,
        2140,2138,1,0,0,0,2140,2141,1,0,0,0,2141,161,1,0,0,0,2142,2140,1,
        0,0,0,2143,2144,7,15,0,0,2144,2151,3,1236,618,0,2145,2147,5,550,
        0,0,2146,2145,1,0,0,0,2146,2147,1,0,0,0,2147,2148,1,0,0,0,2148,2150,
        3,164,82,0,2149,2146,1,0,0,0,2150,2153,1,0,0,0,2151,2149,1,0,0,0,
        2151,2152,1,0,0,0,2152,2155,1,0,0,0,2153,2151,1,0,0,0,2154,2156,
        5,550,0,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,2160,1,0,0,0,
        2157,2159,3,436,218,0,2158,2157,1,0,0,0,2159,2162,1,0,0,0,2160,2158,
        1,0,0,0,2160,2161,1,0,0,0,2161,2167,1,0,0,0,2162,2160,1,0,0,0,2163,
        2164,3,438,219,0,2164,2165,7,1,0,0,2165,2167,1,0,0,0,2166,2143,1,
        0,0,0,2166,2163,1,0,0,0,2167,163,1,0,0,0,2168,2180,3,166,83,0,2169,
        2180,3,168,84,0,2170,2180,3,170,85,0,2171,2180,3,174,87,0,2172,2180,
        3,184,92,0,2173,2180,3,186,93,0,2174,2180,3,190,95,0,2175,2180,3,
        192,96,0,2176,2180,3,206,103,0,2177,2180,3,208,104,0,2178,2180,3,
        202,101,0,2179,2168,1,0,0,0,2179,2169,1,0,0,0,2179,2170,1,0,0,0,
        2179,2171,1,0,0,0,2179,2172,1,0,0,0,2179,2173,1,0,0,0,2179,2174,
        1,0,0,0,2179,2175,1,0,0,0,2179,2176,1,0,0,0,2179,2177,1,0,0,0,2179,
        2178,1,0,0,0,2180,165,1,0,0,0,2181,2183,5,261,0,0,2182,2181,1,0,
        0,0,2182,2183,1,0,0,0,2183,2184,1,0,0,0,2184,2185,5,209,0,0,2185,
        167,1,0,0,0,2186,2188,5,261,0,0,2187,2186,1,0,0,0,2187,2188,1,0,
        0,0,2188,2189,1,0,0,0,2189,2190,5,229,0,0,2190,169,1,0,0,0,2191,
        2193,5,49,0,0,2192,2194,5,97,0,0,2193,2192,1,0,0,0,2193,2194,1,0,
        0,0,2194,2195,1,0,0,0,2195,2197,3,1276,638,0,2196,2198,3,172,86,
        0,2197,2196,1,0,0,0,2197,2198,1,0,0,0,2198,2200,1,0,0,0,2199,2201,
        7,16,0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,171,1,0,0,0,2202,
        2203,5,501,0,0,2203,2204,3,1276,638,0,2204,173,1,0,0,0,2205,2209,
        5,389,0,0,2206,2210,3,176,88,0,2207,2210,3,178,89,0,2208,2210,3,
        180,90,0,2209,2206,1,0,0,0,2209,2207,1,0,0,0,2209,2208,1,0,0,0,2210,
        175,1,0,0,0,2211,2213,5,97,0,0,2212,2211,1,0,0,0,2212,2213,1,0,0,
        0,2213,2214,1,0,0,0,2214,2216,3,1276,638,0,2215,2217,5,66,0,0,2216,
        2215,1,0,0,0,2216,2217,1,0,0,0,2217,177,1,0,0,0,2218,2220,5,261,
        0,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2221,1,0,0,0,2221,2223,
        5,522,0,0,2222,2224,5,246,0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,
        0,2224,2226,1,0,0,0,2225,2227,5,451,0,0,2226,2225,1,0,0,0,2226,2227,
        1,0,0,0,2227,2238,1,0,0,0,2228,2230,5,221,0,0,2229,2228,1,0,0,0,
        2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2233,3,1276,638,0,2232,
        2234,3,182,91,0,2233,2232,1,0,0,0,2233,2234,1,0,0,0,2234,2236,1,
        0,0,0,2235,2237,5,66,0,0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,
        2239,1,0,0,0,2238,2229,1,0,0,0,2238,2239,1,0,0,0,2239,2245,1,0,0,
        0,2240,2242,5,138,0,0,2241,2243,5,338,0,0,2242,2241,1,0,0,0,2242,
        2243,1,0,0,0,2243,2244,1,0,0,0,2244,2246,3,1192,596,0,2245,2240,
        1,0,0,0,2245,2246,1,0,0,0,2246,179,1,0,0,0,2247,2249,5,97,0,0,2248,
        2247,1,0,0,0,2248,2249,1,0,0,0,2249,2250,1,0,0,0,2250,2251,3,1276,
        638,0,2251,2253,3,182,91,0,2252,2254,5,66,0,0,2253,2252,1,0,0,0,
        2253,2254,1,0,0,0,2254,181,1,0,0,0,2255,2256,5,501,0,0,2256,2257,
        3,1276,638,0,2257,183,1,0,0,0,2258,2267,5,271,0,0,2259,2261,5,389,
        0,0,2260,2262,5,261,0,0,2261,2260,1,0,0,0,2261,2262,1,0,0,0,2262,
        2268,1,0,0,0,2263,2265,5,391,0,0,2264,2266,5,22,0,0,2265,2264,1,
        0,0,0,2265,2266,1,0,0,0,2266,2268,1,0,0,0,2267,2259,1,0,0,0,2267,
        2263,1,0,0,0,2268,2276,1,0,0,0,2269,2277,5,337,0,0,2270,2277,5,465,
        0,0,2271,2273,3,1230,615,0,2272,2271,1,0,0,0,2273,2274,1,0,0,0,2274,
        2272,1,0,0,0,2274,2275,1,0,0,0,2275,2277,1,0,0,0,2276,2269,1,0,0,
        0,2276,2270,1,0,0,0,2276,2272,1,0,0,0,2277,185,1,0,0,0,2278,2279,
        5,520,0,0,2279,2281,5,335,0,0,2280,2282,3,188,94,0,2281,2280,1,0,
        0,0,2282,2283,1,0,0,0,2283,2281,1,0,0,0,2283,2284,1,0,0,0,2284,187,
        1,0,0,0,2285,2287,3,1266,633,0,2286,2288,5,261,0,0,2287,2286,1,0,
        0,0,2287,2288,1,0,0,0,2288,2291,1,0,0,0,2289,2292,3,1192,596,0,2290,
        2292,3,482,241,0,2291,2289,1,0,0,0,2291,2290,1,0,0,0,2292,189,1,
        0,0,0,2293,2302,5,112,0,0,2294,2296,5,389,0,0,2295,2297,5,261,0,
        0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,2303,1,0,0,0,2298,2300,
        5,391,0,0,2299,2301,5,22,0,0,2300,2299,1,0,0,0,2300,2301,1,0,0,0,
        2301,2303,1,0,0,0,2302,2294,1,0,0,0,2302,2298,1,0,0,0,2303,2305,
        1,0,0,0,2304,2306,3,1230,615,0,2305,2304,1,0,0,0,2306,2307,1,0,0,
        0,2307,2305,1,0,0,0,2307,2308,1,0,0,0,2308,191,1,0,0,0,2309,2311,
        5,287,0,0,2310,2312,5,261,0,0,2311,2310,1,0,0,0,2311,2312,1,0,0,
        0,2312,2315,1,0,0,0,2313,2316,3,1230,615,0,2314,2316,3,1276,638,
        0,2315,2313,1,0,0,0,2315,2314,1,0,0,0,2316,2318,1,0,0,0,2317,2319,
        5,290,0,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,2323,1,0,0,0,
        2320,2322,3,194,97,0,2321,2320,1,0,0,0,2322,2325,1,0,0,0,2323,2321,
        1,0,0,0,2323,2324,1,0,0,0,2324,193,1,0,0,0,2325,2323,1,0,0,0,2326,
        2330,3,196,98,0,2327,2330,3,198,99,0,2328,2330,3,200,100,0,2329,
        2326,1,0,0,0,2329,2327,1,0,0,0,2329,2328,1,0,0,0,2330,195,1,0,0,
        0,2331,2333,5,527,0,0,2332,2331,1,0,0,0,2332,2333,1,0,0,0,2333,2334,
        1,0,0,0,2334,2336,5,217,0,0,2335,2337,5,31,0,0,2336,2335,1,0,0,0,
        2336,2337,1,0,0,0,2337,2340,1,0,0,0,2338,2341,3,1230,615,0,2339,
        2341,3,1276,638,0,2340,2338,1,0,0,0,2340,2339,1,0,0,0,2341,197,1,
        0,0,0,2342,2344,5,290,0,0,2343,2342,1,0,0,0,2343,2344,1,0,0,0,2344,
        2346,1,0,0,0,2345,2347,5,31,0,0,2346,2345,1,0,0,0,2346,2347,1,0,
        0,0,2347,2348,1,0,0,0,2348,2351,5,504,0,0,2349,2352,3,1230,615,0,
        2350,2352,3,1276,638,0,2351,2349,1,0,0,0,2351,2350,1,0,0,0,2352,
        199,1,0,0,0,2353,2355,5,290,0,0,2354,2353,1,0,0,0,2354,2355,1,0,
        0,0,2355,2357,1,0,0,0,2356,2358,5,31,0,0,2357,2356,1,0,0,0,2357,
        2358,1,0,0,0,2358,2359,1,0,0,0,2359,2362,5,51,0,0,2360,2363,3,1230,
        615,0,2361,2363,3,1276,638,0,2362,2360,1,0,0,0,2362,2361,1,0,0,0,
        2363,201,1,0,0,0,2364,2366,5,390,0,0,2365,2367,5,307,0,0,2366,2365,
        1,0,0,0,2366,2367,1,0,0,0,2367,2369,1,0,0,0,2368,2370,5,261,0,0,
        2369,2368,1,0,0,0,2369,2370,1,0,0,0,2370,2371,1,0,0,0,2371,2372,
        3,204,102,0,2372,203,1,0,0,0,2373,2374,3,480,240,0,2374,205,1,0,
        0,0,2375,2377,5,74,0,0,2376,2378,5,261,0,0,2377,2376,1,0,0,0,2377,
        2378,1,0,0,0,2378,2379,1,0,0,0,2379,2380,3,1216,608,0,2380,207,1,
        0,0,0,2381,2383,5,407,0,0,2382,2384,5,261,0,0,2383,2382,1,0,0,0,
        2383,2384,1,0,0,0,2384,2390,1,0,0,0,2385,2387,5,409,0,0,2386,2388,
        5,22,0,0,2387,2386,1,0,0,0,2387,2388,1,0,0,0,2388,2390,1,0,0,0,2389,
        2381,1,0,0,0,2389,2385,1,0,0,0,2390,2392,1,0,0,0,2391,2393,3,1258,
        629,0,2392,2391,1,0,0,0,2393,2394,1,0,0,0,2394,2392,1,0,0,0,2394,
        2395,1,0,0,0,2395,209,1,0,0,0,2396,2397,5,113,0,0,2397,2398,5,431,
        0,0,2398,2402,5,550,0,0,2399,2401,3,212,106,0,2400,2399,1,0,0,0,
        2401,2404,1,0,0,0,2402,2400,1,0,0,0,2402,2403,1,0,0,0,2403,211,1,
        0,0,0,2404,2402,1,0,0,0,2405,2406,3,1276,638,0,2406,2407,3,482,241,
        0,2407,2408,5,260,0,0,2408,2409,3,482,241,0,2409,213,1,0,0,0,2410,
        2411,5,529,0,0,2411,2412,5,431,0,0,2412,2432,5,550,0,0,2413,2433,
        3,436,218,0,2414,2433,3,582,291,0,2415,2417,3,596,298,0,2416,2418,
        5,550,0,0,2417,2416,1,0,0,0,2417,2418,1,0,0,0,2418,2433,1,0,0,0,
        2419,2433,3,162,81,0,2420,2433,3,108,54,0,2421,2423,3,184,92,0,2422,
        2424,5,551,0,0,2423,2422,1,0,0,0,2423,2424,1,0,0,0,2424,2433,1,0,
        0,0,2425,2433,3,782,391,0,2426,2433,3,592,296,0,2427,2433,3,58,29,
        0,2428,2430,3,606,303,0,2429,2431,7,1,0,0,2430,2429,1,0,0,0,2430,
        2431,1,0,0,0,2431,2433,1,0,0,0,2432,2413,1,0,0,0,2432,2414,1,0,0,
        0,2432,2415,1,0,0,0,2432,2419,1,0,0,0,2432,2420,1,0,0,0,2432,2421,
        1,0,0,0,2432,2425,1,0,0,0,2432,2426,1,0,0,0,2432,2427,1,0,0,0,2432,
        2428,1,0,0,0,2433,2434,1,0,0,0,2434,2432,1,0,0,0,2434,2435,1,0,0,
        0,2435,215,1,0,0,0,2436,2437,5,292,0,0,2437,2438,5,431,0,0,2438,
        2442,5,550,0,0,2439,2441,3,436,218,0,2440,2439,1,0,0,0,2441,2444,
        1,0,0,0,2442,2440,1,0,0,0,2442,2443,1,0,0,0,2443,217,1,0,0,0,2444,
        2442,1,0,0,0,2445,2446,5,82,0,0,2446,2447,5,431,0,0,2447,2452,5,
        550,0,0,2448,2451,3,220,110,0,2449,2451,3,436,218,0,2450,2448,1,
        0,0,0,2450,2449,1,0,0,0,2451,2454,1,0,0,0,2452,2450,1,0,0,0,2452,
        2453,1,0,0,0,2453,219,1,0,0,0,2454,2452,1,0,0,0,2455,2459,3,222,
        111,0,2456,2459,3,224,112,0,2457,2459,3,226,113,0,2458,2455,1,0,
        0,0,2458,2456,1,0,0,0,2458,2457,1,0,0,0,2459,221,1,0,0,0,2460,2461,
        5,59,0,0,2461,2463,3,1222,611,0,2462,2464,5,218,0,0,2463,2462,1,
        0,0,0,2463,2464,1,0,0,0,2464,2466,1,0,0,0,2465,2467,5,250,0,0,2466,
        2465,1,0,0,0,2466,2467,1,0,0,0,2467,2468,1,0,0,0,2468,2483,5,253,
        0,0,2469,2479,3,246,123,0,2470,2479,3,252,126,0,2471,2479,3,238,
        119,0,2472,2479,3,240,120,0,2473,2479,3,248,124,0,2474,2479,3,254,
        127,0,2475,2479,3,232,116,0,2476,2479,3,242,121,0,2477,2479,3,236,
        118,0,2478,2469,1,0,0,0,2478,2470,1,0,0,0,2478,2471,1,0,0,0,2478,
        2472,1,0,0,0,2478,2473,1,0,0,0,2478,2474,1,0,0,0,2478,2475,1,0,0,
        0,2478,2476,1,0,0,0,2478,2477,1,0,0,0,2479,2482,1,0,0,0,2480,2482,
        3,1232,616,0,2481,2478,1,0,0,0,2481,2480,1,0,0,0,2482,2485,1,0,0,
        0,2483,2481,1,0,0,0,2483,2484,1,0,0,0,2484,2486,1,0,0,0,2485,2483,
        1,0,0,0,2486,2487,5,550,0,0,2487,223,1,0,0,0,2488,2489,5,59,0,0,
        2489,2491,3,1222,611,0,2490,2492,5,218,0,0,2491,2490,1,0,0,0,2491,
        2492,1,0,0,0,2492,2493,1,0,0,0,2493,2502,5,346,0,0,2494,2501,3,228,
        114,0,2495,2501,3,254,127,0,2496,2501,3,242,121,0,2497,2501,3,230,
        115,0,2498,2501,3,234,117,0,2499,2501,3,244,122,0,2500,2494,1,0,
        0,0,2500,2495,1,0,0,0,2500,2496,1,0,0,0,2500,2497,1,0,0,0,2500,2498,
        1,0,0,0,2500,2499,1,0,0,0,2501,2504,1,0,0,0,2502,2500,1,0,0,0,2502,
        2503,1,0,0,0,2503,2505,1,0,0,0,2504,2502,1,0,0,0,2505,2506,5,550,
        0,0,2506,225,1,0,0,0,2507,2508,5,59,0,0,2508,2510,3,1222,611,0,2509,
        2511,5,218,0,0,2510,2509,1,0,0,0,2510,2511,1,0,0,0,2511,2512,1,0,
        0,0,2512,2513,5,250,0,0,2513,2525,5,239,0,0,2514,2521,3,238,119,
        0,2515,2521,3,240,120,0,2516,2521,3,250,125,0,2517,2521,3,254,127,
        0,2518,2521,3,232,116,0,2519,2521,3,242,121,0,2520,2514,1,0,0,0,
        2520,2515,1,0,0,0,2520,2516,1,0,0,0,2520,2517,1,0,0,0,2520,2518,
        1,0,0,0,2520,2519,1,0,0,0,2521,2524,1,0,0,0,2522,2524,3,1232,616,
        0,2523,2520,1,0,0,0,2523,2522,1,0,0,0,2524,2527,1,0,0,0,2525,2523,
        1,0,0,0,2525,2526,1,0,0,0,2526,2528,1,0,0,0,2527,2525,1,0,0,0,2528,
        2529,5,550,0,0,2529,227,1,0,0,0,2530,2531,5,140,0,0,2531,2533,5,
        108,0,0,2532,2534,5,261,0,0,2533,2532,1,0,0,0,2533,2534,1,0,0,0,
        2534,2535,1,0,0,0,2535,2536,3,1232,616,0,2536,229,1,0,0,0,2537,2538,
        5,140,0,0,2538,2539,5,482,0,0,2539,2540,5,333,0,0,2540,2541,3,1276,
        638,0,2541,2549,5,499,0,0,2542,2543,5,248,0,0,2543,2545,5,52,0,0,
        2544,2546,3,1240,620,0,2545,2544,1,0,0,0,2546,2547,1,0,0,0,2547,
        2545,1,0,0,0,2547,2548,1,0,0,0,2548,2550,1,0,0,0,2549,2542,1,0,0,
        0,2549,2550,1,0,0,0,2550,231,1,0,0,0,2551,2552,5,163,0,0,2552,2554,
        5,269,0,0,2553,2555,5,261,0,0,2554,2553,1,0,0,0,2554,2555,1,0,0,
        0,2555,2556,1,0,0,0,2556,2557,3,1232,616,0,2557,233,1,0,0,0,2558,
        2559,5,194,0,0,2559,2561,5,269,0,0,2560,2562,5,261,0,0,2561,2560,
        1,0,0,0,2561,2562,1,0,0,0,2562,2563,1,0,0,0,2563,2564,3,1232,616,
        0,2564,235,1,0,0,0,2565,2567,5,305,0,0,2566,2565,1,0,0,0,2566,2567,
        1,0,0,0,2567,2568,1,0,0,0,2568,2570,5,108,0,0,2569,2571,5,261,0,
        0,2570,2569,1,0,0,0,2570,2571,1,0,0,0,2571,2572,1,0,0,0,2572,2573,
        3,1232,616,0,2573,237,1,0,0,0,2574,2575,5,305,0,0,2575,2577,5,114,
        0,0,2576,2578,5,261,0,0,2577,2576,1,0,0,0,2577,2578,1,0,0,0,2578,
        2579,1,0,0,0,2579,2580,3,1232,616,0,2580,239,1,0,0,0,2581,2582,5,
        305,0,0,2582,2584,5,497,0,0,2583,2585,5,261,0,0,2584,2583,1,0,0,
        0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,2587,3,1232,616,0,2587,
        241,1,0,0,0,2588,2589,5,469,0,0,2589,2591,5,269,0,0,2590,2592,5,
        261,0,0,2591,2590,1,0,0,0,2591,2592,1,0,0,0,2592,2593,1,0,0,0,2593,
        2594,3,1232,616,0,2594,243,1,0,0,0,2595,2597,5,479,0,0,2596,2595,
        1,0,0,0,2596,2597,1,0,0,0,2597,2598,1,0,0,0,2598,2600,5,140,0,0,
        2599,2601,5,261,0,0,2600,2599,1,0,0,0,2600,2601,1,0,0,0,2601,2602,
        1,0,0,0,2602,2603,3,1232,616,0,2603,245,1,0,0,0,2604,2606,5,479,
        0,0,2605,2604,1,0,0,0,2605,2606,1,0,0,0,2606,2607,1,0,0,0,2607,2609,
        5,378,0,0,2608,2610,5,261,0,0,2609,2608,1,0,0,0,2609,2610,1,0,0,
        0,2610,2611,1,0,0,0,2611,2612,3,1232,616,0,2612,247,1,0,0,0,2613,
        2615,5,479,0,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,2616,1,0,
        0,0,2616,2618,5,460,0,0,2617,2619,5,261,0,0,2618,2617,1,0,0,0,2618,
        2619,1,0,0,0,2619,2620,1,0,0,0,2620,2621,3,1232,616,0,2621,249,1,
        0,0,0,2622,2624,5,479,0,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,
        2625,1,0,0,0,2625,2627,5,487,0,0,2626,2628,5,261,0,0,2627,2626,1,
        0,0,0,2627,2628,1,0,0,0,2628,2629,1,0,0,0,2629,2630,3,1232,616,0,
        2630,251,1,0,0,0,2631,2633,5,479,0,0,2632,2631,1,0,0,0,2632,2633,
        1,0,0,0,2633,2634,1,0,0,0,2634,2636,7,17,0,0,2635,2637,5,261,0,0,
        2636,2635,1,0,0,0,2636,2637,1,0,0,0,2637,2638,1,0,0,0,2638,2639,
        3,1232,616,0,2639,253,1,0,0,0,2640,2641,5,490,0,0,2641,2643,5,279,
        0,0,2642,2644,5,261,0,0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,
        2645,1,0,0,0,2645,2646,3,1232,616,0,2646,255,1,0,0,0,2647,2648,5,
        295,0,0,2648,2649,5,431,0,0,2649,2654,5,550,0,0,2650,2651,5,275,
        0,0,2651,2652,3,1246,623,0,2652,2653,5,550,0,0,2653,2655,1,0,0,0,
        2654,2650,1,0,0,0,2654,2655,1,0,0,0,2655,2659,1,0,0,0,2656,2658,
        3,436,218,0,2657,2656,1,0,0,0,2658,2661,1,0,0,0,2659,2657,1,0,0,
        0,2659,2660,1,0,0,0,2660,257,1,0,0,0,2661,2659,1,0,0,0,2662,2663,
        5,428,0,0,2663,2664,5,431,0,0,2664,2668,5,550,0,0,2665,2667,3,260,
        130,0,2666,2665,1,0,0,0,2667,2670,1,0,0,0,2668,2666,1,0,0,0,2668,
        2669,1,0,0,0,2669,259,1,0,0,0,2670,2668,1,0,0,0,2671,2674,5,573,
        0,0,2672,2675,5,214,0,0,2673,2675,3,1262,631,0,2674,2672,1,0,0,0,
        2674,2673,1,0,0,0,2674,2675,1,0,0,0,2675,2708,1,0,0,0,2676,2707,
        3,262,131,0,2677,2707,3,264,132,0,2678,2707,3,266,133,0,2679,2707,
        3,268,134,0,2680,2707,3,270,135,0,2681,2707,3,272,136,0,2682,2707,
        3,274,137,0,2683,2707,3,276,138,0,2684,2707,3,278,139,0,2685,2707,
        3,280,140,0,2686,2707,3,282,141,0,2687,2707,3,284,142,0,2688,2707,
        3,286,143,0,2689,2707,3,288,144,0,2690,2707,3,290,145,0,2691,2707,
        3,292,146,0,2692,2695,3,294,147,0,2693,2695,3,298,149,0,2694,2692,
        1,0,0,0,2694,2693,1,0,0,0,2695,2707,1,0,0,0,2696,2707,3,300,150,
        0,2697,2707,3,302,151,0,2698,2707,3,304,152,0,2699,2707,3,306,153,
        0,2700,2707,3,308,154,0,2701,2707,3,310,155,0,2702,2707,3,312,156,
        0,2703,2707,3,314,157,0,2704,2707,3,318,159,0,2705,2707,3,320,160,
        0,2706,2676,1,0,0,0,2706,2677,1,0,0,0,2706,2678,1,0,0,0,2706,2679,
        1,0,0,0,2706,2680,1,0,0,0,2706,2681,1,0,0,0,2706,2682,1,0,0,0,2706,
        2683,1,0,0,0,2706,2684,1,0,0,0,2706,2685,1,0,0,0,2706,2686,1,0,0,
        0,2706,2687,1,0,0,0,2706,2688,1,0,0,0,2706,2689,1,0,0,0,2706,2690,
        1,0,0,0,2706,2691,1,0,0,0,2706,2694,1,0,0,0,2706,2696,1,0,0,0,2706,
        2697,1,0,0,0,2706,2698,1,0,0,0,2706,2699,1,0,0,0,2706,2700,1,0,0,
        0,2706,2701,1,0,0,0,2706,2702,1,0,0,0,2706,2703,1,0,0,0,2706,2704,
        1,0,0,0,2706,2705,1,0,0,0,2707,2710,1,0,0,0,2708,2706,1,0,0,0,2708,
        2709,1,0,0,0,2709,2711,1,0,0,0,2710,2708,1,0,0,0,2711,2712,5,550,
        0,0,2712,261,1,0,0,0,2713,2714,5,47,0,0,2714,2715,7,18,0,0,2715,
        263,1,0,0,0,2716,2717,7,19,0,0,2717,265,1,0,0,0,2718,2719,5,48,0,
        0,2719,267,1,0,0,0,2720,2721,5,193,0,0,2721,2722,7,20,0,0,2722,269,
        1,0,0,0,2723,2724,7,21,0,0,2724,271,1,0,0,0,2725,2726,7,22,0,0,2726,
        273,1,0,0,0,2727,2728,5,413,0,0,2728,275,1,0,0,0,2729,2730,5,511,
        0,0,2730,277,1,0,0,0,2731,2733,5,451,0,0,2732,2734,5,261,0,0,2733,
        2732,1,0,0,0,2733,2734,1,0,0,0,2734,2737,1,0,0,0,2735,2738,3,1176,
        588,0,2736,2738,3,1276,638,0,2737,2735,1,0,0,0,2737,2736,1,0,0,0,
        2738,279,1,0,0,0,2739,2747,5,289,0,0,2740,2742,5,327,0,0,2741,2740,
        1,0,0,0,2741,2742,1,0,0,0,2742,2744,1,0,0,0,2743,2745,5,261,0,0,
        2744,2743,1,0,0,0,2744,2745,1,0,0,0,2745,2746,1,0,0,0,2746,2748,
        7,23,0,0,2747,2741,1,0,0,0,2747,2748,1,0,0,0,2748,2751,1,0,0,0,2749,
        2752,3,1176,588,0,2750,2752,3,1276,638,0,2751,2749,1,0,0,0,2751,
        2750,1,0,0,0,2752,281,1,0,0,0,2753,2761,7,24,0,0,2754,2756,5,327,
        0,0,2755,2754,1,0,0,0,2755,2756,1,0,0,0,2756,2758,1,0,0,0,2757,2759,
        5,261,0,0,2758,2757,1,0,0,0,2758,2759,1,0,0,0,2759,2760,1,0,0,0,
        2760,2762,7,23,0,0,2761,2755,1,0,0,0,2761,2762,1,0,0,0,2762,2765,
        1,0,0,0,2763,2766,3,1176,588,0,2764,2766,3,1276,638,0,2765,2763,
        1,0,0,0,2765,2764,1,0,0,0,2766,283,1,0,0,0,2767,2769,7,25,0,0,2768,
        2770,5,261,0,0,2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,2773,1,0,
        0,0,2771,2774,3,1176,588,0,2772,2774,3,1276,638,0,2773,2771,1,0,
        0,0,2773,2772,1,0,0,0,2774,285,1,0,0,0,2775,2777,7,26,0,0,2776,2778,
        5,261,0,0,2777,2776,1,0,0,0,2777,2778,1,0,0,0,2778,2781,1,0,0,0,
        2779,2782,3,1176,588,0,2780,2782,3,1276,638,0,2781,2779,1,0,0,0,
        2781,2780,1,0,0,0,2782,287,1,0,0,0,2783,2785,5,100,0,0,2784,2786,
        5,261,0,0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,2787,1,0,0,0,
        2787,2788,3,1176,588,0,2788,289,1,0,0,0,2789,2791,5,520,0,0,2790,
        2792,5,261,0,0,2791,2790,1,0,0,0,2791,2792,1,0,0,0,2792,2793,1,0,
        0,0,2793,2794,3,482,241,0,2794,291,1,0,0,0,2795,2797,7,27,0,0,2796,
        2798,5,261,0,0,2797,2796,1,0,0,0,2797,2798,1,0,0,0,2798,2799,1,0,
        0,0,2799,2800,3,526,263,0,2800,293,1,0,0,0,2801,2804,5,221,0,0,2802,
        2805,3,1176,588,0,2803,2805,3,482,241,0,2804,2802,1,0,0,0,2804,2803,
        1,0,0,0,2805,2807,1,0,0,0,2806,2808,3,296,148,0,2807,2806,1,0,0,
        0,2807,2808,1,0,0,0,2808,295,1,0,0,0,2809,2810,5,501,0,0,2810,2811,
        3,1176,588,0,2811,297,1,0,0,0,2812,2813,5,519,0,0,2813,2814,3,1176,
        588,0,2814,299,1,0,0,0,2815,2817,5,517,0,0,2816,2818,5,261,0,0,2817,
        2816,1,0,0,0,2817,2818,1,0,0,0,2818,2819,1,0,0,0,2819,2820,7,28,
        0,0,2820,301,1,0,0,0,2821,2823,5,47,0,0,2822,2824,5,525,0,0,2823,
        2822,1,0,0,0,2823,2824,1,0,0,0,2824,2825,1,0,0,0,2825,2826,5,534,
        0,0,2826,303,1,0,0,0,2827,2829,7,29,0,0,2828,2830,5,423,0,0,2829,
        2828,1,0,0,0,2829,2830,1,0,0,0,2830,305,1,0,0,0,2831,2833,5,450,
        0,0,2832,2834,5,261,0,0,2833,2832,1,0,0,0,2833,2834,1,0,0,0,2834,
        2836,1,0,0,0,2835,2831,1,0,0,0,2835,2836,1,0,0,0,2836,2837,1,0,0,
        0,2837,2842,7,8,0,0,2838,2840,5,439,0,0,2839,2841,5,65,0,0,2840,
        2839,1,0,0,0,2840,2841,1,0,0,0,2841,2843,1,0,0,0,2842,2838,1,0,0,
        0,2842,2843,1,0,0,0,2843,307,1,0,0,0,2844,2845,7,30,0,0,2845,309,
        1,0,0,0,2846,2847,7,31,0,0,2847,311,1,0,0,0,2848,2849,7,32,0,0,2849,
        313,1,0,0,0,2850,2852,5,376,0,0,2851,2853,5,65,0,0,2852,2851,1,0,
        0,0,2852,2853,1,0,0,0,2853,2855,1,0,0,0,2854,2856,5,261,0,0,2855,
        2854,1,0,0,0,2855,2856,1,0,0,0,2856,2859,1,0,0,0,2857,2860,3,1176,
        588,0,2858,2860,3,482,241,0,2859,2857,1,0,0,0,2859,2858,1,0,0,0,
        2860,2862,1,0,0,0,2861,2863,3,316,158,0,2862,2861,1,0,0,0,2862,2863,
        1,0,0,0,2863,315,1,0,0,0,2864,2865,5,333,0,0,2865,2867,3,1276,638,
        0,2866,2868,5,499,0,0,2867,2866,1,0,0,0,2867,2868,1,0,0,0,2868,317,
        1,0,0,0,2869,2870,7,33,0,0,2870,319,1,0,0,0,2871,2872,5,535,0,0,
        2872,321,1,0,0,0,2873,2874,5,407,0,0,2874,2875,5,431,0,0,2875,2879,
        5,550,0,0,2876,2878,3,324,162,0,2877,2876,1,0,0,0,2878,2881,1,0,
        0,0,2879,2877,1,0,0,0,2879,2880,1,0,0,0,2880,323,1,0,0,0,2881,2879,
        1,0,0,0,2882,2884,3,326,163,0,2883,2885,3,340,170,0,2884,2883,1,
        0,0,0,2885,2886,1,0,0,0,2886,2884,1,0,0,0,2886,2887,1,0,0,0,2887,
        325,1,0,0,0,2888,2889,5,384,0,0,2889,2891,3,1258,629,0,2890,2892,
        3,328,164,0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,2906,1,0,0,
        0,2893,2895,3,330,165,0,2894,2896,3,332,166,0,2895,2894,1,0,0,0,
        2895,2896,1,0,0,0,2896,2898,1,0,0,0,2897,2899,3,334,167,0,2898,2897,
        1,0,0,0,2898,2899,1,0,0,0,2899,2901,1,0,0,0,2900,2902,3,336,168,
        0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,2904,1,0,0,0,2903,2905,
        3,338,169,0,2904,2903,1,0,0,0,2904,2905,1,0,0,0,2905,2907,1,0,0,
        0,2906,2893,1,0,0,0,2906,2907,1,0,0,0,2907,2908,1,0,0,0,2908,2909,
        5,550,0,0,2909,327,1,0,0,0,2910,2912,5,261,0,0,2911,2910,1,0,0,0,
        2911,2912,1,0,0,0,2912,2913,1,0,0,0,2913,2914,5,229,0,0,2914,329,
        1,0,0,0,2915,2924,5,352,0,0,2916,2918,5,285,0,0,2917,2919,5,261,
        0,0,2918,2917,1,0,0,0,2918,2919,1,0,0,0,2919,2925,1,0,0,0,2920,2922,
        5,286,0,0,2921,2923,5,22,0,0,2922,2921,1,0,0,0,2922,2923,1,0,0,0,
        2923,2925,1,0,0,0,2924,2916,1,0,0,0,2924,2920,1,0,0,0,2924,2925,
        1,0,0,0,2925,2926,1,0,0,0,2926,2928,3,1276,638,0,2927,2929,7,34,
        0,0,2928,2927,1,0,0,0,2928,2929,1,0,0,0,2929,331,1,0,0,0,2930,2931,
        5,235,0,0,2931,2932,3,1276,638,0,2932,333,1,0,0,0,2933,2934,5,216,
        0,0,2934,2935,5,141,0,0,2935,2936,3,1276,638,0,2936,335,1,0,0,0,
        2937,2938,5,273,0,0,2938,2939,5,141,0,0,2939,2940,3,1276,638,0,2940,
        337,1,0,0,0,2941,2942,5,217,0,0,2942,2943,3,1276,638,0,2943,339,
        1,0,0,0,2944,2948,3,342,171,0,2945,2948,3,344,172,0,2946,2948,3,
        346,173,0,2947,2944,1,0,0,0,2947,2945,1,0,0,0,2947,2946,1,0,0,0,
        2948,341,1,0,0,0,2949,2950,3,1276,638,0,2950,2952,3,1230,615,0,2951,
        2953,3,356,178,0,2952,2951,1,0,0,0,2952,2953,1,0,0,0,2953,2955,1,
        0,0,0,2954,2956,3,362,181,0,2955,2954,1,0,0,0,2955,2956,1,0,0,0,
        2956,2957,1,0,0,0,2957,2959,3,378,189,0,2958,2960,3,390,195,0,2959,
        2958,1,0,0,0,2959,2960,1,0,0,0,2960,2961,1,0,0,0,2961,2962,5,550,
        0,0,2962,343,1,0,0,0,2963,2965,3,1276,638,0,2964,2966,3,1230,615,
        0,2965,2964,1,0,0,0,2965,2966,1,0,0,0,2966,2968,1,0,0,0,2967,2969,
        3,356,178,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,2970,1,0,0,
        0,2970,2971,3,390,195,0,2971,2972,5,550,0,0,2972,345,1,0,0,0,2973,
        2975,3,1276,638,0,2974,2976,3,1230,615,0,2975,2974,1,0,0,0,2975,
        2976,1,0,0,0,2976,2993,1,0,0,0,2977,2992,3,368,184,0,2978,2992,3,
        390,195,0,2979,2992,3,372,186,0,2980,2992,3,354,177,0,2981,2992,
        3,348,174,0,2982,2992,3,356,178,0,2983,2992,3,350,175,0,2984,2989,
        3,374,187,0,2985,2989,3,396,198,0,2986,2989,3,376,188,0,2987,2989,
        3,370,185,0,2988,2984,1,0,0,0,2988,2985,1,0,0,0,2988,2986,1,0,0,
        0,2988,2987,1,0,0,0,2989,2992,1,0,0,0,2990,2992,3,352,176,0,2991,
        2977,1,0,0,0,2991,2978,1,0,0,0,2991,2979,1,0,0,0,2991,2980,1,0,0,
        0,2991,2981,1,0,0,0,2991,2982,1,0,0,0,2991,2983,1,0,0,0,2991,2988,
        1,0,0,0,2991,2990,1,0,0,0,2992,2995,1,0,0,0,2993,2991,1,0,0,0,2993,
        2994,1,0,0,0,2994,2996,1,0,0,0,2995,2993,1,0,0,0,2996,2997,5,550,
        0,0,2997,347,1,0,0,0,2998,3000,5,47,0,0,2999,3001,5,525,0,0,3000,
        2999,1,0,0,0,3000,3001,1,0,0,0,3001,3002,1,0,0,0,3002,3003,5,534,
        0,0,3003,349,1,0,0,0,3004,3006,5,77,0,0,3005,3007,5,327,0,0,3006,
        3005,1,0,0,0,3006,3007,1,0,0,0,3007,3009,1,0,0,0,3008,3010,5,261,
        0,0,3009,3008,1,0,0,0,3009,3010,1,0,0,0,3010,3011,1,0,0,0,3011,3012,
        3,1276,638,0,3012,351,1,0,0,0,3013,3015,5,233,0,0,3014,3016,5,249,
        0,0,3015,3014,1,0,0,0,3015,3016,1,0,0,0,3016,353,1,0,0,0,3017,3019,
        7,29,0,0,3018,3020,5,423,0,0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,
        3020,355,1,0,0,0,3021,3023,5,289,0,0,3022,3021,1,0,0,0,3022,3023,
        1,0,0,0,3023,3025,1,0,0,0,3024,3026,5,327,0,0,3025,3024,1,0,0,0,
        3025,3026,1,0,0,0,3026,3028,1,0,0,0,3027,3029,5,261,0,0,3028,3027,
        1,0,0,0,3028,3029,1,0,0,0,3029,3032,1,0,0,0,3030,3033,3,358,179,
        0,3031,3033,3,360,180,0,3032,3030,1,0,0,0,3032,3031,1,0,0,0,3033,
        357,1,0,0,0,3034,3040,3,1276,638,0,3035,3037,5,338,0,0,3036,3035,
        1,0,0,0,3036,3037,1,0,0,0,3037,3038,1,0,0,0,3038,3039,5,320,0,0,
        3039,3041,5,352,0,0,3040,3036,1,0,0,0,3040,3041,1,0,0,0,3041,359,
        1,0,0,0,3042,3043,5,360,0,0,3043,3044,3,1276,638,0,3044,361,1,0,
        0,0,3045,3046,5,320,0,0,3046,3048,5,233,0,0,3047,3049,5,261,0,0,
        3048,3047,1,0,0,0,3048,3049,1,0,0,0,3049,3053,1,0,0,0,3050,3054,
        3,1276,638,0,3051,3054,3,366,183,0,3052,3054,3,364,182,0,3053,3050,
        1,0,0,0,3053,3051,1,0,0,0,3053,3052,1,0,0,0,3054,363,1,0,0,0,3055,
        3056,5,360,0,0,3056,3057,3,1276,638,0,3057,365,1,0,0,0,3058,3059,
        5,320,0,0,3059,3060,5,352,0,0,3060,367,1,0,0,0,3061,3063,7,27,0,
        0,3062,3064,5,261,0,0,3063,3062,1,0,0,0,3063,3064,1,0,0,0,3064,3065,
        1,0,0,0,3065,3066,3,526,263,0,3066,369,1,0,0,0,3067,3069,5,414,0,
        0,3068,3070,5,338,0,0,3069,3068,1,0,0,0,3069,3070,1,0,0,0,3070,3073,
        1,0,0,0,3071,3074,5,215,0,0,3072,3074,3,1230,615,0,3073,3071,1,0,
        0,0,3073,3072,1,0,0,0,3074,371,1,0,0,0,3075,3077,5,450,0,0,3076,
        3078,5,261,0,0,3077,3076,1,0,0,0,3077,3078,1,0,0,0,3078,3079,1,0,
        0,0,3079,3080,7,8,0,0,3080,3082,5,439,0,0,3081,3083,5,65,0,0,3082,
        3081,1,0,0,0,3082,3083,1,0,0,0,3083,373,1,0,0,0,3084,3086,5,460,
        0,0,3085,3087,5,261,0,0,3086,3085,1,0,0,0,3086,3087,1,0,0,0,3087,
        3088,1,0,0,0,3088,3089,3,1176,588,0,3089,375,1,0,0,0,3090,3091,5,
        476,0,0,3091,3098,3,1176,588,0,3092,3094,5,542,0,0,3093,3092,1,0,
        0,0,3093,3094,1,0,0,0,3094,3095,1,0,0,0,3095,3097,3,1176,588,0,3096,
        3093,1,0,0,0,3097,3100,1,0,0,0,3098,3096,1,0,0,0,3098,3099,1,0,0,
        0,3099,3112,1,0,0,0,3100,3098,1,0,0,0,3101,3102,5,516,0,0,3102,3109,
        3,1230,615,0,3103,3105,5,542,0,0,3104,3103,1,0,0,0,3104,3105,1,0,
        0,0,3105,3106,1,0,0,0,3106,3108,3,1230,615,0,3107,3104,1,0,0,0,3108,
        3111,1,0,0,0,3109,3107,1,0,0,0,3109,3110,1,0,0,0,3110,3113,1,0,0,
        0,3111,3109,1,0,0,0,3112,3101,1,0,0,0,3112,3113,1,0,0,0,3113,377,
        1,0,0,0,3114,3116,5,509,0,0,3115,3117,5,261,0,0,3116,3115,1,0,0,
        0,3116,3117,1,0,0,0,3117,3125,1,0,0,0,3118,3126,3,380,190,0,3119,
        3126,3,382,191,0,3120,3126,3,384,192,0,3121,3126,3,386,193,0,3122,
        3126,3,388,194,0,3123,3126,3,392,196,0,3124,3126,3,394,197,0,3125,
        3118,1,0,0,0,3125,3119,1,0,0,0,3125,3120,1,0,0,0,3125,3121,1,0,0,
        0,3125,3122,1,0,0,0,3125,3123,1,0,0,0,3125,3124,1,0,0,0,3126,379,
        1,0,0,0,3127,3128,5,407,0,0,3128,3131,5,235,0,0,3129,3131,5,422,
        0,0,3130,3127,1,0,0,0,3130,3129,1,0,0,0,3131,381,1,0,0,0,3132,3133,
        5,352,0,0,3133,3136,5,235,0,0,3134,3136,5,357,0,0,3135,3132,1,0,
        0,0,3135,3134,1,0,0,0,3136,383,1,0,0,0,3137,3138,5,100,0,0,3138,
        3141,5,235,0,0,3139,3141,5,61,0,0,3140,3137,1,0,0,0,3140,3139,1,
        0,0,0,3141,3144,1,0,0,0,3142,3145,5,215,0,0,3143,3145,3,1230,615,
        0,3144,3142,1,0,0,0,3144,3143,1,0,0,0,3145,385,1,0,0,0,3146,3147,
        7,35,0,0,3147,387,1,0,0,0,3148,3149,5,100,0,0,3149,3152,5,217,0,
        0,3150,3152,5,60,0,0,3151,3148,1,0,0,0,3151,3150,1,0,0,0,3152,3155,
        1,0,0,0,3153,3156,5,215,0,0,3154,3156,3,1230,615,0,3155,3153,1,0,
        0,0,3155,3154,1,0,0,0,3156,389,1,0,0,0,3157,3159,5,517,0,0,3158,
        3160,5,261,0,0,3159,3158,1,0,0,0,3159,3160,1,0,0,0,3160,3162,1,0,
        0,0,3161,3157,1,0,0,0,3161,3162,1,0,0,0,3162,3163,1,0,0,0,3163,3164,
        7,28,0,0,3164,391,1,0,0,0,3165,3166,5,352,0,0,3166,3169,5,217,0,
        0,3167,3169,5,356,0,0,3168,3165,1,0,0,0,3168,3167,1,0,0,0,3169,393,
        1,0,0,0,3170,3171,5,407,0,0,3171,3174,5,217,0,0,3172,3174,5,421,
        0,0,3173,3170,1,0,0,0,3173,3172,1,0,0,0,3174,395,1,0,0,0,3175,3177,
        5,520,0,0,3176,3178,5,261,0,0,3177,3176,1,0,0,0,3177,3178,1,0,0,
        0,3178,3179,1,0,0,0,3179,3180,3,482,241,0,3180,397,1,0,0,0,3181,
        3182,5,375,0,0,3182,3183,5,431,0,0,3183,3187,5,550,0,0,3184,3186,
        3,400,200,0,3185,3184,1,0,0,0,3186,3189,1,0,0,0,3187,3185,1,0,0,
        0,3187,3188,1,0,0,0,3188,399,1,0,0,0,3189,3187,1,0,0,0,3190,3193,
        3,402,201,0,3191,3193,3,404,202,0,3192,3190,1,0,0,0,3192,3191,1,
        0,0,0,3193,401,1,0,0,0,3194,3195,5,275,0,0,3195,3196,3,1244,622,
        0,3196,3198,5,206,0,0,3197,3199,3,406,203,0,3198,3197,1,0,0,0,3198,
        3199,1,0,0,0,3199,3201,1,0,0,0,3200,3202,3,416,208,0,3201,3200,1,
        0,0,0,3201,3202,1,0,0,0,3202,403,1,0,0,0,3203,3204,5,274,0,0,3204,
        3205,3,1244,622,0,3205,3207,5,245,0,0,3206,3208,3,434,217,0,3207,
        3206,1,0,0,0,3207,3208,1,0,0,0,3208,3210,1,0,0,0,3209,3211,3,432,
        216,0,3210,3209,1,0,0,0,3210,3211,1,0,0,0,3211,3216,1,0,0,0,3212,
        3215,3,408,204,0,3213,3215,3,418,209,0,3214,3212,1,0,0,0,3214,3213,
        1,0,0,0,3215,3218,1,0,0,0,3216,3214,1,0,0,0,3216,3217,1,0,0,0,3217,
        405,1,0,0,0,3218,3216,1,0,0,0,3219,3225,5,32,0,0,3220,3222,5,446,
        0,0,3221,3223,5,261,0,0,3222,3221,1,0,0,0,3222,3223,1,0,0,0,3223,
        3224,1,0,0,0,3224,3226,7,36,0,0,3225,3220,1,0,0,0,3225,3226,1,0,
        0,0,3226,407,1,0,0,0,3227,3229,5,32,0,0,3228,3230,3,410,205,0,3229,
        3228,1,0,0,0,3229,3230,1,0,0,0,3230,3236,1,0,0,0,3231,3233,5,282,
        0,0,3232,3234,5,261,0,0,3233,3232,1,0,0,0,3233,3234,1,0,0,0,3234,
        3235,1,0,0,0,3235,3237,7,37,0,0,3236,3231,1,0,0,0,3236,3237,1,0,
        0,0,3237,3239,1,0,0,0,3238,3240,3,412,206,0,3239,3238,1,0,0,0,3239,
        3240,1,0,0,0,3240,3242,1,0,0,0,3241,3243,3,414,207,0,3242,3241,1,
        0,0,0,3242,3243,1,0,0,0,3243,409,1,0,0,0,3244,3245,5,224,0,0,3245,
        3246,5,261,0,0,3246,3247,3,482,241,0,3247,411,1,0,0,0,3248,3250,
        5,283,0,0,3249,3251,5,261,0,0,3250,3249,1,0,0,0,3250,3251,1,0,0,
        0,3251,3252,1,0,0,0,3252,3253,3,482,241,0,3253,413,1,0,0,0,3254,
        3256,5,500,0,0,3255,3257,5,261,0,0,3256,3255,1,0,0,0,3256,3257,1,
        0,0,0,3257,3258,1,0,0,0,3258,3259,3,482,241,0,3259,415,1,0,0,0,3260,
        3261,5,189,0,0,3261,3263,3,1254,627,0,3262,3264,3,420,210,0,3263,
        3262,1,0,0,0,3263,3264,1,0,0,0,3264,417,1,0,0,0,3265,3266,5,189,
        0,0,3266,3268,3,1254,627,0,3267,3269,3,420,210,0,3268,3267,1,0,0,
        0,3268,3269,1,0,0,0,3269,3271,1,0,0,0,3270,3272,3,428,214,0,3271,
        3270,1,0,0,0,3271,3272,1,0,0,0,3272,3274,1,0,0,0,3273,3275,3,424,
        212,0,3274,3273,1,0,0,0,3274,3275,1,0,0,0,3275,3277,1,0,0,0,3276,
        3278,3,422,211,0,3277,3276,1,0,0,0,3277,3278,1,0,0,0,3278,419,1,
        0,0,0,3279,3280,5,218,0,0,3280,3281,3,482,241,0,3281,421,1,0,0,0,
        3282,3283,5,228,0,0,3283,3284,3,1230,615,0,3284,423,1,0,0,0,3285,
        3287,5,519,0,0,3286,3288,3,426,213,0,3287,3286,1,0,0,0,3288,3289,
        1,0,0,0,3289,3287,1,0,0,0,3289,3290,1,0,0,0,3290,425,1,0,0,0,3291,
        3294,3,1230,615,0,3292,3294,3,1236,618,0,3293,3291,1,0,0,0,3293,
        3292,1,0,0,0,3294,427,1,0,0,0,3295,3297,5,527,0,0,3296,3298,3,430,
        215,0,3297,3296,1,0,0,0,3298,3299,1,0,0,0,3299,3297,1,0,0,0,3299,
        3300,1,0,0,0,3300,429,1,0,0,0,3301,3304,3,1246,623,0,3302,3304,3,
        1236,618,0,3303,3301,1,0,0,0,3303,3302,1,0,0,0,3304,431,1,0,0,0,
        3305,3307,5,261,0,0,3306,3305,1,0,0,0,3306,3307,1,0,0,0,3307,3308,
        1,0,0,0,3308,3309,5,81,0,0,3309,433,1,0,0,0,3310,3312,5,261,0,0,
        3311,3310,1,0,0,0,3311,3312,1,0,0,0,3312,3313,1,0,0,0,3313,3314,
        5,229,0,0,3314,435,1,0,0,0,3315,3324,3,488,244,0,3316,3324,3,498,
        249,0,3317,3324,3,500,250,0,3318,3324,3,502,251,0,3319,3320,3,438,
        219,0,3320,3321,7,1,0,0,3321,3324,1,0,0,0,3322,3324,3,450,225,0,
        3323,3315,1,0,0,0,3323,3316,1,0,0,0,3323,3317,1,0,0,0,3323,3318,
        1,0,0,0,3323,3319,1,0,0,0,3323,3322,1,0,0,0,3324,437,1,0,0,0,3325,
        3326,5,105,0,0,3326,3335,3,444,222,0,3327,3332,3,458,229,0,3328,
        3332,3,460,230,0,3329,3332,3,448,224,0,3330,3332,5,477,0,0,3331,
        3327,1,0,0,0,3331,3328,1,0,0,0,3331,3329,1,0,0,0,3331,3330,1,0,0,
        0,3332,3334,1,0,0,0,3333,3331,1,0,0,0,3334,3337,1,0,0,0,3335,3333,
        1,0,0,0,3335,3336,1,0,0,0,3336,3341,1,0,0,0,3337,3335,1,0,0,0,3338,
        3339,3,440,220,0,3339,3340,3,442,221,0,3340,3342,1,0,0,0,3341,3338,
        1,0,0,0,3341,3342,1,0,0,0,3342,439,1,0,0,0,3343,3344,5,145,0,0,3344,
        3345,5,832,0,0,3345,441,1,0,0,0,3346,3347,5,265,0,0,3347,3348,5,
        832,0,0,3348,3349,5,25,0,0,3349,3351,5,832,0,0,3350,3352,7,1,0,0,
        3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,443,1,0,0,0,3353,3357,3,
        482,241,0,3354,3357,3,480,240,0,3355,3357,3,486,243,0,3356,3353,
        1,0,0,0,3356,3354,1,0,0,0,3356,3355,1,0,0,0,3357,3360,1,0,0,0,3358,
        3359,7,38,0,0,3359,3361,3,446,223,0,3360,3358,1,0,0,0,3360,3361,
        1,0,0,0,3361,445,1,0,0,0,3362,3365,3,482,241,0,3363,3365,3,480,240,
        0,3364,3362,1,0,0,0,3364,3363,1,0,0,0,3365,447,1,0,0,0,3366,3367,
        5,406,0,0,3367,3371,3,456,228,0,3368,3370,3,456,228,0,3369,3368,
        1,0,0,0,3370,3373,1,0,0,0,3371,3369,1,0,0,0,3371,3372,1,0,0,0,3372,
        449,1,0,0,0,3373,3371,1,0,0,0,3374,3379,3,452,226,0,3375,3378,3,
        438,219,0,3376,3378,3,474,237,0,3377,3375,1,0,0,0,3377,3376,1,0,
        0,0,3378,3381,1,0,0,0,3379,3377,1,0,0,0,3379,3380,1,0,0,0,3380,3383,
        1,0,0,0,3381,3379,1,0,0,0,3382,3384,3,454,227,0,3383,3382,1,0,0,
        0,3383,3384,1,0,0,0,3384,451,1,0,0,0,3385,3393,5,405,0,0,3386,3388,
        5,578,0,0,3387,3386,1,0,0,0,3388,3391,1,0,0,0,3389,3387,1,0,0,0,
        3389,3390,1,0,0,0,3390,3392,1,0,0,0,3391,3389,1,0,0,0,3392,3394,
        3,456,228,0,3393,3389,1,0,0,0,3394,3395,1,0,0,0,3395,3393,1,0,0,
        0,3395,3396,1,0,0,0,3396,3397,1,0,0,0,3397,3398,5,551,0,0,3398,453,
        1,0,0,0,3399,3400,5,405,0,0,3400,3401,5,336,0,0,3401,3402,5,551,
        0,0,3402,455,1,0,0,0,3403,3404,3,462,231,0,3404,3405,5,52,0,0,3405,
        3406,3,464,232,0,3406,457,1,0,0,0,3407,3411,7,38,0,0,3408,3410,5,
        578,0,0,3409,3408,1,0,0,0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3411,
        3412,1,0,0,0,3412,3416,1,0,0,0,3413,3411,1,0,0,0,3414,3417,3,482,
        241,0,3415,3417,3,480,240,0,3416,3414,1,0,0,0,3416,3415,1,0,0,0,
        3417,459,1,0,0,0,3418,3422,5,338,0,0,3419,3421,5,578,0,0,3420,3419,
        1,0,0,0,3421,3424,1,0,0,0,3422,3420,1,0,0,0,3422,3423,1,0,0,0,3423,
        3427,1,0,0,0,3424,3422,1,0,0,0,3425,3428,3,482,241,0,3426,3428,3,
        480,240,0,3427,3425,1,0,0,0,3427,3426,1,0,0,0,3428,461,1,0,0,0,3429,
        3434,3,472,236,0,3430,3434,3,482,241,0,3431,3434,3,480,240,0,3432,
        3434,3,478,239,0,3433,3429,1,0,0,0,3433,3430,1,0,0,0,3433,3431,1,
        0,0,0,3433,3432,1,0,0,0,3434,463,1,0,0,0,3435,3440,3,472,236,0,3436,
        3440,3,482,241,0,3437,3440,3,480,240,0,3438,3440,3,478,239,0,3439,
        3435,1,0,0,0,3439,3436,1,0,0,0,3439,3437,1,0,0,0,3439,3438,1,0,0,
        0,3440,465,1,0,0,0,3441,3443,5,599,0,0,3442,3444,5,551,0,0,3443,
        3442,1,0,0,0,3443,3444,1,0,0,0,3444,467,1,0,0,0,3445,3447,7,39,0,
        0,3446,3448,5,551,0,0,3447,3446,1,0,0,0,3447,3448,1,0,0,0,3448,469,
        1,0,0,0,3449,3450,5,500,0,0,3450,3452,3,482,241,0,3451,3453,5,551,
        0,0,3452,3451,1,0,0,0,3452,3453,1,0,0,0,3453,471,1,0,0,0,3454,3456,
        5,846,0,0,3455,3457,3,474,237,0,3456,3455,1,0,0,0,3456,3457,1,0,
        0,0,3457,3458,1,0,0,0,3458,3459,5,846,0,0,3459,473,1,0,0,0,3460,
        3463,3,478,239,0,3461,3463,5,578,0,0,3462,3460,1,0,0,0,3462,3461,
        1,0,0,0,3463,3464,1,0,0,0,3464,3462,1,0,0,0,3464,3465,1,0,0,0,3465,
        475,1,0,0,0,3466,3576,3,478,239,0,3467,3576,5,105,0,0,3468,3576,
        5,405,0,0,3469,3576,5,578,0,0,3470,3576,5,111,0,0,3471,3576,5,436,
        0,0,3472,3576,5,221,0,0,3473,3576,5,218,0,0,3474,3576,5,339,0,0,
        3475,3576,5,70,0,0,3476,3576,5,352,0,0,3477,3576,5,521,0,0,3478,
        3576,5,442,0,0,3479,3576,5,433,0,0,3480,3576,5,504,0,0,3481,3576,
        5,108,0,0,3482,3576,5,342,0,0,3483,3576,5,527,0,0,3484,3576,5,362,
        0,0,3485,3576,5,320,0,0,3486,3576,5,520,0,0,3487,3576,5,401,0,0,
        3488,3576,5,563,0,0,3489,3576,5,214,0,0,3490,3576,5,49,0,0,3491,
        3576,5,517,0,0,3492,3576,5,575,0,0,3493,3576,5,341,0,0,3494,3576,
        5,600,0,0,3495,3576,5,247,0,0,3496,3576,5,325,0,0,3497,3576,5,73,
        0,0,3498,3576,5,246,0,0,3499,3576,5,509,0,0,3500,3576,5,269,0,0,
        3501,3576,5,42,0,0,3502,3576,5,216,0,0,3503,3576,5,469,0,0,3504,
        3576,5,25,0,0,3505,3576,5,114,0,0,3506,3576,5,428,0,0,3507,3576,
        5,501,0,0,3508,3576,5,525,0,0,3509,3576,5,476,0,0,3510,3576,5,384,
        0,0,3511,3576,5,289,0,0,3512,3576,5,324,0,0,3513,3576,5,277,0,0,
        3514,3576,5,423,0,0,3515,3576,5,492,0,0,3516,3576,5,159,0,0,3517,
        3576,5,163,0,0,3518,3576,5,67,0,0,3519,3576,3,1172,586,0,3520,3576,
        5,594,0,0,3521,3576,5,261,0,0,3522,3576,5,241,0,0,3523,3576,5,296,
        0,0,3524,3576,5,482,0,0,3525,3576,5,203,0,0,3526,3576,5,307,0,0,
        3527,3576,5,304,0,0,3528,3576,5,233,0,0,3529,3576,5,229,0,0,3530,
        3576,5,519,0,0,3531,3576,5,117,0,0,3532,3576,5,396,0,0,3533,3576,
        5,397,0,0,3534,3576,5,195,0,0,3535,3576,5,306,0,0,3536,3576,5,150,
        0,0,3537,3576,5,55,0,0,3538,3576,5,152,0,0,3539,3576,5,257,0,0,3540,
        3576,5,141,0,0,3541,3576,5,305,0,0,3542,3576,5,275,0,0,3543,3576,
        5,273,0,0,3544,3576,5,285,0,0,3545,3576,5,566,0,0,3546,3576,5,140,
        0,0,3547,3576,5,452,0,0,3548,3576,5,450,0,0,3549,3576,5,76,0,0,3550,
        3576,5,83,0,0,3551,3576,5,64,0,0,3552,3576,5,515,0,0,3553,3576,5,
        368,0,0,3554,3576,5,354,0,0,3555,3576,5,567,0,0,3556,3576,5,568,
        0,0,3557,3576,5,132,0,0,3558,3576,5,512,0,0,3559,3576,5,59,0,0,3560,
        3576,5,399,0,0,3561,3576,5,51,0,0,3562,3576,5,548,0,0,3563,3576,
        5,223,0,0,3564,3576,5,531,0,0,3565,3576,5,206,0,0,3566,3576,5,46,
        0,0,3567,3576,5,358,0,0,3568,3576,5,345,0,0,3569,3576,5,434,0,0,
        3570,3576,5,465,0,0,3571,3576,5,63,0,0,3572,3576,5,256,0,0,3573,
        3576,5,134,0,0,3574,3576,5,410,0,0,3575,3466,1,0,0,0,3575,3467,1,
        0,0,0,3575,3468,1,0,0,0,3575,3469,1,0,0,0,3575,3470,1,0,0,0,3575,
        3471,1,0,0,0,3575,3472,1,0,0,0,3575,3473,1,0,0,0,3575,3474,1,0,0,
        0,3575,3475,1,0,0,0,3575,3476,1,0,0,0,3575,3477,1,0,0,0,3575,3478,
        1,0,0,0,3575,3479,1,0,0,0,3575,3480,1,0,0,0,3575,3481,1,0,0,0,3575,
        3482,1,0,0,0,3575,3483,1,0,0,0,3575,3484,1,0,0,0,3575,3485,1,0,0,
        0,3575,3486,1,0,0,0,3575,3487,1,0,0,0,3575,3488,1,0,0,0,3575,3489,
        1,0,0,0,3575,3490,1,0,0,0,3575,3491,1,0,0,0,3575,3492,1,0,0,0,3575,
        3493,1,0,0,0,3575,3494,1,0,0,0,3575,3495,1,0,0,0,3575,3496,1,0,0,
        0,3575,3497,1,0,0,0,3575,3498,1,0,0,0,3575,3499,1,0,0,0,3575,3500,
        1,0,0,0,3575,3501,1,0,0,0,3575,3502,1,0,0,0,3575,3503,1,0,0,0,3575,
        3504,1,0,0,0,3575,3505,1,0,0,0,3575,3506,1,0,0,0,3575,3507,1,0,0,
        0,3575,3508,1,0,0,0,3575,3509,1,0,0,0,3575,3510,1,0,0,0,3575,3511,
        1,0,0,0,3575,3512,1,0,0,0,3575,3513,1,0,0,0,3575,3514,1,0,0,0,3575,
        3515,1,0,0,0,3575,3516,1,0,0,0,3575,3517,1,0,0,0,3575,3518,1,0,0,
        0,3575,3519,1,0,0,0,3575,3520,1,0,0,0,3575,3521,1,0,0,0,3575,3522,
        1,0,0,0,3575,3523,1,0,0,0,3575,3524,1,0,0,0,3575,3525,1,0,0,0,3575,
        3526,1,0,0,0,3575,3527,1,0,0,0,3575,3528,1,0,0,0,3575,3529,1,0,0,
        0,3575,3530,1,0,0,0,3575,3531,1,0,0,0,3575,3532,1,0,0,0,3575,3533,
        1,0,0,0,3575,3534,1,0,0,0,3575,3535,1,0,0,0,3575,3536,1,0,0,0,3575,
        3537,1,0,0,0,3575,3538,1,0,0,0,3575,3539,1,0,0,0,3575,3540,1,0,0,
        0,3575,3541,1,0,0,0,3575,3542,1,0,0,0,3575,3543,1,0,0,0,3575,3544,
        1,0,0,0,3575,3545,1,0,0,0,3575,3546,1,0,0,0,3575,3547,1,0,0,0,3575,
        3548,1,0,0,0,3575,3549,1,0,0,0,3575,3550,1,0,0,0,3575,3551,1,0,0,
        0,3575,3552,1,0,0,0,3575,3553,1,0,0,0,3575,3554,1,0,0,0,3575,3555,
        1,0,0,0,3575,3556,1,0,0,0,3575,3557,1,0,0,0,3575,3558,1,0,0,0,3575,
        3559,1,0,0,0,3575,3560,1,0,0,0,3575,3561,1,0,0,0,3575,3562,1,0,0,
        0,3575,3563,1,0,0,0,3575,3564,1,0,0,0,3575,3565,1,0,0,0,3575,3566,
        1,0,0,0,3575,3567,1,0,0,0,3575,3568,1,0,0,0,3575,3569,1,0,0,0,3575,
        3570,1,0,0,0,3575,3571,1,0,0,0,3575,3572,1,0,0,0,3575,3573,1,0,0,
        0,3575,3574,1,0,0,0,3576,3577,1,0,0,0,3577,3575,1,0,0,0,3577,3578,
        1,0,0,0,3578,477,1,0,0,0,3579,3602,3,480,240,0,3580,3602,3,482,241,
        0,3581,3602,3,486,243,0,3582,3602,5,490,0,0,3583,3602,5,539,0,0,
        3584,3602,5,541,0,0,3585,3602,5,551,0,0,3586,3602,5,234,0,0,3587,
        3602,5,558,0,0,3588,3602,5,565,0,0,3589,3602,5,415,0,0,3590,3602,
        5,335,0,0,3591,3602,5,420,0,0,3592,3602,5,99,0,0,3593,3602,5,79,
        0,0,3594,3602,5,552,0,0,3595,3602,5,427,0,0,3596,3602,5,393,0,0,
        3597,3602,5,333,0,0,3598,3602,5,559,0,0,3599,3602,5,341,0,0,3600,
        3602,5,100,0,0,3601,3579,1,0,0,0,3601,3580,1,0,0,0,3601,3581,1,0,
        0,0,3601,3582,1,0,0,0,3601,3583,1,0,0,0,3601,3584,1,0,0,0,3601,3585,
        1,0,0,0,3601,3586,1,0,0,0,3601,3587,1,0,0,0,3601,3588,1,0,0,0,3601,
        3589,1,0,0,0,3601,3590,1,0,0,0,3601,3591,1,0,0,0,3601,3592,1,0,0,
        0,3601,3593,1,0,0,0,3601,3594,1,0,0,0,3601,3595,1,0,0,0,3601,3596,
        1,0,0,0,3601,3597,1,0,0,0,3601,3598,1,0,0,0,3601,3599,1,0,0,0,3601,
        3600,1,0,0,0,3602,3603,1,0,0,0,3603,3601,1,0,0,0,3603,3604,1,0,0,
        0,3604,479,1,0,0,0,3605,3608,5,832,0,0,3606,3608,3,1288,644,0,3607,
        3605,1,0,0,0,3607,3606,1,0,0,0,3608,481,1,0,0,0,3609,3617,5,569,
        0,0,3610,3617,5,574,0,0,3611,3617,5,573,0,0,3612,3617,3,484,242,
        0,3613,3617,5,570,0,0,3614,3617,5,572,0,0,3615,3617,5,571,0,0,3616,
        3609,1,0,0,0,3616,3610,1,0,0,0,3616,3611,1,0,0,0,3616,3612,1,0,0,
        0,3616,3613,1,0,0,0,3616,3614,1,0,0,0,3616,3615,1,0,0,0,3617,483,
        1,0,0,0,3618,3620,5,321,0,0,3619,3621,5,549,0,0,3620,3619,1,0,0,
        0,3620,3621,1,0,0,0,3621,3634,1,0,0,0,3622,3624,3,480,240,0,3623,
        3622,1,0,0,0,3624,3627,1,0,0,0,3625,3623,1,0,0,0,3625,3626,1,0,0,
        0,3626,3635,1,0,0,0,3627,3625,1,0,0,0,3628,3630,5,267,0,0,3629,3628,
        1,0,0,0,3630,3633,1,0,0,0,3631,3629,1,0,0,0,3631,3632,1,0,0,0,3632,
        3635,1,0,0,0,3633,3631,1,0,0,0,3634,3625,1,0,0,0,3634,3631,1,0,0,
        0,3635,3637,1,0,0,0,3636,3638,5,549,0,0,3637,3636,1,0,0,0,3637,3638,
        1,0,0,0,3638,3653,1,0,0,0,3639,3653,5,37,0,0,3640,3642,3,480,240,
        0,3641,3640,1,0,0,0,3642,3643,1,0,0,0,3643,3641,1,0,0,0,3643,3644,
        1,0,0,0,3644,3653,1,0,0,0,3645,3647,5,267,0,0,3646,3645,1,0,0,0,
        3647,3648,1,0,0,0,3648,3646,1,0,0,0,3648,3649,1,0,0,0,3649,3653,
        1,0,0,0,3650,3651,5,321,0,0,3651,3653,5,569,0,0,3652,3618,1,0,0,
        0,3652,3639,1,0,0,0,3652,3641,1,0,0,0,3652,3646,1,0,0,0,3652,3650,
        1,0,0,0,3653,485,1,0,0,0,3654,3655,5,600,0,0,3655,487,1,0,0,0,3656,
        3659,7,40,0,0,3657,3660,5,214,0,0,3658,3660,3,1230,615,0,3659,3657,
        1,0,0,0,3659,3658,1,0,0,0,3659,3660,1,0,0,0,3660,3686,1,0,0,0,3661,
        3685,3,536,268,0,3662,3685,3,514,257,0,3663,3685,3,510,255,0,3664,
        3685,3,512,256,0,3665,3685,3,548,274,0,3666,3685,3,544,272,0,3667,
        3685,3,524,262,0,3668,3685,3,508,254,0,3669,3685,3,546,273,0,3670,
        3685,3,552,276,0,3671,3685,3,550,275,0,3672,3685,3,554,277,0,3673,
        3685,3,532,266,0,3674,3685,3,518,259,0,3675,3685,3,540,270,0,3676,
        3685,3,542,271,0,3677,3685,3,516,258,0,3678,3685,3,506,253,0,3679,
        3685,3,562,281,0,3680,3685,3,504,252,0,3681,3685,3,534,267,0,3682,
        3685,3,496,248,0,3683,3685,3,490,245,0,3684,3661,1,0,0,0,3684,3662,
        1,0,0,0,3684,3663,1,0,0,0,3684,3664,1,0,0,0,3684,3665,1,0,0,0,3684,
        3666,1,0,0,0,3684,3667,1,0,0,0,3684,3668,1,0,0,0,3684,3669,1,0,0,
        0,3684,3670,1,0,0,0,3684,3671,1,0,0,0,3684,3672,1,0,0,0,3684,3673,
        1,0,0,0,3684,3674,1,0,0,0,3684,3675,1,0,0,0,3684,3676,1,0,0,0,3684,
        3677,1,0,0,0,3684,3678,1,0,0,0,3684,3679,1,0,0,0,3684,3680,1,0,0,
        0,3684,3681,1,0,0,0,3684,3682,1,0,0,0,3684,3683,1,0,0,0,3685,3688,
        1,0,0,0,3686,3684,1,0,0,0,3686,3687,1,0,0,0,3687,3689,1,0,0,0,3688,
        3686,1,0,0,0,3689,3690,7,1,0,0,3690,489,1,0,0,0,3691,3692,5,803,
        0,0,3692,3694,5,509,0,0,3693,3695,5,261,0,0,3694,3693,1,0,0,0,3694,
        3695,1,0,0,0,3695,3696,1,0,0,0,3696,3697,3,492,246,0,3697,491,1,
        0,0,0,3698,3704,5,45,0,0,3699,3704,5,832,0,0,3700,3701,5,832,0,0,
        3701,3704,5,522,0,0,3702,3704,5,257,0,0,3703,3698,1,0,0,0,3703,3699,
        1,0,0,0,3703,3700,1,0,0,0,3703,3702,1,0,0,0,3704,3706,1,0,0,0,3705,
        3707,3,494,247,0,3706,3705,1,0,0,0,3706,3707,1,0,0,0,3707,493,1,
        0,0,0,3708,3711,5,558,0,0,3709,3712,3,1276,638,0,3710,3712,5,832,
        0,0,3711,3709,1,0,0,0,3711,3710,1,0,0,0,3712,3713,1,0,0,0,3713,3714,
        5,565,0,0,3714,495,1,0,0,0,3715,3716,5,65,0,0,3716,3717,5,509,0,
        0,3717,3719,5,261,0,0,3718,3715,1,0,0,0,3718,3719,1,0,0,0,3719,3720,
        1,0,0,0,3720,3721,5,308,0,0,3721,497,1,0,0,0,3722,3723,5,570,0,0,
        3723,3724,3,1230,615,0,3724,3725,3,538,269,0,3725,3726,5,550,0,0,
        3726,499,1,0,0,0,3727,3728,5,572,0,0,3728,3729,3,1228,614,0,3729,
        3730,3,554,277,0,3730,3731,5,550,0,0,3731,501,1,0,0,0,3732,3734,
        5,581,0,0,3733,3732,1,0,0,0,3734,3735,1,0,0,0,3735,3733,1,0,0,0,
        3735,3736,1,0,0,0,3736,3738,1,0,0,0,3737,3739,5,550,0,0,3738,3737,
        1,0,0,0,3738,3739,1,0,0,0,3739,503,1,0,0,0,3740,3741,5,9,0,0,3741,
        505,1,0,0,0,3742,3744,5,47,0,0,3743,3745,5,525,0,0,3744,3743,1,0,
        0,0,3744,3745,1,0,0,0,3745,3746,1,0,0,0,3746,3747,7,41,0,0,3747,
        507,1,0,0,0,3748,3749,7,42,0,0,3749,509,1,0,0,0,3750,3752,5,261,
        0,0,3751,3750,1,0,0,0,3751,3752,1,0,0,0,3752,3753,1,0,0,0,3753,3756,
        5,209,0,0,3754,3755,5,52,0,0,3755,3757,3,482,241,0,3756,3754,1,0,
        0,0,3756,3757,1,0,0,0,3757,511,1,0,0,0,3758,3760,5,261,0,0,3759,
        3758,1,0,0,0,3759,3760,1,0,0,0,3760,3761,1,0,0,0,3761,3762,5,229,
        0,0,3762,513,1,0,0,0,3763,3764,7,43,0,0,3764,515,1,0,0,0,3765,3767,
        7,29,0,0,3766,3768,5,423,0,0,3767,3766,1,0,0,0,3767,3768,1,0,0,0,
        3768,517,1,0,0,0,3769,3770,5,333,0,0,3770,3772,3,1276,638,0,3771,
        3773,3,520,260,0,3772,3771,1,0,0,0,3772,3773,1,0,0,0,3773,3775,1,
        0,0,0,3774,3776,5,499,0,0,3775,3774,1,0,0,0,3775,3776,1,0,0,0,3776,
        3782,1,0,0,0,3777,3779,5,138,0,0,3778,3780,5,338,0,0,3779,3778,1,
        0,0,0,3779,3780,1,0,0,0,3780,3781,1,0,0,0,3781,3783,3,1192,596,0,
        3782,3777,1,0,0,0,3782,3783,1,0,0,0,3783,3787,1,0,0,0,3784,3786,
        3,522,261,0,3785,3784,1,0,0,0,3786,3789,1,0,0,0,3787,3785,1,0,0,
        0,3787,3788,1,0,0,0,3788,3802,1,0,0,0,3789,3787,1,0,0,0,3790,3792,
        5,248,0,0,3791,3793,5,52,0,0,3792,3791,1,0,0,0,3792,3793,1,0,0,0,
        3793,3795,1,0,0,0,3794,3796,5,294,0,0,3795,3794,1,0,0,0,3795,3796,
        1,0,0,0,3796,3798,1,0,0,0,3797,3799,3,1240,620,0,3798,3797,1,0,0,
        0,3799,3800,1,0,0,0,3800,3798,1,0,0,0,3800,3801,1,0,0,0,3801,3803,
        1,0,0,0,3802,3790,1,0,0,0,3802,3803,1,0,0,0,3803,519,1,0,0,0,3804,
        3805,5,501,0,0,3805,3806,3,1276,638,0,3806,521,1,0,0,0,3807,3809,
        7,44,0,0,3808,3810,5,269,0,0,3809,3808,1,0,0,0,3809,3810,1,0,0,0,
        3810,3812,1,0,0,0,3811,3813,5,261,0,0,3812,3811,1,0,0,0,3812,3813,
        1,0,0,0,3813,3815,1,0,0,0,3814,3816,3,1192,596,0,3815,3814,1,0,0,
        0,3816,3817,1,0,0,0,3817,3815,1,0,0,0,3817,3818,1,0,0,0,3818,523,
        1,0,0,0,3819,3821,7,27,0,0,3820,3822,5,261,0,0,3821,3820,1,0,0,0,
        3821,3822,1,0,0,0,3822,3823,1,0,0,0,3823,3824,3,526,263,0,3824,525,
        1,0,0,0,3825,3827,3,528,264,0,3826,3825,1,0,0,0,3827,3828,1,0,0,
        0,3828,3826,1,0,0,0,3828,3829,1,0,0,0,3829,3831,1,0,0,0,3830,3832,
        3,530,265,0,3831,3830,1,0,0,0,3831,3832,1,0,0,0,3832,3834,1,0,0,
        0,3833,3826,1,0,0,0,3834,3835,1,0,0,0,3835,3833,1,0,0,0,3835,3836,
        1,0,0,0,3836,527,1,0,0,0,3837,3856,5,548,0,0,3838,3856,5,832,0,0,
        3839,3856,5,574,0,0,3840,3856,5,576,0,0,3841,3856,5,566,0,0,3842,
        3856,5,542,0,0,3843,3856,5,551,0,0,3844,3856,5,541,0,0,3845,3856,
        5,539,0,0,3846,3856,5,540,0,0,3847,3856,5,563,0,0,3848,3856,5,559,
        0,0,3849,3856,5,556,0,0,3850,3856,5,560,0,0,3851,3856,3,1276,638,
        0,3852,3856,5,575,0,0,3853,3856,5,847,0,0,3854,3856,5,548,0,0,3855,
        3837,1,0,0,0,3855,3838,1,0,0,0,3855,3839,1,0,0,0,3855,3840,1,0,0,
        0,3855,3841,1,0,0,0,3855,3842,1,0,0,0,3855,3843,1,0,0,0,3855,3844,
        1,0,0,0,3855,3845,1,0,0,0,3855,3846,1,0,0,0,3855,3847,1,0,0,0,3855,
        3848,1,0,0,0,3855,3849,1,0,0,0,3855,3850,1,0,0,0,3855,3851,1,0,0,
        0,3855,3852,1,0,0,0,3855,3853,1,0,0,0,3855,3854,1,0,0,0,3856,529,
        1,0,0,0,3857,3858,5,558,0,0,3858,3859,3,1276,638,0,3859,3860,5,565,
        0,0,3860,531,1,0,0,0,3861,3863,5,388,0,0,3862,3861,1,0,0,0,3862,
        3863,1,0,0,0,3863,3865,1,0,0,0,3864,3866,5,52,0,0,3865,3864,1,0,
        0,0,3865,3866,1,0,0,0,3866,3867,1,0,0,0,3867,3868,7,45,0,0,3868,
        533,1,0,0,0,3869,3870,5,389,0,0,3870,3871,5,23,0,0,3871,535,1,0,
        0,0,3872,3873,5,393,0,0,3873,3874,3,1230,615,0,3874,537,1,0,0,0,
        3875,3876,5,404,0,0,3876,3879,3,1192,596,0,3877,3878,7,5,0,0,3878,
        3880,3,1192,596,0,3879,3877,1,0,0,0,3879,3880,1,0,0,0,3880,539,1,
        0,0,0,3881,3883,5,450,0,0,3882,3884,5,261,0,0,3883,3882,1,0,0,0,
        3883,3884,1,0,0,0,3884,3886,1,0,0,0,3885,3881,1,0,0,0,3885,3886,
        1,0,0,0,3886,3887,1,0,0,0,3887,3892,7,8,0,0,3888,3890,5,439,0,0,
        3889,3891,5,65,0,0,3890,3889,1,0,0,0,3890,3891,1,0,0,0,3891,3893,
        1,0,0,0,3892,3888,1,0,0,0,3892,3893,1,0,0,0,3893,541,1,0,0,0,3894,
        3896,7,46,0,0,3895,3897,7,47,0,0,3896,3895,1,0,0,0,3896,3897,1,0,
        0,0,3897,543,1,0,0,0,3898,3900,5,261,0,0,3899,3898,1,0,0,0,3899,
        3900,1,0,0,0,3900,3901,1,0,0,0,3901,3902,5,494,0,0,3902,545,1,0,
        0,0,3903,3905,5,509,0,0,3904,3906,5,261,0,0,3905,3904,1,0,0,0,3905,
        3906,1,0,0,0,3906,3907,1,0,0,0,3907,3908,7,48,0,0,3908,547,1,0,0,
        0,3909,3911,5,261,0,0,3910,3909,1,0,0,0,3910,3911,1,0,0,0,3911,3912,
        1,0,0,0,3912,3913,5,510,0,0,3913,549,1,0,0,0,3914,3916,5,517,0,0,
        3915,3917,5,261,0,0,3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,3919,
        1,0,0,0,3918,3914,1,0,0,0,3918,3919,1,0,0,0,3919,3954,1,0,0,0,3920,
        3922,5,45,0,0,3921,3923,7,49,0,0,3922,3921,1,0,0,0,3922,3923,1,0,
        0,0,3923,3955,1,0,0,0,3924,3955,5,46,0,0,3925,3955,5,83,0,0,3926,
        3955,5,84,0,0,3927,3955,5,85,0,0,3928,3955,5,86,0,0,3929,3955,5,
        87,0,0,3930,3955,5,88,0,0,3931,3955,5,89,0,0,3932,3955,5,90,0,0,
        3933,3955,5,91,0,0,3934,3955,5,92,0,0,3935,3955,5,93,0,0,3936,3955,
        5,94,0,0,3937,3955,5,101,0,0,3938,3955,5,114,0,0,3939,3955,5,147,
        0,0,3940,3955,5,148,0,0,3941,3955,5,152,0,0,3942,3955,5,200,0,0,
        3943,3955,5,225,0,0,3944,3955,5,247,0,0,3945,3955,5,264,0,0,3946,
        3955,5,296,0,0,3947,3955,5,315,0,0,3948,3955,5,350,0,0,3949,3955,
        5,361,0,0,3950,3955,5,369,0,0,3951,3955,5,385,0,0,3952,3955,5,485,
        0,0,3953,3955,3,490,245,0,3954,3920,1,0,0,0,3954,3924,1,0,0,0,3954,
        3925,1,0,0,0,3954,3926,1,0,0,0,3954,3927,1,0,0,0,3954,3928,1,0,0,
        0,3954,3929,1,0,0,0,3954,3930,1,0,0,0,3954,3931,1,0,0,0,3954,3932,
        1,0,0,0,3954,3933,1,0,0,0,3954,3934,1,0,0,0,3954,3935,1,0,0,0,3954,
        3936,1,0,0,0,3954,3937,1,0,0,0,3954,3938,1,0,0,0,3954,3939,1,0,0,
        0,3954,3940,1,0,0,0,3954,3941,1,0,0,0,3954,3942,1,0,0,0,3954,3943,
        1,0,0,0,3954,3944,1,0,0,0,3954,3945,1,0,0,0,3954,3946,1,0,0,0,3954,
        3947,1,0,0,0,3954,3948,1,0,0,0,3954,3949,1,0,0,0,3954,3950,1,0,0,
        0,3954,3951,1,0,0,0,3954,3952,1,0,0,0,3954,3953,1,0,0,0,3955,551,
        1,0,0,0,3956,3957,5,519,0,0,3957,3959,7,50,0,0,3958,3960,5,335,0,
        0,3959,3958,1,0,0,0,3959,3960,1,0,0,0,3960,3963,1,0,0,0,3961,3964,
        3,480,240,0,3962,3964,3,1230,615,0,3963,3961,1,0,0,0,3963,3962,1,
        0,0,0,3964,553,1,0,0,0,3965,3967,5,520,0,0,3966,3968,5,261,0,0,3967,
        3966,1,0,0,0,3967,3968,1,0,0,0,3968,3974,1,0,0,0,3969,3971,5,521,
        0,0,3970,3972,5,22,0,0,3971,3970,1,0,0,0,3971,3972,1,0,0,0,3972,
        3974,1,0,0,0,3973,3965,1,0,0,0,3973,3969,1,0,0,0,3973,3974,1,0,0,
        0,3974,3975,1,0,0,0,3975,3982,3,556,278,0,3976,3978,5,542,0,0,3977,
        3976,1,0,0,0,3977,3978,1,0,0,0,3978,3979,1,0,0,0,3979,3981,3,556,
        278,0,3980,3977,1,0,0,0,3981,3984,1,0,0,0,3982,3980,1,0,0,0,3982,
        3983,1,0,0,0,3983,555,1,0,0,0,3984,3982,1,0,0,0,3985,3987,3,558,
        279,0,3986,3988,3,560,280,0,3987,3986,1,0,0,0,3987,3988,1,0,0,0,
        3988,557,1,0,0,0,3989,3993,3,482,241,0,3990,3993,3,480,240,0,3991,
        3993,3,1282,641,0,3992,3989,1,0,0,0,3992,3990,1,0,0,0,3992,3991,
        1,0,0,0,3993,559,1,0,0,0,3994,3995,7,5,0,0,3995,3996,3,482,241,0,
        3996,561,1,0,0,0,3997,3999,5,527,0,0,3998,3997,1,0,0,0,3998,3999,
        1,0,0,0,3999,4000,1,0,0,0,4000,4001,5,299,0,0,4001,4002,5,50,0,0,
        4002,563,1,0,0,0,4003,4004,5,368,0,0,4004,4006,5,150,0,0,4005,4007,
        3,566,283,0,4006,4005,1,0,0,0,4006,4007,1,0,0,0,4007,4009,1,0,0,
        0,4008,4010,3,568,284,0,4009,4008,1,0,0,0,4009,4010,1,0,0,0,4010,
        4011,1,0,0,0,4011,4013,5,550,0,0,4012,4014,3,580,290,0,4013,4012,
        1,0,0,0,4013,4014,1,0,0,0,4014,4015,1,0,0,0,4015,4016,3,586,293,
        0,4016,565,1,0,0,0,4017,4019,7,51,0,0,4018,4020,3,570,285,0,4019,
        4018,1,0,0,0,4020,4021,1,0,0,0,4021,4019,1,0,0,0,4021,4022,1,0,0,
        0,4022,567,1,0,0,0,4023,4024,7,52,0,0,4024,4025,3,1230,615,0,4025,
        569,1,0,0,0,4026,4029,3,572,286,0,4027,4029,3,576,288,0,4028,4026,
        1,0,0,0,4028,4027,1,0,0,0,4029,571,1,0,0,0,4030,4032,5,52,0,0,4031,
        4030,1,0,0,0,4031,4032,1,0,0,0,4032,4033,1,0,0,0,4033,4035,5,396,
        0,0,4034,4031,1,0,0,0,4034,4035,1,0,0,0,4035,4037,1,0,0,0,4036,4038,
        3,574,287,0,4037,4036,1,0,0,0,4038,4039,1,0,0,0,4039,4037,1,0,0,
        0,4039,4040,1,0,0,0,4040,573,1,0,0,0,4041,4043,5,340,0,0,4042,4041,
        1,0,0,0,4042,4043,1,0,0,0,4043,4046,1,0,0,0,4044,4047,3,1176,588,
        0,4045,4047,3,1236,618,0,4046,4044,1,0,0,0,4046,4045,1,0,0,0,4047,
        4050,1,0,0,0,4048,4050,5,21,0,0,4049,4042,1,0,0,0,4049,4048,1,0,
        0,0,4050,575,1,0,0,0,4051,4053,5,52,0,0,4052,4051,1,0,0,0,4052,4053,
        1,0,0,0,4053,4054,1,0,0,0,4054,4056,5,520,0,0,4055,4057,3,578,289,
        0,4056,4055,1,0,0,0,4057,4058,1,0,0,0,4058,4056,1,0,0,0,4058,4059,
        1,0,0,0,4059,577,1,0,0,0,4060,4064,3,1176,588,0,4061,4064,3,482,
        241,0,4062,4064,5,21,0,0,4063,4060,1,0,0,0,4063,4061,1,0,0,0,4063,
        4062,1,0,0,0,4064,579,1,0,0,0,4065,4066,5,130,0,0,4066,4073,5,550,
        0,0,4067,4069,3,582,291,0,4068,4067,1,0,0,0,4069,4070,1,0,0,0,4070,
        4068,1,0,0,0,4070,4071,1,0,0,0,4071,4074,1,0,0,0,4072,4074,3,438,
        219,0,4073,4068,1,0,0,0,4073,4072,1,0,0,0,4074,4075,1,0,0,0,4075,
        4076,5,163,0,0,4076,4077,5,130,0,0,4077,4078,5,550,0,0,4078,581,
        1,0,0,0,4079,4081,3,584,292,0,4080,4082,7,1,0,0,4081,4080,1,0,0,
        0,4081,4082,1,0,0,0,4082,4084,1,0,0,0,4083,4085,3,1084,542,0,4084,
        4083,1,0,0,0,4084,4085,1,0,0,0,4085,4086,1,0,0,0,4086,4087,5,550,
        0,0,4087,4088,3,590,295,0,4088,583,1,0,0,0,4089,4090,3,1264,632,
        0,4090,4092,5,431,0,0,4091,4093,3,1276,638,0,4092,4091,1,0,0,0,4092,
        4093,1,0,0,0,4093,585,1,0,0,0,4094,4098,3,590,295,0,4095,4097,3,
        588,294,0,4096,4095,1,0,0,0,4097,4100,1,0,0,0,4098,4096,1,0,0,0,
        4098,4099,1,0,0,0,4099,587,1,0,0,0,4100,4098,1,0,0,0,4101,4102,3,
        584,292,0,4102,4103,5,550,0,0,4103,4104,3,590,295,0,4104,589,1,0,
        0,0,4105,4107,3,594,297,0,4106,4105,1,0,0,0,4107,4110,1,0,0,0,4108,
        4106,1,0,0,0,4108,4109,1,0,0,0,4109,4114,1,0,0,0,4110,4108,1,0,0,
        0,4111,4113,3,592,296,0,4112,4111,1,0,0,0,4113,4116,1,0,0,0,4114,
        4112,1,0,0,0,4114,4115,1,0,0,0,4115,591,1,0,0,0,4116,4114,1,0,0,
        0,4117,4118,3,1250,625,0,4118,4126,7,1,0,0,4119,4127,3,652,326,0,
        4120,4122,3,594,297,0,4121,4120,1,0,0,0,4122,4125,1,0,0,0,4123,4121,
        1,0,0,0,4123,4124,1,0,0,0,4124,4127,1,0,0,0,4125,4123,1,0,0,0,4126,
        4119,1,0,0,0,4126,4123,1,0,0,0,4127,593,1,0,0,0,4128,4130,3,596,
        298,0,4129,4128,1,0,0,0,4130,4131,1,0,0,0,4131,4129,1,0,0,0,4131,
        4132,1,0,0,0,4132,4134,1,0,0,0,4133,4135,7,53,0,0,4134,4133,1,0,
        0,0,4134,4135,1,0,0,0,4135,4138,1,0,0,0,4136,4139,3,1286,643,0,4137,
        4139,5,544,0,0,4138,4136,1,0,0,0,4138,4137,1,0,0,0,4138,4139,1,0,
        0,0,4139,595,1,0,0,0,4140,4196,3,626,313,0,4141,4196,3,636,318,0,
        4142,4196,3,654,327,0,4143,4196,3,658,329,0,4144,4196,3,678,339,
        0,4145,4196,3,682,341,0,4146,4196,3,700,350,0,4147,4196,3,704,352,
        0,4148,4196,3,438,219,0,4149,4196,3,706,353,0,4150,4196,3,708,354,
        0,4151,4196,3,710,355,0,4152,4196,3,720,360,0,4153,4196,3,736,368,
        0,4154,4196,3,738,369,0,4155,4196,3,740,370,0,4156,4196,3,766,383,
        0,4157,4196,3,610,305,0,4158,4196,3,760,380,0,4159,4196,3,762,381,
        0,4160,4196,3,606,303,0,4161,4196,3,764,382,0,4162,4196,3,770,385,
        0,4163,4196,3,772,386,0,4164,4196,3,774,387,0,4165,4196,3,776,388,
        0,4166,4196,3,782,391,0,4167,4196,3,788,394,0,4168,4196,3,794,397,
        0,4169,4196,3,796,398,0,4170,4196,3,826,413,0,4171,4196,3,846,423,
        0,4172,4196,3,856,428,0,4173,4196,3,868,434,0,4174,4196,3,882,441,
        0,4175,4196,3,908,454,0,4176,4196,3,910,455,0,4177,4196,3,918,459,
        0,4178,4196,3,940,470,0,4179,4196,3,942,471,0,4180,4196,3,946,473,
        0,4181,4196,3,950,475,0,4182,4196,3,956,478,0,4183,4196,3,976,488,
        0,4184,4196,3,988,494,0,4185,4196,3,1014,507,0,4186,4196,3,1018,
        509,0,4187,4196,3,1020,510,0,4188,4196,3,1034,517,0,4189,4196,3,
        1052,526,0,4190,4196,3,1060,530,0,4191,4196,3,1062,531,0,4192,4196,
        3,1064,532,0,4193,4196,3,1098,549,0,4194,4196,3,598,299,0,4195,4140,
        1,0,0,0,4195,4141,1,0,0,0,4195,4142,1,0,0,0,4195,4143,1,0,0,0,4195,
        4144,1,0,0,0,4195,4145,1,0,0,0,4195,4146,1,0,0,0,4195,4147,1,0,0,
        0,4195,4148,1,0,0,0,4195,4149,1,0,0,0,4195,4150,1,0,0,0,4195,4151,
        1,0,0,0,4195,4152,1,0,0,0,4195,4153,1,0,0,0,4195,4154,1,0,0,0,4195,
        4155,1,0,0,0,4195,4156,1,0,0,0,4195,4157,1,0,0,0,4195,4158,1,0,0,
        0,4195,4159,1,0,0,0,4195,4160,1,0,0,0,4195,4161,1,0,0,0,4195,4162,
        1,0,0,0,4195,4163,1,0,0,0,4195,4164,1,0,0,0,4195,4165,1,0,0,0,4195,
        4166,1,0,0,0,4195,4167,1,0,0,0,4195,4168,1,0,0,0,4195,4169,1,0,0,
        0,4195,4170,1,0,0,0,4195,4171,1,0,0,0,4195,4172,1,0,0,0,4195,4173,
        1,0,0,0,4195,4174,1,0,0,0,4195,4175,1,0,0,0,4195,4176,1,0,0,0,4195,
        4177,1,0,0,0,4195,4178,1,0,0,0,4195,4179,1,0,0,0,4195,4180,1,0,0,
        0,4195,4181,1,0,0,0,4195,4182,1,0,0,0,4195,4183,1,0,0,0,4195,4184,
        1,0,0,0,4195,4185,1,0,0,0,4195,4186,1,0,0,0,4195,4187,1,0,0,0,4195,
        4188,1,0,0,0,4195,4189,1,0,0,0,4195,4190,1,0,0,0,4195,4191,1,0,0,
        0,4195,4192,1,0,0,0,4195,4193,1,0,0,0,4195,4194,1,0,0,0,4196,597,
        1,0,0,0,4197,4198,5,823,0,0,4198,4199,5,824,0,0,4199,4200,3,600,
        300,0,4200,4202,3,602,301,0,4201,4203,3,604,302,0,4202,4201,1,0,
        0,0,4202,4203,1,0,0,0,4203,599,1,0,0,0,4204,4205,3,1230,615,0,4205,
        601,1,0,0,0,4206,4207,5,825,0,0,4207,4209,5,368,0,0,4208,4210,5,
        261,0,0,4209,4208,1,0,0,0,4209,4210,1,0,0,0,4210,4211,1,0,0,0,4211,
        4214,3,1252,626,0,4212,4213,7,5,0,0,4213,4215,3,1252,626,0,4214,
        4212,1,0,0,0,4214,4215,1,0,0,0,4215,603,1,0,0,0,4216,4217,5,185,
        0,0,4217,605,1,0,0,0,4218,4219,5,577,0,0,4219,4220,5,803,0,0,4220,
        4221,3,476,238,0,4221,4222,5,647,0,0,4222,607,1,0,0,0,4223,4225,
        9,0,0,0,4224,4223,1,0,0,0,4225,4228,1,0,0,0,4226,4227,1,0,0,0,4226,
        4224,1,0,0,0,4227,609,1,0,0,0,4228,4226,1,0,0,0,4229,4230,5,577,
        0,0,4230,4231,5,618,0,0,4231,4233,3,612,306,0,4232,4234,3,614,307,
        0,4233,4232,1,0,0,0,4233,4234,1,0,0,0,4234,4235,1,0,0,0,4235,4237,
        5,647,0,0,4236,4238,5,551,0,0,4237,4236,1,0,0,0,4237,4238,1,0,0,
        0,4238,611,1,0,0,0,4239,4244,3,480,240,0,4240,4244,5,530,0,0,4241,
        4244,5,420,0,0,4242,4244,5,468,0,0,4243,4239,1,0,0,0,4243,4240,1,
        0,0,0,4243,4241,1,0,0,0,4243,4242,1,0,0,0,4244,613,1,0,0,0,4245,
        4248,3,616,308,0,4246,4248,5,578,0,0,4247,4245,1,0,0,0,4247,4246,
        1,0,0,0,4248,4249,1,0,0,0,4249,4247,1,0,0,0,4249,4250,1,0,0,0,4250,
        615,1,0,0,0,4251,4259,3,618,309,0,4252,4255,5,558,0,0,4253,4256,
        3,624,312,0,4254,4256,3,622,311,0,4255,4253,1,0,0,0,4255,4254,1,
        0,0,0,4256,4257,1,0,0,0,4257,4258,5,565,0,0,4258,4260,1,0,0,0,4259,
        4252,1,0,0,0,4259,4260,1,0,0,0,4260,617,1,0,0,0,4261,4265,3,480,
        240,0,4262,4265,5,530,0,0,4263,4265,5,420,0,0,4264,4261,1,0,0,0,
        4264,4262,1,0,0,0,4264,4263,1,0,0,0,4265,619,1,0,0,0,4266,4267,3,
        480,240,0,4267,621,1,0,0,0,4268,4269,3,620,310,0,4269,4270,5,558,
        0,0,4270,4271,3,624,312,0,4271,4272,5,565,0,0,4272,623,1,0,0,0,4273,
        4278,3,480,240,0,4274,4278,3,482,241,0,4275,4278,3,486,243,0,4276,
        4278,5,428,0,0,4277,4273,1,0,0,0,4277,4274,1,0,0,0,4277,4275,1,0,
        0,0,4277,4276,1,0,0,0,4278,4279,1,0,0,0,4279,4277,1,0,0,0,4279,4280,
        1,0,0,0,4280,625,1,0,0,0,4281,4282,5,3,0,0,4282,4287,3,1176,588,
        0,4283,4288,3,628,314,0,4284,4288,3,632,316,0,4285,4288,3,630,315,
        0,4286,4288,3,634,317,0,4287,4283,1,0,0,0,4287,4284,1,0,0,0,4287,
        4285,1,0,0,0,4287,4286,1,0,0,0,4287,4288,1,0,0,0,4288,4290,1,0,0,
        0,4289,4291,3,1130,565,0,4290,4289,1,0,0,0,4290,4291,1,0,0,0,4291,
        4293,1,0,0,0,4292,4294,3,1132,566,0,4293,4292,1,0,0,0,4293,4294,
        1,0,0,0,4294,4296,1,0,0,0,4295,4297,5,164,0,0,4296,4295,1,0,0,0,
        4296,4297,1,0,0,0,4297,627,1,0,0,0,4298,4318,5,221,0,0,4299,4301,
        5,114,0,0,4300,4302,5,532,0,0,4301,4300,1,0,0,0,4301,4302,1,0,0,
        0,4302,4319,1,0,0,0,4303,4305,5,117,0,0,4304,4306,5,533,0,0,4305,
        4304,1,0,0,0,4305,4306,1,0,0,0,4306,4319,1,0,0,0,4307,4319,5,118,
        0,0,4308,4319,5,497,0,0,4309,4319,5,498,0,0,4310,4312,5,502,0,0,
        4311,4313,5,306,0,0,4312,4311,1,0,0,0,4312,4313,1,0,0,0,4313,4319,
        1,0,0,0,4314,4319,5,503,0,0,4315,4319,5,531,0,0,4316,4319,5,532,
        0,0,4317,4319,5,533,0,0,4318,4299,1,0,0,0,4318,4303,1,0,0,0,4318,
        4307,1,0,0,0,4318,4308,1,0,0,0,4318,4309,1,0,0,0,4318,4310,1,0,0,
        0,4318,4314,1,0,0,0,4318,4315,1,0,0,0,4318,4316,1,0,0,0,4318,4317,
        1,0,0,0,4319,629,1,0,0,0,4320,4321,5,221,0,0,4321,4322,3,1248,624,
        0,4322,631,1,0,0,0,4323,4324,5,221,0,0,4324,4325,5,197,0,0,4325,
        4326,5,269,0,0,4326,633,1,0,0,0,4327,4329,5,305,0,0,4328,4327,1,
        0,0,0,4328,4329,1,0,0,0,4329,4330,1,0,0,0,4330,4331,5,108,0,0,4331,
        635,1,0,0,0,4332,4336,5,5,0,0,4333,4337,3,638,319,0,4334,4337,3,
        640,320,0,4335,4337,3,642,321,0,4336,4333,1,0,0,0,4336,4334,1,0,
        0,0,4336,4335,1,0,0,0,4337,4339,1,0,0,0,4338,4340,3,1126,563,0,4339,
        4338,1,0,0,0,4339,4340,1,0,0,0,4340,4342,1,0,0,0,4341,4343,3,1128,
        564,0,4342,4341,1,0,0,0,4342,4343,1,0,0,0,4343,4345,1,0,0,0,4344,
        4346,5,165,0,0,4345,4344,1,0,0,0,4345,4346,1,0,0,0,4346,637,1,0,
        0,0,4347,4349,3,644,322,0,4348,4347,1,0,0,0,4349,4350,1,0,0,0,4350,
        4348,1,0,0,0,4350,4351,1,0,0,0,4351,4352,1,0,0,0,4352,4354,5,501,
        0,0,4353,4355,3,646,323,0,4354,4353,1,0,0,0,4355,4356,1,0,0,0,4356,
        4354,1,0,0,0,4356,4357,1,0,0,0,4357,639,1,0,0,0,4358,4360,3,644,
        322,0,4359,4358,1,0,0,0,4360,4361,1,0,0,0,4361,4359,1,0,0,0,4361,
        4362,1,0,0,0,4362,4369,1,0,0,0,4363,4365,5,501,0,0,4364,4366,3,648,
        324,0,4365,4364,1,0,0,0,4366,4367,1,0,0,0,4367,4365,1,0,0,0,4367,
        4368,1,0,0,0,4368,4370,1,0,0,0,4369,4363,1,0,0,0,4369,4370,1,0,0,
        0,4370,4371,1,0,0,0,4371,4373,5,228,0,0,4372,4374,3,650,325,0,4373,
        4372,1,0,0,0,4374,4375,1,0,0,0,4375,4373,1,0,0,0,4375,4376,1,0,0,
        0,4376,641,1,0,0,0,4377,4378,7,54,0,0,4378,4379,3,1176,588,0,4379,
        4380,5,501,0,0,4380,4381,3,646,323,0,4381,643,1,0,0,0,4382,4385,
        3,1176,588,0,4383,4385,3,482,241,0,4384,4382,1,0,0,0,4384,4383,1,
        0,0,0,4385,645,1,0,0,0,4386,4389,3,1176,588,0,4387,4389,3,1282,641,
        0,4388,4386,1,0,0,0,4388,4387,1,0,0,0,4389,4391,1,0,0,0,4390,4392,
        5,424,0,0,4391,4390,1,0,0,0,4391,4392,1,0,0,0,4392,647,1,0,0,0,4393,
        4397,3,1176,588,0,4394,4397,3,482,241,0,4395,4397,3,1282,641,0,4396,
        4393,1,0,0,0,4396,4394,1,0,0,0,4396,4395,1,0,0,0,4397,649,1,0,0,
        0,4398,4400,3,1176,588,0,4399,4401,5,424,0,0,4400,4399,1,0,0,0,4400,
        4401,1,0,0,0,4401,651,1,0,0,0,4402,4404,5,230,0,0,4403,4405,5,501,
        0,0,4404,4403,1,0,0,0,4404,4405,1,0,0,0,4405,4406,1,0,0,0,4406,4407,
        5,550,0,0,4407,653,1,0,0,0,4408,4410,5,18,0,0,4409,4411,3,656,328,
        0,4410,4409,1,0,0,0,4411,4412,1,0,0,0,4412,4410,1,0,0,0,4412,4413,
        1,0,0,0,4413,655,1,0,0,0,4414,4415,3,1252,626,0,4415,4418,5,501,
        0,0,4416,4417,5,371,0,0,4417,4419,5,501,0,0,4418,4416,1,0,0,0,4418,
        4419,1,0,0,0,4419,4420,1,0,0,0,4420,4421,3,1252,626,0,4421,657,1,
        0,0,0,4422,4425,5,55,0,0,4423,4426,3,1176,588,0,4424,4426,3,482,
        241,0,4425,4423,1,0,0,0,4425,4424,1,0,0,0,4426,4428,1,0,0,0,4427,
        4429,3,660,330,0,4428,4427,1,0,0,0,4428,4429,1,0,0,0,4429,4431,1,
        0,0,0,4430,4432,3,676,338,0,4431,4430,1,0,0,0,4431,4432,1,0,0,0,
        4432,4434,1,0,0,0,4433,4435,3,1122,561,0,4434,4433,1,0,0,0,4434,
        4435,1,0,0,0,4435,4437,1,0,0,0,4436,4438,3,1130,565,0,4437,4436,
        1,0,0,0,4437,4438,1,0,0,0,4438,4440,1,0,0,0,4439,4441,3,1132,566,
        0,4440,4439,1,0,0,0,4440,4441,1,0,0,0,4441,4443,1,0,0,0,4442,4444,
        5,166,0,0,4443,4442,1,0,0,0,4443,4444,1,0,0,0,4444,659,1,0,0,0,4445,
        4447,5,519,0,0,4446,4448,3,662,331,0,4447,4446,1,0,0,0,4448,4449,
        1,0,0,0,4449,4447,1,0,0,0,4449,4450,1,0,0,0,4450,661,1,0,0,0,4451,
        4455,3,664,332,0,4452,4455,3,668,334,0,4453,4455,3,672,336,0,4454,
        4451,1,0,0,0,4454,4452,1,0,0,0,4454,4453,1,0,0,0,4455,663,1,0,0,
        0,4456,4458,5,52,0,0,4457,4456,1,0,0,0,4457,4458,1,0,0,0,4458,4459,
        1,0,0,0,4459,4461,5,396,0,0,4460,4457,1,0,0,0,4460,4461,1,0,0,0,
        4461,4463,1,0,0,0,4462,4464,3,666,333,0,4463,4462,1,0,0,0,4464,4465,
        1,0,0,0,4465,4463,1,0,0,0,4465,4466,1,0,0,0,4466,665,1,0,0,0,4467,
        4468,5,6,0,0,4468,4472,5,335,0,0,4469,4472,5,257,0,0,4470,4472,5,
        471,0,0,4471,4467,1,0,0,0,4471,4469,1,0,0,0,4471,4470,1,0,0,0,4471,
        4472,1,0,0,0,4472,4473,1,0,0,0,4473,4477,3,1176,588,0,4474,4477,
        3,482,241,0,4475,4477,3,1236,618,0,4476,4471,1,0,0,0,4476,4474,1,
        0,0,0,4476,4475,1,0,0,0,4477,4480,1,0,0,0,4478,4480,5,337,0,0,4479,
        4476,1,0,0,0,4479,4478,1,0,0,0,4480,667,1,0,0,0,4481,4483,5,52,0,
        0,4482,4481,1,0,0,0,4482,4483,1,0,0,0,4483,4484,1,0,0,0,4484,4486,
        5,520,0,0,4485,4487,3,670,335,0,4486,4485,1,0,0,0,4487,4488,1,0,
        0,0,4488,4486,1,0,0,0,4488,4489,1,0,0,0,4489,669,1,0,0,0,4490,4491,
        5,6,0,0,4491,4497,5,335,0,0,4492,4494,5,279,0,0,4493,4495,5,335,
        0,0,4494,4493,1,0,0,0,4494,4495,1,0,0,0,4495,4497,1,0,0,0,4496,4490,
        1,0,0,0,4496,4492,1,0,0,0,4496,4497,1,0,0,0,4497,4500,1,0,0,0,4498,
        4501,3,1176,588,0,4499,4501,3,482,241,0,4500,4498,1,0,0,0,4500,4499,
        1,0,0,0,4501,671,1,0,0,0,4502,4504,5,52,0,0,4503,4502,1,0,0,0,4503,
        4504,1,0,0,0,4504,4505,1,0,0,0,4505,4507,5,98,0,0,4506,4508,3,674,
        337,0,4507,4506,1,0,0,0,4508,4509,1,0,0,0,4509,4507,1,0,0,0,4509,
        4510,1,0,0,0,4510,673,1,0,0,0,4511,4512,5,6,0,0,4512,4518,5,335,
        0,0,4513,4515,5,279,0,0,4514,4516,5,335,0,0,4515,4514,1,0,0,0,4515,
        4516,1,0,0,0,4516,4518,1,0,0,0,4517,4511,1,0,0,0,4517,4513,1,0,0,
        0,4517,4518,1,0,0,0,4518,4519,1,0,0,0,4519,4523,3,1176,588,0,4520,
        4523,3,482,241,0,4521,4523,5,337,0,0,4522,4517,1,0,0,0,4522,4520,
        1,0,0,0,4522,4521,1,0,0,0,4523,675,1,0,0,0,4524,4525,7,52,0,0,4525,
        4526,3,1176,588,0,4526,677,1,0,0,0,4527,4529,5,56,0,0,4528,4530,
        3,680,340,0,4529,4528,1,0,0,0,4530,4531,1,0,0,0,4531,4529,1,0,0,
        0,4531,4532,1,0,0,0,4532,679,1,0,0,0,4533,4534,3,1244,622,0,4534,
        4535,7,37,0,0,4535,4539,1,0,0,0,4536,4539,3,1176,588,0,4537,4539,
        3,482,241,0,4538,4533,1,0,0,0,4538,4536,1,0,0,0,4538,4537,1,0,0,
        0,4539,681,1,0,0,0,4540,4542,5,70,0,0,4541,4543,3,684,342,0,4542,
        4541,1,0,0,0,4543,4544,1,0,0,0,4544,4542,1,0,0,0,4544,4545,1,0,0,
        0,4545,683,1,0,0,0,4546,4550,3,1236,618,0,4547,4551,3,686,343,0,
        4548,4551,3,688,344,0,4549,4551,3,690,345,0,4550,4547,1,0,0,0,4550,
        4548,1,0,0,0,4550,4549,1,0,0,0,4550,4551,1,0,0,0,4551,685,1,0,0,
        0,4552,4557,7,13,0,0,4553,4555,5,218,0,0,4554,4553,1,0,0,0,4554,
        4555,1,0,0,0,4555,4556,1,0,0,0,4556,4558,5,402,0,0,4557,4554,1,0,
        0,0,4557,4558,1,0,0,0,4558,4567,1,0,0,0,4559,4561,5,527,0,0,4560,
        4559,1,0,0,0,4560,4561,1,0,0,0,4561,4565,1,0,0,0,4562,4563,5,322,
        0,0,4563,4566,5,419,0,0,4564,4566,5,296,0,0,4565,4562,1,0,0,0,4565,
        4564,1,0,0,0,4566,4568,1,0,0,0,4567,4560,1,0,0,0,4567,4568,1,0,0,
        0,4568,687,1,0,0,0,4569,4571,5,527,0,0,4570,4569,1,0,0,0,4570,4571,
        1,0,0,0,4571,4575,1,0,0,0,4572,4573,5,322,0,0,4573,4576,5,419,0,
        0,4574,4576,5,296,0,0,4575,4572,1,0,0,0,4575,4574,1,0,0,0,4576,689,
        1,0,0,0,4577,4579,5,527,0,0,4578,4577,1,0,0,0,4578,4579,1,0,0,0,
        4579,4580,1,0,0,0,4580,4581,5,322,0,0,4581,4585,5,524,0,0,4582,4583,
        5,527,0,0,4583,4585,5,524,0,0,4584,4578,1,0,0,0,4584,4582,1,0,0,
        0,4585,4592,1,0,0,0,4586,4588,5,519,0,0,4587,4589,3,692,346,0,4588,
        4587,1,0,0,0,4589,4590,1,0,0,0,4590,4588,1,0,0,0,4590,4591,1,0,0,
        0,4591,4593,1,0,0,0,4592,4586,1,0,0,0,4592,4593,1,0,0,0,4593,691,
        1,0,0,0,4594,4598,3,694,347,0,4595,4598,3,696,348,0,4596,4598,3,
        698,349,0,4597,4594,1,0,0,0,4597,4595,1,0,0,0,4597,4596,1,0,0,0,
        4598,693,1,0,0,0,4599,4601,5,71,0,0,4600,4602,5,335,0,0,4601,4600,
        1,0,0,0,4601,4602,1,0,0,0,4602,4603,1,0,0,0,4603,4604,7,55,0,0,4604,
        695,1,0,0,0,4605,4608,5,29,0,0,4606,4609,3,1176,588,0,4607,4609,
        3,1276,638,0,4608,4606,1,0,0,0,4608,4607,1,0,0,0,4609,697,1,0,0,
        0,4610,4612,5,30,0,0,4611,4613,5,335,0,0,4612,4611,1,0,0,0,4612,
        4613,1,0,0,0,4613,4616,1,0,0,0,4614,4617,3,1176,588,0,4615,4617,
        3,1276,638,0,4616,4614,1,0,0,0,4616,4615,1,0,0,0,4617,699,1,0,0,
        0,4618,4620,5,95,0,0,4619,4621,3,702,351,0,4620,4619,1,0,0,0,4621,
        4622,1,0,0,0,4622,4620,1,0,0,0,4622,4623,1,0,0,0,4623,4624,1,0,0,
        0,4624,4625,7,56,0,0,4625,4627,3,1134,567,0,4626,4628,3,1126,563,
        0,4627,4626,1,0,0,0,4627,4628,1,0,0,0,4628,4630,1,0,0,0,4629,4631,
        3,1128,564,0,4630,4629,1,0,0,0,4630,4631,1,0,0,0,4631,4633,1,0,0,
        0,4632,4634,5,167,0,0,4633,4632,1,0,0,0,4633,4634,1,0,0,0,4634,701,
        1,0,0,0,4635,4637,3,1176,588,0,4636,4638,5,424,0,0,4637,4636,1,0,
        0,0,4637,4638,1,0,0,0,4638,703,1,0,0,0,4639,4640,5,99,0,0,4640,705,
        1,0,0,0,4641,4642,5,135,0,0,4642,4644,3,1236,618,0,4643,4645,5,389,
        0,0,4644,4643,1,0,0,0,4644,4645,1,0,0,0,4645,4647,1,0,0,0,4646,4648,
        3,1118,559,0,4647,4646,1,0,0,0,4647,4648,1,0,0,0,4648,4650,1,0,0,
        0,4649,4651,3,1120,560,0,4650,4649,1,0,0,0,4650,4651,1,0,0,0,4651,
        4653,1,0,0,0,4652,4654,5,168,0,0,4653,4652,1,0,0,0,4653,4654,1,0,
        0,0,4654,707,1,0,0,0,4655,4663,5,144,0,0,4656,4658,5,253,0,0,4657,
        4659,5,487,0,0,4658,4657,1,0,0,0,4658,4659,1,0,0,0,4659,4664,1,0,
        0,0,4660,4661,5,239,0,0,4661,4664,5,487,0,0,4662,4664,5,346,0,0,
        4663,4656,1,0,0,0,4663,4660,1,0,0,0,4663,4662,1,0,0,0,4664,4665,
        1,0,0,0,4665,4667,3,1222,611,0,4666,4668,5,527,0,0,4667,4666,1,0,
        0,0,4667,4668,1,0,0,0,4668,4669,1,0,0,0,4669,4672,5,269,0,0,4670,
        4673,3,1176,588,0,4671,4673,3,482,241,0,4672,4670,1,0,0,0,4672,4671,
        1,0,0,0,4673,709,1,0,0,0,4674,4676,5,147,0,0,4675,4677,3,712,356,
        0,4676,4675,1,0,0,0,4677,4678,1,0,0,0,4678,4676,1,0,0,0,4678,4679,
        1,0,0,0,4679,4681,1,0,0,0,4680,4682,3,714,357,0,4681,4680,1,0,0,
        0,4681,4682,1,0,0,0,4682,4684,1,0,0,0,4683,4685,3,716,358,0,4684,
        4683,1,0,0,0,4684,4685,1,0,0,0,4685,4687,1,0,0,0,4686,4688,3,718,
        359,0,4687,4686,1,0,0,0,4687,4688,1,0,0,0,4688,4690,1,0,0,0,4689,
        4691,7,1,0,0,4690,4689,1,0,0,0,4690,4691,1,0,0,0,4691,711,1,0,0,
        0,4692,4695,3,1176,588,0,4693,4695,3,482,241,0,4694,4692,1,0,0,0,
        4694,4693,1,0,0,0,4695,713,1,0,0,0,4696,4699,5,31,0,0,4697,4700,
        3,1176,588,0,4698,4700,3,482,241,0,4699,4697,1,0,0,0,4699,4698,1,
        0,0,0,4700,715,1,0,0,0,4701,4704,5,516,0,0,4702,4705,3,1248,624,
        0,4703,4705,3,1234,617,0,4704,4702,1,0,0,0,4704,4703,1,0,0,0,4705,
        717,1,0,0,0,4706,4708,5,527,0,0,4707,4706,1,0,0,0,4707,4708,1,0,
        0,0,4708,4709,1,0,0,0,4709,4710,5,322,0,0,4710,4711,5,7,0,0,4711,
        719,1,0,0,0,4712,4715,5,149,0,0,4713,4716,3,1176,588,0,4714,4716,
        3,482,241,0,4715,4713,1,0,0,0,4715,4714,1,0,0,0,4716,4720,1,0,0,
        0,4717,4721,3,722,361,0,4718,4721,3,724,362,0,4719,4721,3,726,363,
        0,4720,4717,1,0,0,0,4720,4718,1,0,0,0,4720,4719,1,0,0,0,4721,4723,
        1,0,0,0,4722,4724,3,734,367,0,4723,4722,1,0,0,0,4723,4724,1,0,0,
        0,4724,4726,1,0,0,0,4725,4727,3,1126,563,0,4726,4725,1,0,0,0,4726,
        4727,1,0,0,0,4727,4729,1,0,0,0,4728,4730,3,1128,564,0,4729,4728,
        1,0,0,0,4729,4730,1,0,0,0,4730,4732,1,0,0,0,4731,4733,5,169,0,0,
        4732,4731,1,0,0,0,4732,4733,1,0,0,0,4733,721,1,0,0,0,4734,4736,5,
        258,0,0,4735,4737,3,730,365,0,4736,4735,1,0,0,0,4737,4738,1,0,0,
        0,4738,4736,1,0,0,0,4738,4739,1,0,0,0,4739,723,1,0,0,0,4740,4743,
        5,258,0,0,4741,4744,3,1176,588,0,4742,4744,3,482,241,0,4743,4741,
        1,0,0,0,4743,4742,1,0,0,0,4744,4746,1,0,0,0,4745,4747,3,728,364,
        0,4746,4745,1,0,0,0,4746,4747,1,0,0,0,4747,725,1,0,0,0,4748,4751,
        5,52,0,0,4749,4752,3,1176,588,0,4750,4752,3,482,241,0,4751,4749,
        1,0,0,0,4751,4750,1,0,0,0,4752,4754,1,0,0,0,4753,4755,3,728,364,
        0,4754,4753,1,0,0,0,4754,4755,1,0,0,0,4755,727,1,0,0,0,4756,4758,
        5,228,0,0,4757,4759,3,732,366,0,4758,4757,1,0,0,0,4759,4760,1,0,
        0,0,4760,4758,1,0,0,0,4760,4761,1,0,0,0,4761,729,1,0,0,0,4762,4764,
        3,1176,588,0,4763,4765,5,424,0,0,4764,4763,1,0,0,0,4764,4765,1,0,
        0,0,4765,731,1,0,0,0,4766,4768,3,1176,588,0,4767,4769,5,424,0,0,
        4768,4767,1,0,0,0,4768,4769,1,0,0,0,4769,733,1,0,0,0,4770,4771,5,
        400,0,0,4771,4772,3,1176,588,0,4772,735,1,0,0,0,4773,4781,5,162,
        0,0,4774,4776,5,253,0,0,4775,4777,5,487,0,0,4776,4775,1,0,0,0,4776,
        4777,1,0,0,0,4777,4782,1,0,0,0,4778,4779,5,239,0,0,4779,4782,5,487,
        0,0,4780,4782,5,346,0,0,4781,4774,1,0,0,0,4781,4778,1,0,0,0,4781,
        4780,1,0,0,0,4782,4783,1,0,0,0,4783,4785,3,1222,611,0,4784,4786,
        5,527,0,0,4785,4784,1,0,0,0,4785,4786,1,0,0,0,4786,4787,1,0,0,0,
        4787,4790,5,269,0,0,4788,4791,3,482,241,0,4789,4791,3,1176,588,0,
        4790,4788,1,0,0,0,4790,4789,1,0,0,0,4791,737,1,0,0,0,4792,4793,5,
        188,0,0,4793,4800,3,482,241,0,4794,4796,5,519,0,0,4795,4797,3,1176,
        588,0,4796,4795,1,0,0,0,4797,4798,1,0,0,0,4798,4796,1,0,0,0,4798,
        4799,1,0,0,0,4799,4801,1,0,0,0,4800,4794,1,0,0,0,4800,4801,1,0,0,
        0,4801,739,1,0,0,0,4802,4803,5,199,0,0,4803,4807,3,742,371,0,4804,
        4806,3,744,372,0,4805,4804,1,0,0,0,4806,4809,1,0,0,0,4807,4805,1,
        0,0,0,4807,4808,1,0,0,0,4808,4811,1,0,0,0,4809,4807,1,0,0,0,4810,
        4812,3,746,373,0,4811,4810,1,0,0,0,4812,4813,1,0,0,0,4813,4811,1,
        0,0,0,4813,4814,1,0,0,0,4814,4816,1,0,0,0,4815,4817,3,756,378,0,
        4816,4815,1,0,0,0,4816,4817,1,0,0,0,4817,4818,1,0,0,0,4818,4819,
        5,170,0,0,4819,741,1,0,0,0,4820,4825,3,1176,588,0,4821,4825,3,482,
        241,0,4822,4825,3,1134,567,0,4823,4825,3,1148,574,0,4824,4820,1,
        0,0,0,4824,4821,1,0,0,0,4824,4822,1,0,0,0,4824,4823,1,0,0,0,4825,
        4826,1,0,0,0,4826,4824,1,0,0,0,4826,4827,1,0,0,0,4827,4833,1,0,0,
        0,4828,4829,5,558,0,0,4829,4830,5,832,0,0,4830,4831,5,541,0,0,4831,
        4832,5,832,0,0,4832,4834,5,565,0,0,4833,4828,1,0,0,0,4833,4834,1,
        0,0,0,4834,743,1,0,0,0,4835,4836,5,17,0,0,4836,4837,3,742,371,0,
        4837,745,1,0,0,0,4838,4840,3,748,374,0,4839,4838,1,0,0,0,4840,4841,
        1,0,0,0,4841,4839,1,0,0,0,4841,4842,1,0,0,0,4842,4846,1,0,0,0,4843,
        4845,3,596,298,0,4844,4843,1,0,0,0,4845,4848,1,0,0,0,4846,4844,1,
        0,0,0,4846,4847,1,0,0,0,4847,747,1,0,0,0,4848,4846,1,0,0,0,4849,
        4850,5,525,0,0,4850,4854,3,750,375,0,4851,4853,3,754,377,0,4852,
        4851,1,0,0,0,4853,4856,1,0,0,0,4854,4852,1,0,0,0,4854,4855,1,0,0,
        0,4855,749,1,0,0,0,4856,4854,1,0,0,0,4857,4872,5,21,0,0,4858,4860,
        5,324,0,0,4859,4858,1,0,0,0,4859,4860,1,0,0,0,4860,4862,1,0,0,0,
        4861,4863,3,758,379,0,4862,4861,1,0,0,0,4863,4864,1,0,0,0,4864,4862,
        1,0,0,0,4864,4865,1,0,0,0,4865,4867,1,0,0,0,4866,4868,3,752,376,
        0,4867,4866,1,0,0,0,4867,4868,1,0,0,0,4868,4872,1,0,0,0,4869,4872,
        3,1148,574,0,4870,4872,3,1272,636,0,4871,4857,1,0,0,0,4871,4859,
        1,0,0,0,4871,4869,1,0,0,0,4871,4870,1,0,0,0,4872,751,1,0,0,0,4873,
        4874,7,5,0,0,4874,4875,3,758,379,0,4875,753,1,0,0,0,4876,4877,5,
        17,0,0,4877,4878,3,750,375,0,4878,755,1,0,0,0,4879,4880,5,525,0,
        0,4880,4884,5,345,0,0,4881,4883,3,596,298,0,4882,4881,1,0,0,0,4883,
        4886,1,0,0,0,4884,4882,1,0,0,0,4884,4885,1,0,0,0,4885,757,1,0,0,
        0,4886,4884,1,0,0,0,4887,4891,3,1176,588,0,4888,4891,3,482,241,0,
        4889,4891,3,1134,567,0,4890,4887,1,0,0,0,4890,4888,1,0,0,0,4890,
        4889,1,0,0,0,4891,759,1,0,0,0,4892,4894,5,579,0,0,4893,4892,1,0,
        0,0,4894,4895,1,0,0,0,4895,4893,1,0,0,0,4895,4896,1,0,0,0,4896,761,
        1,0,0,0,4897,4899,5,581,0,0,4898,4897,1,0,0,0,4899,4900,1,0,0,0,
        4900,4898,1,0,0,0,4900,4901,1,0,0,0,4901,763,1,0,0,0,4902,4904,5,
        580,0,0,4903,4902,1,0,0,0,4904,4905,1,0,0,0,4905,4903,1,0,0,0,4905,
        4906,1,0,0,0,4906,765,1,0,0,0,4907,4909,5,204,0,0,4908,4910,5,314,
        0,0,4909,4908,1,0,0,0,4909,4910,1,0,0,0,4910,4912,1,0,0,0,4911,4913,
        5,63,0,0,4912,4911,1,0,0,0,4912,4913,1,0,0,0,4913,4915,1,0,0,0,4914,
        4916,3,768,384,0,4915,4914,1,0,0,0,4916,4917,1,0,0,0,4917,4915,1,
        0,0,0,4917,4918,1,0,0,0,4918,767,1,0,0,0,4919,4922,3,1176,588,0,
        4920,4922,3,482,241,0,4921,4919,1,0,0,0,4921,4920,1,0,0,0,4922,769,
        1,0,0,0,4923,4925,5,205,0,0,4924,4926,7,57,0,0,4925,4924,1,0,0,0,
        4925,4926,1,0,0,0,4926,771,1,0,0,0,4927,4928,5,226,0,0,4928,4929,
        3,1258,629,0,4929,773,1,0,0,0,4930,4931,5,227,0,0,4931,775,1,0,0,
        0,4932,4934,5,230,0,0,4933,4935,5,501,0,0,4934,4933,1,0,0,0,4934,
        4935,1,0,0,0,4935,4938,1,0,0,0,4936,4939,3,778,389,0,4937,4939,3,
        780,390,0,4938,4936,1,0,0,0,4938,4937,1,0,0,0,4939,777,1,0,0,0,4940,
        4941,3,1252,626,0,4941,779,1,0,0,0,4942,4956,5,310,0,0,4943,4945,
        3,1252,626,0,4944,4943,1,0,0,0,4945,4946,1,0,0,0,4946,4944,1,0,0,
        0,4946,4947,1,0,0,0,4947,4953,1,0,0,0,4948,4950,5,138,0,0,4949,4951,
        5,338,0,0,4950,4949,1,0,0,0,4950,4951,1,0,0,0,4951,4952,1,0,0,0,
        4952,4954,3,1176,588,0,4953,4948,1,0,0,0,4953,4954,1,0,0,0,4954,
        4956,1,0,0,0,4955,4942,1,0,0,0,4955,4944,1,0,0,0,4956,781,1,0,0,
        0,4957,4958,5,243,0,0,4958,4959,3,1148,574,0,4959,4961,3,784,392,
        0,4960,4962,3,786,393,0,4961,4960,1,0,0,0,4961,4962,1,0,0,0,4962,
        4964,1,0,0,0,4963,4965,5,171,0,0,4964,4963,1,0,0,0,4964,4965,1,0,
        0,0,4965,783,1,0,0,0,4966,4968,5,492,0,0,4967,4966,1,0,0,0,4967,
        4968,1,0,0,0,4968,4976,1,0,0,0,4969,4970,5,320,0,0,4970,4977,5,438,
        0,0,4971,4973,3,596,298,0,4972,4971,1,0,0,0,4973,4974,1,0,0,0,4974,
        4972,1,0,0,0,4974,4975,1,0,0,0,4975,4977,1,0,0,0,4976,4969,1,0,0,
        0,4976,4972,1,0,0,0,4977,785,1,0,0,0,4978,4987,5,159,0,0,4979,4980,
        5,320,0,0,4980,4988,5,438,0,0,4981,4983,3,596,298,0,4982,4981,1,
        0,0,0,4983,4986,1,0,0,0,4984,4982,1,0,0,0,4984,4985,1,0,0,0,4985,
        4988,1,0,0,0,4986,4984,1,0,0,0,4987,4979,1,0,0,0,4987,4984,1,0,0,
        0,4988,787,1,0,0,0,4989,4991,5,251,0,0,4990,4992,3,1176,588,0,4991,
        4990,1,0,0,0,4992,4993,1,0,0,0,4993,4991,1,0,0,0,4993,4994,1,0,0,
        0,4994,4996,1,0,0,0,4995,4997,3,790,395,0,4996,4995,1,0,0,0,4996,
        4997,1,0,0,0,4997,789,1,0,0,0,4998,5000,5,406,0,0,4999,5001,3,792,
        396,0,5000,4999,1,0,0,0,5001,5002,1,0,0,0,5002,5000,1,0,0,0,5002,
        5003,1,0,0,0,5003,791,1,0,0,0,5004,5006,7,58,0,0,5005,5007,5,112,
        0,0,5006,5005,1,0,0,0,5006,5007,1,0,0,0,5007,5008,1,0,0,0,5008,5011,
        5,52,0,0,5009,5012,3,1176,588,0,5010,5012,3,482,241,0,5011,5009,
        1,0,0,0,5011,5010,1,0,0,0,5012,793,1,0,0,0,5013,5015,5,252,0,0,5014,
        5016,3,1258,629,0,5015,5014,1,0,0,0,5016,5017,1,0,0,0,5017,5015,
        1,0,0,0,5017,5018,1,0,0,0,5018,795,1,0,0,0,5019,5020,5,255,0,0,5020,
        5025,3,1176,588,0,5021,5026,3,798,399,0,5022,5026,3,800,400,0,5023,
        5026,3,802,401,0,5024,5026,3,804,402,0,5025,5021,1,0,0,0,5025,5022,
        1,0,0,0,5025,5023,1,0,0,0,5025,5024,1,0,0,0,5026,797,1,0,0,0,5027,
        5029,5,484,0,0,5028,5030,3,806,403,0,5029,5028,1,0,0,0,5030,5031,
        1,0,0,0,5031,5029,1,0,0,0,5031,5032,1,0,0,0,5032,799,1,0,0,0,5033,
        5036,5,406,0,0,5034,5037,3,810,405,0,5035,5037,3,814,407,0,5036,
        5034,1,0,0,0,5036,5035,1,0,0,0,5037,5038,1,0,0,0,5038,5036,1,0,0,
        0,5038,5039,1,0,0,0,5039,801,1,0,0,0,5040,5042,5,484,0,0,5041,5043,
        3,806,403,0,5042,5041,1,0,0,0,5043,5044,1,0,0,0,5044,5042,1,0,0,
        0,5044,5045,1,0,0,0,5045,5047,1,0,0,0,5046,5048,3,800,400,0,5047,
        5046,1,0,0,0,5048,5049,1,0,0,0,5049,5047,1,0,0,0,5049,5050,1,0,0,
        0,5050,803,1,0,0,0,5051,5054,5,104,0,0,5052,5055,3,1176,588,0,5053,
        5055,3,482,241,0,5054,5052,1,0,0,0,5054,5053,1,0,0,0,5055,5056,1,
        0,0,0,5056,5060,3,822,411,0,5057,5059,3,824,412,0,5058,5057,1,0,
        0,0,5059,5062,1,0,0,0,5060,5058,1,0,0,0,5060,5061,1,0,0,0,5061,805,
        1,0,0,0,5062,5060,1,0,0,0,5063,5064,3,1176,588,0,5064,5067,5,218,
        0,0,5065,5068,3,808,404,0,5066,5068,3,812,406,0,5067,5065,1,0,0,
        0,5067,5066,1,0,0,0,5068,5069,1,0,0,0,5069,5067,1,0,0,0,5069,5070,
        1,0,0,0,5070,807,1,0,0,0,5071,5075,5,66,0,0,5072,5074,3,824,412,
        0,5073,5072,1,0,0,0,5074,5077,1,0,0,0,5075,5073,1,0,0,0,5075,5076,
        1,0,0,0,5076,809,1,0,0,0,5077,5075,1,0,0,0,5078,5079,5,66,0,0,5079,
        5083,3,820,410,0,5080,5082,3,824,412,0,5081,5080,1,0,0,0,5082,5085,
        1,0,0,0,5083,5081,1,0,0,0,5083,5084,1,0,0,0,5084,811,1,0,0,0,5085,
        5083,1,0,0,0,5086,5088,7,59,0,0,5087,5089,3,816,408,0,5088,5087,
        1,0,0,0,5089,5090,1,0,0,0,5090,5088,1,0,0,0,5090,5091,1,0,0,0,5091,
        813,1,0,0,0,5092,5094,7,60,0,0,5093,5095,3,818,409,0,5094,5093,1,
        0,0,0,5095,5096,1,0,0,0,5096,5094,1,0,0,0,5096,5097,1,0,0,0,5097,
        815,1,0,0,0,5098,5102,3,1176,588,0,5099,5102,3,482,241,0,5100,5102,
        3,1282,641,0,5101,5098,1,0,0,0,5101,5099,1,0,0,0,5101,5100,1,0,0,
        0,5102,5106,1,0,0,0,5103,5105,3,824,412,0,5104,5103,1,0,0,0,5105,
        5108,1,0,0,0,5106,5104,1,0,0,0,5106,5107,1,0,0,0,5107,817,1,0,0,
        0,5108,5106,1,0,0,0,5109,5113,3,1176,588,0,5110,5113,3,482,241,0,
        5111,5113,3,1282,641,0,5112,5109,1,0,0,0,5112,5110,1,0,0,0,5112,
        5111,1,0,0,0,5113,5114,1,0,0,0,5114,5118,3,820,410,0,5115,5117,3,
        824,412,0,5116,5115,1,0,0,0,5117,5120,1,0,0,0,5118,5116,1,0,0,0,
        5118,5119,1,0,0,0,5119,819,1,0,0,0,5120,5118,1,0,0,0,5121,5125,5,
        52,0,0,5122,5126,3,1176,588,0,5123,5126,3,482,241,0,5124,5126,3,
        1282,641,0,5125,5122,1,0,0,0,5125,5123,1,0,0,0,5125,5124,1,0,0,0,
        5126,821,1,0,0,0,5127,5130,5,501,0,0,5128,5131,3,1176,588,0,5129,
        5131,3,482,241,0,5130,5128,1,0,0,0,5130,5129,1,0,0,0,5131,823,1,
        0,0,0,5132,5134,7,61,0,0,5133,5135,5,250,0,0,5134,5133,1,0,0,0,5134,
        5135,1,0,0,0,5135,5138,1,0,0,0,5136,5139,3,1176,588,0,5137,5139,
        3,482,241,0,5138,5136,1,0,0,0,5138,5137,1,0,0,0,5139,825,1,0,0,0,
        5140,5141,5,304,0,0,5141,5143,3,1236,618,0,5142,5144,3,828,414,0,
        5143,5142,1,0,0,0,5144,5145,1,0,0,0,5145,5143,1,0,0,0,5145,5146,
        1,0,0,0,5146,5148,1,0,0,0,5147,5149,3,830,415,0,5148,5147,1,0,0,
        0,5148,5149,1,0,0,0,5149,5153,1,0,0,0,5150,5152,3,836,418,0,5151,
        5150,1,0,0,0,5152,5155,1,0,0,0,5153,5151,1,0,0,0,5153,5154,1,0,0,
        0,5154,5157,1,0,0,0,5155,5153,1,0,0,0,5156,5158,3,838,419,0,5157,
        5156,1,0,0,0,5157,5158,1,0,0,0,5158,5162,1,0,0,0,5159,5161,3,842,
        421,0,5160,5159,1,0,0,0,5161,5164,1,0,0,0,5162,5160,1,0,0,0,5162,
        5163,1,0,0,0,5163,827,1,0,0,0,5164,5162,1,0,0,0,5165,5167,5,338,
        0,0,5166,5165,1,0,0,0,5166,5167,1,0,0,0,5167,5168,1,0,0,0,5168,5170,
        7,44,0,0,5169,5171,5,269,0,0,5170,5169,1,0,0,0,5170,5171,1,0,0,0,
        5171,5173,1,0,0,0,5172,5174,3,1192,596,0,5173,5172,1,0,0,0,5174,
        5175,1,0,0,0,5175,5173,1,0,0,0,5175,5176,1,0,0,0,5176,829,1,0,0,
        0,5177,5179,5,75,0,0,5178,5177,1,0,0,0,5178,5179,1,0,0,0,5179,5180,
        1,0,0,0,5180,5182,5,440,0,0,5181,5183,5,261,0,0,5182,5181,1,0,0,
        0,5182,5183,1,0,0,0,5183,5185,1,0,0,0,5184,5186,3,1216,608,0,5185,
        5184,1,0,0,0,5186,5187,1,0,0,0,5187,5185,1,0,0,0,5187,5188,1,0,0,
        0,5188,5190,1,0,0,0,5189,5191,3,832,416,0,5190,5189,1,0,0,0,5190,
        5191,1,0,0,0,5191,5193,1,0,0,0,5192,5194,3,834,417,0,5193,5192,1,
        0,0,0,5193,5194,1,0,0,0,5194,831,1,0,0,0,5195,5197,5,218,0,0,5196,
        5195,1,0,0,0,5196,5197,1,0,0,0,5197,5198,1,0,0,0,5198,5199,5,15,
        0,0,5199,5200,5,261,0,0,5200,5201,3,1216,608,0,5201,833,1,0,0,0,
        5202,5204,5,218,0,0,5203,5202,1,0,0,0,5203,5204,1,0,0,0,5204,5205,
        1,0,0,0,5205,5207,5,315,0,0,5206,5208,5,261,0,0,5207,5206,1,0,0,
        0,5207,5208,1,0,0,0,5208,5209,1,0,0,0,5209,5210,3,1216,608,0,5210,
        835,1,0,0,0,5211,5213,5,519,0,0,5212,5214,3,1236,618,0,5213,5212,
        1,0,0,0,5214,5215,1,0,0,0,5215,5213,1,0,0,0,5215,5216,1,0,0,0,5216,
        837,1,0,0,0,5217,5218,5,346,0,0,5218,5220,5,368,0,0,5219,5221,5,
        261,0,0,5220,5219,1,0,0,0,5220,5221,1,0,0,0,5221,5222,1,0,0,0,5222,
        5224,3,1252,626,0,5223,5225,3,840,420,0,5224,5223,1,0,0,0,5224,5225,
        1,0,0,0,5225,839,1,0,0,0,5226,5227,7,5,0,0,5227,5228,3,1252,626,
        0,5228,841,1,0,0,0,5229,5231,5,228,0,0,5230,5232,3,844,422,0,5231,
        5230,1,0,0,0,5232,5233,1,0,0,0,5233,5231,1,0,0,0,5233,5234,1,0,0,
        0,5234,843,1,0,0,0,5235,5245,3,1236,618,0,5236,5246,5,296,0,0,5237,
        5246,5,427,0,0,5238,5239,5,322,0,0,5239,5246,5,419,0,0,5240,5246,
        5,109,0,0,5241,5246,5,399,0,0,5242,5243,5,527,0,0,5243,5244,5,403,
        0,0,5244,5246,5,109,0,0,5245,5236,1,0,0,0,5245,5237,1,0,0,0,5245,
        5238,1,0,0,0,5245,5240,1,0,0,0,5245,5241,1,0,0,0,5245,5242,1,0,0,
        0,5245,5246,1,0,0,0,5246,845,1,0,0,0,5247,5249,5,311,0,0,5248,5250,
        5,10,0,0,5249,5248,1,0,0,0,5249,5250,1,0,0,0,5250,5253,1,0,0,0,5251,
        5254,3,848,424,0,5252,5254,3,852,426,0,5253,5251,1,0,0,0,5253,5252,
        1,0,0,0,5254,847,1,0,0,0,5255,5256,3,850,425,0,5256,5258,5,501,0,
        0,5257,5259,3,1176,588,0,5258,5257,1,0,0,0,5259,5260,1,0,0,0,5260,
        5258,1,0,0,0,5260,5261,1,0,0,0,5261,849,1,0,0,0,5262,5266,3,1176,
        588,0,5263,5266,3,482,241,0,5264,5266,3,1282,641,0,5265,5262,1,0,
        0,0,5265,5263,1,0,0,0,5265,5264,1,0,0,0,5266,851,1,0,0,0,5267,5268,
        7,54,0,0,5268,5269,3,854,427,0,5269,5271,5,501,0,0,5270,5272,3,1176,
        588,0,5271,5270,1,0,0,0,5272,5273,1,0,0,0,5273,5271,1,0,0,0,5273,
        5274,1,0,0,0,5274,853,1,0,0,0,5275,5276,3,1176,588,0,5276,855,1,
        0,0,0,5277,5280,5,313,0,0,5278,5281,3,1176,588,0,5279,5281,3,482,
        241,0,5280,5278,1,0,0,0,5280,5279,1,0,0,0,5281,5282,1,0,0,0,5282,
        5285,5,52,0,0,5283,5286,3,858,429,0,5284,5286,3,862,431,0,5285,5283,
        1,0,0,0,5285,5284,1,0,0,0,5286,5288,1,0,0,0,5287,5289,3,1126,563,
        0,5288,5287,1,0,0,0,5288,5289,1,0,0,0,5289,5291,1,0,0,0,5290,5292,
        3,1128,564,0,5291,5290,1,0,0,0,5291,5292,1,0,0,0,5292,5294,1,0,0,
        0,5293,5295,5,172,0,0,5294,5293,1,0,0,0,5294,5295,1,0,0,0,5295,857,
        1,0,0,0,5296,5298,3,860,430,0,5297,5296,1,0,0,0,5298,5299,1,0,0,
        0,5299,5297,1,0,0,0,5299,5300,1,0,0,0,5300,859,1,0,0,0,5301,5303,
        3,1176,588,0,5302,5304,5,424,0,0,5303,5302,1,0,0,0,5303,5304,1,0,
        0,0,5304,861,1,0,0,0,5305,5306,3,864,432,0,5306,5308,5,228,0,0,5307,
        5309,3,866,433,0,5308,5307,1,0,0,0,5309,5310,1,0,0,0,5310,5308,1,
        0,0,0,5310,5311,1,0,0,0,5311,863,1,0,0,0,5312,5315,3,1176,588,0,
        5313,5315,3,482,241,0,5314,5312,1,0,0,0,5314,5313,1,0,0,0,5315,865,
        1,0,0,0,5316,5318,3,1176,588,0,5317,5319,5,424,0,0,5318,5317,1,0,
        0,0,5318,5319,1,0,0,0,5319,867,1,0,0,0,5320,5325,5,339,0,0,5321,
        5326,3,870,435,0,5322,5326,3,874,437,0,5323,5326,3,878,439,0,5324,
        5326,3,880,440,0,5325,5321,1,0,0,0,5325,5322,1,0,0,0,5325,5323,1,
        0,0,0,5325,5324,1,0,0,0,5326,5327,1,0,0,0,5327,5325,1,0,0,0,5327,
        5328,1,0,0,0,5328,869,1,0,0,0,5329,5331,5,253,0,0,5330,5332,3,872,
        436,0,5331,5330,1,0,0,0,5332,5333,1,0,0,0,5333,5331,1,0,0,0,5333,
        5334,1,0,0,0,5334,871,1,0,0,0,5335,5342,3,1236,618,0,5336,5343,5,
        418,0,0,5337,5339,5,527,0,0,5338,5337,1,0,0,0,5338,5339,1,0,0,0,
        5339,5340,1,0,0,0,5340,5341,5,322,0,0,5341,5343,5,419,0,0,5342,5336,
        1,0,0,0,5342,5338,1,0,0,0,5342,5343,1,0,0,0,5343,873,1,0,0,0,5344,
        5346,5,346,0,0,5345,5347,3,876,438,0,5346,5345,1,0,0,0,5347,5348,
        1,0,0,0,5348,5346,1,0,0,0,5348,5349,1,0,0,0,5349,875,1,0,0,0,5350,
        5356,3,1236,618,0,5351,5353,5,527,0,0,5352,5351,1,0,0,0,5352,5353,
        1,0,0,0,5353,5354,1,0,0,0,5354,5355,5,322,0,0,5355,5357,5,419,0,
        0,5356,5352,1,0,0,0,5356,5357,1,0,0,0,5357,877,1,0,0,0,5358,5360,
        5,239,0,0,5359,5361,3,1236,618,0,5360,5359,1,0,0,0,5361,5362,1,0,
        0,0,5362,5360,1,0,0,0,5362,5363,1,0,0,0,5363,879,1,0,0,0,5364,5366,
        5,207,0,0,5365,5367,3,1236,618,0,5366,5365,1,0,0,0,5367,5368,1,0,
        0,0,5368,5366,1,0,0,0,5368,5369,1,0,0,0,5369,881,1,0,0,0,5370,5373,
        5,355,0,0,5371,5374,3,884,442,0,5372,5374,3,886,443,0,5373,5371,
        1,0,0,0,5373,5372,1,0,0,0,5374,883,1,0,0,0,5375,5377,3,888,444,0,
        5376,5375,1,0,0,0,5376,5377,1,0,0,0,5377,5381,1,0,0,0,5378,5380,
        3,596,298,0,5379,5378,1,0,0,0,5380,5383,1,0,0,0,5381,5379,1,0,0,
        0,5381,5382,1,0,0,0,5382,5389,1,0,0,0,5383,5381,1,0,0,0,5384,5390,
        5,174,0,0,5385,5386,5,205,0,0,5386,5387,5,355,0,0,5387,5388,5,1,
        0,0,5388,5390,5,171,0,0,5389,5384,1,0,0,0,5389,5385,1,0,0,0,5390,
        885,1,0,0,0,5391,5394,3,1252,626,0,5392,5393,7,5,0,0,5393,5395,3,
        1252,626,0,5394,5392,1,0,0,0,5394,5395,1,0,0,0,5395,5397,1,0,0,0,
        5396,5398,3,888,444,0,5397,5396,1,0,0,0,5397,5398,1,0,0,0,5398,5400,
        1,0,0,0,5399,5401,7,1,0,0,5400,5399,1,0,0,0,5400,5401,1,0,0,0,5401,
        887,1,0,0,0,5402,5406,3,890,445,0,5403,5406,3,892,446,0,5404,5406,
        3,894,447,0,5405,5402,1,0,0,0,5405,5403,1,0,0,0,5405,5404,1,0,0,
        0,5406,889,1,0,0,0,5407,5410,3,1176,588,0,5408,5410,3,1276,638,0,
        5409,5407,1,0,0,0,5409,5408,1,0,0,0,5410,5411,1,0,0,0,5411,5412,
        5,499,0,0,5412,891,1,0,0,0,5413,5415,3,906,453,0,5414,5413,1,0,0,
        0,5414,5415,1,0,0,0,5415,5416,1,0,0,0,5416,5417,5,514,0,0,5417,5418,
        3,1148,574,0,5418,893,1,0,0,0,5419,5420,3,906,453,0,5420,5421,3,
        896,448,0,5421,5427,1,0,0,0,5422,5424,3,896,448,0,5423,5425,3,906,
        453,0,5424,5423,1,0,0,0,5424,5425,1,0,0,0,5425,5427,1,0,0,0,5426,
        5419,1,0,0,0,5426,5422,1,0,0,0,5427,895,1,0,0,0,5428,5429,5,522,
        0,0,5429,5433,3,898,449,0,5430,5432,3,900,450,0,5431,5430,1,0,0,
        0,5432,5435,1,0,0,0,5433,5431,1,0,0,0,5433,5434,1,0,0,0,5434,897,
        1,0,0,0,5435,5433,1,0,0,0,5436,5439,3,1176,588,0,5437,5439,3,482,
        241,0,5438,5436,1,0,0,0,5438,5437,1,0,0,0,5439,5440,1,0,0,0,5440,
        5441,3,902,451,0,5441,5442,3,904,452,0,5442,5443,3,892,446,0,5443,
        899,1,0,0,0,5444,5445,5,8,0,0,5445,5446,3,898,449,0,5446,901,1,0,
        0,0,5447,5451,5,221,0,0,5448,5452,3,1176,588,0,5449,5452,3,482,241,
        0,5450,5452,3,1134,567,0,5451,5448,1,0,0,0,5451,5449,1,0,0,0,5451,
        5450,1,0,0,0,5452,903,1,0,0,0,5453,5457,5,52,0,0,5454,5458,3,1176,
        588,0,5455,5458,3,482,241,0,5456,5458,3,1134,567,0,5457,5454,1,0,
        0,0,5457,5455,1,0,0,0,5457,5456,1,0,0,0,5458,905,1,0,0,0,5459,5461,
        5,527,0,0,5460,5459,1,0,0,0,5460,5461,1,0,0,0,5461,5462,1,0,0,0,
        5462,5463,5,489,0,0,5463,5464,7,61,0,0,5464,907,1,0,0,0,5465,5467,
        5,377,0,0,5466,5468,3,1222,611,0,5467,5466,1,0,0,0,5468,5469,1,0,
        0,0,5469,5467,1,0,0,0,5469,5470,1,0,0,0,5470,909,1,0,0,0,5471,5472,
        5,386,0,0,5472,5474,3,1236,618,0,5473,5475,5,320,0,0,5474,5473,1,
        0,0,0,5474,5475,1,0,0,0,5475,5477,1,0,0,0,5476,5478,5,389,0,0,5477,
        5476,1,0,0,0,5477,5478,1,0,0,0,5478,5480,1,0,0,0,5479,5481,3,912,
        456,0,5480,5479,1,0,0,0,5480,5481,1,0,0,0,5481,5483,1,0,0,0,5482,
        5484,3,914,457,0,5483,5482,1,0,0,0,5483,5484,1,0,0,0,5484,5486,1,
        0,0,0,5485,5487,3,916,458,0,5486,5485,1,0,0,0,5486,5487,1,0,0,0,
        5487,5489,1,0,0,0,5488,5490,3,1118,559,0,5489,5488,1,0,0,0,5489,
        5490,1,0,0,0,5490,5492,1,0,0,0,5491,5493,3,1120,560,0,5492,5491,
        1,0,0,0,5492,5493,1,0,0,0,5493,5495,1,0,0,0,5494,5496,3,1114,557,
        0,5495,5494,1,0,0,0,5495,5496,1,0,0,0,5496,5498,1,0,0,0,5497,5499,
        3,1116,558,0,5498,5497,1,0,0,0,5498,5499,1,0,0,0,5499,5501,1,0,0,
        0,5500,5502,5,175,0,0,5501,5500,1,0,0,0,5501,5502,1,0,0,0,5502,911,
        1,0,0,0,5503,5504,5,258,0,0,5504,5505,3,1176,588,0,5505,913,1,0,
        0,0,5506,5508,5,527,0,0,5507,5506,1,0,0,0,5507,5508,1,0,0,0,5508,
        5512,1,0,0,0,5509,5510,7,62,0,0,5510,5513,5,296,0,0,5511,5513,5,
        524,0,0,5512,5509,1,0,0,0,5512,5511,1,0,0,0,5513,915,1,0,0,0,5514,
        5516,5,269,0,0,5515,5517,5,261,0,0,5516,5515,1,0,0,0,5516,5517,1,
        0,0,0,5517,5518,1,0,0,0,5518,5519,3,1192,596,0,5519,917,1,0,0,0,
        5520,5523,5,387,0,0,5521,5524,3,920,460,0,5522,5524,3,924,462,0,
        5523,5521,1,0,0,0,5523,5522,1,0,0,0,5524,5526,1,0,0,0,5525,5527,
        3,1130,565,0,5526,5525,1,0,0,0,5526,5527,1,0,0,0,5527,5529,1,0,0,
        0,5528,5530,3,1132,566,0,5529,5528,1,0,0,0,5529,5530,1,0,0,0,5530,
        5532,1,0,0,0,5531,5533,5,176,0,0,5532,5531,1,0,0,0,5532,5533,1,0,
        0,0,5533,919,1,0,0,0,5534,5535,3,1230,615,0,5535,5536,5,221,0,0,
        5536,5544,3,922,461,0,5537,5543,3,930,465,0,5538,5543,3,932,466,
        0,5539,5543,3,934,467,0,5540,5543,3,936,468,0,5541,5543,3,938,469,
        0,5542,5537,1,0,0,0,5542,5538,1,0,0,0,5542,5539,1,0,0,0,5542,5540,
        1,0,0,0,5542,5541,1,0,0,0,5543,5546,1,0,0,0,5544,5542,1,0,0,0,5544,
        5545,1,0,0,0,5545,921,1,0,0,0,5546,5544,1,0,0,0,5547,5548,5,493,
        0,0,5548,5554,3,1230,615,0,5549,5550,5,273,0,0,5550,5554,5,493,0,
        0,5551,5552,5,21,0,0,5552,5554,5,493,0,0,5553,5547,1,0,0,0,5553,
        5549,1,0,0,0,5553,5551,1,0,0,0,5554,923,1,0,0,0,5555,5556,3,1222,
        611,0,5556,5558,7,63,0,0,5557,5559,5,258,0,0,5558,5557,1,0,0,0,5558,
        5559,1,0,0,0,5559,5560,1,0,0,0,5560,5562,3,1176,588,0,5561,5563,
        3,926,463,0,5562,5561,1,0,0,0,5562,5563,1,0,0,0,5563,5565,1,0,0,
        0,5564,5566,3,928,464,0,5565,5564,1,0,0,0,5565,5566,1,0,0,0,5566,
        925,1,0,0,0,5567,5568,5,322,0,0,5568,5572,5,112,0,0,5569,5571,3,
        596,298,0,5570,5569,1,0,0,0,5571,5574,1,0,0,0,5572,5570,1,0,0,0,
        5572,5573,1,0,0,0,5573,927,1,0,0,0,5574,5572,1,0,0,0,5575,5576,5,
        527,0,0,5576,5580,5,112,0,0,5577,5579,3,596,298,0,5578,5577,1,0,
        0,0,5579,5582,1,0,0,0,5580,5578,1,0,0,0,5580,5581,1,0,0,0,5581,929,
        1,0,0,0,5582,5580,1,0,0,0,5583,5585,5,42,0,0,5584,5586,5,497,0,0,
        5585,5584,1,0,0,0,5585,5586,1,0,0,0,5586,5589,1,0,0,0,5587,5590,
        3,1274,637,0,5588,5590,3,1176,588,0,5589,5587,1,0,0,0,5589,5588,
        1,0,0,0,5590,931,1,0,0,0,5591,5593,5,527,0,0,5592,5591,1,0,0,0,5592,
        5593,1,0,0,0,5593,5594,1,0,0,0,5594,5595,5,322,0,0,5595,5596,5,524,
        0,0,5596,933,1,0,0,0,5597,5599,5,493,0,0,5598,5600,5,246,0,0,5599,
        5598,1,0,0,0,5599,5600,1,0,0,0,5600,5601,1,0,0,0,5601,5602,3,1230,
        615,0,5602,935,1,0,0,0,5603,5605,5,451,0,0,5604,5606,5,246,0,0,5605,
        5604,1,0,0,0,5605,5606,1,0,0,0,5606,5609,1,0,0,0,5607,5610,3,1274,
        637,0,5608,5610,3,1176,588,0,5609,5607,1,0,0,0,5609,5608,1,0,0,0,
        5610,937,1,0,0,0,5611,5613,5,469,0,0,5612,5614,5,246,0,0,5613,5612,
        1,0,0,0,5613,5614,1,0,0,0,5614,5615,1,0,0,0,5615,5616,3,1176,588,
        0,5616,939,1,0,0,0,5617,5618,5,399,0,0,5618,5621,3,1256,628,0,5619,
        5620,5,221,0,0,5620,5622,3,1192,596,0,5621,5619,1,0,0,0,5621,5622,
        1,0,0,0,5622,941,1,0,0,0,5623,5624,5,415,0,0,5624,5626,3,1236,618,
        0,5625,5627,5,389,0,0,5626,5625,1,0,0,0,5626,5627,1,0,0,0,5627,5629,
        1,0,0,0,5628,5630,3,944,472,0,5629,5628,1,0,0,0,5629,5630,1,0,0,
        0,5630,5631,1,0,0,0,5631,5633,3,1114,557,0,5632,5634,3,1116,558,
        0,5633,5632,1,0,0,0,5633,5634,1,0,0,0,5634,5636,1,0,0,0,5635,5637,
        5,177,0,0,5636,5635,1,0,0,0,5636,5637,1,0,0,0,5637,943,1,0,0,0,5638,
        5639,5,258,0,0,5639,5640,3,1192,596,0,5640,945,1,0,0,0,5641,5642,
        5,420,0,0,5642,5644,3,1256,628,0,5643,5645,3,948,474,0,5644,5643,
        1,0,0,0,5644,5645,1,0,0,0,5645,5647,1,0,0,0,5646,5648,3,1118,559,
        0,5647,5646,1,0,0,0,5647,5648,1,0,0,0,5648,5650,1,0,0,0,5649,5651,
        3,1120,560,0,5650,5649,1,0,0,0,5650,5651,1,0,0,0,5651,5653,1,0,0,
        0,5652,5654,5,178,0,0,5653,5652,1,0,0,0,5653,5654,1,0,0,0,5654,947,
        1,0,0,0,5655,5656,5,221,0,0,5656,5657,3,1176,588,0,5657,949,1,0,
        0,0,5658,5660,5,430,0,0,5659,5661,5,10,0,0,5660,5659,1,0,0,0,5660,
        5661,1,0,0,0,5661,5662,1,0,0,0,5662,5664,3,1192,596,0,5663,5665,
        3,952,476,0,5664,5663,1,0,0,0,5664,5665,1,0,0,0,5665,5667,1,0,0,
        0,5666,5668,3,1114,557,0,5667,5666,1,0,0,0,5667,5668,1,0,0,0,5668,
        5670,1,0,0,0,5669,5671,3,954,477,0,5670,5669,1,0,0,0,5671,5672,1,
        0,0,0,5672,5670,1,0,0,0,5672,5673,1,0,0,0,5673,5675,1,0,0,0,5674,
        5676,5,179,0,0,5675,5674,1,0,0,0,5675,5676,1,0,0,0,5676,951,1,0,
        0,0,5677,5678,5,522,0,0,5678,5679,3,1192,596,0,5679,953,1,0,0,0,
        5680,5681,5,525,0,0,5681,5690,3,1148,574,0,5682,5683,5,320,0,0,5683,
        5691,5,438,0,0,5684,5686,3,596,298,0,5685,5684,1,0,0,0,5686,5689,
        1,0,0,0,5687,5685,1,0,0,0,5687,5688,1,0,0,0,5688,5691,1,0,0,0,5689,
        5687,1,0,0,0,5690,5682,1,0,0,0,5690,5687,1,0,0,0,5691,955,1,0,0,
        0,5692,5695,5,437,0,0,5693,5696,3,958,479,0,5694,5696,3,960,480,
        0,5695,5693,1,0,0,0,5695,5694,1,0,0,0,5696,5698,1,0,0,0,5697,5699,
        3,1130,565,0,5698,5697,1,0,0,0,5698,5699,1,0,0,0,5699,5701,1,0,0,
        0,5700,5702,3,1132,566,0,5701,5700,1,0,0,0,5701,5702,1,0,0,0,5702,
        957,1,0,0,0,5703,5706,3,1176,588,0,5704,5706,3,482,241,0,5705,5703,
        1,0,0,0,5705,5704,1,0,0,0,5706,5708,1,0,0,0,5707,5709,3,962,481,
        0,5708,5707,1,0,0,0,5708,5709,1,0,0,0,5709,5711,1,0,0,0,5710,5712,
        3,964,482,0,5711,5710,1,0,0,0,5711,5712,1,0,0,0,5712,5714,1,0,0,
        0,5713,5715,3,966,483,0,5714,5713,1,0,0,0,5714,5715,1,0,0,0,5715,
        5717,1,0,0,0,5716,5718,3,968,484,0,5717,5716,1,0,0,0,5717,5718,1,
        0,0,0,5718,959,1,0,0,0,5719,5720,5,501,0,0,5720,5721,7,64,0,0,5721,
        5722,3,1176,588,0,5722,961,1,0,0,0,5723,5724,5,221,0,0,5724,5725,
        3,1176,588,0,5725,963,1,0,0,0,5726,5731,5,527,0,0,5727,5732,5,158,
        0,0,5728,5732,5,160,0,0,5729,5732,5,198,0,0,5730,5732,3,1176,588,
        0,5731,5727,1,0,0,0,5731,5728,1,0,0,0,5731,5729,1,0,0,0,5731,5730,
        1,0,0,0,5732,965,1,0,0,0,5733,5735,5,406,0,0,5734,5736,5,289,0,0,
        5735,5734,1,0,0,0,5735,5736,1,0,0,0,5736,967,1,0,0,0,5737,5739,7,
        61,0,0,5738,5740,5,7,0,0,5739,5738,1,0,0,0,5739,5740,1,0,0,0,5740,
        5744,1,0,0,0,5741,5745,3,970,485,0,5742,5745,3,972,486,0,5743,5745,
        3,974,487,0,5744,5741,1,0,0,0,5744,5742,1,0,0,0,5744,5743,1,0,0,
        0,5745,969,1,0,0,0,5746,5747,5,352,0,0,5747,971,1,0,0,0,5748,5751,
        3,1176,588,0,5749,5751,3,482,241,0,5750,5748,1,0,0,0,5750,5749,1,
        0,0,0,5751,5753,1,0,0,0,5752,5754,7,34,0,0,5753,5752,1,0,0,0,5753,
        5754,1,0,0,0,5754,973,1,0,0,0,5755,5756,3,1248,624,0,5756,975,1,
        0,0,0,5757,5764,5,442,0,0,5758,5760,3,978,489,0,5759,5758,1,0,0,
        0,5760,5761,1,0,0,0,5761,5759,1,0,0,0,5761,5762,1,0,0,0,5762,5765,
        1,0,0,0,5763,5765,3,980,490,0,5764,5759,1,0,0,0,5764,5763,1,0,0,
        0,5765,977,1,0,0,0,5766,5768,3,982,491,0,5767,5766,1,0,0,0,5768,
        5769,1,0,0,0,5769,5767,1,0,0,0,5769,5770,1,0,0,0,5770,5771,1,0,0,
        0,5771,5773,5,501,0,0,5772,5774,3,984,492,0,5773,5772,1,0,0,0,5774,
        5775,1,0,0,0,5775,5773,1,0,0,0,5775,5776,1,0,0,0,5776,979,1,0,0,
        0,5777,5779,3,982,491,0,5778,5777,1,0,0,0,5779,5780,1,0,0,0,5780,
        5778,1,0,0,0,5780,5781,1,0,0,0,5781,5786,1,0,0,0,5782,5783,5,515,
        0,0,5783,5787,5,52,0,0,5784,5785,5,153,0,0,5785,5787,5,52,0,0,5786,
        5782,1,0,0,0,5786,5784,1,0,0,0,5787,5788,1,0,0,0,5788,5789,3,986,
        493,0,5789,981,1,0,0,0,5790,5791,3,1176,588,0,5791,983,1,0,0,0,5792,
        5804,5,338,0,0,5793,5804,5,336,0,0,5794,5797,5,188,0,0,5795,5798,
        3,1176,588,0,5796,5798,3,482,241,0,5797,5795,1,0,0,0,5797,5796,1,
        0,0,0,5798,5804,1,0,0,0,5799,5804,3,1176,588,0,5800,5804,3,482,241,
        0,5801,5804,5,507,0,0,5802,5804,5,210,0,0,5803,5792,1,0,0,0,5803,
        5793,1,0,0,0,5803,5794,1,0,0,0,5803,5799,1,0,0,0,5803,5800,1,0,0,
        0,5803,5801,1,0,0,0,5803,5802,1,0,0,0,5804,985,1,0,0,0,5805,5808,
        3,1176,588,0,5806,5808,3,482,241,0,5807,5805,1,0,0,0,5807,5806,1,
        0,0,0,5808,987,1,0,0,0,5809,5810,5,452,0,0,5810,5812,3,1236,618,
        0,5811,5813,3,990,495,0,5812,5811,1,0,0,0,5813,5814,1,0,0,0,5814,
        5812,1,0,0,0,5814,5815,1,0,0,0,5815,5817,1,0,0,0,5816,5818,3,992,
        496,0,5817,5816,1,0,0,0,5817,5818,1,0,0,0,5818,5820,1,0,0,0,5819,
        5821,3,994,497,0,5820,5819,1,0,0,0,5820,5821,1,0,0,0,5821,5823,1,
        0,0,0,5822,5824,3,1000,500,0,5823,5822,1,0,0,0,5823,5824,1,0,0,0,
        5824,5828,1,0,0,0,5825,5827,3,1004,502,0,5826,5825,1,0,0,0,5827,
        5830,1,0,0,0,5828,5826,1,0,0,0,5828,5829,1,0,0,0,5829,5832,1,0,0,
        0,5830,5828,1,0,0,0,5831,5833,3,1006,503,0,5832,5831,1,0,0,0,5832,
        5833,1,0,0,0,5833,5837,1,0,0,0,5834,5836,3,1010,505,0,5835,5834,
        1,0,0,0,5836,5839,1,0,0,0,5837,5835,1,0,0,0,5837,5838,1,0,0,0,5838,
        989,1,0,0,0,5839,5837,1,0,0,0,5840,5842,5,338,0,0,5841,5840,1,0,
        0,0,5841,5842,1,0,0,0,5842,5843,1,0,0,0,5843,5845,7,44,0,0,5844,
        5846,5,269,0,0,5845,5844,1,0,0,0,5845,5846,1,0,0,0,5846,5848,1,0,
        0,0,5847,5849,3,1192,596,0,5848,5847,1,0,0,0,5849,5850,1,0,0,0,5850,
        5848,1,0,0,0,5850,5851,1,0,0,0,5851,991,1,0,0,0,5852,5854,5,527,
        0,0,5853,5852,1,0,0,0,5853,5854,1,0,0,0,5854,5855,1,0,0,0,5855,5857,
        5,154,0,0,5856,5858,5,246,0,0,5857,5856,1,0,0,0,5857,5858,1,0,0,
        0,5858,5860,1,0,0,0,5859,5861,5,342,0,0,5860,5859,1,0,0,0,5860,5861,
        1,0,0,0,5861,993,1,0,0,0,5862,5864,5,75,0,0,5863,5862,1,0,0,0,5863,
        5864,1,0,0,0,5864,5865,1,0,0,0,5865,5867,5,440,0,0,5866,5868,5,261,
        0,0,5867,5866,1,0,0,0,5867,5868,1,0,0,0,5868,5870,1,0,0,0,5869,5871,
        3,1216,608,0,5870,5869,1,0,0,0,5871,5872,1,0,0,0,5872,5870,1,0,0,
        0,5872,5873,1,0,0,0,5873,5875,1,0,0,0,5874,5876,3,996,498,0,5875,
        5874,1,0,0,0,5875,5876,1,0,0,0,5876,5878,1,0,0,0,5877,5879,3,998,
        499,0,5878,5877,1,0,0,0,5878,5879,1,0,0,0,5879,995,1,0,0,0,5880,
        5882,5,218,0,0,5881,5880,1,0,0,0,5881,5882,1,0,0,0,5882,5883,1,0,
        0,0,5883,5884,5,15,0,0,5884,5885,5,261,0,0,5885,5886,3,1216,608,
        0,5886,997,1,0,0,0,5887,5889,5,218,0,0,5888,5887,1,0,0,0,5888,5889,
        1,0,0,0,5889,5890,1,0,0,0,5890,5892,5,315,0,0,5891,5893,5,261,0,
        0,5892,5891,1,0,0,0,5892,5893,1,0,0,0,5893,5894,1,0,0,0,5894,5895,
        3,1216,608,0,5895,999,1,0,0,0,5896,5897,5,253,0,0,5897,5899,5,368,
        0,0,5898,5900,5,261,0,0,5899,5898,1,0,0,0,5899,5900,1,0,0,0,5900,
        5901,1,0,0,0,5901,5903,3,1252,626,0,5902,5904,3,1002,501,0,5903,
        5902,1,0,0,0,5903,5904,1,0,0,0,5904,1001,1,0,0,0,5905,5906,7,5,0,
        0,5906,5907,3,1252,626,0,5907,1003,1,0,0,0,5908,5910,5,519,0,0,5909,
        5911,3,1236,618,0,5910,5909,1,0,0,0,5911,5912,1,0,0,0,5912,5910,
        1,0,0,0,5912,5913,1,0,0,0,5913,1005,1,0,0,0,5914,5915,5,346,0,0,
        5915,5917,5,368,0,0,5916,5918,5,261,0,0,5917,5916,1,0,0,0,5917,5918,
        1,0,0,0,5918,5919,1,0,0,0,5919,5921,3,1252,626,0,5920,5922,3,1008,
        504,0,5921,5920,1,0,0,0,5921,5922,1,0,0,0,5922,1007,1,0,0,0,5923,
        5924,7,5,0,0,5924,5925,3,1252,626,0,5925,1009,1,0,0,0,5926,5928,
        5,228,0,0,5927,5929,3,1012,506,0,5928,5927,1,0,0,0,5929,5930,1,0,
        0,0,5930,5928,1,0,0,0,5930,5931,1,0,0,0,5931,1011,1,0,0,0,5932,5942,
        3,1236,618,0,5933,5943,5,296,0,0,5934,5943,5,427,0,0,5935,5936,5,
        322,0,0,5936,5943,5,419,0,0,5937,5943,5,109,0,0,5938,5943,5,399,
        0,0,5939,5940,5,527,0,0,5940,5941,5,403,0,0,5941,5943,5,109,0,0,
        5942,5933,1,0,0,0,5942,5934,1,0,0,0,5942,5935,1,0,0,0,5942,5937,
        1,0,0,0,5942,5938,1,0,0,0,5942,5939,1,0,0,0,5942,5943,1,0,0,0,5943,
        1013,1,0,0,0,5944,5945,5,468,0,0,5945,5947,3,1236,618,0,5946,5948,
        3,1016,508,0,5947,5946,1,0,0,0,5947,5948,1,0,0,0,5948,5950,1,0,0,
        0,5949,5951,3,1118,559,0,5950,5949,1,0,0,0,5950,5951,1,0,0,0,5951,
        5953,1,0,0,0,5952,5954,3,1120,560,0,5953,5952,1,0,0,0,5953,5954,
        1,0,0,0,5954,5956,1,0,0,0,5955,5957,5,180,0,0,5956,5955,1,0,0,0,
        5956,5957,1,0,0,0,5957,1015,1,0,0,0,5958,5960,5,269,0,0,5959,5961,
        5,261,0,0,5960,5959,1,0,0,0,5960,5961,1,0,0,0,5961,5989,1,0,0,0,
        5962,5964,5,192,0,0,5963,5965,5,501,0,0,5964,5963,1,0,0,0,5964,5965,
        1,0,0,0,5965,5990,1,0,0,0,5966,5990,5,552,0,0,5967,5969,5,231,0,
        0,5968,5970,5,491,0,0,5969,5968,1,0,0,0,5969,5970,1,0,0,0,5970,5990,
        1,0,0,0,5971,5990,5,560,0,0,5972,5973,5,324,0,0,5973,5975,5,281,
        0,0,5974,5976,5,491,0,0,5975,5974,1,0,0,0,5975,5976,1,0,0,0,5976,
        5990,1,0,0,0,5977,5978,5,324,0,0,5978,5990,5,556,0,0,5979,5981,5,
        231,0,0,5980,5982,5,491,0,0,5981,5980,1,0,0,0,5981,5982,1,0,0,0,
        5982,5983,1,0,0,0,5983,5984,5,341,0,0,5984,5986,5,192,0,0,5985,5987,
        5,501,0,0,5986,5985,1,0,0,0,5986,5987,1,0,0,0,5987,5990,1,0,0,0,
        5988,5990,5,561,0,0,5989,5962,1,0,0,0,5989,5966,1,0,0,0,5989,5967,
        1,0,0,0,5989,5971,1,0,0,0,5989,5972,1,0,0,0,5989,5977,1,0,0,0,5989,
        5979,1,0,0,0,5989,5988,1,0,0,0,5990,5991,1,0,0,0,5991,5992,3,1192,
        596,0,5992,1017,1,0,0,0,5993,5996,5,470,0,0,5994,5997,5,425,0,0,
        5995,5997,3,482,241,0,5996,5994,1,0,0,0,5996,5995,1,0,0,0,5997,1019,
        1,0,0,0,5998,6000,5,471,0,0,5999,6001,3,1022,511,0,6000,5999,1,0,
        0,0,6001,6002,1,0,0,0,6002,6000,1,0,0,0,6002,6003,1,0,0,0,6003,6004,
        1,0,0,0,6004,6006,3,1030,515,0,6005,6007,3,1032,516,0,6006,6005,
        1,0,0,0,6006,6007,1,0,0,0,6007,6009,1,0,0,0,6008,6010,3,1122,561,
        0,6009,6008,1,0,0,0,6009,6010,1,0,0,0,6010,6012,1,0,0,0,6011,6013,
        3,1124,562,0,6012,6011,1,0,0,0,6012,6013,1,0,0,0,6013,6015,1,0,0,
        0,6014,6016,5,181,0,0,6015,6014,1,0,0,0,6015,6016,1,0,0,0,6016,1021,
        1,0,0,0,6017,6019,3,1024,512,0,6018,6017,1,0,0,0,6019,6020,1,0,0,
        0,6020,6018,1,0,0,0,6020,6021,1,0,0,0,6021,6024,1,0,0,0,6022,6025,
        3,1026,513,0,6023,6025,3,1028,514,0,6024,6022,1,0,0,0,6024,6023,
        1,0,0,0,6025,1023,1,0,0,0,6026,6029,3,1176,588,0,6027,6029,3,482,
        241,0,6028,6026,1,0,0,0,6028,6027,1,0,0,0,6029,1025,1,0,0,0,6030,
        6032,5,136,0,0,6031,6033,5,52,0,0,6032,6031,1,0,0,0,6032,6033,1,
        0,0,0,6033,6037,1,0,0,0,6034,6038,5,451,0,0,6035,6038,3,1176,588,
        0,6036,6038,3,482,241,0,6037,6034,1,0,0,0,6037,6035,1,0,0,0,6037,
        6036,1,0,0,0,6038,1027,1,0,0,0,6039,6042,5,218,0,0,6040,6043,3,1176,
        588,0,6041,6043,3,482,241,0,6042,6040,1,0,0,0,6042,6041,1,0,0,0,
        6043,1029,1,0,0,0,6044,6045,5,258,0,0,6045,6046,3,1176,588,0,6046,
        1031,1,0,0,0,6047,6049,5,527,0,0,6048,6047,1,0,0,0,6048,6049,1,0,
        0,0,6049,6050,1,0,0,0,6050,6051,5,361,0,0,6051,6052,3,1192,596,0,
        6052,1033,1,0,0,0,6053,6057,5,475,0,0,6054,6058,3,1036,518,0,6055,
        6058,3,1038,519,0,6056,6058,3,1040,520,0,6057,6054,1,0,0,0,6057,
        6055,1,0,0,0,6057,6056,1,0,0,0,6058,6060,1,0,0,0,6059,6061,3,1126,
        563,0,6060,6059,1,0,0,0,6060,6061,1,0,0,0,6061,6063,1,0,0,0,6062,
        6064,3,1128,564,0,6063,6062,1,0,0,0,6063,6064,1,0,0,0,6064,6066,
        1,0,0,0,6065,6067,5,182,0,0,6066,6065,1,0,0,0,6066,6067,1,0,0,0,
        6067,1035,1,0,0,0,6068,6070,3,1042,521,0,6069,6068,1,0,0,0,6070,
        6071,1,0,0,0,6071,6069,1,0,0,0,6071,6072,1,0,0,0,6072,6073,1,0,0,
        0,6073,6075,5,221,0,0,6074,6076,3,1044,522,0,6075,6074,1,0,0,0,6076,
        6077,1,0,0,0,6077,6075,1,0,0,0,6077,6078,1,0,0,0,6078,1037,1,0,0,
        0,6079,6081,3,1042,521,0,6080,6079,1,0,0,0,6081,6082,1,0,0,0,6082,
        6080,1,0,0,0,6082,6083,1,0,0,0,6083,6084,1,0,0,0,6084,6085,5,221,
        0,0,6085,6086,3,1046,523,0,6086,6088,5,228,0,0,6087,6089,3,1048,
        524,0,6088,6087,1,0,0,0,6089,6090,1,0,0,0,6090,6088,1,0,0,0,6090,
        6091,1,0,0,0,6091,1039,1,0,0,0,6092,6093,7,54,0,0,6093,6094,3,1192,
        596,0,6094,6095,5,221,0,0,6095,6096,3,1050,525,0,6096,1041,1,0,0,
        0,6097,6100,3,1176,588,0,6098,6100,3,482,241,0,6099,6097,1,0,0,0,
        6099,6098,1,0,0,0,6100,1043,1,0,0,0,6101,6103,3,1176,588,0,6102,
        6104,5,424,0,0,6103,6102,1,0,0,0,6103,6104,1,0,0,0,6104,1045,1,0,
        0,0,6105,6108,3,1176,588,0,6106,6108,3,482,241,0,6107,6105,1,0,0,
        0,6107,6106,1,0,0,0,6108,1047,1,0,0,0,6109,6111,3,1176,588,0,6110,
        6112,5,424,0,0,6111,6110,1,0,0,0,6111,6112,1,0,0,0,6112,1049,1,0,
        0,0,6113,6115,3,1192,596,0,6114,6116,5,424,0,0,6115,6114,1,0,0,0,
        6115,6116,1,0,0,0,6116,1051,1,0,0,0,6117,6118,3,1054,527,0,6118,
        6119,3,1056,528,0,6119,6120,3,1058,529,0,6120,6123,1,0,0,0,6121,
        6123,3,1060,530,0,6122,6117,1,0,0,0,6122,6121,1,0,0,0,6123,1053,
        1,0,0,0,6124,6125,5,505,0,0,6125,6127,5,468,0,0,6126,6128,7,1,0,
        0,6127,6126,1,0,0,0,6127,6128,1,0,0,0,6128,6130,1,0,0,0,6129,6131,
        5,832,0,0,6130,6129,1,0,0,0,6130,6131,1,0,0,0,6131,6133,1,0,0,0,
        6132,6134,7,1,0,0,6133,6132,1,0,0,0,6133,6134,1,0,0,0,6134,1055,
        1,0,0,0,6135,6137,3,596,298,0,6136,6135,1,0,0,0,6137,6140,1,0,0,
        0,6138,6136,1,0,0,0,6138,6139,1,0,0,0,6139,1057,1,0,0,0,6140,6138,
        1,0,0,0,6141,6142,5,505,0,0,6142,6144,5,163,0,0,6143,6145,7,1,0,
        0,6144,6143,1,0,0,0,6144,6145,1,0,0,0,6145,1059,1,0,0,0,6146,6147,
        5,505,0,0,6147,6149,5,56,0,0,6148,6150,5,832,0,0,6149,6148,1,0,0,
        0,6149,6150,1,0,0,0,6150,6152,1,0,0,0,6151,6153,7,1,0,0,6152,6151,
        1,0,0,0,6152,6153,1,0,0,0,6153,1061,1,0,0,0,6154,6155,5,488,0,0,
        6155,6156,3,1258,629,0,6156,1063,1,0,0,0,6157,6158,5,513,0,0,6158,
        6159,3,1066,533,0,6159,6161,3,1072,536,0,6160,6162,3,1080,540,0,
        6161,6160,1,0,0,0,6161,6162,1,0,0,0,6162,6164,1,0,0,0,6163,6165,
        3,1082,541,0,6164,6163,1,0,0,0,6164,6165,1,0,0,0,6165,6167,1,0,0,
        0,6166,6168,3,1122,561,0,6167,6166,1,0,0,0,6167,6168,1,0,0,0,6168,
        6170,1,0,0,0,6169,6171,3,1124,562,0,6170,6169,1,0,0,0,6170,6171,
        1,0,0,0,6171,6173,1,0,0,0,6172,6174,5,183,0,0,6173,6172,1,0,0,0,
        6173,6174,1,0,0,0,6174,1065,1,0,0,0,6175,6183,3,1176,588,0,6176,
        6180,3,1068,534,0,6177,6179,3,1070,535,0,6178,6177,1,0,0,0,6179,
        6182,1,0,0,0,6180,6178,1,0,0,0,6180,6181,1,0,0,0,6181,6184,1,0,0,
        0,6182,6180,1,0,0,0,6183,6176,1,0,0,0,6183,6184,1,0,0,0,6184,1067,
        1,0,0,0,6185,6187,5,136,0,0,6186,6188,5,52,0,0,6187,6186,1,0,0,0,
        6187,6188,1,0,0,0,6188,6190,1,0,0,0,6189,6191,5,10,0,0,6190,6189,
        1,0,0,0,6190,6191,1,0,0,0,6191,6194,1,0,0,0,6192,6195,3,1176,588,
        0,6193,6195,3,482,241,0,6194,6192,1,0,0,0,6194,6193,1,0,0,0,6195,
        1069,1,0,0,0,6196,6198,5,341,0,0,6197,6199,5,10,0,0,6198,6197,1,
        0,0,0,6198,6199,1,0,0,0,6199,6202,1,0,0,0,6200,6203,3,1176,588,0,
        6201,6203,3,482,241,0,6202,6200,1,0,0,0,6202,6201,1,0,0,0,6203,1071,
        1,0,0,0,6204,6206,5,258,0,0,6205,6207,3,1074,537,0,6206,6205,1,0,
        0,0,6207,6208,1,0,0,0,6208,6206,1,0,0,0,6208,6209,1,0,0,0,6209,1073,
        1,0,0,0,6210,6212,3,1176,588,0,6211,6213,3,1076,538,0,6212,6211,
        1,0,0,0,6212,6213,1,0,0,0,6213,6215,1,0,0,0,6214,6216,3,1078,539,
        0,6215,6214,1,0,0,0,6215,6216,1,0,0,0,6216,1075,1,0,0,0,6217,6219,
        5,137,0,0,6218,6220,5,246,0,0,6219,6218,1,0,0,0,6219,6220,1,0,0,
        0,6220,6221,1,0,0,0,6221,6222,3,1176,588,0,6222,1077,1,0,0,0,6223,
        6225,5,108,0,0,6224,6226,5,246,0,0,6225,6224,1,0,0,0,6225,6226,1,
        0,0,0,6226,6227,1,0,0,0,6227,6228,3,1176,588,0,6228,1079,1,0,0,0,
        6229,6231,5,527,0,0,6230,6229,1,0,0,0,6230,6231,1,0,0,0,6231,6232,
        1,0,0,0,6232,6233,5,361,0,0,6233,6234,3,1192,596,0,6234,1081,1,0,
        0,0,6235,6237,5,484,0,0,6236,6238,5,246,0,0,6237,6236,1,0,0,0,6237,
        6238,1,0,0,0,6238,6239,1,0,0,0,6239,6240,3,1192,596,0,6240,1083,
        1,0,0,0,6241,6246,5,518,0,0,6242,6247,3,1088,544,0,6243,6247,3,1092,
        546,0,6244,6247,3,1096,548,0,6245,6247,3,1086,543,0,6246,6242,1,
        0,0,0,6246,6243,1,0,0,0,6246,6244,1,0,0,0,6246,6245,1,0,0,0,6247,
        1085,1,0,0,0,6248,6249,5,218,0,0,6249,6250,3,1192,596,0,6250,1087,
        1,0,0,0,6251,6253,5,229,0,0,6252,6251,1,0,0,0,6252,6253,1,0,0,0,
        6253,6254,1,0,0,0,6254,6256,5,8,0,0,6255,6257,5,465,0,0,6256,6255,
        1,0,0,0,6256,6257,1,0,0,0,6257,6258,1,0,0,0,6258,6259,7,65,0,0,6259,
        6261,5,368,0,0,6260,6262,5,338,0,0,6261,6260,1,0,0,0,6261,6262,1,
        0,0,0,6262,6263,1,0,0,0,6263,6264,3,1090,545,0,6264,1089,1,0,0,0,
        6265,6275,5,253,0,0,6266,6275,5,346,0,0,6267,6275,5,239,0,0,6268,
        6275,5,207,0,0,6269,6271,3,1236,618,0,6270,6269,1,0,0,0,6271,6272,
        1,0,0,0,6272,6270,1,0,0,0,6272,6273,1,0,0,0,6273,6275,1,0,0,0,6274,
        6265,1,0,0,0,6274,6266,1,0,0,0,6274,6267,1,0,0,0,6274,6268,1,0,0,
        0,6274,6270,1,0,0,0,6275,1091,1,0,0,0,6276,6278,5,218,0,0,6277,6276,
        1,0,0,0,6277,6278,1,0,0,0,6278,6279,1,0,0,0,6279,6281,5,128,0,0,
        6280,6282,5,338,0,0,6281,6280,1,0,0,0,6281,6282,1,0,0,0,6282,6284,
        1,0,0,0,6283,6285,3,1094,547,0,6284,6283,1,0,0,0,6285,6286,1,0,0,
        0,6286,6284,1,0,0,0,6286,6287,1,0,0,0,6287,1093,1,0,0,0,6288,6289,
        5,10,0,0,6289,6301,5,370,0,0,6290,6292,5,10,0,0,6291,6293,5,397,
        0,0,6292,6291,1,0,0,0,6292,6293,1,0,0,0,6293,6295,1,0,0,0,6294,6296,
        5,335,0,0,6295,6294,1,0,0,0,6295,6296,1,0,0,0,6296,6297,1,0,0,0,
        6297,6301,3,1176,588,0,6298,6301,3,1252,626,0,6299,6301,3,1236,618,
        0,6300,6288,1,0,0,0,6300,6290,1,0,0,0,6300,6298,1,0,0,0,6300,6299,
        1,0,0,0,6301,1095,1,0,0,0,6302,6304,5,218,0,0,6303,6302,1,0,0,0,
        6303,6304,1,0,0,0,6304,6305,1,0,0,0,6305,6306,5,131,0,0,6306,1097,
        1,0,0,0,6307,6308,5,530,0,0,6308,6310,3,1256,628,0,6309,6311,3,1100,
        550,0,6310,6309,1,0,0,0,6310,6311,1,0,0,0,6311,6313,1,0,0,0,6312,
        6314,3,1102,551,0,6313,6312,1,0,0,0,6313,6314,1,0,0,0,6314,6316,
        1,0,0,0,6315,6317,3,1110,555,0,6316,6315,1,0,0,0,6316,6317,1,0,0,
        0,6317,6319,1,0,0,0,6318,6320,3,1112,556,0,6319,6318,1,0,0,0,6319,
        6320,1,0,0,0,6320,6322,1,0,0,0,6321,6323,3,1118,559,0,6322,6321,
        1,0,0,0,6322,6323,1,0,0,0,6323,6325,1,0,0,0,6324,6326,3,1120,560,
        0,6325,6324,1,0,0,0,6325,6326,1,0,0,0,6326,6328,1,0,0,0,6327,6329,
        5,184,0,0,6328,6327,1,0,0,0,6328,6329,1,0,0,0,6329,1099,1,0,0,0,
        6330,6333,5,221,0,0,6331,6334,3,1176,588,0,6332,6334,3,482,241,0,
        6333,6331,1,0,0,0,6333,6332,1,0,0,0,6334,1101,1,0,0,0,6335,6337,
        7,61,0,0,6336,6338,5,7,0,0,6337,6336,1,0,0,0,6337,6338,1,0,0,0,6338,
        6342,1,0,0,0,6339,6343,3,1104,552,0,6340,6343,3,1106,553,0,6341,
        6343,3,1108,554,0,6342,6339,1,0,0,0,6342,6340,1,0,0,0,6342,6341,
        1,0,0,0,6343,1103,1,0,0,0,6344,6345,5,352,0,0,6345,1105,1,0,0,0,
        6346,6349,3,1176,588,0,6347,6349,3,482,241,0,6348,6346,1,0,0,0,6348,
        6347,1,0,0,0,6349,6351,1,0,0,0,6350,6352,7,34,0,0,6351,6350,1,0,
        0,0,6351,6352,1,0,0,0,6352,1107,1,0,0,0,6353,6354,3,1248,624,0,6354,
        1109,1,0,0,0,6355,6357,5,31,0,0,6356,6355,1,0,0,0,6356,6357,1,0,
        0,0,6357,6358,1,0,0,0,6358,6362,7,66,0,0,6359,6361,3,596,298,0,6360,
        6359,1,0,0,0,6361,6364,1,0,0,0,6362,6360,1,0,0,0,6362,6363,1,0,0,
        0,6363,1111,1,0,0,0,6364,6362,1,0,0,0,6365,6367,5,324,0,0,6366,6368,
        5,31,0,0,6367,6366,1,0,0,0,6367,6368,1,0,0,0,6368,6369,1,0,0,0,6369,
        6373,7,66,0,0,6370,6372,3,596,298,0,6371,6370,1,0,0,0,6372,6375,
        1,0,0,0,6373,6371,1,0,0,0,6373,6374,1,0,0,0,6374,1113,1,0,0,0,6375,
        6373,1,0,0,0,6376,6378,5,31,0,0,6377,6376,1,0,0,0,6377,6378,1,0,
        0,0,6378,6379,1,0,0,0,6379,6383,5,163,0,0,6380,6382,3,596,298,0,
        6381,6380,1,0,0,0,6382,6385,1,0,0,0,6383,6381,1,0,0,0,6383,6384,
        1,0,0,0,6384,1115,1,0,0,0,6385,6383,1,0,0,0,6386,6388,5,324,0,0,
        6387,6389,5,31,0,0,6388,6387,1,0,0,0,6388,6389,1,0,0,0,6389,6390,
        1,0,0,0,6390,6394,5,163,0,0,6391,6393,3,596,298,0,6392,6391,1,0,
        0,0,6393,6396,1,0,0,0,6394,6392,1,0,0,0,6394,6395,1,0,0,0,6395,1117,
        1,0,0,0,6396,6394,1,0,0,0,6397,6399,5,259,0,0,6398,6400,5,269,0,
        0,6399,6398,1,0,0,0,6399,6400,1,0,0,0,6400,6404,1,0,0,0,6401,6403,
        3,596,298,0,6402,6401,1,0,0,0,6403,6406,1,0,0,0,6404,6402,1,0,0,
        0,6404,6405,1,0,0,0,6405,1119,1,0,0,0,6406,6404,1,0,0,0,6407,6408,
        5,324,0,0,6408,6410,5,259,0,0,6409,6411,5,269,0,0,6410,6409,1,0,
        0,0,6410,6411,1,0,0,0,6411,6415,1,0,0,0,6412,6414,3,596,298,0,6413,
        6412,1,0,0,0,6414,6417,1,0,0,0,6415,6413,1,0,0,0,6415,6416,1,0,0,
        0,6416,1121,1,0,0,0,6417,6415,1,0,0,0,6418,6420,5,338,0,0,6419,6418,
        1,0,0,0,6419,6420,1,0,0,0,6420,6421,1,0,0,0,6421,6425,5,347,0,0,
        6422,6424,3,596,298,0,6423,6422,1,0,0,0,6424,6427,1,0,0,0,6425,6423,
        1,0,0,0,6425,6426,1,0,0,0,6426,1123,1,0,0,0,6427,6425,1,0,0,0,6428,
        6430,5,324,0,0,6429,6431,5,338,0,0,6430,6429,1,0,0,0,6430,6431,1,
        0,0,0,6431,6432,1,0,0,0,6432,6436,5,347,0,0,6433,6435,3,596,298,
        0,6434,6433,1,0,0,0,6435,6438,1,0,0,0,6436,6434,1,0,0,0,6436,6437,
        1,0,0,0,6437,1125,1,0,0,0,6438,6436,1,0,0,0,6439,6441,5,338,0,0,
        6440,6439,1,0,0,0,6440,6441,1,0,0,0,6441,6442,1,0,0,0,6442,6443,
        5,451,0,0,6443,6447,5,194,0,0,6444,6446,3,596,298,0,6445,6444,1,
        0,0,0,6446,6449,1,0,0,0,6447,6445,1,0,0,0,6447,6448,1,0,0,0,6448,
        1127,1,0,0,0,6449,6447,1,0,0,0,6450,6452,5,324,0,0,6451,6453,5,338,
        0,0,6452,6451,1,0,0,0,6452,6453,1,0,0,0,6453,6454,1,0,0,0,6454,6455,
        5,451,0,0,6455,6459,5,194,0,0,6456,6458,3,596,298,0,6457,6456,1,
        0,0,0,6458,6461,1,0,0,0,6459,6457,1,0,0,0,6459,6460,1,0,0,0,6460,
        1129,1,0,0,0,6461,6459,1,0,0,0,6462,6464,5,338,0,0,6463,6462,1,0,
        0,0,6463,6464,1,0,0,0,6464,6465,1,0,0,0,6465,6469,5,202,0,0,6466,
        6468,3,596,298,0,6467,6466,1,0,0,0,6468,6471,1,0,0,0,6469,6467,1,
        0,0,0,6469,6470,1,0,0,0,6470,1131,1,0,0,0,6471,6469,1,0,0,0,6472,
        6474,5,324,0,0,6473,6475,5,338,0,0,6474,6473,1,0,0,0,6474,6475,1,
        0,0,0,6475,6476,1,0,0,0,6476,6480,5,202,0,0,6477,6479,3,596,298,
        0,6478,6477,1,0,0,0,6479,6482,1,0,0,0,6480,6478,1,0,0,0,6480,6481,
        1,0,0,0,6481,1133,1,0,0,0,6482,6480,1,0,0,0,6483,6487,3,1138,569,
        0,6484,6486,3,1136,568,0,6485,6484,1,0,0,0,6486,6489,1,0,0,0,6487,
        6485,1,0,0,0,6487,6488,1,0,0,0,6488,1135,1,0,0,0,6489,6487,1,0,0,
        0,6490,6491,7,67,0,0,6491,6492,3,1138,569,0,6492,1137,1,0,0,0,6493,
        6497,3,1142,571,0,6494,6496,3,1140,570,0,6495,6494,1,0,0,0,6496,
        6499,1,0,0,0,6497,6495,1,0,0,0,6497,6498,1,0,0,0,6498,1139,1,0,0,
        0,6499,6497,1,0,0,0,6500,6501,7,68,0,0,6501,6502,3,1142,571,0,6502,
        1141,1,0,0,0,6503,6505,7,67,0,0,6504,6503,1,0,0,0,6504,6505,1,0,
        0,0,6505,6506,1,0,0,0,6506,6510,3,1146,573,0,6507,6509,3,1144,572,
        0,6508,6507,1,0,0,0,6509,6512,1,0,0,0,6510,6508,1,0,0,0,6510,6511,
        1,0,0,0,6511,1143,1,0,0,0,6512,6510,1,0,0,0,6513,6514,5,540,0,0,
        6514,6515,3,1146,573,0,6515,1145,1,0,0,0,6516,6517,5,558,0,0,6517,
        6518,3,1134,567,0,6518,6519,5,565,0,0,6519,6524,1,0,0,0,6520,6524,
        3,1176,588,0,6521,6524,3,482,241,0,6522,6524,3,1282,641,0,6523,6516,
        1,0,0,0,6523,6520,1,0,0,0,6523,6521,1,0,0,0,6523,6522,1,0,0,0,6524,
        1147,1,0,0,0,6525,6529,3,1152,576,0,6526,6528,3,1150,575,0,6527,
        6526,1,0,0,0,6528,6531,1,0,0,0,6529,6527,1,0,0,0,6529,6530,1,0,0,
        0,6530,1149,1,0,0,0,6531,6529,1,0,0,0,6532,6540,7,69,0,0,6533,6541,
        3,1152,576,0,6534,6536,3,1174,587,0,6535,6534,1,0,0,0,6536,6537,
        1,0,0,0,6537,6535,1,0,0,0,6537,6538,1,0,0,0,6538,6541,1,0,0,0,6539,
        6541,3,1276,638,0,6540,6533,1,0,0,0,6540,6535,1,0,0,0,6540,6539,
        1,0,0,0,6541,1151,1,0,0,0,6542,6544,5,324,0,0,6543,6542,1,0,0,0,
        6543,6544,1,0,0,0,6544,6545,1,0,0,0,6545,6546,3,1154,577,0,6546,
        1153,1,0,0,0,6547,6548,5,558,0,0,6548,6549,3,1148,574,0,6549,6550,
        5,565,0,0,6550,6555,1,0,0,0,6551,6555,3,1162,581,0,6552,6555,3,1156,
        578,0,6553,6555,3,1158,579,0,6554,6547,1,0,0,0,6554,6551,1,0,0,0,
        6554,6552,1,0,0,0,6554,6553,1,0,0,0,6555,1155,1,0,0,0,6556,6558,
        3,1176,588,0,6557,6559,5,261,0,0,6558,6557,1,0,0,0,6558,6559,1,0,
        0,0,6559,6561,1,0,0,0,6560,6562,5,324,0,0,6561,6560,1,0,0,0,6561,
        6562,1,0,0,0,6562,6570,1,0,0,0,6563,6571,5,328,0,0,6564,6571,5,12,
        0,0,6565,6571,5,13,0,0,6566,6571,5,14,0,0,6567,6571,5,119,0,0,6568,
        6571,5,264,0,0,6569,6571,3,1224,612,0,6570,6563,1,0,0,0,6570,6564,
        1,0,0,0,6570,6565,1,0,0,0,6570,6566,1,0,0,0,6570,6567,1,0,0,0,6570,
        6568,1,0,0,0,6570,6569,1,0,0,0,6571,1157,1,0,0,0,6572,6594,3,1228,
        614,0,6573,6575,3,1204,602,0,6574,6573,1,0,0,0,6575,6578,1,0,0,0,
        6576,6574,1,0,0,0,6576,6577,1,0,0,0,6577,6580,1,0,0,0,6578,6576,
        1,0,0,0,6579,6581,3,1206,603,0,6580,6579,1,0,0,0,6580,6581,1,0,0,
        0,6581,6585,1,0,0,0,6582,6584,3,1160,580,0,6583,6582,1,0,0,0,6584,
        6587,1,0,0,0,6585,6583,1,0,0,0,6585,6586,1,0,0,0,6586,6595,1,0,0,
        0,6587,6585,1,0,0,0,6588,6590,3,1208,604,0,6589,6588,1,0,0,0,6590,
        6593,1,0,0,0,6591,6589,1,0,0,0,6591,6592,1,0,0,0,6592,6595,1,0,0,
        0,6593,6591,1,0,0,0,6594,6576,1,0,0,0,6594,6591,1,0,0,0,6595,1159,
        1,0,0,0,6596,6597,5,558,0,0,6597,6604,3,1188,594,0,6598,6600,5,542,
        0,0,6599,6598,1,0,0,0,6599,6600,1,0,0,0,6600,6601,1,0,0,0,6601,6603,
        3,1188,594,0,6602,6599,1,0,0,0,6603,6606,1,0,0,0,6604,6602,1,0,0,
        0,6604,6605,1,0,0,0,6605,6607,1,0,0,0,6606,6604,1,0,0,0,6607,6608,
        5,565,0,0,6608,1161,1,0,0,0,6609,6613,3,1164,582,0,6610,6613,3,1166,
        583,0,6611,6613,3,1168,584,0,6612,6609,1,0,0,0,6612,6610,1,0,0,0,
        6612,6611,1,0,0,0,6613,1163,1,0,0,0,6614,6616,3,1134,567,0,6615,
        6617,5,261,0,0,6616,6615,1,0,0,0,6616,6617,1,0,0,0,6617,6619,1,0,
        0,0,6618,6620,5,324,0,0,6619,6618,1,0,0,0,6619,6620,1,0,0,0,6620,
        6621,1,0,0,0,6621,6622,7,70,0,0,6622,1165,1,0,0,0,6623,6624,3,1134,
        567,0,6624,6625,3,1172,586,0,6625,6626,3,1134,567,0,6626,1167,1,
        0,0,0,6627,6628,3,1134,567,0,6628,6629,3,1172,586,0,6629,6630,5,
        558,0,0,6630,6631,3,1170,585,0,6631,6632,5,565,0,0,6632,1169,1,0,
        0,0,6633,6636,3,1134,567,0,6634,6635,7,69,0,0,6635,6637,3,1134,567,
        0,6636,6634,1,0,0,0,6637,6638,1,0,0,0,6638,6636,1,0,0,0,6638,6639,
        1,0,0,0,6639,1171,1,0,0,0,6640,6642,7,9,0,0,6641,6640,1,0,0,0,6641,
        6642,1,0,0,0,6642,6684,1,0,0,0,6643,6645,5,324,0,0,6644,6643,1,0,
        0,0,6644,6645,1,0,0,0,6645,6661,1,0,0,0,6646,6648,5,231,0,0,6647,
        6649,5,491,0,0,6648,6647,1,0,0,0,6648,6649,1,0,0,0,6649,6662,1,0,
        0,0,6650,6662,5,560,0,0,6651,6653,5,281,0,0,6652,6654,5,491,0,0,
        6653,6652,1,0,0,0,6653,6654,1,0,0,0,6654,6662,1,0,0,0,6655,6662,
        5,556,0,0,6656,6658,5,192,0,0,6657,6659,5,501,0,0,6658,6657,1,0,
        0,0,6658,6659,1,0,0,0,6659,6662,1,0,0,0,6660,6662,5,552,0,0,6661,
        6646,1,0,0,0,6661,6650,1,0,0,0,6661,6651,1,0,0,0,6661,6655,1,0,0,
        0,6661,6656,1,0,0,0,6661,6660,1,0,0,0,6662,6685,1,0,0,0,6663,6685,
        5,562,0,0,6664,6666,5,231,0,0,6665,6667,5,491,0,0,6666,6665,1,0,
        0,0,6666,6667,1,0,0,0,6667,6668,1,0,0,0,6668,6669,5,341,0,0,6669,
        6671,5,192,0,0,6670,6672,5,501,0,0,6671,6670,1,0,0,0,6671,6672,1,
        0,0,0,6672,6685,1,0,0,0,6673,6685,5,561,0,0,6674,6676,5,281,0,0,
        6675,6677,5,491,0,0,6676,6675,1,0,0,0,6676,6677,1,0,0,0,6677,6678,
        1,0,0,0,6678,6679,5,341,0,0,6679,6681,5,192,0,0,6680,6682,5,501,
        0,0,6681,6680,1,0,0,0,6681,6682,1,0,0,0,6682,6685,1,0,0,0,6683,6685,
        5,557,0,0,6684,6644,1,0,0,0,6684,6663,1,0,0,0,6684,6664,1,0,0,0,
        6684,6673,1,0,0,0,6684,6674,1,0,0,0,6684,6683,1,0,0,0,6685,1173,
        1,0,0,0,6686,6688,5,324,0,0,6687,6686,1,0,0,0,6687,6688,1,0,0,0,
        6688,6690,1,0,0,0,6689,6691,3,1172,586,0,6690,6689,1,0,0,0,6690,
        6691,1,0,0,0,6691,6698,1,0,0,0,6692,6699,3,1134,567,0,6693,6694,
        5,558,0,0,6694,6695,3,1134,567,0,6695,6696,3,1174,587,0,6696,6697,
        5,565,0,0,6697,6699,1,0,0,0,6698,6692,1,0,0,0,6698,6693,1,0,0,0,
        6699,1175,1,0,0,0,6700,6705,3,1192,596,0,6701,6705,3,1178,589,0,
        6702,6705,3,1180,590,0,6703,6705,3,1284,642,0,6704,6700,1,0,0,0,
        6704,6701,1,0,0,0,6704,6702,1,0,0,0,6704,6703,1,0,0,0,6705,1177,
        1,0,0,0,6706,6722,3,1192,596,0,6707,6708,5,558,0,0,6708,6715,3,1188,
        594,0,6709,6711,5,542,0,0,6710,6709,1,0,0,0,6710,6711,1,0,0,0,6711,
        6712,1,0,0,0,6712,6714,3,1188,594,0,6713,6710,1,0,0,0,6714,6717,
        1,0,0,0,6715,6713,1,0,0,0,6715,6716,1,0,0,0,6716,6718,1,0,0,0,6717,
        6715,1,0,0,0,6718,6719,5,565,0,0,6719,6721,1,0,0,0,6720,6707,1,0,
        0,0,6721,6724,1,0,0,0,6722,6720,1,0,0,0,6722,6723,1,0,0,0,6723,6726,
        1,0,0,0,6724,6722,1,0,0,0,6725,6727,3,1182,591,0,6726,6725,1,0,0,
        0,6726,6727,1,0,0,0,6727,1179,1,0,0,0,6728,6729,5,223,0,0,6729,6745,
        3,1238,619,0,6730,6731,5,558,0,0,6731,6738,3,1190,595,0,6732,6734,
        5,542,0,0,6733,6732,1,0,0,0,6733,6734,1,0,0,0,6734,6735,1,0,0,0,
        6735,6737,3,1190,595,0,6736,6733,1,0,0,0,6737,6740,1,0,0,0,6738,
        6736,1,0,0,0,6738,6739,1,0,0,0,6739,6741,1,0,0,0,6740,6738,1,0,0,
        0,6741,6742,5,565,0,0,6742,6744,1,0,0,0,6743,6730,1,0,0,0,6744,6747,
        1,0,0,0,6745,6743,1,0,0,0,6745,6746,1,0,0,0,6746,6749,1,0,0,0,6747,
        6745,1,0,0,0,6748,6750,3,1182,591,0,6749,6748,1,0,0,0,6749,6750,
        1,0,0,0,6750,1181,1,0,0,0,6751,6752,5,558,0,0,6752,6753,3,1184,592,
        0,6753,6755,5,541,0,0,6754,6756,3,1186,593,0,6755,6754,1,0,0,0,6755,
        6756,1,0,0,0,6756,6757,1,0,0,0,6757,6758,5,565,0,0,6758,1183,1,0,
        0,0,6759,6760,3,1134,567,0,6760,1185,1,0,0,0,6761,6762,3,1134,567,
        0,6762,1187,1,0,0,0,6763,6775,5,10,0,0,6764,6775,3,1276,638,0,6765,
        6767,3,1192,596,0,6766,6768,3,1276,638,0,6767,6766,1,0,0,0,6767,
        6768,1,0,0,0,6768,6775,1,0,0,0,6769,6771,3,1240,620,0,6770,6772,
        3,1276,638,0,6771,6770,1,0,0,0,6771,6772,1,0,0,0,6772,6775,1,0,0,
        0,6773,6775,3,1134,567,0,6774,6763,1,0,0,0,6774,6764,1,0,0,0,6774,
        6765,1,0,0,0,6774,6769,1,0,0,0,6774,6773,1,0,0,0,6775,1189,1,0,0,
        0,6776,6788,3,482,241,0,6777,6788,3,1176,588,0,6778,6780,3,1192,
        596,0,6779,6781,3,1276,638,0,6780,6779,1,0,0,0,6780,6781,1,0,0,0,
        6781,6788,1,0,0,0,6782,6784,3,1240,620,0,6783,6785,3,1276,638,0,
        6784,6783,1,0,0,0,6784,6785,1,0,0,0,6785,6788,1,0,0,0,6786,6788,
        3,1134,567,0,6787,6776,1,0,0,0,6787,6777,1,0,0,0,6787,6778,1,0,0,
        0,6787,6782,1,0,0,0,6787,6786,1,0,0,0,6788,1191,1,0,0,0,6789,6794,
        3,1194,597,0,6790,6794,3,1196,598,0,6791,6794,3,1198,599,0,6792,
        6794,3,1200,600,0,6793,6789,1,0,0,0,6793,6790,1,0,0,0,6793,6791,
        1,0,0,0,6793,6792,1,0,0,0,6794,1193,1,0,0,0,6795,6798,3,1230,615,
        0,6796,6798,3,1228,614,0,6797,6795,1,0,0,0,6797,6796,1,0,0,0,6798,
        6808,1,0,0,0,6799,6801,3,1202,601,0,6800,6799,1,0,0,0,6801,6802,
        1,0,0,0,6802,6800,1,0,0,0,6802,6803,1,0,0,0,6803,6805,1,0,0,0,6804,
        6806,3,1206,603,0,6805,6804,1,0,0,0,6805,6806,1,0,0,0,6806,6809,
        1,0,0,0,6807,6809,3,1206,603,0,6808,6800,1,0,0,0,6808,6807,1,0,0,
        0,6808,6809,1,0,0,0,6809,1195,1,0,0,0,6810,6811,3,1250,625,0,6811,
        6812,3,1210,605,0,6812,1197,1,0,0,0,6813,6814,3,1270,635,0,6814,
        6815,3,1212,606,0,6815,1199,1,0,0,0,6816,6817,5,288,0,0,6817,6818,
        3,1206,603,0,6818,1201,1,0,0,0,6819,6822,3,1204,602,0,6820,6822,
        3,1214,607,0,6821,6819,1,0,0,0,6821,6820,1,0,0,0,6822,1203,1,0,0,
        0,6823,6824,7,38,0,0,6824,6825,3,1230,615,0,6825,1205,1,0,0,0,6826,
        6827,7,38,0,0,6827,6828,3,1236,618,0,6828,1207,1,0,0,0,6829,6830,
        7,38,0,0,6830,6831,3,1248,624,0,6831,1209,1,0,0,0,6832,6833,7,38,
        0,0,6833,6834,3,1264,632,0,6834,1211,1,0,0,0,6835,6836,7,38,0,0,
        6836,6837,3,1244,622,0,6837,1213,1,0,0,0,6838,6839,7,38,0,0,6839,
        6840,3,1178,589,0,6840,1215,1,0,0,0,6841,6842,3,480,240,0,6842,1217,
        1,0,0,0,6843,6844,3,1266,633,0,6844,1219,1,0,0,0,6845,6846,3,1254,
        627,0,6846,1221,1,0,0,0,6847,6848,3,480,240,0,6848,1223,1,0,0,0,
        6849,6850,3,480,240,0,6850,1225,1,0,0,0,6851,6852,3,1266,633,0,6852,
        1227,1,0,0,0,6853,6854,3,480,240,0,6854,1229,1,0,0,0,6855,6856,3,
        480,240,0,6856,1231,1,0,0,0,6857,6861,5,214,0,0,6858,6861,5,111,
        0,0,6859,6861,3,1230,615,0,6860,6857,1,0,0,0,6860,6858,1,0,0,0,6860,
        6859,1,0,0,0,6861,1233,1,0,0,0,6862,6863,3,1266,633,0,6863,1235,
        1,0,0,0,6864,6865,3,480,240,0,6865,1237,1,0,0,0,6866,6873,5,257,
        0,0,6867,6873,5,279,0,0,6868,6873,5,381,0,0,6869,6873,5,476,0,0,
        6870,6873,5,526,0,0,6871,6873,3,480,240,0,6872,6866,1,0,0,0,6872,
        6867,1,0,0,0,6872,6868,1,0,0,0,6872,6869,1,0,0,0,6872,6870,1,0,0,
        0,6872,6871,1,0,0,0,6873,1239,1,0,0,0,6874,6875,3,480,240,0,6875,
        1241,1,0,0,0,6876,6877,3,1266,633,0,6877,1243,1,0,0,0,6878,6879,
        3,480,240,0,6879,1245,1,0,0,0,6880,6881,3,480,240,0,6881,1247,1,
        0,0,0,6882,6883,3,480,240,0,6883,1249,1,0,0,0,6884,6887,3,480,240,
        0,6885,6887,3,1276,638,0,6886,6884,1,0,0,0,6886,6885,1,0,0,0,6887,
        1251,1,0,0,0,6888,6890,3,1250,625,0,6889,6891,3,1210,605,0,6890,
        6889,1,0,0,0,6890,6891,1,0,0,0,6891,6894,1,0,0,0,6892,6894,3,1264,
        632,0,6893,6888,1,0,0,0,6893,6892,1,0,0,0,6894,1253,1,0,0,0,6895,
        6898,5,569,0,0,6896,6898,3,480,240,0,6897,6895,1,0,0,0,6897,6896,
        1,0,0,0,6898,1255,1,0,0,0,6899,6900,3,1192,596,0,6900,1257,1,0,0,
        0,6901,6902,3,1192,596,0,6902,1259,1,0,0,0,6903,6904,3,480,240,0,
        6904,1261,1,0,0,0,6905,6906,3,480,240,0,6906,1263,1,0,0,0,6907,6910,
        3,480,240,0,6908,6910,3,1276,638,0,6909,6907,1,0,0,0,6909,6908,1,
        0,0,0,6910,1265,1,0,0,0,6911,6912,3,480,240,0,6912,1267,1,0,0,0,
        6913,6914,3,480,240,0,6914,1269,1,0,0,0,6915,6916,3,480,240,0,6916,
        1271,1,0,0,0,6917,6918,7,71,0,0,6918,1273,1,0,0,0,6919,6923,5,574,
        0,0,6920,6923,5,534,0,0,6921,6923,3,1276,638,0,6922,6919,1,0,0,0,
        6922,6920,1,0,0,0,6922,6921,1,0,0,0,6923,1275,1,0,0,0,6924,6925,
        7,72,0,0,6925,1277,1,0,0,0,6926,6927,5,142,0,0,6927,6930,5,558,0,
        0,6928,6931,3,480,240,0,6929,6931,3,482,241,0,6930,6928,1,0,0,0,
        6930,6929,1,0,0,0,6931,6932,1,0,0,0,6932,6933,5,565,0,0,6933,1279,
        1,0,0,0,6934,6935,5,143,0,0,6935,6938,5,558,0,0,6936,6939,3,480,
        240,0,6937,6939,3,482,241,0,6938,6936,1,0,0,0,6938,6937,1,0,0,0,
        6939,6940,1,0,0,0,6940,6941,5,565,0,0,6941,1281,1,0,0,0,6942,6943,
        5,10,0,0,6943,6958,3,482,241,0,6944,6958,5,237,0,0,6945,6958,5,238,
        0,0,6946,6958,5,301,0,0,6947,6958,5,302,0,0,6948,6958,5,325,0,0,
        6949,6958,5,326,0,0,6950,6958,5,379,0,0,6951,6958,5,380,0,0,6952,
        6958,5,462,0,0,6953,6958,5,463,0,0,6954,6958,5,534,0,0,6955,6958,
        5,536,0,0,6956,6958,5,537,0,0,6957,6942,1,0,0,0,6957,6944,1,0,0,
        0,6957,6945,1,0,0,0,6957,6946,1,0,0,0,6957,6947,1,0,0,0,6957,6948,
        1,0,0,0,6957,6949,1,0,0,0,6957,6950,1,0,0,0,6957,6951,1,0,0,0,6957,
        6952,1,0,0,0,6957,6953,1,0,0,0,6957,6954,1,0,0,0,6957,6955,1,0,0,
        0,6957,6956,1,0,0,0,6958,1283,1,0,0,0,6959,6960,5,6,0,0,6960,6961,
        5,335,0,0,6961,6993,3,1176,588,0,6962,6993,5,114,0,0,6963,6993,5,
        117,0,0,6964,6993,5,118,0,0,6965,6993,5,121,0,0,6966,6993,5,122,
        0,0,6967,6993,5,123,0,0,6968,6993,5,124,0,0,6969,6993,5,125,0,0,
        6970,6993,5,126,0,0,6971,6993,5,127,0,0,6972,6974,5,279,0,0,6973,
        6975,5,335,0,0,6974,6973,1,0,0,0,6974,6975,1,0,0,0,6975,6976,1,0,
        0,0,6976,6993,3,1176,588,0,6977,6993,5,288,0,0,6978,6993,5,291,0,
        0,6979,6993,5,353,0,0,6980,6993,5,416,0,0,6981,6993,5,447,0,0,6982,
        6993,5,448,0,0,6983,6993,5,453,0,0,6984,6993,5,454,0,0,6985,6993,
        5,455,0,0,6986,6993,5,457,0,0,6987,6993,5,458,0,0,6988,6993,5,459,
        0,0,6989,6993,5,483,0,0,6990,6993,5,497,0,0,6991,6993,5,526,0,0,
        6992,6959,1,0,0,0,6992,6962,1,0,0,0,6992,6963,1,0,0,0,6992,6964,
        1,0,0,0,6992,6965,1,0,0,0,6992,6966,1,0,0,0,6992,6967,1,0,0,0,6992,
        6968,1,0,0,0,6992,6969,1,0,0,0,6992,6970,1,0,0,0,6992,6971,1,0,0,
        0,6992,6972,1,0,0,0,6992,6977,1,0,0,0,6992,6978,1,0,0,0,6992,6979,
        1,0,0,0,6992,6980,1,0,0,0,6992,6981,1,0,0,0,6992,6982,1,0,0,0,6992,
        6983,1,0,0,0,6992,6984,1,0,0,0,6992,6985,1,0,0,0,6992,6986,1,0,0,
        0,6992,6987,1,0,0,0,6992,6988,1,0,0,0,6992,6989,1,0,0,0,6992,6990,
        1,0,0,0,6992,6991,1,0,0,0,6993,1285,1,0,0,0,6994,6996,5,582,0,0,
        6995,6994,1,0,0,0,6996,6997,1,0,0,0,6997,6995,1,0,0,0,6997,6998,
        1,0,0,0,6998,1287,1,0,0,0,6999,7000,7,73,0,0,7000,1289,1,0,0,0,1076,
        1296,1300,1303,1317,1326,1331,1335,1339,1341,1344,1347,1354,1359,
        1362,1367,1374,1376,1380,1383,1390,1392,1396,1399,1404,1409,1417,
        1423,1431,1437,1442,1446,1450,1457,1463,1473,1477,1481,1484,1488,
        1491,1495,1498,1501,1504,1508,1513,1516,1519,1522,1526,1531,1535,
        1541,1554,1558,1571,1575,1581,1584,1595,1597,1604,1606,1615,1620,
        1624,1629,1634,1641,1644,1647,1652,1657,1661,1665,1669,1672,1676,
        1681,1685,1691,1695,1697,1700,1704,1709,1711,1716,1718,1722,1726,
        1729,1733,1736,1741,1744,1747,1751,1754,1759,1762,1765,1767,1771,
        1777,1780,1783,1787,1791,1794,1797,1802,1806,1811,1814,1819,1827,
        1832,1836,1841,1845,1851,1856,1859,1862,1866,1870,1883,1887,1900,
        1905,1908,1911,1915,1917,1924,1930,1933,1937,1942,1947,1951,1954,
        1960,1963,1967,1970,1973,1977,1980,1983,1987,1990,1993,1997,2002,
        2006,2010,2014,2017,2026,2031,2035,2041,2047,2049,2055,2061,2064,
        2072,2076,2079,2082,2087,2092,2095,2100,2105,2110,2120,2132,2140,
        2146,2151,2155,2160,2166,2179,2182,2187,2193,2197,2200,2209,2212,
        2216,2219,2223,2226,2229,2233,2236,2238,2242,2245,2248,2253,2261,
        2265,2267,2274,2276,2283,2287,2291,2296,2300,2302,2307,2311,2315,
        2318,2323,2329,2332,2336,2340,2343,2346,2351,2354,2357,2362,2366,
        2369,2377,2383,2387,2389,2394,2402,2417,2423,2430,2432,2434,2442,
        2450,2452,2458,2463,2466,2478,2481,2483,2491,2500,2502,2510,2520,
        2523,2525,2533,2547,2549,2554,2561,2566,2570,2577,2584,2591,2596,
        2600,2605,2609,2614,2618,2623,2627,2632,2636,2643,2654,2659,2668,
        2674,2694,2706,2708,2733,2737,2741,2744,2747,2751,2755,2758,2761,
        2765,2769,2773,2777,2781,2785,2791,2797,2804,2807,2817,2823,2829,
        2833,2835,2840,2842,2852,2855,2859,2862,2867,2879,2886,2891,2895,
        2898,2901,2904,2906,2911,2918,2922,2924,2928,2947,2952,2955,2959,
        2965,2968,2975,2988,2991,2993,3000,3006,3009,3015,3019,3022,3025,
        3028,3032,3036,3040,3048,3053,3063,3069,3073,3077,3082,3086,3093,
        3098,3104,3109,3112,3116,3125,3130,3135,3140,3144,3151,3155,3159,
        3161,3168,3173,3177,3187,3192,3198,3201,3207,3210,3214,3216,3222,
        3225,3229,3233,3236,3239,3242,3250,3256,3263,3268,3271,3274,3277,
        3289,3293,3299,3303,3306,3311,3323,3331,3335,3341,3351,3356,3360,
        3364,3371,3377,3379,3383,3389,3395,3411,3416,3422,3427,3433,3439,
        3443,3447,3452,3456,3462,3464,3575,3577,3601,3603,3607,3616,3620,
        3625,3631,3634,3637,3643,3648,3652,3659,3684,3686,3694,3703,3706,
        3711,3718,3735,3738,3744,3751,3756,3759,3767,3772,3775,3779,3782,
        3787,3792,3795,3800,3802,3809,3812,3817,3821,3828,3831,3835,3855,
        3862,3865,3879,3883,3885,3890,3892,3896,3899,3905,3910,3916,3918,
        3922,3954,3959,3963,3967,3971,3973,3977,3982,3987,3992,3998,4006,
        4009,4013,4021,4028,4031,4034,4039,4042,4046,4049,4052,4058,4063,
        4070,4073,4081,4084,4092,4098,4108,4114,4123,4126,4131,4134,4138,
        4195,4202,4209,4214,4226,4233,4237,4243,4247,4249,4255,4259,4264,
        4277,4279,4287,4290,4293,4296,4301,4305,4312,4318,4328,4336,4339,
        4342,4345,4350,4356,4361,4367,4369,4375,4384,4388,4391,4396,4400,
        4404,4412,4418,4425,4428,4431,4434,4437,4440,4443,4449,4454,4457,
        4460,4465,4471,4476,4479,4482,4488,4494,4496,4500,4503,4509,4515,
        4517,4522,4531,4538,4544,4550,4554,4557,4560,4565,4567,4570,4575,
        4578,4584,4590,4592,4597,4601,4608,4612,4616,4622,4627,4630,4633,
        4637,4644,4647,4650,4653,4658,4663,4667,4672,4678,4681,4684,4687,
        4690,4694,4699,4704,4707,4715,4720,4723,4726,4729,4732,4738,4743,
        4746,4751,4754,4760,4764,4768,4776,4781,4785,4790,4798,4800,4807,
        4813,4816,4824,4826,4833,4841,4846,4854,4859,4864,4867,4871,4884,
        4890,4895,4900,4905,4909,4912,4917,4921,4925,4934,4938,4946,4950,
        4953,4955,4961,4964,4967,4974,4976,4984,4987,4993,4996,5002,5006,
        5011,5017,5025,5031,5036,5038,5044,5049,5054,5060,5067,5069,5075,
        5083,5090,5096,5101,5106,5112,5118,5125,5130,5134,5138,5145,5148,
        5153,5157,5162,5166,5170,5175,5178,5182,5187,5190,5193,5196,5203,
        5207,5215,5220,5224,5233,5245,5249,5253,5260,5265,5273,5280,5285,
        5288,5291,5294,5299,5303,5310,5314,5318,5325,5327,5333,5338,5342,
        5348,5352,5356,5362,5368,5373,5376,5381,5389,5394,5397,5400,5405,
        5409,5414,5424,5426,5433,5438,5451,5457,5460,5469,5474,5477,5480,
        5483,5486,5489,5492,5495,5498,5501,5507,5512,5516,5523,5526,5529,
        5532,5542,5544,5553,5558,5562,5565,5572,5580,5585,5589,5592,5599,
        5605,5609,5613,5621,5626,5629,5633,5636,5644,5647,5650,5653,5660,
        5664,5667,5672,5675,5687,5690,5695,5698,5701,5705,5708,5711,5714,
        5717,5731,5735,5739,5744,5750,5753,5761,5764,5769,5775,5780,5786,
        5797,5803,5807,5814,5817,5820,5823,5828,5832,5837,5841,5845,5850,
        5853,5857,5860,5863,5867,5872,5875,5878,5881,5888,5892,5899,5903,
        5912,5917,5921,5930,5942,5947,5950,5953,5956,5960,5964,5969,5975,
        5981,5986,5989,5996,6002,6006,6009,6012,6015,6020,6024,6028,6032,
        6037,6042,6048,6057,6060,6063,6066,6071,6077,6082,6090,6099,6103,
        6107,6111,6115,6122,6127,6130,6133,6138,6144,6149,6152,6161,6164,
        6167,6170,6173,6180,6183,6187,6190,6194,6198,6202,6208,6212,6215,
        6219,6225,6230,6237,6246,6252,6256,6261,6272,6274,6277,6281,6286,
        6292,6295,6300,6303,6310,6313,6316,6319,6322,6325,6328,6333,6337,
        6342,6348,6351,6356,6362,6367,6373,6377,6383,6388,6394,6399,6404,
        6410,6415,6419,6425,6430,6436,6440,6447,6452,6459,6463,6469,6474,
        6480,6487,6497,6504,6510,6523,6529,6537,6540,6543,6554,6558,6561,
        6570,6576,6580,6585,6591,6594,6599,6604,6612,6616,6619,6638,6641,
        6644,6648,6653,6658,6661,6666,6671,6676,6681,6684,6687,6690,6698,
        6704,6710,6715,6722,6726,6733,6738,6745,6749,6755,6767,6771,6774,
        6780,6784,6787,6793,6797,6802,6805,6808,6821,6860,6872,6886,6890,
        6893,6897,6909,6922,6930,6938,6957,6974,6992,6997
    ]

class CopyBookParser ( Parser ):

    grammarFileName = "CopyBook.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'/n'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'@'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'#'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'&'", "'*'", 
                     "'**'", "':'", "','", "'*>CE'", "'*>'", "'*****>'", 
                     "'******>'", "'*******>'", "'$'", "'\"'", "<INVALID>", 
                     "'.'", "'='", "'*>EXECCICS'", "'*>EXECSQL'", "'*>EXECSQLIMS'", 
                     "'<'", "'<='", "'('", "'-'", "'>'", "'>='", "'<>'", 
                     "'+'", "'''", "')'", "'/'", "'|'", "'_'", "<INVALID>", 
                     "'66'", "'77'", "'88'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\u0081@'", 
                     "'\\u00E3\\u20AC\\u20AC'", "', '", "',\\n'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'=='", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "ABORT", "ACCEPT", "ACCESS", 
                      "ADD", "ADDRESS", "ADVANCING", "AFTER", "ALIGNED", 
                      "ALL", "ALPHABET", "ALPHABETIC", "ALPHABETIC_LOWER", 
                      "ALPHABETIC_UPPER", "ALPHANUMERIC", "ALPHANUMERIC_EDITED", 
                      "ALSO", "ALTER", "ALTERNATE", "AND", "ANY", "ARE", 
                      "AREA", "AREAS", "AS", "ASCENDING", "ASCII", "ASSIGN", 
                      "ASSOCIATED_DATA", "ASSOCIATED_DATA_LENGTH", "AT", 
                      "ATTRIBUTE", "AUTHOR", "AUTO", "AUTO_SKIP", "AROBASE", 
                      "AROBASEEC", "BACKGROUND_COLOR", "BACKGROUND_COLOUR", 
                      "BASIS", "BEEP", "BEFORE", "BEGINNING", "BELL", "BINARY", 
                      "BIT", "BLANK", "BLINK", "BLOCK", "BOUNDS", "BOTTOM", 
                      "BY", "BYFUNCTION", "BYTITLE", "CALL", "CANCEL", "CAPABLE", 
                      "CCSVERSION", "CD", "CF", "CH", "CHAINING", "CHANGED", 
                      "CHANNEL", "CHARACTER", "CHARACTERS", "CLASS", "CLASS_ID", 
                      "CLOCK_UNITS", "CLOSE", "CLOSE_DISPOSITION", "COBOL", 
                      "CODE", "CODE_SET", "COLLATING", "COL", "COLUMN", 
                      "COM_REG", "COMMA", "COMMITMENT", "COMMON", "COMMUNICATION", 
                      "COMP", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", 
                      "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", 
                      "COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", 
                      "COMPUTE", "CONFIGURATION", "CONTAINS", "CONTENT", 
                      "CONTINUE", "CONTROL", "CONTROL_POINT", "CONTROLS", 
                      "CONVENTION", "CONVERTING", "COPY", "CORR", "CORRESPONDING", 
                      "COUNT", "CRUNCH", "CURRENCY", "CURSOR", "DATA", "DATA_BASE", 
                      "DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", 
                      "DBCS", "DE", "DEBUG_CONTENTS", "DEBUG_ITEM", "DEBUG_LINE", 
                      "DEBUG_NAME", "DEBUG_SUB_1", "DEBUG_SUB_2", "DEBUG_SUB_3", 
                      "DEBUGGING", "DECIMAL_POINT", "DECLARATIVES", "DEAD_LOCK", 
                      "DEFAULT", "DEFAULT_DISPLAY", "DEFINITION", "DELETE", 
                      "DELIMITED", "DELIMITER", "DEPENDING", "DESCENDING", 
                      "DESTINATION", "DETAIL", "DFHRESP", "DFHVALUE", "DISABLE", 
                      "DISJOINING", "DISK", "DISPLAY", "DISPLAY_1", "DIVIDE", 
                      "DIVISION", "DONTCARE", "DOUBLE", "DOWN", "DUPLICATES", 
                      "DYNAMIC", "EBCDIC", "EGCS", "EGI", "ELSE", "EMI", 
                      "EMPTY_CHECK", "ENABLE", "END", "END_ACCEPT", "END_ADD", 
                      "END_CALL", "END_COMPUTE", "END_DELETE", "END_DIVIDE", 
                      "END_EVALUATE", "END_IF", "END_MULTIPLY", "END_OF_PAGE", 
                      "END_PERFORM", "END_READ", "END_RECEIVE", "END_RETURN", 
                      "END_REWRITE", "END_SEARCH", "END_START", "END_STRING", 
                      "END_SUBTRACT", "END_UNSTRING", "END_WRITE", "END_XML", 
                      "ENDING", "ENTER", "ENTRY", "ENTRY_PROCEDURE", "ENVIRONMENT", 
                      "EOP", "EQUAL", "ERASE", "ERROR", "EOL", "EOS", "ESCAPE", 
                      "ESI", "EVALUATE", "EVENT", "EVERY", "EXCEPTION", 
                      "EXCLUSIVE", "EXHIBIT", "EXIT", "EXPORT", "EXTEND", 
                      "EXTENDED", "EXTERNAL", "FALSE", "FD", "FILE", "FILE_CONTROL", 
                      "FILLER", "FINAL", "FIRST", "FOOTING", "FOR", "FOREGROUND_COLOR", 
                      "FOREGROUND_COLOUR", "FROM", "FULL", "FUNCTION", "FUNCTIONNAME", 
                      "FUNCTION_POINTER", "GENERATE", "GOBACK", "GIVING", 
                      "GLOBAL", "GO", "GREATER", "GRID", "GROUP", "HASH", 
                      "HEADING", "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES", 
                      "I_O", "I_O_CONTROL", "ID", "IDENTIFICATION", "IF", 
                      "IMPLICIT", "IMPORT", "IN", "INDEX", "INDEXED", "INDICATE", 
                      "INITIAL", "INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", 
                      "INSPECT", "INSTALLATION", "INTEGER", "INTO", "INVALID", 
                      "INVOKE", "IS", "JUST", "JUSTIFIED", "KANJI", "JOINING", 
                      "JP_CHAR", "JP_TXT", "KEPT", "KEY", "KEYBOARD", "LABEL", 
                      "LANGUAGE", "LAST", "LB", "LD", "LEADING", "LEFT", 
                      "LEFTLINE", "LENGTH", "LENGTH_CHECK", "LESS", "LIBACCESS", 
                      "LIBPARAMETER", "LIBRARY", "LIMIT", "LIMITS", "LINAGE", 
                      "LINAGE_COUNTER", "LINE", "LINES", "LINE_COUNTER", 
                      "LINKAGE", "LIST", "LOCAL", "LOCAL_STORAGE", "LOCK", 
                      "LONG_DATE", "LONG_TIME", "LOWER", "LOWLIGHT", "LOW_VALUE", 
                      "LOW_VALUES", "MEMORY", "MERGE", "MESSAGE", "MMDDYYYY", 
                      "MODE", "MODE_1", "MODULES", "MORE_LABELS", "MOVE", 
                      "MULTIPLE", "MULTIPLY", "NAMED", "NATIONAL", "NATIONAL_EDITED", 
                      "NATIVE", "NEGATIVE", "NETWORK", "NEXT", "NC", "NO", 
                      "NO_ECHO", "NOT", "NULL_", "NULLS", "NUMBER", "NUMERIC", 
                      "NUMERIC_DATE", "NUMERIC_EDITED", "NUMERIC_TIME", 
                      "OBJECT_COMPUTER", "OCCURS", "ODT", "OF", "OFF", "OMITTED", 
                      "ON", "OPEN", "OPTIONAL", "OR", "ORDER", "ORDERLY", 
                      "ORGANIZATION", "OTHER", "OUTPUT", "OVERFLOW", "OVERLINE", 
                      "OWN", "PACKED_DECIMAL", "PADDING", "PAGE", "PAGE_COUNTER", 
                      "PASSWORD", "PERFORM", "PF", "PH", "PIC", "PICTURE", 
                      "PLUS", "POINTER", "POSITION", "POSITIVE", "PORT", 
                      "PRINTER", "PRINTING", "PRIVATE", "PROCEDURE", "PROCEDURE_POINTER", 
                      "PROCEDURES", "PROCEED", "PROCESS", "PROGRAM", "PROGRAM_ID", 
                      "PROGRAM_LIBRARY", "PROMPT", "PURGE", "QUEUE", "QUOTE", 
                      "QUOTES", "RANDOM", "READER", "REMOTE", "RD", "REAL", 
                      "READ", "RECEIVE", "RECEIVED", "RECORD", "RECORDING", 
                      "RECORDS", "RECURSIVE", "REDEFINES", "REEL", "REF", 
                      "REFERENCE", "REFERENCES", "RELATIVE", "RELEASE", 
                      "REMAINDER", "REMARKS", "REMOVAL", "REMOVE", "RENAMES", 
                      "REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS", 
                      "REQUIRED", "RERUN", "RESERVE", "REVERSE_VIDEO", "RESET", 
                      "RETURN", "RETURN_CODE", "RETURNING", "REVERSED", 
                      "REWIND", "REWRITE", "RF", "RH", "RIGHT", "ROUNDED", 
                      "RUN", "SAME", "SAVE", "SCREEN", "SD", "SEARCH", "SECTION", 
                      "SECURE", "SECURITY", "SEGMENT", "SEGMENT_LIMIT", 
                      "SELECT", "SEND", "SENTENCE", "SEPARATE", "SEQUENCE", 
                      "SEQUENTIAL", "SET", "SHARED", "SHAREDBYALL", "SHAREDBYRUNUNIT", 
                      "SHARING", "SHIFT_IN", "SHIFT_OUT", "SHORT_DATE", 
                      "SIGN", "SIZE", "SORT", "SORT_CONTROL", "SORT_CORE_SIZE", 
                      "SORT_FILE_SIZE", "SORT_MERGE", "SORT_MESSAGE", "SORT_MODE_SIZE", 
                      "SORT_RETURN", "SOURCE", "SOURCE_COMPUTER", "SPACE", 
                      "SPACES", "SPECIAL_NAMES", "STANDARD", "STANDARD_1", 
                      "STANDARD_2", "START", "STATUS", "STOP", "STRING", 
                      "SUB_QUEUE_1", "SUB_QUEUE_2", "SUB_QUEUE_3", "SUBTRACT", 
                      "SUM", "SUPPRESS", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", 
                      "TABLE", "TALLY", "TALLYING", "TASK", "TAPE", "TERMINAL", 
                      "TERMINATE", "TEST", "TEXT", "THAN", "THEN", "THREAD", 
                      "THREAD_LOCAL", "THROUGH", "THRU", "TIME", "TIMER", 
                      "TIMES", "TITLE", "TO", "TODAYS_DATE", "TODAYS_NAME", 
                      "TOP", "TRANSACTION", "TRAILING", "TRUE", "TRUNCATED", 
                      "TYPE", "TYPEDEF", "UNDERLINE", "UNIT", "UNSTRING", 
                      "UNTIL", "UP", "UPON", "USAGE", "USE", "USING", "VALUE", 
                      "VALUES", "VARYING", "VIRTUAL", "WAIT", "WHEN", "WHEN_COMPILED", 
                      "WITH", "WORDS", "WORKING_STORAGE", "WRITE", "YEAR", 
                      "YYYYMMDD", "YYYYDDD", "ZERO", "ZERO_FILL", "ZEROS", 
                      "ZEROES", "AMPCHAR", "ASTERISKCHAR", "DOUBLEASTERISKCHAR", 
                      "COLONCHAR", "COMMACHAR", "COMMENTENTRYTAG", "COMMENTTAG", 
                      "COMMENTTAG2", "COMMENTTAG3", "COMMENTTAG4", "DOLLARCHAR", 
                      "DOUBLEQUOTE", "DOT_FS", "DOT", "EQUALCHAR", "EXECCICSTAG", 
                      "EXECSQLTAG", "EXECSQLIMSTAG", "LESSTHANCHAR", "LESSTHANOREQUAL", 
                      "LPARENCHAR", "MINUSCHAR", "MORETHANCHAR", "MORETHANOREQUAL", 
                      "NOTEQUALCHAR", "PLUSCHAR", "SINGLEQUOTE", "RPARENCHAR", 
                      "SLASHCHAR", "PIPECHAR", "UNDERSCORECHAR", "NONNUMERICLITERAL", 
                      "LEVEL_NUMBER_66", "LEVEL_NUMBER_77", "LEVEL_NUMBER_88", 
                      "INTEGERLITERAL", "NUMERICLITERAL", "NUMERICLITERAL2", 
                      "NUMERICLITERAL3", "EXEC", "NEWLINE", "EXECCICSLINE", 
                      "EXECSQLIMSLINE", "EXECSQLLINE", "COMMENTENTRYLINE", 
                      "COMMENTLINE", "COMMENTLINE2", "COMMENTLINE3", "COMMENTLINE4", 
                      "COMMENTLINE_2", "COMMENTLINE_5", "COMMENTLINE_3", 
                      "COMMENTLINE_", "COMMENTLINE_4", "COMMENTLINE_6", 
                      "COMMENTLINE_7", "WS", "WS_JP", "WS_JP_ENCODED", "SEPARATOR", 
                      "SEPARATOR_2", "EJECT", "FILENAME", "SKIP1", "SKIP2", 
                      "SKIP3", "ADATA", "ADV", "ALIAS", "ANSI", "APOST", 
                      "AR", "ARITH", "AWO", "BIN", "BLOCK0", "BUF", "BUFSIZE", 
                      "CBL", "CBLCARD", "CICS", "CO", "COBOL2", "COBOL3", 
                      "CODEPAGE", "COMPAT", "COMPILE", "CP", "CPP", "CPSM", 
                      "CS", "CURR", "DATEPROC", "DD", "DEBUG", "DECK", "DIAGTRUNC", 
                      "DLI", "DLL", "DP", "DTR", "DU", "DUMP", "DYN", "DYNAM", 
                      "EDF", "EJPD", "EN", "ENGLISH", "END_EXEC", "EPILOG", 
                      "EXCI", "EXP", "EXPORTALL", "FASTSRT", "FEPI", "FLAG", 
                      "FLAGSTD", "FSRT", "GDS", "GRAPHIC", "HOOK", "INTDATE", 
                      "JA", "JP", "KA", "LANG", "LC", "LEASM", "LIB", "LILIAN", 
                      "LIN", "LINECOUNT", "LM", "LONGMIXED", "LONGUPPER", 
                      "LU", "MAP", "MARGINS", "MAX", "MD", "MDECK", "MIG", 
                      "MIXED", "NAME", "NAT", "NATLANG", "NN", "NOADATA", 
                      "NOADV", "NOALIAS", "NOAWO", "NOBLOCK0", "NOC", "NOCBLCARD", 
                      "NOCICS", "NOCMPR2", "NOCOMPILE", "NOCPSM", "NOCURR", 
                      "NOCURRENCY", "NOD", "NODATEPROC", "NODBCS", "NODE", 
                      "NODEBUG", "NODECK", "NODIAGTRUNC", "NODLL", "NODU", 
                      "NODUMP", "NODP", "NODTR", "NODYN", "NODYNAM", "NOEDF", 
                      "NOEJPD", "NOEPILOG", "NOEXIT", "NOEXP", "NOEXPORTALL", 
                      "NOF", "NOFASTSRT", "NOFEPI", "NOFLAG", "NOFLAGMIG", 
                      "NOFLAGSTD", "NOFSRT", "NOGRAPHIC", "NOHOOK", "NOLENGTH", 
                      "NOLIB", "NOLINKAGE", "NOLIST", "NOMAP", "NOMD", "NOMDECK", 
                      "NONAME", "NONUM", "NONUMBER", "NOOBJ", "NOOBJECT", 
                      "NOOFF", "NOOFFSET", "NOOPSEQUENCE", "NOOPT", "NOOPTIMIZE", 
                      "NOOPTIONS", "NOP", "NOPFD", "NOPROLOG", "NORENT", 
                      "NOS", "NOSEP", "NOSEPARATE", "NOSEQ", "NOSOURCE", 
                      "NOSPIE", "NOSQL", "NOSQLC", "NOSQLCCSID", "NOSSR", 
                      "NOSSRANGE", "NOSTDTRUNC", "NOSEQUENCE", "NOTERM", 
                      "NOTERMINAL", "NOTEST", "NOTHREAD", "NOTRIG", "NOVBREF", 
                      "NOWD", "NOWORD", "NOX", "NOXREF", "NOZWB", "NS", 
                      "NSEQ", "NSYMBOL", "NUM", "NUMPROC", "OBJ", "OBJECT", 
                      "OFFSET", "OP", "OPMARGINS", "OPSEQUENCE", "OPT", 
                      "OPTFILE", "OPTIMIZE", "OPTIONS", "OUT", "OUTDD", 
                      "PFD", "PPTDBG", "PGMN", "PGMNAME", "PROLOG", "RENT", 
                      "RMODE", "SEP", "SEQ", "SHORT", "SP", "SPIE", "SQL", 
                      "SQLC", "SQLCCSID", "SQLIMS", "SS", "SSR", "SSRANGE", 
                      "STD", "SYSEIB", "SZ", "TERM", "TRIG", "TRUNC", "UE", 
                      "UPPER", "VBREF", "WD", "WORD", "XMLPARSE", "XMLSS", 
                      "XML", "PARSE", "PROCESSING", "XOPTS", "XP", "XREF", 
                      "YEARWINDOW", "YW", "ZWB", "IDENTIFIER", "C_CHAR", 
                      "D_CHAR", "E_CHAR", "F_CHAR", "H_CHAR", "I_CHAR", 
                      "M_CHAR", "N_CHAR", "Q_CHAR", "S_CHAR", "U_CHAR", 
                      "W_CHAR", "X_CHAR", "DOUBLEEQUALCHAR", "DOUBLEMINUSCHAR" ]

    RULE_startRule = 0
    RULE_compilationUnit = 1
    RULE_programUnit = 2
    RULE_endProgramStatement = 3
    RULE_identificationDivision = 4
    RULE_identificationDivisionBody = 5
    RULE_programIdParagraph = 6
    RULE_author_name = 7
    RULE_authorParagraph = 8
    RULE_installationParagraph = 9
    RULE_dateWrittenParagraph = 10
    RULE_dateCompiledParagraph = 11
    RULE_securityParagraph = 12
    RULE_remarksParagraph = 13
    RULE_environmentDivision = 14
    RULE_environmentDivisionBody = 15
    RULE_configurationSection = 16
    RULE_configurationSectionParagraph = 17
    RULE_sourceComputerParagraph = 18
    RULE_objectComputerParagraph = 19
    RULE_objectComputerClause = 20
    RULE_memorySizeClause = 21
    RULE_diskSizeClause = 22
    RULE_collatingSequenceClause = 23
    RULE_collatingSequenceClauseAlphanumeric = 24
    RULE_collatingSequenceClauseNational = 25
    RULE_segmentLimitClause = 26
    RULE_characterSetClause = 27
    RULE_specialNamesParagraph = 28
    RULE_specialNameClause = 29
    RULE_alphabetClause = 30
    RULE_alphabetClauseFormat1 = 31
    RULE_alphabetLiterals = 32
    RULE_alphabetThrough = 33
    RULE_alphabetAlso = 34
    RULE_alphabetClauseFormat2 = 35
    RULE_channelClause = 36
    RULE_classClause = 37
    RULE_classClauseThrough = 38
    RULE_classClauseFrom = 39
    RULE_classClauseTo = 40
    RULE_currencySignClause = 41
    RULE_decimalPointClause = 42
    RULE_defaultComputationalSignClause = 43
    RULE_defaultDisplaySignClause = 44
    RULE_environmentSwitchNameClause = 45
    RULE_environmentSwitchNameSpecialNamesStatusPhrase = 46
    RULE_odtClause = 47
    RULE_reserveNetworkClause = 48
    RULE_symbolicCharactersClause = 49
    RULE_symbolicCharacters = 50
    RULE_inputOutputSection = 51
    RULE_inputOutputSectionParagraph = 52
    RULE_fileControlParagraph = 53
    RULE_fileControlEntry = 54
    RULE_selectClause = 55
    RULE_fileControlClause = 56
    RULE_assignClause = 57
    RULE_reserveClause = 58
    RULE_organizationClause = 59
    RULE_paddingCharacterClause = 60
    RULE_recordDelimiterClause = 61
    RULE_accessModeClause = 62
    RULE_recordKeyClause = 63
    RULE_alternateRecordKeyClause = 64
    RULE_passwordClause = 65
    RULE_fileStatusClause = 66
    RULE_relativeKeyClause = 67
    RULE_ioControlParagraph = 68
    RULE_ioControlClause = 69
    RULE_rerunClause = 70
    RULE_rerunEveryRecords = 71
    RULE_rerunEveryOf = 72
    RULE_rerunEveryClock = 73
    RULE_sameClause = 74
    RULE_multipleFileClause = 75
    RULE_multipleFilePosition = 76
    RULE_commitmentControlClause = 77
    RULE_dataDivision = 78
    RULE_dataDivisionSection = 79
    RULE_fileSection = 80
    RULE_fileDescriptionEntry = 81
    RULE_fileDescriptionEntryClause = 82
    RULE_externalClause = 83
    RULE_globalClause = 84
    RULE_blockContainsClause = 85
    RULE_blockContainsTo = 86
    RULE_recordContainsClause = 87
    RULE_recordContainsClauseFormat1 = 88
    RULE_recordContainsClauseFormat2 = 89
    RULE_recordContainsClauseFormat3 = 90
    RULE_recordContainsTo = 91
    RULE_labelRecordsClause = 92
    RULE_valueOfClause = 93
    RULE_valuePair = 94
    RULE_dataRecordsClause = 95
    RULE_linageClause = 96
    RULE_linageAt = 97
    RULE_linageFootingAt = 98
    RULE_linageLinesAtTop = 99
    RULE_linageLinesAtBottom = 100
    RULE_recordingModeClause = 101
    RULE_modeStatement = 102
    RULE_codeSetClause = 103
    RULE_reportClause = 104
    RULE_dataBaseSection = 105
    RULE_dataBaseSectionEntry = 106
    RULE_workingStorageSection = 107
    RULE_linkageSection = 108
    RULE_communicationSection = 109
    RULE_communicationDescriptionEntry = 110
    RULE_communicationDescriptionEntryFormat1 = 111
    RULE_communicationDescriptionEntryFormat2 = 112
    RULE_communicationDescriptionEntryFormat3 = 113
    RULE_destinationCountClause = 114
    RULE_destinationTableClause = 115
    RULE_endKeyClause = 116
    RULE_errorKeyClause = 117
    RULE_messageCountClause = 118
    RULE_messageDateClause = 119
    RULE_messageTimeClause = 120
    RULE_statusKeyClause = 121
    RULE_symbolicDestinationClause = 122
    RULE_symbolicQueueClause = 123
    RULE_symbolicSourceClause = 124
    RULE_symbolicTerminalClause = 125
    RULE_symbolicSubQueueClause = 126
    RULE_textLengthClause = 127
    RULE_localStorageSection = 128
    RULE_screenSection = 129
    RULE_screenDescriptionEntry = 130
    RULE_screenDescriptionBlankClause = 131
    RULE_screenDescriptionBellClause = 132
    RULE_screenDescriptionBlinkClause = 133
    RULE_screenDescriptionEraseClause = 134
    RULE_screenDescriptionLightClause = 135
    RULE_screenDescriptionGridClause = 136
    RULE_screenDescriptionReverseVideoClause = 137
    RULE_screenDescriptionUnderlineClause = 138
    RULE_screenDescriptionSizeClause = 139
    RULE_screenDescriptionLineClause = 140
    RULE_screenDescriptionColumnClause = 141
    RULE_screenDescriptionForegroundColorClause = 142
    RULE_screenDescriptionBackgroundColorClause = 143
    RULE_screenDescriptionControlClause = 144
    RULE_screenDescriptionValueClause = 145
    RULE_screenDescriptionPictureClause = 146
    RULE_screenDescriptionFromClause = 147
    RULE_screenDescriptionToClause = 148
    RULE_screenDescriptionUsingClause = 149
    RULE_screenDescriptionUsageClause = 150
    RULE_screenDescriptionBlankWhenZeroClause = 151
    RULE_screenDescriptionJustifiedClause = 152
    RULE_screenDescriptionSignClause = 153
    RULE_screenDescriptionAutoClause = 154
    RULE_screenDescriptionSecureClause = 155
    RULE_screenDescriptionRequiredClause = 156
    RULE_screenDescriptionPromptClause = 157
    RULE_screenDescriptionPromptOccursClause = 158
    RULE_screenDescriptionFullClause = 159
    RULE_screenDescriptionZeroFillClause = 160
    RULE_reportSection = 161
    RULE_reportDescription = 162
    RULE_reportDescriptionEntry = 163
    RULE_reportDescriptionGlobalClause = 164
    RULE_reportDescriptionPageLimitClause = 165
    RULE_reportDescriptionHeadingClause = 166
    RULE_reportDescriptionFirstDetailClause = 167
    RULE_reportDescriptionLastDetailClause = 168
    RULE_reportDescriptionFootingClause = 169
    RULE_reportGroupDescriptionEntry = 170
    RULE_reportGroupDescriptionEntryFormat1 = 171
    RULE_reportGroupDescriptionEntryFormat2 = 172
    RULE_reportGroupDescriptionEntryFormat3 = 173
    RULE_reportGroupBlankWhenZeroClause = 174
    RULE_reportGroupColumnNumberClause = 175
    RULE_reportGroupIndicateClause = 176
    RULE_reportGroupJustifiedClause = 177
    RULE_reportGroupLineNumberClause = 178
    RULE_reportGroupLineNumberNextPage = 179
    RULE_reportGroupLineNumberPlus = 180
    RULE_reportGroupNextGroupClause = 181
    RULE_reportGroupNextGroupPlus = 182
    RULE_reportGroupNextGroupNextPage = 183
    RULE_reportGroupPictureClause = 184
    RULE_reportGroupResetClause = 185
    RULE_reportGroupSignClause = 186
    RULE_reportGroupSourceClause = 187
    RULE_reportGroupSumClause = 188
    RULE_reportGroupTypeClause = 189
    RULE_reportGroupTypeReportHeading = 190
    RULE_reportGroupTypePageHeading = 191
    RULE_reportGroupTypeControlHeading = 192
    RULE_reportGroupTypeDetail = 193
    RULE_reportGroupTypeControlFooting = 194
    RULE_reportGroupUsageClause = 195
    RULE_reportGroupTypePageFooting = 196
    RULE_reportGroupTypeReportFooting = 197
    RULE_reportGroupValueClause = 198
    RULE_programLibrarySection = 199
    RULE_libraryDescriptionEntry = 200
    RULE_libraryDescriptionEntryFormat1 = 201
    RULE_libraryDescriptionEntryFormat2 = 202
    RULE_libraryAttributeClauseFormat1 = 203
    RULE_libraryAttributeClauseFormat2 = 204
    RULE_libraryAttributeFunction = 205
    RULE_libraryAttributeParameter = 206
    RULE_libraryAttributeTitle = 207
    RULE_libraryEntryProcedureClauseFormat1 = 208
    RULE_libraryEntryProcedureClauseFormat2 = 209
    RULE_libraryEntryProcedureForClause = 210
    RULE_libraryEntryProcedureGivingClause = 211
    RULE_libraryEntryProcedureUsingClause = 212
    RULE_libraryEntryProcedureUsingName = 213
    RULE_libraryEntryProcedureWithClause = 214
    RULE_libraryEntryProcedureWithName = 215
    RULE_libraryIsCommonClause = 216
    RULE_libraryIsGlobalClause = 217
    RULE_dataDescriptionEntry = 218
    RULE_copyStatement = 219
    RULE_disjoinPhrase = 220
    RULE_joinPhrase = 221
    RULE_copySource = 222
    RULE_copyLibrary = 223
    RULE_replacingPhrase = 224
    RULE_replaceArea = 225
    RULE_replaceByStatement = 226
    RULE_replaceOffStatement = 227
    RULE_replaceClause = 228
    RULE_directoryPhrase = 229
    RULE_familyPhrase = 230
    RULE_replaceable = 231
    RULE_replacement = 232
    RULE_ejectStatement = 233
    RULE_skipStatement = 234
    RULE_titleStatement = 235
    RULE_pseudoText = 236
    RULE_charData = 237
    RULE_charDataSql = 238
    RULE_charDataLine = 239
    RULE_cobolWord = 240
    RULE_literal = 241
    RULE_jpEncodingText = 242
    RULE_filename = 243
    RULE_dataDescriptionEntryFormat1 = 244
    RULE_dataSqlTypeClause = 245
    RULE_sqlDataType = 246
    RULE_sqlDataLenght = 247
    RULE_dataCharacterClause = 248
    RULE_dataDescriptionEntryFormat2 = 249
    RULE_dataDescriptionEntryFormat3 = 250
    RULE_dataDescriptionEntryExecSql = 251
    RULE_dataAlignedClause = 252
    RULE_dataBlankWhenZeroClause = 253
    RULE_dataCommonOwnLocalClause = 254
    RULE_dataExternalClause = 255
    RULE_dataGlobalClause = 256
    RULE_dataIntegerStringClause = 257
    RULE_dataJustifiedClause = 258
    RULE_dataOccursClause = 259
    RULE_dataOccursTo = 260
    RULE_dataOccursSort = 261
    RULE_dataPictureClause = 262
    RULE_pictureString = 263
    RULE_pictureChars = 264
    RULE_pictureCardinality = 265
    RULE_dataReceivedByClause = 266
    RULE_dataRecordAreaClause = 267
    RULE_dataRedefinesClause = 268
    RULE_dataRenamesClause = 269
    RULE_dataSignClause = 270
    RULE_dataSynchronizedClause = 271
    RULE_dataThreadLocalClause = 272
    RULE_dataTypeClause = 273
    RULE_dataTypeDefClause = 274
    RULE_dataUsageClause = 275
    RULE_dataUsingClause = 276
    RULE_dataValueClause = 277
    RULE_dataValueInterval = 278
    RULE_dataValueIntervalFrom = 279
    RULE_dataValueIntervalTo = 280
    RULE_dataWithLowerBoundsClause = 281
    RULE_procedureDivision = 282
    RULE_procedureDivisionUsingClause = 283
    RULE_procedureDivisionGivingClause = 284
    RULE_procedureDivisionUsingParameter = 285
    RULE_procedureDivisionByReferencePhrase = 286
    RULE_procedureDivisionByReference = 287
    RULE_procedureDivisionByValuePhrase = 288
    RULE_procedureDivisionByValue = 289
    RULE_procedureDeclaratives = 290
    RULE_procedureDeclarative = 291
    RULE_procedureSectionHeader = 292
    RULE_procedureDivisionBody = 293
    RULE_procedureSection = 294
    RULE_paragraphs = 295
    RULE_paragraph = 296
    RULE_sentence = 297
    RULE_statement = 298
    RULE_xmlParseStatement = 299
    RULE_xmlDataname = 300
    RULE_xmlProcessingProcedure = 301
    RULE_endXml = 302
    RULE_execSqlStatement2 = 303
    RULE_sqlCode = 304
    RULE_execCicsStatement2 = 305
    RULE_commandName = 306
    RULE_commandBody = 307
    RULE_commandParameter = 308
    RULE_parameterName = 309
    RULE_parameterNameWithIndex = 310
    RULE_parameterValueWithIndex = 311
    RULE_parameterValue = 312
    RULE_acceptStatement = 313
    RULE_acceptFromDateStatement = 314
    RULE_acceptFromMnemonicStatement = 315
    RULE_acceptFromEscapeKeyStatement = 316
    RULE_acceptMessageCountStatement = 317
    RULE_addStatement = 318
    RULE_addToStatement = 319
    RULE_addToGivingStatement = 320
    RULE_addCorrespondingStatement = 321
    RULE_addFrom = 322
    RULE_addTo = 323
    RULE_addToGiving = 324
    RULE_addGiving = 325
    RULE_alteredGoTo = 326
    RULE_alterStatement = 327
    RULE_alterProceedTo = 328
    RULE_callStatement = 329
    RULE_callUsingPhrase = 330
    RULE_callUsingParameter = 331
    RULE_callByReferencePhrase = 332
    RULE_callByReference = 333
    RULE_callByValuePhrase = 334
    RULE_callByValue = 335
    RULE_callByContentPhrase = 336
    RULE_callByContent = 337
    RULE_callGivingPhrase = 338
    RULE_cancelStatement = 339
    RULE_cancelCall = 340
    RULE_closeStatement = 341
    RULE_closeFile = 342
    RULE_closeReelUnitStatement = 343
    RULE_closeRelativeStatement = 344
    RULE_closePortFileIOStatement = 345
    RULE_closePortFileIOUsing = 346
    RULE_closePortFileIOUsingCloseDisposition = 347
    RULE_closePortFileIOUsingAssociatedData = 348
    RULE_closePortFileIOUsingAssociatedDataLength = 349
    RULE_computeStatement = 350
    RULE_computeStore = 351
    RULE_continueStatement = 352
    RULE_deleteStatement = 353
    RULE_disableStatement = 354
    RULE_displayStatement = 355
    RULE_displayOperand = 356
    RULE_displayAt = 357
    RULE_displayUpon = 358
    RULE_displayWith = 359
    RULE_divideStatement = 360
    RULE_divideIntoStatement = 361
    RULE_divideIntoGivingStatement = 362
    RULE_divideByGivingStatement = 363
    RULE_divideGivingPhrase = 364
    RULE_divideInto = 365
    RULE_divideGiving = 366
    RULE_divideRemainder = 367
    RULE_enableStatement = 368
    RULE_entryStatement = 369
    RULE_evaluateStatement = 370
    RULE_evaluateSelect = 371
    RULE_evaluateAlsoSelect = 372
    RULE_evaluateWhenPhrase = 373
    RULE_evaluateWhen = 374
    RULE_evaluateCondition = 375
    RULE_evaluateThrough = 376
    RULE_evaluateAlsoCondition = 377
    RULE_evaluateWhenOther = 378
    RULE_evaluateValue = 379
    RULE_execCicsStatement = 380
    RULE_execSqlStatement = 381
    RULE_execSqlImsStatement = 382
    RULE_exhibitStatement = 383
    RULE_exhibitOperand = 384
    RULE_exitStatement = 385
    RULE_generateStatement = 386
    RULE_gobackStatement = 387
    RULE_goToStatement = 388
    RULE_goToStatementSimple = 389
    RULE_goToDependingOnStatement = 390
    RULE_ifStatement = 391
    RULE_ifThen = 392
    RULE_ifElse = 393
    RULE_initializeStatement = 394
    RULE_initializeReplacingPhrase = 395
    RULE_initializeReplacingBy = 396
    RULE_initiateStatement = 397
    RULE_inspectStatement = 398
    RULE_inspectTallyingPhrase = 399
    RULE_inspectReplacingPhrase = 400
    RULE_inspectTallyingReplacingPhrase = 401
    RULE_inspectConvertingPhrase = 402
    RULE_inspectFor = 403
    RULE_inspectCharacters = 404
    RULE_inspectReplacingCharacters = 405
    RULE_inspectAllLeadings = 406
    RULE_inspectReplacingAllLeadings = 407
    RULE_inspectAllLeading = 408
    RULE_inspectReplacingAllLeading = 409
    RULE_inspectBy = 410
    RULE_inspectTo = 411
    RULE_inspectBeforeAfter = 412
    RULE_mergeStatement = 413
    RULE_mergeOnKeyClause = 414
    RULE_mergeCollatingSequencePhrase = 415
    RULE_mergeCollatingAlphanumeric = 416
    RULE_mergeCollatingNational = 417
    RULE_mergeUsing = 418
    RULE_mergeOutputProcedurePhrase = 419
    RULE_mergeOutputThrough = 420
    RULE_mergeGivingPhrase = 421
    RULE_mergeGiving = 422
    RULE_moveStatement = 423
    RULE_moveToStatement = 424
    RULE_moveToSendingArea = 425
    RULE_moveCorrespondingToStatement = 426
    RULE_moveCorrespondingToSendingArea = 427
    RULE_multiplyStatement = 428
    RULE_multiplyRegular = 429
    RULE_multiplyRegularOperand = 430
    RULE_multiplyGiving = 431
    RULE_multiplyGivingOperand = 432
    RULE_multiplyGivingResult = 433
    RULE_openStatement = 434
    RULE_openInputStatement = 435
    RULE_openInput = 436
    RULE_openOutputStatement = 437
    RULE_openOutput = 438
    RULE_openIOStatement = 439
    RULE_openExtendStatement = 440
    RULE_performStatement = 441
    RULE_performInlineStatement = 442
    RULE_performProcedureStatement = 443
    RULE_performType = 444
    RULE_performTimes = 445
    RULE_performUntil = 446
    RULE_performVarying = 447
    RULE_performVaryingClause = 448
    RULE_performVaryingPhrase = 449
    RULE_performAfter = 450
    RULE_performFrom = 451
    RULE_performBy = 452
    RULE_performTestClause = 453
    RULE_purgeStatement = 454
    RULE_readStatement = 455
    RULE_readInto = 456
    RULE_readWith = 457
    RULE_readKey = 458
    RULE_receiveStatement = 459
    RULE_receiveFromStatement = 460
    RULE_receiveFrom = 461
    RULE_receiveIntoStatement = 462
    RULE_receiveNoData = 463
    RULE_receiveWithData = 464
    RULE_receiveBefore = 465
    RULE_receiveWith = 466
    RULE_receiveThread = 467
    RULE_receiveSize = 468
    RULE_receiveStatus = 469
    RULE_releaseStatement = 470
    RULE_returnStatement = 471
    RULE_returnInto = 472
    RULE_rewriteStatement = 473
    RULE_rewriteFrom = 474
    RULE_searchStatement = 475
    RULE_searchVarying = 476
    RULE_searchWhen = 477
    RULE_sendStatement = 478
    RULE_sendStatementSync = 479
    RULE_sendStatementAsync = 480
    RULE_sendFromPhrase = 481
    RULE_sendWithPhrase = 482
    RULE_sendReplacingPhrase = 483
    RULE_sendAdvancingPhrase = 484
    RULE_sendAdvancingPage = 485
    RULE_sendAdvancingLines = 486
    RULE_sendAdvancingMnemonic = 487
    RULE_setStatement = 488
    RULE_setToStatement = 489
    RULE_setUpDownByStatement = 490
    RULE_setTo = 491
    RULE_setToValue = 492
    RULE_setByValue = 493
    RULE_sortStatement = 494
    RULE_sortOnKeyClause = 495
    RULE_sortDuplicatesPhrase = 496
    RULE_sortCollatingSequencePhrase = 497
    RULE_sortCollatingAlphanumeric = 498
    RULE_sortCollatingNational = 499
    RULE_sortInputProcedurePhrase = 500
    RULE_sortInputThrough = 501
    RULE_sortUsing = 502
    RULE_sortOutputProcedurePhrase = 503
    RULE_sortOutputThrough = 504
    RULE_sortGivingPhrase = 505
    RULE_sortGiving = 506
    RULE_startStatement = 507
    RULE_startKey = 508
    RULE_stopStatement = 509
    RULE_stringStatement = 510
    RULE_stringSendingPhrase = 511
    RULE_stringSending = 512
    RULE_stringDelimitedByPhrase = 513
    RULE_stringForPhrase = 514
    RULE_stringIntoPhrase = 515
    RULE_stringWithPointerPhrase = 516
    RULE_subtractStatement = 517
    RULE_subtractFromStatement = 518
    RULE_subtractFromGivingStatement = 519
    RULE_subtractCorrespondingStatement = 520
    RULE_subtractSubtrahend = 521
    RULE_subtractMinuend = 522
    RULE_subtractMinuendGiving = 523
    RULE_subtractGiving = 524
    RULE_subtractMinuendCorresponding = 525
    RULE_transactionStatement = 526
    RULE_transactionStart = 527
    RULE_transactionBody = 528
    RULE_transactionEnd = 529
    RULE_transactionCancelStatement = 530
    RULE_terminateStatement = 531
    RULE_unstringStatement = 532
    RULE_unstringSendingPhrase = 533
    RULE_unstringDelimitedByPhrase = 534
    RULE_unstringOrAllPhrase = 535
    RULE_unstringIntoPhrase = 536
    RULE_unstringInto = 537
    RULE_unstringDelimiterIn = 538
    RULE_unstringCountIn = 539
    RULE_unstringWithPointerPhrase = 540
    RULE_unstringTallyingPhrase = 541
    RULE_useStatement = 542
    RULE_useFor = 543
    RULE_useAfterClause = 544
    RULE_useAfterOn = 545
    RULE_useDebugClause = 546
    RULE_useDebugOn = 547
    RULE_useDeadLock = 548
    RULE_writeStatement = 549
    RULE_writeFromPhrase = 550
    RULE_writeAdvancingPhrase = 551
    RULE_writeAdvancingPage = 552
    RULE_writeAdvancingLines = 553
    RULE_writeAdvancingMnemonic = 554
    RULE_writeAtEndOfPagePhrase = 555
    RULE_writeNotAtEndOfPagePhrase = 556
    RULE_atEndPhrase = 557
    RULE_notAtEndPhrase = 558
    RULE_invalidKeyPhrase = 559
    RULE_notInvalidKeyPhrase = 560
    RULE_onOverflowPhrase = 561
    RULE_notOnOverflowPhrase = 562
    RULE_onSizeErrorPhrase = 563
    RULE_notOnSizeErrorPhrase = 564
    RULE_onExceptionClause = 565
    RULE_notOnExceptionClause = 566
    RULE_arithmeticExpression = 567
    RULE_plusMinus = 568
    RULE_multDivs = 569
    RULE_multDiv = 570
    RULE_powers = 571
    RULE_power = 572
    RULE_basis = 573
    RULE_condition = 574
    RULE_andOrCondition = 575
    RULE_combinableCondition = 576
    RULE_simpleCondition = 577
    RULE_classCondition = 578
    RULE_conditionNameReference = 579
    RULE_conditionNameSubscriptReference = 580
    RULE_relationCondition = 581
    RULE_relationSignCondition = 582
    RULE_relationArithmeticComparison = 583
    RULE_relationCombinedComparison = 584
    RULE_relationCombinedCondition = 585
    RULE_relationalOperator = 586
    RULE_abbreviation = 587
    RULE_identifier = 588
    RULE_tableCall = 589
    RULE_functionCall = 590
    RULE_referenceModifier = 591
    RULE_characterPosition = 592
    RULE_length = 593
    RULE_subscript_ = 594
    RULE_argument = 595
    RULE_qualifiedDataName = 596
    RULE_qualifiedDataNameFormat1 = 597
    RULE_qualifiedDataNameFormat2 = 598
    RULE_qualifiedDataNameFormat3 = 599
    RULE_qualifiedDataNameFormat4 = 600
    RULE_qualifiedInData = 601
    RULE_inData = 602
    RULE_inFile = 603
    RULE_inMnemonic = 604
    RULE_inSection = 605
    RULE_inLibrary = 606
    RULE_inTable = 607
    RULE_alphabetName = 608
    RULE_assignmentName = 609
    RULE_basisName = 610
    RULE_cdName = 611
    RULE_className = 612
    RULE_computerName = 613
    RULE_conditionName = 614
    RULE_dataName = 615
    RULE_dataDescName = 616
    RULE_environmentName = 617
    RULE_fileName = 618
    RULE_functionName = 619
    RULE_indexName = 620
    RULE_languageName = 621
    RULE_libraryName = 622
    RULE_localName = 623
    RULE_mnemonicName = 624
    RULE_paragraphName = 625
    RULE_procedureName = 626
    RULE_programName = 627
    RULE_recordName = 628
    RULE_reportName = 629
    RULE_routineName = 630
    RULE_screenName = 631
    RULE_sectionName = 632
    RULE_systemName = 633
    RULE_symbolicCharacter = 634
    RULE_textName = 635
    RULE_booleanLiteral = 636
    RULE_numericLiteral = 637
    RULE_integerLiteral = 638
    RULE_cicsDfhRespLiteral = 639
    RULE_cicsDfhValueLiteral = 640
    RULE_figurativeConstant = 641
    RULE_specialRegister = 642
    RULE_commentEntry = 643
    RULE_charDataKeyword = 644

    ruleNames =  [ "startRule", "compilationUnit", "programUnit", "endProgramStatement", 
                   "identificationDivision", "identificationDivisionBody", 
                   "programIdParagraph", "author_name", "authorParagraph", 
                   "installationParagraph", "dateWrittenParagraph", "dateCompiledParagraph", 
                   "securityParagraph", "remarksParagraph", "environmentDivision", 
                   "environmentDivisionBody", "configurationSection", "configurationSectionParagraph", 
                   "sourceComputerParagraph", "objectComputerParagraph", 
                   "objectComputerClause", "memorySizeClause", "diskSizeClause", 
                   "collatingSequenceClause", "collatingSequenceClauseAlphanumeric", 
                   "collatingSequenceClauseNational", "segmentLimitClause", 
                   "characterSetClause", "specialNamesParagraph", "specialNameClause", 
                   "alphabetClause", "alphabetClauseFormat1", "alphabetLiterals", 
                   "alphabetThrough", "alphabetAlso", "alphabetClauseFormat2", 
                   "channelClause", "classClause", "classClauseThrough", 
                   "classClauseFrom", "classClauseTo", "currencySignClause", 
                   "decimalPointClause", "defaultComputationalSignClause", 
                   "defaultDisplaySignClause", "environmentSwitchNameClause", 
                   "environmentSwitchNameSpecialNamesStatusPhrase", "odtClause", 
                   "reserveNetworkClause", "symbolicCharactersClause", "symbolicCharacters", 
                   "inputOutputSection", "inputOutputSectionParagraph", 
                   "fileControlParagraph", "fileControlEntry", "selectClause", 
                   "fileControlClause", "assignClause", "reserveClause", 
                   "organizationClause", "paddingCharacterClause", "recordDelimiterClause", 
                   "accessModeClause", "recordKeyClause", "alternateRecordKeyClause", 
                   "passwordClause", "fileStatusClause", "relativeKeyClause", 
                   "ioControlParagraph", "ioControlClause", "rerunClause", 
                   "rerunEveryRecords", "rerunEveryOf", "rerunEveryClock", 
                   "sameClause", "multipleFileClause", "multipleFilePosition", 
                   "commitmentControlClause", "dataDivision", "dataDivisionSection", 
                   "fileSection", "fileDescriptionEntry", "fileDescriptionEntryClause", 
                   "externalClause", "globalClause", "blockContainsClause", 
                   "blockContainsTo", "recordContainsClause", "recordContainsClauseFormat1", 
                   "recordContainsClauseFormat2", "recordContainsClauseFormat3", 
                   "recordContainsTo", "labelRecordsClause", "valueOfClause", 
                   "valuePair", "dataRecordsClause", "linageClause", "linageAt", 
                   "linageFootingAt", "linageLinesAtTop", "linageLinesAtBottom", 
                   "recordingModeClause", "modeStatement", "codeSetClause", 
                   "reportClause", "dataBaseSection", "dataBaseSectionEntry", 
                   "workingStorageSection", "linkageSection", "communicationSection", 
                   "communicationDescriptionEntry", "communicationDescriptionEntryFormat1", 
                   "communicationDescriptionEntryFormat2", "communicationDescriptionEntryFormat3", 
                   "destinationCountClause", "destinationTableClause", "endKeyClause", 
                   "errorKeyClause", "messageCountClause", "messageDateClause", 
                   "messageTimeClause", "statusKeyClause", "symbolicDestinationClause", 
                   "symbolicQueueClause", "symbolicSourceClause", "symbolicTerminalClause", 
                   "symbolicSubQueueClause", "textLengthClause", "localStorageSection", 
                   "screenSection", "screenDescriptionEntry", "screenDescriptionBlankClause", 
                   "screenDescriptionBellClause", "screenDescriptionBlinkClause", 
                   "screenDescriptionEraseClause", "screenDescriptionLightClause", 
                   "screenDescriptionGridClause", "screenDescriptionReverseVideoClause", 
                   "screenDescriptionUnderlineClause", "screenDescriptionSizeClause", 
                   "screenDescriptionLineClause", "screenDescriptionColumnClause", 
                   "screenDescriptionForegroundColorClause", "screenDescriptionBackgroundColorClause", 
                   "screenDescriptionControlClause", "screenDescriptionValueClause", 
                   "screenDescriptionPictureClause", "screenDescriptionFromClause", 
                   "screenDescriptionToClause", "screenDescriptionUsingClause", 
                   "screenDescriptionUsageClause", "screenDescriptionBlankWhenZeroClause", 
                   "screenDescriptionJustifiedClause", "screenDescriptionSignClause", 
                   "screenDescriptionAutoClause", "screenDescriptionSecureClause", 
                   "screenDescriptionRequiredClause", "screenDescriptionPromptClause", 
                   "screenDescriptionPromptOccursClause", "screenDescriptionFullClause", 
                   "screenDescriptionZeroFillClause", "reportSection", "reportDescription", 
                   "reportDescriptionEntry", "reportDescriptionGlobalClause", 
                   "reportDescriptionPageLimitClause", "reportDescriptionHeadingClause", 
                   "reportDescriptionFirstDetailClause", "reportDescriptionLastDetailClause", 
                   "reportDescriptionFootingClause", "reportGroupDescriptionEntry", 
                   "reportGroupDescriptionEntryFormat1", "reportGroupDescriptionEntryFormat2", 
                   "reportGroupDescriptionEntryFormat3", "reportGroupBlankWhenZeroClause", 
                   "reportGroupColumnNumberClause", "reportGroupIndicateClause", 
                   "reportGroupJustifiedClause", "reportGroupLineNumberClause", 
                   "reportGroupLineNumberNextPage", "reportGroupLineNumberPlus", 
                   "reportGroupNextGroupClause", "reportGroupNextGroupPlus", 
                   "reportGroupNextGroupNextPage", "reportGroupPictureClause", 
                   "reportGroupResetClause", "reportGroupSignClause", "reportGroupSourceClause", 
                   "reportGroupSumClause", "reportGroupTypeClause", "reportGroupTypeReportHeading", 
                   "reportGroupTypePageHeading", "reportGroupTypeControlHeading", 
                   "reportGroupTypeDetail", "reportGroupTypeControlFooting", 
                   "reportGroupUsageClause", "reportGroupTypePageFooting", 
                   "reportGroupTypeReportFooting", "reportGroupValueClause", 
                   "programLibrarySection", "libraryDescriptionEntry", "libraryDescriptionEntryFormat1", 
                   "libraryDescriptionEntryFormat2", "libraryAttributeClauseFormat1", 
                   "libraryAttributeClauseFormat2", "libraryAttributeFunction", 
                   "libraryAttributeParameter", "libraryAttributeTitle", 
                   "libraryEntryProcedureClauseFormat1", "libraryEntryProcedureClauseFormat2", 
                   "libraryEntryProcedureForClause", "libraryEntryProcedureGivingClause", 
                   "libraryEntryProcedureUsingClause", "libraryEntryProcedureUsingName", 
                   "libraryEntryProcedureWithClause", "libraryEntryProcedureWithName", 
                   "libraryIsCommonClause", "libraryIsGlobalClause", "dataDescriptionEntry", 
                   "copyStatement", "disjoinPhrase", "joinPhrase", "copySource", 
                   "copyLibrary", "replacingPhrase", "replaceArea", "replaceByStatement", 
                   "replaceOffStatement", "replaceClause", "directoryPhrase", 
                   "familyPhrase", "replaceable", "replacement", "ejectStatement", 
                   "skipStatement", "titleStatement", "pseudoText", "charData", 
                   "charDataSql", "charDataLine", "cobolWord", "literal", 
                   "jpEncodingText", "filename", "dataDescriptionEntryFormat1", 
                   "dataSqlTypeClause", "sqlDataType", "sqlDataLenght", 
                   "dataCharacterClause", "dataDescriptionEntryFormat2", 
                   "dataDescriptionEntryFormat3", "dataDescriptionEntryExecSql", 
                   "dataAlignedClause", "dataBlankWhenZeroClause", "dataCommonOwnLocalClause", 
                   "dataExternalClause", "dataGlobalClause", "dataIntegerStringClause", 
                   "dataJustifiedClause", "dataOccursClause", "dataOccursTo", 
                   "dataOccursSort", "dataPictureClause", "pictureString", 
                   "pictureChars", "pictureCardinality", "dataReceivedByClause", 
                   "dataRecordAreaClause", "dataRedefinesClause", "dataRenamesClause", 
                   "dataSignClause", "dataSynchronizedClause", "dataThreadLocalClause", 
                   "dataTypeClause", "dataTypeDefClause", "dataUsageClause", 
                   "dataUsingClause", "dataValueClause", "dataValueInterval", 
                   "dataValueIntervalFrom", "dataValueIntervalTo", "dataWithLowerBoundsClause", 
                   "procedureDivision", "procedureDivisionUsingClause", 
                   "procedureDivisionGivingClause", "procedureDivisionUsingParameter", 
                   "procedureDivisionByReferencePhrase", "procedureDivisionByReference", 
                   "procedureDivisionByValuePhrase", "procedureDivisionByValue", 
                   "procedureDeclaratives", "procedureDeclarative", "procedureSectionHeader", 
                   "procedureDivisionBody", "procedureSection", "paragraphs", 
                   "paragraph", "sentence", "statement", "xmlParseStatement", 
                   "xmlDataname", "xmlProcessingProcedure", "endXml", "execSqlStatement2", 
                   "sqlCode", "execCicsStatement2", "commandName", "commandBody", 
                   "commandParameter", "parameterName", "parameterNameWithIndex", 
                   "parameterValueWithIndex", "parameterValue", "acceptStatement", 
                   "acceptFromDateStatement", "acceptFromMnemonicStatement", 
                   "acceptFromEscapeKeyStatement", "acceptMessageCountStatement", 
                   "addStatement", "addToStatement", "addToGivingStatement", 
                   "addCorrespondingStatement", "addFrom", "addTo", "addToGiving", 
                   "addGiving", "alteredGoTo", "alterStatement", "alterProceedTo", 
                   "callStatement", "callUsingPhrase", "callUsingParameter", 
                   "callByReferencePhrase", "callByReference", "callByValuePhrase", 
                   "callByValue", "callByContentPhrase", "callByContent", 
                   "callGivingPhrase", "cancelStatement", "cancelCall", 
                   "closeStatement", "closeFile", "closeReelUnitStatement", 
                   "closeRelativeStatement", "closePortFileIOStatement", 
                   "closePortFileIOUsing", "closePortFileIOUsingCloseDisposition", 
                   "closePortFileIOUsingAssociatedData", "closePortFileIOUsingAssociatedDataLength", 
                   "computeStatement", "computeStore", "continueStatement", 
                   "deleteStatement", "disableStatement", "displayStatement", 
                   "displayOperand", "displayAt", "displayUpon", "displayWith", 
                   "divideStatement", "divideIntoStatement", "divideIntoGivingStatement", 
                   "divideByGivingStatement", "divideGivingPhrase", "divideInto", 
                   "divideGiving", "divideRemainder", "enableStatement", 
                   "entryStatement", "evaluateStatement", "evaluateSelect", 
                   "evaluateAlsoSelect", "evaluateWhenPhrase", "evaluateWhen", 
                   "evaluateCondition", "evaluateThrough", "evaluateAlsoCondition", 
                   "evaluateWhenOther", "evaluateValue", "execCicsStatement", 
                   "execSqlStatement", "execSqlImsStatement", "exhibitStatement", 
                   "exhibitOperand", "exitStatement", "generateStatement", 
                   "gobackStatement", "goToStatement", "goToStatementSimple", 
                   "goToDependingOnStatement", "ifStatement", "ifThen", 
                   "ifElse", "initializeStatement", "initializeReplacingPhrase", 
                   "initializeReplacingBy", "initiateStatement", "inspectStatement", 
                   "inspectTallyingPhrase", "inspectReplacingPhrase", "inspectTallyingReplacingPhrase", 
                   "inspectConvertingPhrase", "inspectFor", "inspectCharacters", 
                   "inspectReplacingCharacters", "inspectAllLeadings", "inspectReplacingAllLeadings", 
                   "inspectAllLeading", "inspectReplacingAllLeading", "inspectBy", 
                   "inspectTo", "inspectBeforeAfter", "mergeStatement", 
                   "mergeOnKeyClause", "mergeCollatingSequencePhrase", "mergeCollatingAlphanumeric", 
                   "mergeCollatingNational", "mergeUsing", "mergeOutputProcedurePhrase", 
                   "mergeOutputThrough", "mergeGivingPhrase", "mergeGiving", 
                   "moveStatement", "moveToStatement", "moveToSendingArea", 
                   "moveCorrespondingToStatement", "moveCorrespondingToSendingArea", 
                   "multiplyStatement", "multiplyRegular", "multiplyRegularOperand", 
                   "multiplyGiving", "multiplyGivingOperand", "multiplyGivingResult", 
                   "openStatement", "openInputStatement", "openInput", "openOutputStatement", 
                   "openOutput", "openIOStatement", "openExtendStatement", 
                   "performStatement", "performInlineStatement", "performProcedureStatement", 
                   "performType", "performTimes", "performUntil", "performVarying", 
                   "performVaryingClause", "performVaryingPhrase", "performAfter", 
                   "performFrom", "performBy", "performTestClause", "purgeStatement", 
                   "readStatement", "readInto", "readWith", "readKey", "receiveStatement", 
                   "receiveFromStatement", "receiveFrom", "receiveIntoStatement", 
                   "receiveNoData", "receiveWithData", "receiveBefore", 
                   "receiveWith", "receiveThread", "receiveSize", "receiveStatus", 
                   "releaseStatement", "returnStatement", "returnInto", 
                   "rewriteStatement", "rewriteFrom", "searchStatement", 
                   "searchVarying", "searchWhen", "sendStatement", "sendStatementSync", 
                   "sendStatementAsync", "sendFromPhrase", "sendWithPhrase", 
                   "sendReplacingPhrase", "sendAdvancingPhrase", "sendAdvancingPage", 
                   "sendAdvancingLines", "sendAdvancingMnemonic", "setStatement", 
                   "setToStatement", "setUpDownByStatement", "setTo", "setToValue", 
                   "setByValue", "sortStatement", "sortOnKeyClause", "sortDuplicatesPhrase", 
                   "sortCollatingSequencePhrase", "sortCollatingAlphanumeric", 
                   "sortCollatingNational", "sortInputProcedurePhrase", 
                   "sortInputThrough", "sortUsing", "sortOutputProcedurePhrase", 
                   "sortOutputThrough", "sortGivingPhrase", "sortGiving", 
                   "startStatement", "startKey", "stopStatement", "stringStatement", 
                   "stringSendingPhrase", "stringSending", "stringDelimitedByPhrase", 
                   "stringForPhrase", "stringIntoPhrase", "stringWithPointerPhrase", 
                   "subtractStatement", "subtractFromStatement", "subtractFromGivingStatement", 
                   "subtractCorrespondingStatement", "subtractSubtrahend", 
                   "subtractMinuend", "subtractMinuendGiving", "subtractGiving", 
                   "subtractMinuendCorresponding", "transactionStatement", 
                   "transactionStart", "transactionBody", "transactionEnd", 
                   "transactionCancelStatement", "terminateStatement", "unstringStatement", 
                   "unstringSendingPhrase", "unstringDelimitedByPhrase", 
                   "unstringOrAllPhrase", "unstringIntoPhrase", "unstringInto", 
                   "unstringDelimiterIn", "unstringCountIn", "unstringWithPointerPhrase", 
                   "unstringTallyingPhrase", "useStatement", "useFor", "useAfterClause", 
                   "useAfterOn", "useDebugClause", "useDebugOn", "useDeadLock", 
                   "writeStatement", "writeFromPhrase", "writeAdvancingPhrase", 
                   "writeAdvancingPage", "writeAdvancingLines", "writeAdvancingMnemonic", 
                   "writeAtEndOfPagePhrase", "writeNotAtEndOfPagePhrase", 
                   "atEndPhrase", "notAtEndPhrase", "invalidKeyPhrase", 
                   "notInvalidKeyPhrase", "onOverflowPhrase", "notOnOverflowPhrase", 
                   "onSizeErrorPhrase", "notOnSizeErrorPhrase", "onExceptionClause", 
                   "notOnExceptionClause", "arithmeticExpression", "plusMinus", 
                   "multDivs", "multDiv", "powers", "power", "basis", "condition", 
                   "andOrCondition", "combinableCondition", "simpleCondition", 
                   "classCondition", "conditionNameReference", "conditionNameSubscriptReference", 
                   "relationCondition", "relationSignCondition", "relationArithmeticComparison", 
                   "relationCombinedComparison", "relationCombinedCondition", 
                   "relationalOperator", "abbreviation", "identifier", "tableCall", 
                   "functionCall", "referenceModifier", "characterPosition", 
                   "length", "subscript_", "argument", "qualifiedDataName", 
                   "qualifiedDataNameFormat1", "qualifiedDataNameFormat2", 
                   "qualifiedDataNameFormat3", "qualifiedDataNameFormat4", 
                   "qualifiedInData", "inData", "inFile", "inMnemonic", 
                   "inSection", "inLibrary", "inTable", "alphabetName", 
                   "assignmentName", "basisName", "cdName", "className", 
                   "computerName", "conditionName", "dataName", "dataDescName", 
                   "environmentName", "fileName", "functionName", "indexName", 
                   "languageName", "libraryName", "localName", "mnemonicName", 
                   "paragraphName", "procedureName", "programName", "recordName", 
                   "reportName", "routineName", "screenName", "sectionName", 
                   "systemName", "symbolicCharacter", "textName", "booleanLiteral", 
                   "numericLiteral", "integerLiteral", "cicsDfhRespLiteral", 
                   "cicsDfhValueLiteral", "figurativeConstant", "specialRegister", 
                   "commentEntry", "charDataKeyword" ]

    EOF = Token.EOF
    T__0=1
    ABORT=2
    ACCEPT=3
    ACCESS=4
    ADD=5
    ADDRESS=6
    ADVANCING=7
    AFTER=8
    ALIGNED=9
    ALL=10
    ALPHABET=11
    ALPHABETIC=12
    ALPHABETIC_LOWER=13
    ALPHABETIC_UPPER=14
    ALPHANUMERIC=15
    ALPHANUMERIC_EDITED=16
    ALSO=17
    ALTER=18
    ALTERNATE=19
    AND=20
    ANY=21
    ARE=22
    AREA=23
    AREAS=24
    AS=25
    ASCENDING=26
    ASCII=27
    ASSIGN=28
    ASSOCIATED_DATA=29
    ASSOCIATED_DATA_LENGTH=30
    AT=31
    ATTRIBUTE=32
    AUTHOR=33
    AUTO=34
    AUTO_SKIP=35
    AROBASE=36
    AROBASEEC=37
    BACKGROUND_COLOR=38
    BACKGROUND_COLOUR=39
    BASIS=40
    BEEP=41
    BEFORE=42
    BEGINNING=43
    BELL=44
    BINARY=45
    BIT=46
    BLANK=47
    BLINK=48
    BLOCK=49
    BOUNDS=50
    BOTTOM=51
    BY=52
    BYFUNCTION=53
    BYTITLE=54
    CALL=55
    CANCEL=56
    CAPABLE=57
    CCSVERSION=58
    CD=59
    CF=60
    CH=61
    CHAINING=62
    CHANGED=63
    CHANNEL=64
    CHARACTER=65
    CHARACTERS=66
    CLASS=67
    CLASS_ID=68
    CLOCK_UNITS=69
    CLOSE=70
    CLOSE_DISPOSITION=71
    COBOL=72
    CODE=73
    CODE_SET=74
    COLLATING=75
    COL=76
    COLUMN=77
    COM_REG=78
    COMMA=79
    COMMITMENT=80
    COMMON=81
    COMMUNICATION=82
    COMP=83
    COMP_1=84
    COMP_2=85
    COMP_3=86
    COMP_4=87
    COMP_5=88
    COMPUTATIONAL=89
    COMPUTATIONAL_1=90
    COMPUTATIONAL_2=91
    COMPUTATIONAL_3=92
    COMPUTATIONAL_4=93
    COMPUTATIONAL_5=94
    COMPUTE=95
    CONFIGURATION=96
    CONTAINS=97
    CONTENT=98
    CONTINUE=99
    CONTROL=100
    CONTROL_POINT=101
    CONTROLS=102
    CONVENTION=103
    CONVERTING=104
    COPY=105
    CORR=106
    CORRESPONDING=107
    COUNT=108
    CRUNCH=109
    CURRENCY=110
    CURSOR=111
    DATA=112
    DATA_BASE=113
    DATE=114
    DATE_COMPILED=115
    DATE_WRITTEN=116
    DAY=117
    DAY_OF_WEEK=118
    DBCS=119
    DE=120
    DEBUG_CONTENTS=121
    DEBUG_ITEM=122
    DEBUG_LINE=123
    DEBUG_NAME=124
    DEBUG_SUB_1=125
    DEBUG_SUB_2=126
    DEBUG_SUB_3=127
    DEBUGGING=128
    DECIMAL_POINT=129
    DECLARATIVES=130
    DEAD_LOCK=131
    DEFAULT=132
    DEFAULT_DISPLAY=133
    DEFINITION=134
    DELETE=135
    DELIMITED=136
    DELIMITER=137
    DEPENDING=138
    DESCENDING=139
    DESTINATION=140
    DETAIL=141
    DFHRESP=142
    DFHVALUE=143
    DISABLE=144
    DISJOINING=145
    DISK=146
    DISPLAY=147
    DISPLAY_1=148
    DIVIDE=149
    DIVISION=150
    DONTCARE=151
    DOUBLE=152
    DOWN=153
    DUPLICATES=154
    DYNAMIC=155
    EBCDIC=156
    EGCS=157
    EGI=158
    ELSE=159
    EMI=160
    EMPTY_CHECK=161
    ENABLE=162
    END=163
    END_ACCEPT=164
    END_ADD=165
    END_CALL=166
    END_COMPUTE=167
    END_DELETE=168
    END_DIVIDE=169
    END_EVALUATE=170
    END_IF=171
    END_MULTIPLY=172
    END_OF_PAGE=173
    END_PERFORM=174
    END_READ=175
    END_RECEIVE=176
    END_RETURN=177
    END_REWRITE=178
    END_SEARCH=179
    END_START=180
    END_STRING=181
    END_SUBTRACT=182
    END_UNSTRING=183
    END_WRITE=184
    END_XML=185
    ENDING=186
    ENTER=187
    ENTRY=188
    ENTRY_PROCEDURE=189
    ENVIRONMENT=190
    EOP=191
    EQUAL=192
    ERASE=193
    ERROR=194
    EOL=195
    EOS=196
    ESCAPE=197
    ESI=198
    EVALUATE=199
    EVENT=200
    EVERY=201
    EXCEPTION=202
    EXCLUSIVE=203
    EXHIBIT=204
    EXIT=205
    EXPORT=206
    EXTEND=207
    EXTENDED=208
    EXTERNAL=209
    FALSE=210
    FD=211
    FILE=212
    FILE_CONTROL=213
    FILLER=214
    FINAL=215
    FIRST=216
    FOOTING=217
    FOR=218
    FOREGROUND_COLOR=219
    FOREGROUND_COLOUR=220
    FROM=221
    FULL=222
    FUNCTION=223
    FUNCTIONNAME=224
    FUNCTION_POINTER=225
    GENERATE=226
    GOBACK=227
    GIVING=228
    GLOBAL=229
    GO=230
    GREATER=231
    GRID=232
    GROUP=233
    HASH=234
    HEADING=235
    HIGHLIGHT=236
    HIGH_VALUE=237
    HIGH_VALUES=238
    I_O=239
    I_O_CONTROL=240
    ID=241
    IDENTIFICATION=242
    IF=243
    IMPLICIT=244
    IMPORT=245
    IN=246
    INDEX=247
    INDEXED=248
    INDICATE=249
    INITIAL=250
    INITIALIZE=251
    INITIATE=252
    INPUT=253
    INPUT_OUTPUT=254
    INSPECT=255
    INSTALLATION=256
    INTEGER=257
    INTO=258
    INVALID=259
    INVOKE=260
    IS=261
    JUST=262
    JUSTIFIED=263
    KANJI=264
    JOINING=265
    JP_CHAR=266
    JP_TXT=267
    KEPT=268
    KEY=269
    KEYBOARD=270
    LABEL=271
    LANGUAGE=272
    LAST=273
    LB=274
    LD=275
    LEADING=276
    LEFT=277
    LEFTLINE=278
    LENGTH=279
    LENGTH_CHECK=280
    LESS=281
    LIBACCESS=282
    LIBPARAMETER=283
    LIBRARY=284
    LIMIT=285
    LIMITS=286
    LINAGE=287
    LINAGE_COUNTER=288
    LINE=289
    LINES=290
    LINE_COUNTER=291
    LINKAGE=292
    LIST=293
    LOCAL=294
    LOCAL_STORAGE=295
    LOCK=296
    LONG_DATE=297
    LONG_TIME=298
    LOWER=299
    LOWLIGHT=300
    LOW_VALUE=301
    LOW_VALUES=302
    MEMORY=303
    MERGE=304
    MESSAGE=305
    MMDDYYYY=306
    MODE=307
    MODE_1=308
    MODULES=309
    MORE_LABELS=310
    MOVE=311
    MULTIPLE=312
    MULTIPLY=313
    NAMED=314
    NATIONAL=315
    NATIONAL_EDITED=316
    NATIVE=317
    NEGATIVE=318
    NETWORK=319
    NEXT=320
    NC=321
    NO=322
    NO_ECHO=323
    NOT=324
    NULL_=325
    NULLS=326
    NUMBER=327
    NUMERIC=328
    NUMERIC_DATE=329
    NUMERIC_EDITED=330
    NUMERIC_TIME=331
    OBJECT_COMPUTER=332
    OCCURS=333
    ODT=334
    OF=335
    OFF=336
    OMITTED=337
    ON=338
    OPEN=339
    OPTIONAL=340
    OR=341
    ORDER=342
    ORDERLY=343
    ORGANIZATION=344
    OTHER=345
    OUTPUT=346
    OVERFLOW=347
    OVERLINE=348
    OWN=349
    PACKED_DECIMAL=350
    PADDING=351
    PAGE=352
    PAGE_COUNTER=353
    PASSWORD=354
    PERFORM=355
    PF=356
    PH=357
    PIC=358
    PICTURE=359
    PLUS=360
    POINTER=361
    POSITION=362
    POSITIVE=363
    PORT=364
    PRINTER=365
    PRINTING=366
    PRIVATE=367
    PROCEDURE=368
    PROCEDURE_POINTER=369
    PROCEDURES=370
    PROCEED=371
    PROCESS=372
    PROGRAM=373
    PROGRAM_ID=374
    PROGRAM_LIBRARY=375
    PROMPT=376
    PURGE=377
    QUEUE=378
    QUOTE=379
    QUOTES=380
    RANDOM=381
    READER=382
    REMOTE=383
    RD=384
    REAL=385
    READ=386
    RECEIVE=387
    RECEIVED=388
    RECORD=389
    RECORDING=390
    RECORDS=391
    RECURSIVE=392
    REDEFINES=393
    REEL=394
    REF=395
    REFERENCE=396
    REFERENCES=397
    RELATIVE=398
    RELEASE=399
    REMAINDER=400
    REMARKS=401
    REMOVAL=402
    REMOVE=403
    RENAMES=404
    REPLACE=405
    REPLACING=406
    REPORT=407
    REPORTING=408
    REPORTS=409
    REQUIRED=410
    RERUN=411
    RESERVE=412
    REVERSE_VIDEO=413
    RESET=414
    RETURN=415
    RETURN_CODE=416
    RETURNING=417
    REVERSED=418
    REWIND=419
    REWRITE=420
    RF=421
    RH=422
    RIGHT=423
    ROUNDED=424
    RUN=425
    SAME=426
    SAVE=427
    SCREEN=428
    SD=429
    SEARCH=430
    SECTION=431
    SECURE=432
    SECURITY=433
    SEGMENT=434
    SEGMENT_LIMIT=435
    SELECT=436
    SEND=437
    SENTENCE=438
    SEPARATE=439
    SEQUENCE=440
    SEQUENTIAL=441
    SET=442
    SHARED=443
    SHAREDBYALL=444
    SHAREDBYRUNUNIT=445
    SHARING=446
    SHIFT_IN=447
    SHIFT_OUT=448
    SHORT_DATE=449
    SIGN=450
    SIZE=451
    SORT=452
    SORT_CONTROL=453
    SORT_CORE_SIZE=454
    SORT_FILE_SIZE=455
    SORT_MERGE=456
    SORT_MESSAGE=457
    SORT_MODE_SIZE=458
    SORT_RETURN=459
    SOURCE=460
    SOURCE_COMPUTER=461
    SPACE=462
    SPACES=463
    SPECIAL_NAMES=464
    STANDARD=465
    STANDARD_1=466
    STANDARD_2=467
    START=468
    STATUS=469
    STOP=470
    STRING=471
    SUB_QUEUE_1=472
    SUB_QUEUE_2=473
    SUB_QUEUE_3=474
    SUBTRACT=475
    SUM=476
    SUPPRESS=477
    SYMBOL=478
    SYMBOLIC=479
    SYNC=480
    SYNCHRONIZED=481
    TABLE=482
    TALLY=483
    TALLYING=484
    TASK=485
    TAPE=486
    TERMINAL=487
    TERMINATE=488
    TEST=489
    TEXT=490
    THAN=491
    THEN=492
    THREAD=493
    THREAD_LOCAL=494
    THROUGH=495
    THRU=496
    TIME=497
    TIMER=498
    TIMES=499
    TITLE=500
    TO=501
    TODAYS_DATE=502
    TODAYS_NAME=503
    TOP=504
    TRANSACTION=505
    TRAILING=506
    TRUE=507
    TRUNCATED=508
    TYPE=509
    TYPEDEF=510
    UNDERLINE=511
    UNIT=512
    UNSTRING=513
    UNTIL=514
    UP=515
    UPON=516
    USAGE=517
    USE=518
    USING=519
    VALUE=520
    VALUES=521
    VARYING=522
    VIRTUAL=523
    WAIT=524
    WHEN=525
    WHEN_COMPILED=526
    WITH=527
    WORDS=528
    WORKING_STORAGE=529
    WRITE=530
    YEAR=531
    YYYYMMDD=532
    YYYYDDD=533
    ZERO=534
    ZERO_FILL=535
    ZEROS=536
    ZEROES=537
    AMPCHAR=538
    ASTERISKCHAR=539
    DOUBLEASTERISKCHAR=540
    COLONCHAR=541
    COMMACHAR=542
    COMMENTENTRYTAG=543
    COMMENTTAG=544
    COMMENTTAG2=545
    COMMENTTAG3=546
    COMMENTTAG4=547
    DOLLARCHAR=548
    DOUBLEQUOTE=549
    DOT_FS=550
    DOT=551
    EQUALCHAR=552
    EXECCICSTAG=553
    EXECSQLTAG=554
    EXECSQLIMSTAG=555
    LESSTHANCHAR=556
    LESSTHANOREQUAL=557
    LPARENCHAR=558
    MINUSCHAR=559
    MORETHANCHAR=560
    MORETHANOREQUAL=561
    NOTEQUALCHAR=562
    PLUSCHAR=563
    SINGLEQUOTE=564
    RPARENCHAR=565
    SLASHCHAR=566
    PIPECHAR=567
    UNDERSCORECHAR=568
    NONNUMERICLITERAL=569
    LEVEL_NUMBER_66=570
    LEVEL_NUMBER_77=571
    LEVEL_NUMBER_88=572
    INTEGERLITERAL=573
    NUMERICLITERAL=574
    NUMERICLITERAL2=575
    NUMERICLITERAL3=576
    EXEC=577
    NEWLINE=578
    EXECCICSLINE=579
    EXECSQLIMSLINE=580
    EXECSQLLINE=581
    COMMENTENTRYLINE=582
    COMMENTLINE=583
    COMMENTLINE2=584
    COMMENTLINE3=585
    COMMENTLINE4=586
    COMMENTLINE_2=587
    COMMENTLINE_5=588
    COMMENTLINE_3=589
    COMMENTLINE_=590
    COMMENTLINE_4=591
    COMMENTLINE_6=592
    COMMENTLINE_7=593
    WS=594
    WS_JP=595
    WS_JP_ENCODED=596
    SEPARATOR=597
    SEPARATOR_2=598
    EJECT=599
    FILENAME=600
    SKIP1=601
    SKIP2=602
    SKIP3=603
    ADATA=604
    ADV=605
    ALIAS=606
    ANSI=607
    APOST=608
    AR=609
    ARITH=610
    AWO=611
    BIN=612
    BLOCK0=613
    BUF=614
    BUFSIZE=615
    CBL=616
    CBLCARD=617
    CICS=618
    CO=619
    COBOL2=620
    COBOL3=621
    CODEPAGE=622
    COMPAT=623
    COMPILE=624
    CP=625
    CPP=626
    CPSM=627
    CS=628
    CURR=629
    DATEPROC=630
    DD=631
    DEBUG=632
    DECK=633
    DIAGTRUNC=634
    DLI=635
    DLL=636
    DP=637
    DTR=638
    DU=639
    DUMP=640
    DYN=641
    DYNAM=642
    EDF=643
    EJPD=644
    EN=645
    ENGLISH=646
    END_EXEC=647
    EPILOG=648
    EXCI=649
    EXP=650
    EXPORTALL=651
    FASTSRT=652
    FEPI=653
    FLAG=654
    FLAGSTD=655
    FSRT=656
    GDS=657
    GRAPHIC=658
    HOOK=659
    INTDATE=660
    JA=661
    JP=662
    KA=663
    LANG=664
    LC=665
    LEASM=666
    LIB=667
    LILIAN=668
    LIN=669
    LINECOUNT=670
    LM=671
    LONGMIXED=672
    LONGUPPER=673
    LU=674
    MAP=675
    MARGINS=676
    MAX=677
    MD=678
    MDECK=679
    MIG=680
    MIXED=681
    NAME=682
    NAT=683
    NATLANG=684
    NN=685
    NOADATA=686
    NOADV=687
    NOALIAS=688
    NOAWO=689
    NOBLOCK0=690
    NOC=691
    NOCBLCARD=692
    NOCICS=693
    NOCMPR2=694
    NOCOMPILE=695
    NOCPSM=696
    NOCURR=697
    NOCURRENCY=698
    NOD=699
    NODATEPROC=700
    NODBCS=701
    NODE=702
    NODEBUG=703
    NODECK=704
    NODIAGTRUNC=705
    NODLL=706
    NODU=707
    NODUMP=708
    NODP=709
    NODTR=710
    NODYN=711
    NODYNAM=712
    NOEDF=713
    NOEJPD=714
    NOEPILOG=715
    NOEXIT=716
    NOEXP=717
    NOEXPORTALL=718
    NOF=719
    NOFASTSRT=720
    NOFEPI=721
    NOFLAG=722
    NOFLAGMIG=723
    NOFLAGSTD=724
    NOFSRT=725
    NOGRAPHIC=726
    NOHOOK=727
    NOLENGTH=728
    NOLIB=729
    NOLINKAGE=730
    NOLIST=731
    NOMAP=732
    NOMD=733
    NOMDECK=734
    NONAME=735
    NONUM=736
    NONUMBER=737
    NOOBJ=738
    NOOBJECT=739
    NOOFF=740
    NOOFFSET=741
    NOOPSEQUENCE=742
    NOOPT=743
    NOOPTIMIZE=744
    NOOPTIONS=745
    NOP=746
    NOPFD=747
    NOPROLOG=748
    NORENT=749
    NOS=750
    NOSEP=751
    NOSEPARATE=752
    NOSEQ=753
    NOSOURCE=754
    NOSPIE=755
    NOSQL=756
    NOSQLC=757
    NOSQLCCSID=758
    NOSSR=759
    NOSSRANGE=760
    NOSTDTRUNC=761
    NOSEQUENCE=762
    NOTERM=763
    NOTERMINAL=764
    NOTEST=765
    NOTHREAD=766
    NOTRIG=767
    NOVBREF=768
    NOWD=769
    NOWORD=770
    NOX=771
    NOXREF=772
    NOZWB=773
    NS=774
    NSEQ=775
    NSYMBOL=776
    NUM=777
    NUMPROC=778
    OBJ=779
    OBJECT=780
    OFFSET=781
    OP=782
    OPMARGINS=783
    OPSEQUENCE=784
    OPT=785
    OPTFILE=786
    OPTIMIZE=787
    OPTIONS=788
    OUT=789
    OUTDD=790
    PFD=791
    PPTDBG=792
    PGMN=793
    PGMNAME=794
    PROLOG=795
    RENT=796
    RMODE=797
    SEP=798
    SEQ=799
    SHORT=800
    SP=801
    SPIE=802
    SQL=803
    SQLC=804
    SQLCCSID=805
    SQLIMS=806
    SS=807
    SSR=808
    SSRANGE=809
    STD=810
    SYSEIB=811
    SZ=812
    TERM=813
    TRIG=814
    TRUNC=815
    UE=816
    UPPER=817
    VBREF=818
    WD=819
    WORD=820
    XMLPARSE=821
    XMLSS=822
    XML=823
    PARSE=824
    PROCESSING=825
    XOPTS=826
    XP=827
    XREF=828
    YEARWINDOW=829
    YW=830
    ZWB=831
    IDENTIFIER=832
    C_CHAR=833
    D_CHAR=834
    E_CHAR=835
    F_CHAR=836
    H_CHAR=837
    I_CHAR=838
    M_CHAR=839
    N_CHAR=840
    Q_CHAR=841
    S_CHAR=842
    U_CHAR=843
    W_CHAR=844
    X_CHAR=845
    DOUBLEEQUALCHAR=846
    DOUBLEMINUSCHAR=847

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compilationUnit(self):
            return self.getTypedRuleContext(CopyBookParser.CompilationUnitContext,0)


        def EOF(self):
            return self.getToken(CopyBookParser.EOF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = CopyBookParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.compilationUnit()
            self.state = 1291
            self.match(CopyBookParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def programUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProgramUnitContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProgramUnitContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = CopyBookParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1293
                self.programUnit()
                self.state = 1296 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==241 or _la==242):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identificationDivision(self):
            return self.getTypedRuleContext(CopyBookParser.IdentificationDivisionContext,0)


        def environmentDivision(self):
            return self.getTypedRuleContext(CopyBookParser.EnvironmentDivisionContext,0)


        def dataDivision(self):
            return self.getTypedRuleContext(CopyBookParser.DataDivisionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_programUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramUnit" ):
                listener.enterProgramUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramUnit" ):
                listener.exitProgramUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramUnit" ):
                return visitor.visitProgramUnit(self)
            else:
                return visitor.visitChildren(self)




    def programUnit(self):

        localctx = CopyBookParser.ProgramUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_programUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.identificationDivision()
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 1299
                self.environmentDivision()


            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 1302
                self.dataDivision()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndProgramStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CopyBookParser.END, 0)

        def PROGRAM(self):
            return self.getToken(CopyBookParser.PROGRAM, 0)

        def programName(self):
            return self.getTypedRuleContext(CopyBookParser.ProgramNameContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_endProgramStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndProgramStatement" ):
                listener.enterEndProgramStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndProgramStatement" ):
                listener.exitEndProgramStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndProgramStatement" ):
                return visitor.visitEndProgramStatement(self)
            else:
                return visitor.visitChildren(self)




    def endProgramStatement(self):

        localctx = CopyBookParser.EndProgramStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_endProgramStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(CopyBookParser.END)
            self.state = 1306
            self.match(CopyBookParser.PROGRAM)
            self.state = 1307
            self.programName()
            self.state = 1308
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentificationDivisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIVISION(self):
            return self.getToken(CopyBookParser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def programIdParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.ProgramIdParagraphContext,0)


        def IDENTIFICATION(self):
            return self.getToken(CopyBookParser.IDENTIFICATION, 0)

        def ID(self):
            return self.getToken(CopyBookParser.ID, 0)

        def identificationDivisionBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IdentificationDivisionBodyContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IdentificationDivisionBodyContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_identificationDivision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentificationDivision" ):
                listener.enterIdentificationDivision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentificationDivision" ):
                listener.exitIdentificationDivision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentificationDivision" ):
                return visitor.visitIdentificationDivision(self)
            else:
                return visitor.visitChildren(self)




    def identificationDivision(self):

        localctx = CopyBookParser.IdentificationDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_identificationDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            _la = self._input.LA(1)
            if not(_la==241 or _la==242):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1311
            self.match(CopyBookParser.DIVISION)
            self.state = 1312
            self.match(CopyBookParser.DOT_FS)
            self.state = 1313
            self.programIdParagraph()
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33 or _la==115 or _la==116 or _la==256 or _la==401 or _la==433:
                self.state = 1314
                self.identificationDivisionBody()
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentificationDivisionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def authorParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.AuthorParagraphContext,0)


        def installationParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.InstallationParagraphContext,0)


        def dateWrittenParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.DateWrittenParagraphContext,0)


        def dateCompiledParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.DateCompiledParagraphContext,0)


        def securityParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.SecurityParagraphContext,0)


        def remarksParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.RemarksParagraphContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_identificationDivisionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentificationDivisionBody" ):
                listener.enterIdentificationDivisionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentificationDivisionBody" ):
                listener.exitIdentificationDivisionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentificationDivisionBody" ):
                return visitor.visitIdentificationDivisionBody(self)
            else:
                return visitor.visitChildren(self)




    def identificationDivisionBody(self):

        localctx = CopyBookParser.IdentificationDivisionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_identificationDivisionBody)
        try:
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.authorParagraph()
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.installationParagraph()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1322
                self.dateWrittenParagraph()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1323
                self.dateCompiledParagraph()
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1324
                self.securityParagraph()
                pass
            elif token in [401]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1325
                self.remarksParagraph()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramIdParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM_ID(self):
            return self.getToken(CopyBookParser.PROGRAM_ID, 0)

        def programName(self):
            return self.getTypedRuleContext(CopyBookParser.ProgramNameContext,0)


        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def WS(self):
            return self.getToken(CopyBookParser.WS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def COMMON(self):
            return self.getToken(CopyBookParser.COMMON, 0)

        def INITIAL(self):
            return self.getToken(CopyBookParser.INITIAL, 0)

        def LIBRARY(self):
            return self.getToken(CopyBookParser.LIBRARY, 0)

        def DEFINITION(self):
            return self.getToken(CopyBookParser.DEFINITION, 0)

        def RECURSIVE(self):
            return self.getToken(CopyBookParser.RECURSIVE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def PROGRAM(self):
            return self.getToken(CopyBookParser.PROGRAM, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_programIdParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramIdParagraph" ):
                listener.enterProgramIdParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramIdParagraph" ):
                listener.exitProgramIdParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramIdParagraph" ):
                return visitor.visitProgramIdParagraph(self)
            else:
                return visitor.visitChildren(self)




    def programIdParagraph(self):

        localctx = CopyBookParser.ProgramIdParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_programIdParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(CopyBookParser.PROGRAM_ID)
            self.state = 1329
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==594:
                self.state = 1330
                self.match(CopyBookParser.WS)


            self.state = 1333
            self.programName()
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81 or _la==134 or ((((_la - 250)) & ~0x3f) == 0 and ((1 << (_la - 250)) & 17179871233) != 0) or _la==392:
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 1334
                    self.match(CopyBookParser.IS)


                self.state = 1337
                _la = self._input.LA(1)
                if not(_la==81 or _la==134 or _la==250 or _la==284 or _la==392):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==373:
                    self.state = 1338
                    self.match(CopyBookParser.PROGRAM)




            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==550:
                self.state = 1343
                self.match(CopyBookParser.DOT_FS)


            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==582:
                self.state = 1346
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Author_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_author_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthor_name" ):
                listener.enterAuthor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthor_name" ):
                listener.exitAuthor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuthor_name" ):
                return visitor.visitAuthor_name(self)
            else:
                return visitor.visitChildren(self)




    def author_name(self):

        localctx = CopyBookParser.Author_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_author_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(CopyBookParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthorParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHOR(self):
            return self.getToken(CopyBookParser.AUTHOR, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def WS(self):
            return self.getToken(CopyBookParser.WS, 0)

        def author_name(self):
            return self.getTypedRuleContext(CopyBookParser.Author_nameContext,0)


        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_authorParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthorParagraph" ):
                listener.enterAuthorParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthorParagraph" ):
                listener.exitAuthorParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuthorParagraph" ):
                return visitor.visitAuthorParagraph(self)
            else:
                return visitor.visitChildren(self)




    def authorParagraph(self):

        localctx = CopyBookParser.AuthorParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_authorParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(CopyBookParser.AUTHOR)
            self.state = 1352
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==594:
                self.state = 1353
                self.match(CopyBookParser.WS)


            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==832:
                self.state = 1356
                self.author_name()
                self.state = 1357
                self.match(CopyBookParser.DOT_FS)


            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==582:
                self.state = 1361
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallationParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALLATION(self):
            return self.getToken(CopyBookParser.INSTALLATION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_installationParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallationParagraph" ):
                listener.enterInstallationParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallationParagraph" ):
                listener.exitInstallationParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstallationParagraph" ):
                return visitor.visitInstallationParagraph(self)
            else:
                return visitor.visitChildren(self)




    def installationParagraph(self):

        localctx = CopyBookParser.InstallationParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_installationParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(CopyBookParser.INSTALLATION)
            self.state = 1365
            self.match(CopyBookParser.DOT_FS)
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==582:
                self.state = 1366
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateWrittenParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_WRITTEN(self):
            return self.getToken(CopyBookParser.DATE_WRITTEN, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.IDENTIFIER)
            else:
                return self.getToken(CopyBookParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.WS)
            else:
                return self.getToken(CopyBookParser.WS, i)

        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dateWrittenParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateWrittenParagraph" ):
                listener.enterDateWrittenParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateWrittenParagraph" ):
                listener.exitDateWrittenParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateWrittenParagraph" ):
                return visitor.visitDateWrittenParagraph(self)
            else:
                return visitor.visitChildren(self)




    def dateWrittenParagraph(self):

        localctx = CopyBookParser.DateWrittenParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dateWrittenParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(CopyBookParser.DATE_WRITTEN)
            self.state = 1370
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                    if la_ == 1:
                        self.state = 1371
                        self.match(CopyBookParser.IDENTIFIER)
                        pass

                    elif la_ == 2:
                        self.state = 1372
                        self.literal()
                        pass

                    elif la_ == 3:
                        self.state = 1373
                        self.match(CopyBookParser.WS)
                        pass

             
                self.state = 1378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 1380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==550:
                self.state = 1379
                self.match(CopyBookParser.DOT_FS)


            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==582:
                self.state = 1382
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateCompiledParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_COMPILED(self):
            return self.getToken(CopyBookParser.DATE_COMPILED, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.IDENTIFIER)
            else:
                return self.getToken(CopyBookParser.IDENTIFIER, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.WS)
            else:
                return self.getToken(CopyBookParser.WS, i)

        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dateCompiledParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateCompiledParagraph" ):
                listener.enterDateCompiledParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateCompiledParagraph" ):
                listener.exitDateCompiledParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateCompiledParagraph" ):
                return visitor.visitDateCompiledParagraph(self)
            else:
                return visitor.visitChildren(self)




    def dateCompiledParagraph(self):

        localctx = CopyBookParser.DateCompiledParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_dateCompiledParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(CopyBookParser.DATE_COMPILED)
            self.state = 1386
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1390
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                    if la_ == 1:
                        self.state = 1387
                        self.match(CopyBookParser.IDENTIFIER)
                        pass

                    elif la_ == 2:
                        self.state = 1388
                        self.literal()
                        pass

                    elif la_ == 3:
                        self.state = 1389
                        self.match(CopyBookParser.WS)
                        pass

             
                self.state = 1394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==550:
                self.state = 1395
                self.match(CopyBookParser.DOT_FS)


            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==582:
                self.state = 1398
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecurityParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECURITY(self):
            return self.getToken(CopyBookParser.SECURITY, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_securityParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurityParagraph" ):
                listener.enterSecurityParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurityParagraph" ):
                listener.exitSecurityParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurityParagraph" ):
                return visitor.visitSecurityParagraph(self)
            else:
                return visitor.visitChildren(self)




    def securityParagraph(self):

        localctx = CopyBookParser.SecurityParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_securityParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(CopyBookParser.SECURITY)
            self.state = 1402
            self.match(CopyBookParser.DOT_FS)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==582:
                self.state = 1403
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemarksParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMARKS(self):
            return self.getToken(CopyBookParser.REMARKS, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_remarksParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemarksParagraph" ):
                listener.enterRemarksParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemarksParagraph" ):
                listener.exitRemarksParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemarksParagraph" ):
                return visitor.visitRemarksParagraph(self)
            else:
                return visitor.visitChildren(self)




    def remarksParagraph(self):

        localctx = CopyBookParser.RemarksParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_remarksParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(CopyBookParser.REMARKS)
            self.state = 1407
            self.match(CopyBookParser.DOT_FS)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==582:
                self.state = 1408
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentDivisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENVIRONMENT(self):
            return self.getToken(CopyBookParser.ENVIRONMENT, 0)

        def DIVISION(self):
            return self.getToken(CopyBookParser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def environmentDivisionBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EnvironmentDivisionBodyContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EnvironmentDivisionBodyContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_environmentDivision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironmentDivision" ):
                listener.enterEnvironmentDivision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironmentDivision" ):
                listener.exitEnvironmentDivision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironmentDivision" ):
                return visitor.visitEnvironmentDivision(self)
            else:
                return visitor.visitChildren(self)




    def environmentDivision(self):

        localctx = CopyBookParser.EnvironmentDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_environmentDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(CopyBookParser.ENVIRONMENT)
            self.state = 1412
            self.match(CopyBookParser.DIVISION)
            self.state = 1413
            self.match(CopyBookParser.DOT_FS)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96 or _la==254 or _la==464:
                self.state = 1414
                self.environmentDivisionBody()
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentDivisionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configurationSection(self):
            return self.getTypedRuleContext(CopyBookParser.ConfigurationSectionContext,0)


        def specialNamesParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.SpecialNamesParagraphContext,0)


        def inputOutputSection(self):
            return self.getTypedRuleContext(CopyBookParser.InputOutputSectionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_environmentDivisionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironmentDivisionBody" ):
                listener.enterEnvironmentDivisionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironmentDivisionBody" ):
                listener.exitEnvironmentDivisionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironmentDivisionBody" ):
                return visitor.visitEnvironmentDivisionBody(self)
            else:
                return visitor.visitChildren(self)




    def environmentDivisionBody(self):

        localctx = CopyBookParser.EnvironmentDivisionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_environmentDivisionBody)
        try:
            self.state = 1423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1420
                self.configurationSection()
                pass
            elif token in [464]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1421
                self.specialNamesParagraph()
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1422
                self.inputOutputSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigurationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURATION(self):
            return self.getToken(CopyBookParser.CONFIGURATION, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def configurationSectionParagraph(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ConfigurationSectionParagraphContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ConfigurationSectionParagraphContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_configurationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigurationSection" ):
                listener.enterConfigurationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigurationSection" ):
                listener.exitConfigurationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigurationSection" ):
                return visitor.visitConfigurationSection(self)
            else:
                return visitor.visitChildren(self)




    def configurationSection(self):

        localctx = CopyBookParser.ConfigurationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_configurationSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(CopyBookParser.CONFIGURATION)
            self.state = 1426
            self.match(CopyBookParser.SECTION)
            self.state = 1427
            self.match(CopyBookParser.DOT_FS)
            self.state = 1431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1428
                    self.configurationSectionParagraph() 
                self.state = 1433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigurationSectionParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceComputerParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.SourceComputerParagraphContext,0)


        def objectComputerParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.ObjectComputerParagraphContext,0)


        def specialNamesParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.SpecialNamesParagraphContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_configurationSectionParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigurationSectionParagraph" ):
                listener.enterConfigurationSectionParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigurationSectionParagraph" ):
                listener.exitConfigurationSectionParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfigurationSectionParagraph" ):
                return visitor.visitConfigurationSectionParagraph(self)
            else:
                return visitor.visitChildren(self)




    def configurationSectionParagraph(self):

        localctx = CopyBookParser.ConfigurationSectionParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_configurationSectionParagraph)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [461]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.sourceComputerParagraph()
                pass
            elif token in [332]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self.objectComputerParagraph()
                pass
            elif token in [464]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1436
                self.specialNamesParagraph()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceComputerParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE_COMPUTER(self):
            return self.getToken(CopyBookParser.SOURCE_COMPUTER, 0)

        def computerName(self):
            return self.getTypedRuleContext(CopyBookParser.ComputerNameContext,0)


        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def WS(self):
            return self.getToken(CopyBookParser.WS, 0)

        def DEBUGGING(self):
            return self.getToken(CopyBookParser.DEBUGGING, 0)

        def MODE(self):
            return self.getToken(CopyBookParser.MODE, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sourceComputerParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceComputerParagraph" ):
                listener.enterSourceComputerParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceComputerParagraph" ):
                listener.exitSourceComputerParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceComputerParagraph" ):
                return visitor.visitSourceComputerParagraph(self)
            else:
                return visitor.visitChildren(self)




    def sourceComputerParagraph(self):

        localctx = CopyBookParser.SourceComputerParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_sourceComputerParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(CopyBookParser.SOURCE_COMPUTER)
            self.state = 1440
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==594:
                self.state = 1441
                self.match(CopyBookParser.WS)


            self.state = 1444
            self.computerName()
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==527:
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 1445
                    self.match(CopyBookParser.WITH)


                self.state = 1448
                self.match(CopyBookParser.DEBUGGING)
                self.state = 1449
                self.match(CopyBookParser.MODE)


            self.state = 1452
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectComputerParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_COMPUTER(self):
            return self.getToken(CopyBookParser.OBJECT_COMPUTER, 0)

        def computerName(self):
            return self.getTypedRuleContext(CopyBookParser.ComputerNameContext,0)


        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def WS(self):
            return self.getToken(CopyBookParser.WS, 0)

        def objectComputerClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ObjectComputerClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ObjectComputerClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_objectComputerParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectComputerParagraph" ):
                listener.enterObjectComputerParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectComputerParagraph" ):
                listener.exitObjectComputerParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectComputerParagraph" ):
                return visitor.visitObjectComputerParagraph(self)
            else:
                return visitor.visitChildren(self)




    def objectComputerParagraph(self):

        localctx = CopyBookParser.ObjectComputerParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_objectComputerParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.match(CopyBookParser.OBJECT_COMPUTER)
            self.state = 1455
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==594:
                self.state = 1456
                self.match(CopyBookParser.WS)


            self.state = 1459
            self.computerName()
            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65 or _la==75 or _la==146 or _la==303 or _la==373 or _la==435 or _la==440:
                self.state = 1460
                self.objectComputerClause()
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1466
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectComputerClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memorySizeClause(self):
            return self.getTypedRuleContext(CopyBookParser.MemorySizeClauseContext,0)


        def diskSizeClause(self):
            return self.getTypedRuleContext(CopyBookParser.DiskSizeClauseContext,0)


        def collatingSequenceClause(self):
            return self.getTypedRuleContext(CopyBookParser.CollatingSequenceClauseContext,0)


        def segmentLimitClause(self):
            return self.getTypedRuleContext(CopyBookParser.SegmentLimitClauseContext,0)


        def characterSetClause(self):
            return self.getTypedRuleContext(CopyBookParser.CharacterSetClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_objectComputerClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectComputerClause" ):
                listener.enterObjectComputerClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectComputerClause" ):
                listener.exitObjectComputerClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectComputerClause" ):
                return visitor.visitObjectComputerClause(self)
            else:
                return visitor.visitChildren(self)




    def objectComputerClause(self):

        localctx = CopyBookParser.ObjectComputerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_objectComputerClause)
        try:
            self.state = 1473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [303]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                self.memorySizeClause()
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1469
                self.diskSizeClause()
                pass
            elif token in [75, 373, 440]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1470
                self.collatingSequenceClause()
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1471
                self.segmentLimitClause()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1472
                self.characterSetClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemorySizeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMORY(self):
            return self.getToken(CopyBookParser.MEMORY, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def WORDS(self):
            return self.getToken(CopyBookParser.WORDS, 0)

        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def MODULES(self):
            return self.getToken(CopyBookParser.MODULES, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_memorySizeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemorySizeClause" ):
                listener.enterMemorySizeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemorySizeClause" ):
                listener.exitMemorySizeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemorySizeClause" ):
                return visitor.visitMemorySizeClause(self)
            else:
                return visitor.visitChildren(self)




    def memorySizeClause(self):

        localctx = CopyBookParser.MemorySizeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_memorySizeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            self.match(CopyBookParser.MEMORY)
            self.state = 1477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 1476
                self.match(CopyBookParser.SIZE)


            self.state = 1481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [570, 571, 572, 573]:
                self.state = 1479
                self.integerLiteral()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 1480
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==309 or _la==528:
                self.state = 1483
                _la = self._input.LA(1)
                if not(_la==66 or _la==309 or _la==528):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiskSizeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISK(self):
            return self.getToken(CopyBookParser.DISK, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def WORDS(self):
            return self.getToken(CopyBookParser.WORDS, 0)

        def MODULES(self):
            return self.getToken(CopyBookParser.MODULES, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_diskSizeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiskSizeClause" ):
                listener.enterDiskSizeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiskSizeClause" ):
                listener.exitDiskSizeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiskSizeClause" ):
                return visitor.visitDiskSizeClause(self)
            else:
                return visitor.visitChildren(self)




    def diskSizeClause(self):

        localctx = CopyBookParser.DiskSizeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_diskSizeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.match(CopyBookParser.DISK)
            self.state = 1488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 1487
                self.match(CopyBookParser.SIZE)


            self.state = 1491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1490
                self.match(CopyBookParser.IS)


            self.state = 1495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [570, 571, 572, 573]:
                self.state = 1493
                self.integerLiteral()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 1494
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==309 or _la==528:
                self.state = 1497
                _la = self._input.LA(1)
                if not(_la==309 or _la==528):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollatingSequenceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQUENCE(self):
            return self.getToken(CopyBookParser.SEQUENCE, 0)

        def PROGRAM(self):
            return self.getToken(CopyBookParser.PROGRAM, 0)

        def COLLATING(self):
            return self.getToken(CopyBookParser.COLLATING, 0)

        def collatingSequenceClauseAlphanumeric(self):
            return self.getTypedRuleContext(CopyBookParser.CollatingSequenceClauseAlphanumericContext,0)


        def collatingSequenceClauseNational(self):
            return self.getTypedRuleContext(CopyBookParser.CollatingSequenceClauseNationalContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def alphabetName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AlphabetNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_collatingSequenceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollatingSequenceClause" ):
                listener.enterCollatingSequenceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollatingSequenceClause" ):
                listener.exitCollatingSequenceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollatingSequenceClause" ):
                return visitor.visitCollatingSequenceClause(self)
            else:
                return visitor.visitChildren(self)




    def collatingSequenceClause(self):

        localctx = CopyBookParser.CollatingSequenceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_collatingSequenceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==373:
                self.state = 1500
                self.match(CopyBookParser.PROGRAM)


            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1503
                self.match(CopyBookParser.COLLATING)


            self.state = 1506
            self.match(CopyBookParser.SEQUENCE)

            self.state = 1508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1507
                self.match(CopyBookParser.IS)


            self.state = 1511 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1510
                    self.alphabetName()

                else:
                    raise NoViableAltException(self)
                self.state = 1513 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 1515
                self.collatingSequenceClauseAlphanumeric()


            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218 or _la==315:
                self.state = 1518
                self.collatingSequenceClauseNational()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollatingSequenceClauseAlphanumericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHANUMERIC(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_collatingSequenceClauseAlphanumeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollatingSequenceClauseAlphanumeric" ):
                listener.enterCollatingSequenceClauseAlphanumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollatingSequenceClauseAlphanumeric" ):
                listener.exitCollatingSequenceClauseAlphanumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollatingSequenceClauseAlphanumeric" ):
                return visitor.visitCollatingSequenceClauseAlphanumeric(self)
            else:
                return visitor.visitChildren(self)




    def collatingSequenceClauseAlphanumeric(self):

        localctx = CopyBookParser.CollatingSequenceClauseAlphanumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_collatingSequenceClauseAlphanumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1521
                self.match(CopyBookParser.FOR)


            self.state = 1524
            self.match(CopyBookParser.ALPHANUMERIC)
            self.state = 1526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1525
                self.match(CopyBookParser.IS)


            self.state = 1528
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollatingSequenceClauseNationalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_collatingSequenceClauseNational

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollatingSequenceClauseNational" ):
                listener.enterCollatingSequenceClauseNational(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollatingSequenceClauseNational" ):
                listener.exitCollatingSequenceClauseNational(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollatingSequenceClauseNational" ):
                return visitor.visitCollatingSequenceClauseNational(self)
            else:
                return visitor.visitChildren(self)




    def collatingSequenceClauseNational(self):

        localctx = CopyBookParser.CollatingSequenceClauseNationalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_collatingSequenceClauseNational)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1530
                self.match(CopyBookParser.FOR)


            self.state = 1533
            self.match(CopyBookParser.NATIONAL)
            self.state = 1535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1534
                self.match(CopyBookParser.IS)


            self.state = 1537
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEGMENT_LIMIT(self):
            return self.getToken(CopyBookParser.SEGMENT_LIMIT, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_segmentLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegmentLimitClause" ):
                listener.enterSegmentLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegmentLimitClause" ):
                listener.exitSegmentLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegmentLimitClause" ):
                return visitor.visitSegmentLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def segmentLimitClause(self):

        localctx = CopyBookParser.SegmentLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_segmentLimitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(CopyBookParser.SEGMENT_LIMIT)
            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1540
                self.match(CopyBookParser.IS)


            self.state = 1543
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterSetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(CopyBookParser.SET, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_characterSetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterSetClause" ):
                listener.enterCharacterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterSetClause" ):
                listener.exitCharacterSetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacterSetClause" ):
                return visitor.visitCharacterSetClause(self)
            else:
                return visitor.visitChildren(self)




    def characterSetClause(self):

        localctx = CopyBookParser.CharacterSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_characterSetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self.match(CopyBookParser.CHARACTER)
            self.state = 1546
            self.match(CopyBookParser.SET)
            self.state = 1547
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialNamesParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPECIAL_NAMES(self):
            return self.getToken(CopyBookParser.SPECIAL_NAMES, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def specialNameClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SpecialNameClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SpecialNameClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_specialNamesParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialNamesParagraph" ):
                listener.enterSpecialNamesParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialNamesParagraph" ):
                listener.exitSpecialNamesParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialNamesParagraph" ):
                return visitor.visitSpecialNamesParagraph(self)
            else:
                return visitor.visitChildren(self)




    def specialNamesParagraph(self):

        localctx = CopyBookParser.SpecialNamesParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_specialNamesParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.match(CopyBookParser.SPECIAL_NAMES)
            self.state = 1550
            self.match(CopyBookParser.DOT_FS)
            self.state = 1558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 1552 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1551
                    self.specialNameClause()
                    self.state = 1554 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548671) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4616251199295848449) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 2305843009213694987) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 9009398278193317) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & -9149045050810826493) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & 6782200037507083) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & -9133264830940036543) != 0) or ((((_la - 479)) & ~0x3f) == 0 and ((1 << (_la - 479)) & -9212007484399268591) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                        break

                self.state = 1556
                self.match(CopyBookParser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialNameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def channelClause(self):
            return self.getTypedRuleContext(CopyBookParser.ChannelClauseContext,0)


        def odtClause(self):
            return self.getTypedRuleContext(CopyBookParser.OdtClauseContext,0)


        def alphabetClause(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetClauseContext,0)


        def classClause(self):
            return self.getTypedRuleContext(CopyBookParser.ClassClauseContext,0)


        def currencySignClause(self):
            return self.getTypedRuleContext(CopyBookParser.CurrencySignClauseContext,0)


        def decimalPointClause(self):
            return self.getTypedRuleContext(CopyBookParser.DecimalPointClauseContext,0)


        def symbolicCharactersClause(self):
            return self.getTypedRuleContext(CopyBookParser.SymbolicCharactersClauseContext,0)


        def environmentSwitchNameClause(self):
            return self.getTypedRuleContext(CopyBookParser.EnvironmentSwitchNameClauseContext,0)


        def defaultDisplaySignClause(self):
            return self.getTypedRuleContext(CopyBookParser.DefaultDisplaySignClauseContext,0)


        def defaultComputationalSignClause(self):
            return self.getTypedRuleContext(CopyBookParser.DefaultComputationalSignClauseContext,0)


        def reserveNetworkClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReserveNetworkClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_specialNameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialNameClause" ):
                listener.enterSpecialNameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialNameClause" ):
                listener.exitSpecialNameClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialNameClause" ):
                return visitor.visitSpecialNameClause(self)
            else:
                return visitor.visitChildren(self)




    def specialNameClause(self):

        localctx = CopyBookParser.SpecialNameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_specialNameClause)
        try:
            self.state = 1571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.channelClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.odtClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1562
                self.alphabetClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1563
                self.classClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1564
                self.currencySignClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1565
                self.decimalPointClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1566
                self.symbolicCharactersClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1567
                self.environmentSwitchNameClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1568
                self.defaultDisplaySignClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1569
                self.defaultComputationalSignClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1570
                self.reserveNetworkClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlphabetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alphabetClauseFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetClauseFormat1Context,0)


        def alphabetClauseFormat2(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetClauseFormat2Context,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_alphabetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlphabetClause" ):
                listener.enterAlphabetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlphabetClause" ):
                listener.exitAlphabetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlphabetClause" ):
                return visitor.visitAlphabetClause(self)
            else:
                return visitor.visitChildren(self)




    def alphabetClause(self):

        localctx = CopyBookParser.AlphabetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_alphabetClause)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1573
                self.alphabetClauseFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1574
                self.alphabetClauseFormat2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlphabetClauseFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHABET(self):
            return self.getToken(CopyBookParser.ALPHABET, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def EBCDIC(self):
            return self.getToken(CopyBookParser.EBCDIC, 0)

        def ASCII(self):
            return self.getToken(CopyBookParser.ASCII, 0)

        def STANDARD_1(self):
            return self.getToken(CopyBookParser.STANDARD_1, 0)

        def STANDARD_2(self):
            return self.getToken(CopyBookParser.STANDARD_2, 0)

        def NATIVE(self):
            return self.getToken(CopyBookParser.NATIVE, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def ALPHANUMERIC(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def alphabetLiterals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AlphabetLiteralsContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AlphabetLiteralsContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_alphabetClauseFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlphabetClauseFormat1" ):
                listener.enterAlphabetClauseFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlphabetClauseFormat1" ):
                listener.exitAlphabetClauseFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlphabetClauseFormat1" ):
                return visitor.visitAlphabetClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def alphabetClauseFormat1(self):

        localctx = CopyBookParser.AlphabetClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alphabetClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.match(CopyBookParser.ALPHABET)
            self.state = 1578
            self.alphabetName()
            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1579
                self.match(CopyBookParser.FOR)
                self.state = 1580
                self.match(CopyBookParser.ALPHANUMERIC)


            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1583
                self.match(CopyBookParser.IS)


            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 1586
                self.match(CopyBookParser.EBCDIC)
                pass

            elif la_ == 2:
                self.state = 1587
                self.match(CopyBookParser.ASCII)
                pass

            elif la_ == 3:
                self.state = 1588
                self.match(CopyBookParser.STANDARD_1)
                pass

            elif la_ == 4:
                self.state = 1589
                self.match(CopyBookParser.STANDARD_2)
                pass

            elif la_ == 5:
                self.state = 1590
                self.match(CopyBookParser.NATIVE)
                pass

            elif la_ == 6:
                self.state = 1591
                self.cobolWord()
                pass

            elif la_ == 7:
                self.state = 1593 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1592
                        self.alphabetLiterals()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1595 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlphabetLiteralsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def alphabetThrough(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetThroughContext,0)


        def alphabetAlso(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AlphabetAlsoContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AlphabetAlsoContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_alphabetLiterals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlphabetLiterals" ):
                listener.enterAlphabetLiterals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlphabetLiterals" ):
                listener.exitAlphabetLiterals(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlphabetLiterals" ):
                return visitor.visitAlphabetLiterals(self)
            else:
                return visitor.visitChildren(self)




    def alphabetLiterals(self):

        localctx = CopyBookParser.AlphabetLiteralsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alphabetLiterals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.literal()
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 1600
                self.alphabetThrough()

            elif la_ == 2:
                self.state = 1602 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1601
                        self.alphabetAlso()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1604 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlphabetThroughContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_alphabetThrough

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlphabetThrough" ):
                listener.enterAlphabetThrough(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlphabetThrough" ):
                listener.exitAlphabetThrough(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlphabetThrough" ):
                return visitor.visitAlphabetThrough(self)
            else:
                return visitor.visitChildren(self)




    def alphabetThrough(self):

        localctx = CopyBookParser.AlphabetThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_alphabetThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            _la = self._input.LA(1)
            if not(_la==495 or _la==496):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1609
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlphabetAlsoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(CopyBookParser.ALSO, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_alphabetAlso

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlphabetAlso" ):
                listener.enterAlphabetAlso(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlphabetAlso" ):
                listener.exitAlphabetAlso(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlphabetAlso" ):
                return visitor.visitAlphabetAlso(self)
            else:
                return visitor.visitChildren(self)




    def alphabetAlso(self):

        localctx = CopyBookParser.AlphabetAlsoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alphabetAlso)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.match(CopyBookParser.ALSO)
            self.state = 1613 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1612
                    self.literal()

                else:
                    raise NoViableAltException(self)
                self.state = 1615 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlphabetClauseFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHABET(self):
            return self.getToken(CopyBookParser.ALPHABET, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def NATIVE(self):
            return self.getToken(CopyBookParser.NATIVE, 0)

        def CCSVERSION(self):
            return self.getToken(CopyBookParser.CCSVERSION, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_alphabetClauseFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlphabetClauseFormat2" ):
                listener.enterAlphabetClauseFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlphabetClauseFormat2" ):
                listener.exitAlphabetClauseFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlphabetClauseFormat2" ):
                return visitor.visitAlphabetClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def alphabetClauseFormat2(self):

        localctx = CopyBookParser.AlphabetClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alphabetClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(CopyBookParser.ALPHABET)
            self.state = 1618
            self.alphabetName()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1619
                self.match(CopyBookParser.FOR)


            self.state = 1622
            self.match(CopyBookParser.NATIONAL)
            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1623
                self.match(CopyBookParser.IS)


            self.state = 1629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [317]:
                self.state = 1626
                self.match(CopyBookParser.NATIVE)
                pass
            elif token in [58]:
                self.state = 1627
                self.match(CopyBookParser.CCSVERSION)
                self.state = 1628
                self.literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANNEL(self):
            return self.getToken(CopyBookParser.CHANNEL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_channelClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelClause" ):
                listener.enterChannelClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelClause" ):
                listener.exitChannelClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannelClause" ):
                return visitor.visitChannelClause(self)
            else:
                return visitor.visitChildren(self)




    def channelClause(self):

        localctx = CopyBookParser.ChannelClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_channelClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(CopyBookParser.CHANNEL)
            self.state = 1632
            self.integerLiteral()
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1633
                self.match(CopyBookParser.IS)


            self.state = 1636
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(CopyBookParser.CLASS, 0)

        def className(self):
            return self.getTypedRuleContext(CopyBookParser.ClassNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def classClauseThrough(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ClassClauseThroughContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ClassClauseThroughContext,i)


        def ALPHANUMERIC(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC, 0)

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_classClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassClause" ):
                listener.enterClassClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassClause" ):
                listener.exitClassClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassClause" ):
                return visitor.visitClassClause(self)
            else:
                return visitor.visitChildren(self)




    def classClause(self):

        localctx = CopyBookParser.ClassClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_classClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.match(CopyBookParser.CLASS)
            self.state = 1639
            self.className()
            self.state = 1644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1640
                    self.match(CopyBookParser.FOR)


                self.state = 1643
                _la = self._input.LA(1)
                if not(_la==15 or _la==315):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1646
                self.match(CopyBookParser.IS)


            self.state = 1650 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1649
                    self.classClauseThrough()

                else:
                    raise NoViableAltException(self)
                self.state = 1652 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassClauseThroughContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classClauseFrom(self):
            return self.getTypedRuleContext(CopyBookParser.ClassClauseFromContext,0)


        def classClauseTo(self):
            return self.getTypedRuleContext(CopyBookParser.ClassClauseToContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_classClauseThrough

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassClauseThrough" ):
                listener.enterClassClauseThrough(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassClauseThrough" ):
                listener.exitClassClauseThrough(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassClauseThrough" ):
                return visitor.visitClassClauseThrough(self)
            else:
                return visitor.visitChildren(self)




    def classClauseThrough(self):

        localctx = CopyBookParser.ClassClauseThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_classClauseThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.classClauseFrom()
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 1655
                _la = self._input.LA(1)
                if not(_la==495 or _la==496):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1656
                self.classClauseTo()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassClauseFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_classClauseFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassClauseFrom" ):
                listener.enterClassClauseFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassClauseFrom" ):
                listener.exitClassClauseFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassClauseFrom" ):
                return visitor.visitClassClauseFrom(self)
            else:
                return visitor.visitChildren(self)




    def classClauseFrom(self):

        localctx = CopyBookParser.ClassClauseFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_classClauseFrom)
        try:
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1659
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1660
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassClauseToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_classClauseTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassClauseTo" ):
                listener.enterClassClauseTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassClauseTo" ):
                listener.exitClassClauseTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassClauseTo" ):
                return visitor.visitClassClauseTo(self)
            else:
                return visitor.visitChildren(self)




    def classClauseTo(self):

        localctx = CopyBookParser.ClassClauseToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_classClauseTo)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1663
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrencySignClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENCY(self):
            return self.getToken(CopyBookParser.CURRENCY, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def SIGN(self):
            return self.getToken(CopyBookParser.SIGN, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def PICTURE(self):
            return self.getToken(CopyBookParser.PICTURE, 0)

        def SYMBOL(self):
            return self.getToken(CopyBookParser.SYMBOL, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_currencySignClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrencySignClause" ):
                listener.enterCurrencySignClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrencySignClause" ):
                listener.exitCurrencySignClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrencySignClause" ):
                return visitor.visitCurrencySignClause(self)
            else:
                return visitor.visitChildren(self)




    def currencySignClause(self):

        localctx = CopyBookParser.CurrencySignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_currencySignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(CopyBookParser.CURRENCY)
            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==450:
                self.state = 1668
                self.match(CopyBookParser.SIGN)


            self.state = 1672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1671
                self.match(CopyBookParser.IS)


            self.state = 1674
            self.literal()
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==359 or _la==527:
                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 1675
                    self.match(CopyBookParser.WITH)


                self.state = 1678
                self.match(CopyBookParser.PICTURE)
                self.state = 1679
                self.match(CopyBookParser.SYMBOL)
                self.state = 1680
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalPointClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_POINT(self):
            return self.getToken(CopyBookParser.DECIMAL_POINT, 0)

        def COMMA(self):
            return self.getToken(CopyBookParser.COMMA, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_decimalPointClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalPointClause" ):
                listener.enterDecimalPointClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalPointClause" ):
                listener.exitDecimalPointClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalPointClause" ):
                return visitor.visitDecimalPointClause(self)
            else:
                return visitor.visitChildren(self)




    def decimalPointClause(self):

        localctx = CopyBookParser.DecimalPointClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_decimalPointClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.match(CopyBookParser.DECIMAL_POINT)
            self.state = 1685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1684
                self.match(CopyBookParser.IS)


            self.state = 1687
            self.match(CopyBookParser.COMMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultComputationalSignClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(CopyBookParser.DEFAULT, 0)

        def SEPARATE(self):
            return self.getToken(CopyBookParser.SEPARATE, 0)

        def SIGN(self):
            return self.getToken(CopyBookParser.SIGN, 0)

        def COMPUTATIONAL(self):
            return self.getToken(CopyBookParser.COMPUTATIONAL, 0)

        def COMP(self):
            return self.getToken(CopyBookParser.COMP, 0)

        def LEADING(self):
            return self.getToken(CopyBookParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(CopyBookParser.TRAILING, 0)

        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_defaultComputationalSignClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultComputationalSignClause" ):
                listener.enterDefaultComputationalSignClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultComputationalSignClause" ):
                listener.exitDefaultComputationalSignClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultComputationalSignClause" ):
                return visitor.visitDefaultComputationalSignClause(self)
            else:
                return visitor.visitChildren(self)




    def defaultComputationalSignClause(self):

        localctx = CopyBookParser.DefaultComputationalSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_defaultComputationalSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.match(CopyBookParser.DEFAULT)
            self.state = 1691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==89:
                self.state = 1690
                _la = self._input.LA(1)
                if not(_la==83 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==450:
                self.state = 1693
                self.match(CopyBookParser.SIGN)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 1694
                    self.match(CopyBookParser.IS)




            self.state = 1700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==276 or _la==506:
                self.state = 1699
                _la = self._input.LA(1)
                if not(_la==276 or _la==506):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1702
            self.match(CopyBookParser.SEPARATE)
            self.state = 1704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1703
                self.match(CopyBookParser.CHARACTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultDisplaySignClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_DISPLAY(self):
            return self.getToken(CopyBookParser.DEFAULT_DISPLAY, 0)

        def LEADING(self):
            return self.getToken(CopyBookParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(CopyBookParser.TRAILING, 0)

        def SIGN(self):
            return self.getToken(CopyBookParser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(CopyBookParser.SEPARATE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_defaultDisplaySignClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultDisplaySignClause" ):
                listener.enterDefaultDisplaySignClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultDisplaySignClause" ):
                listener.exitDefaultDisplaySignClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultDisplaySignClause" ):
                return visitor.visitDefaultDisplaySignClause(self)
            else:
                return visitor.visitChildren(self)




    def defaultDisplaySignClause(self):

        localctx = CopyBookParser.DefaultDisplaySignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_defaultDisplaySignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(CopyBookParser.DEFAULT_DISPLAY)
            self.state = 1711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==450:
                self.state = 1707
                self.match(CopyBookParser.SIGN)
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 1708
                    self.match(CopyBookParser.IS)




            self.state = 1713
            _la = self._input.LA(1)
            if not(_la==276 or _la==506):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1714
                self.match(CopyBookParser.SEPARATE)
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1715
                    self.match(CopyBookParser.CHARACTER)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentSwitchNameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def environmentName(self):
            return self.getTypedRuleContext(CopyBookParser.EnvironmentNameContext,0)


        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def environmentSwitchNameSpecialNamesStatusPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.EnvironmentSwitchNameSpecialNamesStatusPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_environmentSwitchNameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironmentSwitchNameClause" ):
                listener.enterEnvironmentSwitchNameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironmentSwitchNameClause" ):
                listener.exitEnvironmentSwitchNameClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironmentSwitchNameClause" ):
                return visitor.visitEnvironmentSwitchNameClause(self)
            else:
                return visitor.visitChildren(self)




    def environmentSwitchNameClause(self):

        localctx = CopyBookParser.EnvironmentSwitchNameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_environmentSwitchNameClause)
        self._la = 0 # Token type
        try:
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1720
                self.environmentName()
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 1721
                    self.match(CopyBookParser.IS)


                self.state = 1724
                self.mnemonicName()
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.environmentSwitchNameSpecialNamesStatusPhrase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1728
                self.environmentSwitchNameSpecialNamesStatusPhrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentSwitchNameSpecialNamesStatusPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ConditionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ConditionContext,i)


        def STATUS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.STATUS)
            else:
                return self.getToken(CopyBookParser.STATUS, i)

        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.IS)
            else:
                return self.getToken(CopyBookParser.IS, i)

        def OFF(self):
            return self.getToken(CopyBookParser.OFF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_environmentSwitchNameSpecialNamesStatusPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironmentSwitchNameSpecialNamesStatusPhrase" ):
                listener.enterEnvironmentSwitchNameSpecialNamesStatusPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironmentSwitchNameSpecialNamesStatusPhrase" ):
                listener.exitEnvironmentSwitchNameSpecialNamesStatusPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironmentSwitchNameSpecialNamesStatusPhrase" ):
                return visitor.visitEnvironmentSwitchNameSpecialNamesStatusPhrase(self)
            else:
                return visitor.visitChildren(self)




    def environmentSwitchNameSpecialNamesStatusPhrase(self):

        localctx = CopyBookParser.EnvironmentSwitchNameSpecialNamesStatusPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_environmentSwitchNameSpecialNamesStatusPhrase)
        self._la = 0 # Token type
        try:
            self.state = 1767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [338]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1731
                self.match(CopyBookParser.ON)
                self.state = 1733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1732
                    self.match(CopyBookParser.STATUS)


                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 1735
                    self.match(CopyBookParser.IS)


                self.state = 1738
                self.condition()
                self.state = 1747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.match(CopyBookParser.OFF)
                    self.state = 1741
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        self.state = 1740
                        self.match(CopyBookParser.STATUS)


                    self.state = 1744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==261:
                        self.state = 1743
                        self.match(CopyBookParser.IS)


                    self.state = 1746
                    self.condition()


                pass
            elif token in [336]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1749
                self.match(CopyBookParser.OFF)
                self.state = 1751
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 1750
                    self.match(CopyBookParser.STATUS)


                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 1753
                    self.match(CopyBookParser.IS)


                self.state = 1756
                self.condition()
                self.state = 1765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 1757
                    self.match(CopyBookParser.ON)
                    self.state = 1759
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        self.state = 1758
                        self.match(CopyBookParser.STATUS)


                    self.state = 1762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==261:
                        self.state = 1761
                        self.match(CopyBookParser.IS)


                    self.state = 1764
                    self.condition()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OdtClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ODT(self):
            return self.getToken(CopyBookParser.ODT, 0)

        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_odtClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOdtClause" ):
                listener.enterOdtClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOdtClause" ):
                listener.exitOdtClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOdtClause" ):
                return visitor.visitOdtClause(self)
            else:
                return visitor.visitChildren(self)




    def odtClause(self):

        localctx = CopyBookParser.OdtClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_odtClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(CopyBookParser.ODT)
            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1770
                self.match(CopyBookParser.IS)


            self.state = 1773
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReserveNetworkClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESERVE(self):
            return self.getToken(CopyBookParser.RESERVE, 0)

        def NETWORK(self):
            return self.getToken(CopyBookParser.NETWORK, 0)

        def WORDS(self):
            return self.getToken(CopyBookParser.WORDS, 0)

        def LIST(self):
            return self.getToken(CopyBookParser.LIST, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def CAPABLE(self):
            return self.getToken(CopyBookParser.CAPABLE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reserveNetworkClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserveNetworkClause" ):
                listener.enterReserveNetworkClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserveNetworkClause" ):
                listener.exitReserveNetworkClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReserveNetworkClause" ):
                return visitor.visitReserveNetworkClause(self)
            else:
                return visitor.visitChildren(self)




    def reserveNetworkClause(self):

        localctx = CopyBookParser.ReserveNetworkClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_reserveNetworkClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.match(CopyBookParser.RESERVE)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==528:
                self.state = 1776
                self.match(CopyBookParser.WORDS)


            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==293:
                self.state = 1779
                self.match(CopyBookParser.LIST)


            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1782
                self.match(CopyBookParser.IS)


            self.state = 1785
            self.match(CopyBookParser.NETWORK)
            self.state = 1787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 1786
                self.match(CopyBookParser.CAPABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicCharactersClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOLIC(self):
            return self.getToken(CopyBookParser.SYMBOLIC, 0)

        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def symbolicCharacters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SymbolicCharactersContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SymbolicCharactersContext,i)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def ALPHANUMERIC(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC, 0)

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicCharactersClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicCharactersClause" ):
                listener.enterSymbolicCharactersClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicCharactersClause" ):
                listener.exitSymbolicCharactersClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicCharactersClause" ):
                return visitor.visitSymbolicCharactersClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicCharactersClause(self):

        localctx = CopyBookParser.SymbolicCharactersClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_symbolicCharactersClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(CopyBookParser.SYMBOLIC)
            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1790
                self.match(CopyBookParser.CHARACTERS)


            self.state = 1797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1793
                    self.match(CopyBookParser.FOR)


                self.state = 1796
                _la = self._input.LA(1)
                if not(_la==15 or _la==315):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1800 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1799
                    self.symbolicCharacters()

                else:
                    raise NoViableAltException(self)
                self.state = 1802 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

            self.state = 1806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1804
                self.match(CopyBookParser.IN)
                self.state = 1805
                self.alphabetName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicCharactersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbolicCharacter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SymbolicCharacterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SymbolicCharacterContext,i)


        def integerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,i)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicCharacters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicCharacters" ):
                listener.enterSymbolicCharacters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicCharacters" ):
                listener.exitSymbolicCharacters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicCharacters" ):
                return visitor.visitSymbolicCharacters(self)
            else:
                return visitor.visitChildren(self)




    def symbolicCharacters(self):

        localctx = CopyBookParser.SymbolicCharactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_symbolicCharacters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1808
                    self.symbolicCharacter()

                else:
                    raise NoViableAltException(self)
                self.state = 1811 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==261:
                self.state = 1813
                _la = self._input.LA(1)
                if not(_la==22 or _la==261):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1817 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1816
                    self.integerLiteral()

                else:
                    raise NoViableAltException(self)
                self.state = 1819 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputOutputSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT_OUTPUT(self):
            return self.getToken(CopyBookParser.INPUT_OUTPUT, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def inputOutputSectionParagraph(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InputOutputSectionParagraphContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InputOutputSectionParagraphContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inputOutputSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputOutputSection" ):
                listener.enterInputOutputSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputOutputSection" ):
                listener.exitInputOutputSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputOutputSection" ):
                return visitor.visitInputOutputSection(self)
            else:
                return visitor.visitChildren(self)




    def inputOutputSection(self):

        localctx = CopyBookParser.InputOutputSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_inputOutputSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.match(CopyBookParser.INPUT_OUTPUT)
            self.state = 1822
            self.match(CopyBookParser.SECTION)
            self.state = 1823
            self.match(CopyBookParser.DOT_FS)
            self.state = 1827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==213 or _la==240:
                self.state = 1824
                self.inputOutputSectionParagraph()
                self.state = 1829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputOutputSectionParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileControlParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.FileControlParagraphContext,0)


        def ioControlParagraph(self):
            return self.getTypedRuleContext(CopyBookParser.IoControlParagraphContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inputOutputSectionParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputOutputSectionParagraph" ):
                listener.enterInputOutputSectionParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputOutputSectionParagraph" ):
                listener.exitInputOutputSectionParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputOutputSectionParagraph" ):
                return visitor.visitInputOutputSectionParagraph(self)
            else:
                return visitor.visitChildren(self)




    def inputOutputSectionParagraph(self):

        localctx = CopyBookParser.InputOutputSectionParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_inputOutputSectionParagraph)
        try:
            self.state = 1832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1830
                self.fileControlParagraph()
                pass
            elif token in [240]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1831
                self.ioControlParagraph()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileControlParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_CONTROL(self):
            return self.getToken(CopyBookParser.FILE_CONTROL, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def fileControlEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileControlEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileControlEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_fileControlParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileControlParagraph" ):
                listener.enterFileControlParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileControlParagraph" ):
                listener.exitFileControlParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileControlParagraph" ):
                return visitor.visitFileControlParagraph(self)
            else:
                return visitor.visitChildren(self)




    def fileControlParagraph(self):

        localctx = CopyBookParser.FileControlParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fileControlParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.match(CopyBookParser.FILE_CONTROL)
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1835
                self.match(CopyBookParser.DOT_FS)


            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==105 or _la==436:
                self.state = 1838
                self.fileControlEntry()
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==550:
                self.state = 1844
                self.match(CopyBookParser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileControlEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copyStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CopyStatementContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def selectClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SelectClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SelectClauseContext,i)


        def fileControlClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileControlClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileControlClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_fileControlEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileControlEntry" ):
                listener.enterFileControlEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileControlEntry" ):
                listener.exitFileControlEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileControlEntry" ):
                return visitor.visitFileControlEntry(self)
            else:
                return visitor.visitChildren(self)




    def fileControlEntry(self):

        localctx = CopyBookParser.FileControlEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_fileControlEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [436]:
                self.state = 1854 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1847
                        self.selectClause()
                        self.state = 1851
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1848
                                self.fileControlClause() 
                            self.state = 1853
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 1856 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                pass
            elif token in [105]:
                self.state = 1858
                self.copyStatement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1861
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(CopyBookParser.SELECT, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def OPTIONAL(self):
            return self.getToken(CopyBookParser.OPTIONAL, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = CopyBookParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(CopyBookParser.SELECT)
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 1865
                self.match(CopyBookParser.OPTIONAL)


            self.state = 1868
            self.fileName()
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1869
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileControlClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignClause(self):
            return self.getTypedRuleContext(CopyBookParser.AssignClauseContext,0)


        def reserveClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReserveClauseContext,0)


        def organizationClause(self):
            return self.getTypedRuleContext(CopyBookParser.OrganizationClauseContext,0)


        def paddingCharacterClause(self):
            return self.getTypedRuleContext(CopyBookParser.PaddingCharacterClauseContext,0)


        def recordDelimiterClause(self):
            return self.getTypedRuleContext(CopyBookParser.RecordDelimiterClauseContext,0)


        def accessModeClause(self):
            return self.getTypedRuleContext(CopyBookParser.AccessModeClauseContext,0)


        def recordKeyClause(self):
            return self.getTypedRuleContext(CopyBookParser.RecordKeyClauseContext,0)


        def alternateRecordKeyClause(self):
            return self.getTypedRuleContext(CopyBookParser.AlternateRecordKeyClauseContext,0)


        def fileStatusClause(self):
            return self.getTypedRuleContext(CopyBookParser.FileStatusClauseContext,0)


        def passwordClause(self):
            return self.getTypedRuleContext(CopyBookParser.PasswordClauseContext,0)


        def relativeKeyClause(self):
            return self.getTypedRuleContext(CopyBookParser.RelativeKeyClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_fileControlClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileControlClause" ):
                listener.enterFileControlClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileControlClause" ):
                listener.exitFileControlClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileControlClause" ):
                return visitor.visitFileControlClause(self)
            else:
                return visitor.visitChildren(self)




    def fileControlClause(self):

        localctx = CopyBookParser.FileControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fileControlClause)
        try:
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1872
                self.assignClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1873
                self.reserveClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1874
                self.organizationClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1875
                self.paddingCharacterClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1876
                self.recordDelimiterClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1877
                self.accessModeClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1878
                self.recordKeyClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1879
                self.alternateRecordKeyClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1880
                self.fileStatusClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1881
                self.passwordClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1882
                self.relativeKeyClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(CopyBookParser.ASSIGN, 0)

        def DISK(self):
            return self.getToken(CopyBookParser.DISK, 0)

        def DISPLAY(self):
            return self.getToken(CopyBookParser.DISPLAY, 0)

        def KEYBOARD(self):
            return self.getToken(CopyBookParser.KEYBOARD, 0)

        def PORT(self):
            return self.getToken(CopyBookParser.PORT, 0)

        def PRINTER(self):
            return self.getToken(CopyBookParser.PRINTER, 0)

        def READER(self):
            return self.getToken(CopyBookParser.READER, 0)

        def REMOTE(self):
            return self.getToken(CopyBookParser.REMOTE, 0)

        def TAPE(self):
            return self.getToken(CopyBookParser.TAPE, 0)

        def VIRTUAL(self):
            return self.getToken(CopyBookParser.VIRTUAL, 0)

        def assignmentName(self):
            return self.getTypedRuleContext(CopyBookParser.AssignmentNameContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_assignClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignClause" ):
                listener.enterAssignClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignClause" ):
                listener.exitAssignClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignClause" ):
                return visitor.visitAssignClause(self)
            else:
                return visitor.visitChildren(self)




    def assignClause(self):

        localctx = CopyBookParser.AssignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_assignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            self.match(CopyBookParser.ASSIGN)
            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 1886
                self.match(CopyBookParser.TO)


            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1889
                self.match(CopyBookParser.DISK)
                pass

            elif la_ == 2:
                self.state = 1890
                self.match(CopyBookParser.DISPLAY)
                pass

            elif la_ == 3:
                self.state = 1891
                self.match(CopyBookParser.KEYBOARD)
                pass

            elif la_ == 4:
                self.state = 1892
                self.match(CopyBookParser.PORT)
                pass

            elif la_ == 5:
                self.state = 1893
                self.match(CopyBookParser.PRINTER)
                pass

            elif la_ == 6:
                self.state = 1894
                self.match(CopyBookParser.READER)
                pass

            elif la_ == 7:
                self.state = 1895
                self.match(CopyBookParser.REMOTE)
                pass

            elif la_ == 8:
                self.state = 1896
                self.match(CopyBookParser.TAPE)
                pass

            elif la_ == 9:
                self.state = 1897
                self.match(CopyBookParser.VIRTUAL)
                pass

            elif la_ == 10:
                self.state = 1898
                self.assignmentName()
                pass

            elif la_ == 11:
                self.state = 1899
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReserveClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESERVE(self):
            return self.getToken(CopyBookParser.RESERVE, 0)

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def ALTERNATE(self):
            return self.getToken(CopyBookParser.ALTERNATE, 0)

        def AREA(self):
            return self.getToken(CopyBookParser.AREA, 0)

        def AREAS(self):
            return self.getToken(CopyBookParser.AREAS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reserveClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserveClause" ):
                listener.enterReserveClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserveClause" ):
                listener.exitReserveClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReserveClause" ):
                return visitor.visitReserveClause(self)
            else:
                return visitor.visitChildren(self)




    def reserveClause(self):

        localctx = CopyBookParser.ReserveClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_reserveClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.match(CopyBookParser.RESERVE)
            self.state = 1905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [322]:
                self.state = 1903
                self.match(CopyBookParser.NO)
                pass
            elif token in [570, 571, 572, 573]:
                self.state = 1904
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1907
                self.match(CopyBookParser.ALTERNATE)


            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1910
                _la = self._input.LA(1)
                if not(_la==23 or _la==24):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrganizationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQUENTIAL(self):
            return self.getToken(CopyBookParser.SEQUENTIAL, 0)

        def RELATIVE(self):
            return self.getToken(CopyBookParser.RELATIVE, 0)

        def INDEXED(self):
            return self.getToken(CopyBookParser.INDEXED, 0)

        def ORGANIZATION(self):
            return self.getToken(CopyBookParser.ORGANIZATION, 0)

        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def BINARY(self):
            return self.getToken(CopyBookParser.BINARY, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_organizationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrganizationClause" ):
                listener.enterOrganizationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrganizationClause" ):
                listener.exitOrganizationClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrganizationClause" ):
                return visitor.visitOrganizationClause(self)
            else:
                return visitor.visitChildren(self)




    def organizationClause(self):

        localctx = CopyBookParser.OrganizationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_organizationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==344:
                self.state = 1913
                self.match(CopyBookParser.ORGANIZATION)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 1914
                    self.match(CopyBookParser.IS)




            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1919
                self.match(CopyBookParser.LINE)

            elif la_ == 2:
                self.state = 1920
                self.match(CopyBookParser.RECORD)
                self.state = 1921
                self.match(CopyBookParser.BINARY)

            elif la_ == 3:
                self.state = 1922
                self.match(CopyBookParser.RECORD)

            elif la_ == 4:
                self.state = 1923
                self.match(CopyBookParser.BINARY)


            self.state = 1926
            _la = self._input.LA(1)
            if not(_la==248 or _la==398 or _la==441):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PaddingCharacterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PADDING(self):
            return self.getToken(CopyBookParser.PADDING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_paddingCharacterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPaddingCharacterClause" ):
                listener.enterPaddingCharacterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPaddingCharacterClause" ):
                listener.exitPaddingCharacterClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPaddingCharacterClause" ):
                return visitor.visitPaddingCharacterClause(self)
            else:
                return visitor.visitChildren(self)




    def paddingCharacterClause(self):

        localctx = CopyBookParser.PaddingCharacterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_paddingCharacterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.match(CopyBookParser.PADDING)
            self.state = 1930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1929
                self.match(CopyBookParser.CHARACTER)


            self.state = 1933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1932
                self.match(CopyBookParser.IS)


            self.state = 1937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1935
                self.qualifiedDataName()
                pass

            elif la_ == 2:
                self.state = 1936
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDelimiterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def DELIMITER(self):
            return self.getToken(CopyBookParser.DELIMITER, 0)

        def STANDARD_1(self):
            return self.getToken(CopyBookParser.STANDARD_1, 0)

        def IMPLICIT(self):
            return self.getToken(CopyBookParser.IMPLICIT, 0)

        def assignmentName(self):
            return self.getTypedRuleContext(CopyBookParser.AssignmentNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_recordDelimiterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDelimiterClause" ):
                listener.enterRecordDelimiterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDelimiterClause" ):
                listener.exitRecordDelimiterClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordDelimiterClause" ):
                return visitor.visitRecordDelimiterClause(self)
            else:
                return visitor.visitChildren(self)




    def recordDelimiterClause(self):

        localctx = CopyBookParser.RecordDelimiterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_recordDelimiterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1939
            self.match(CopyBookParser.RECORD)
            self.state = 1940
            self.match(CopyBookParser.DELIMITER)
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1941
                self.match(CopyBookParser.IS)


            self.state = 1947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [466]:
                self.state = 1944
                self.match(CopyBookParser.STANDARD_1)
                pass
            elif token in [244]:
                self.state = 1945
                self.match(CopyBookParser.IMPLICIT)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 1946
                self.assignmentName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessModeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(CopyBookParser.ACCESS, 0)

        def SEQUENTIAL(self):
            return self.getToken(CopyBookParser.SEQUENTIAL, 0)

        def RANDOM(self):
            return self.getToken(CopyBookParser.RANDOM, 0)

        def DYNAMIC(self):
            return self.getToken(CopyBookParser.DYNAMIC, 0)

        def EXCLUSIVE(self):
            return self.getToken(CopyBookParser.EXCLUSIVE, 0)

        def MODE(self):
            return self.getToken(CopyBookParser.MODE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_accessModeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessModeClause" ):
                listener.enterAccessModeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessModeClause" ):
                listener.exitAccessModeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessModeClause" ):
                return visitor.visitAccessModeClause(self)
            else:
                return visitor.visitChildren(self)




    def accessModeClause(self):

        localctx = CopyBookParser.AccessModeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_accessModeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.match(CopyBookParser.ACCESS)
            self.state = 1951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==307:
                self.state = 1950
                self.match(CopyBookParser.MODE)


            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1953
                self.match(CopyBookParser.IS)


            self.state = 1956
            _la = self._input.LA(1)
            if not(_la==155 or _la==203 or _la==381 or _la==441):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def passwordClause(self):
            return self.getTypedRuleContext(CopyBookParser.PasswordClauseContext,0)


        def DUPLICATES(self):
            return self.getToken(CopyBookParser.DUPLICATES, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_recordKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordKeyClause" ):
                listener.enterRecordKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordKeyClause" ):
                listener.exitRecordKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordKeyClause" ):
                return visitor.visitRecordKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def recordKeyClause(self):

        localctx = CopyBookParser.RecordKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_recordKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1958
            self.match(CopyBookParser.RECORD)
            self.state = 1960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 1959
                self.match(CopyBookParser.KEY)


            self.state = 1963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1962
                self.match(CopyBookParser.IS)


            self.state = 1965
            self.qualifiedDataName()
            self.state = 1967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1966
                self.passwordClause()


            self.state = 1973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154 or _la==527:
                self.state = 1970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 1969
                    self.match(CopyBookParser.WITH)


                self.state = 1972
                self.match(CopyBookParser.DUPLICATES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternateRecordKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTERNATE(self):
            return self.getToken(CopyBookParser.ALTERNATE, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def passwordClause(self):
            return self.getTypedRuleContext(CopyBookParser.PasswordClauseContext,0)


        def DUPLICATES(self):
            return self.getToken(CopyBookParser.DUPLICATES, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_alternateRecordKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternateRecordKeyClause" ):
                listener.enterAlternateRecordKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternateRecordKeyClause" ):
                listener.exitAlternateRecordKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlternateRecordKeyClause" ):
                return visitor.visitAlternateRecordKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def alternateRecordKeyClause(self):

        localctx = CopyBookParser.AlternateRecordKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alternateRecordKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.match(CopyBookParser.ALTERNATE)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==389:
                self.state = 1976
                self.match(CopyBookParser.RECORD)


            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 1979
                self.match(CopyBookParser.KEY)


            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1982
                self.match(CopyBookParser.IS)


            self.state = 1985
            self.qualifiedDataName()
            self.state = 1987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1986
                self.passwordClause()


            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154 or _la==527:
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 1989
                    self.match(CopyBookParser.WITH)


                self.state = 1992
                self.match(CopyBookParser.DUPLICATES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(CopyBookParser.PASSWORD, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_passwordClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordClause" ):
                listener.enterPasswordClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordClause" ):
                listener.exitPasswordClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordClause" ):
                return visitor.visitPasswordClause(self)
            else:
                return visitor.visitChildren(self)




    def passwordClause(self):

        localctx = CopyBookParser.PasswordClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_passwordClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.match(CopyBookParser.PASSWORD)
            self.state = 1997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 1996
                self.match(CopyBookParser.IS)


            self.state = 1999
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileStatusClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(CopyBookParser.STATUS, 0)

        def qualifiedDataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,i)


        def FILE(self):
            return self.getToken(CopyBookParser.FILE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_fileStatusClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileStatusClause" ):
                listener.enterFileStatusClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileStatusClause" ):
                listener.exitFileStatusClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileStatusClause" ):
                return visitor.visitFileStatusClause(self)
            else:
                return visitor.visitChildren(self)




    def fileStatusClause(self):

        localctx = CopyBookParser.FileStatusClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fileStatusClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 2001
                self.match(CopyBookParser.FILE)


            self.state = 2004
            self.match(CopyBookParser.STATUS)
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2005
                self.match(CopyBookParser.IS)


            self.state = 2008
            self.qualifiedDataName()
            self.state = 2010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 2009
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelativeKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIVE(self):
            return self.getToken(CopyBookParser.RELATIVE, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_relativeKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelativeKeyClause" ):
                listener.enterRelativeKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelativeKeyClause" ):
                listener.exitRelativeKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelativeKeyClause" ):
                return visitor.visitRelativeKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def relativeKeyClause(self):

        localctx = CopyBookParser.RelativeKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_relativeKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.match(CopyBookParser.RELATIVE)
            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 2013
                self.match(CopyBookParser.KEY)


            self.state = 2017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2016
                self.match(CopyBookParser.IS)


            self.state = 2019
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoControlParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I_O_CONTROL(self):
            return self.getToken(CopyBookParser.I_O_CONTROL, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def ioControlClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IoControlClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IoControlClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_ioControlParagraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoControlParagraph" ):
                listener.enterIoControlParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoControlParagraph" ):
                listener.exitIoControlParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoControlParagraph" ):
                return visitor.visitIoControlParagraph(self)
            else:
                return visitor.visitChildren(self)




    def ioControlParagraph(self):

        localctx = CopyBookParser.IoControlParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ioControlParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.match(CopyBookParser.I_O_CONTROL)
            self.state = 2022
            self.match(CopyBookParser.DOT_FS)
            self.state = 2026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 2023
                self.fileName()
                self.state = 2024
                self.match(CopyBookParser.DOT_FS)


            self.state = 2035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80 or _la==312 or _la==411 or _la==426 or _la==550:
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80 or _la==312 or _la==411 or _la==426:
                    self.state = 2028
                    self.ioControlClause()
                    self.state = 2033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2034
                self.match(CopyBookParser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoControlClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rerunClause(self):
            return self.getTypedRuleContext(CopyBookParser.RerunClauseContext,0)


        def sameClause(self):
            return self.getTypedRuleContext(CopyBookParser.SameClauseContext,0)


        def multipleFileClause(self):
            return self.getTypedRuleContext(CopyBookParser.MultipleFileClauseContext,0)


        def commitmentControlClause(self):
            return self.getTypedRuleContext(CopyBookParser.CommitmentControlClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_ioControlClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoControlClause" ):
                listener.enterIoControlClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoControlClause" ):
                listener.exitIoControlClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoControlClause" ):
                return visitor.visitIoControlClause(self)
            else:
                return visitor.visitChildren(self)




    def ioControlClause(self):

        localctx = CopyBookParser.IoControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_ioControlClause)
        try:
            self.state = 2041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [411]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2037
                self.rerunClause()
                pass
            elif token in [426]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2038
                self.sameClause()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2039
                self.multipleFileClause()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2040
                self.commitmentControlClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RerunClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RERUN(self):
            return self.getToken(CopyBookParser.RERUN, 0)

        def EVERY(self):
            return self.getToken(CopyBookParser.EVERY, 0)

        def rerunEveryRecords(self):
            return self.getTypedRuleContext(CopyBookParser.RerunEveryRecordsContext,0)


        def rerunEveryOf(self):
            return self.getTypedRuleContext(CopyBookParser.RerunEveryOfContext,0)


        def rerunEveryClock(self):
            return self.getTypedRuleContext(CopyBookParser.RerunEveryClockContext,0)


        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def assignmentName(self):
            return self.getTypedRuleContext(CopyBookParser.AssignmentNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_rerunClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerunClause" ):
                listener.enterRerunClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerunClause" ):
                listener.exitRerunClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRerunClause" ):
                return visitor.visitRerunClause(self)
            else:
                return visitor.visitChildren(self)




    def rerunClause(self):

        localctx = CopyBookParser.RerunClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_rerunClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.match(CopyBookParser.RERUN)
            self.state = 2049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 2044
                self.match(CopyBookParser.ON)
                self.state = 2047
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 2045
                    self.assignmentName()
                    pass

                elif la_ == 2:
                    self.state = 2046
                    self.fileName()
                    pass




            self.state = 2051
            self.match(CopyBookParser.EVERY)
            self.state = 2055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 2052
                self.rerunEveryRecords()
                pass

            elif la_ == 2:
                self.state = 2053
                self.rerunEveryOf()
                pass

            elif la_ == 3:
                self.state = 2054
                self.rerunEveryClock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RerunEveryRecordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def RECORDS(self):
            return self.getToken(CopyBookParser.RECORDS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_rerunEveryRecords

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerunEveryRecords" ):
                listener.enterRerunEveryRecords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerunEveryRecords" ):
                listener.exitRerunEveryRecords(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRerunEveryRecords" ):
                return visitor.visitRerunEveryRecords(self)
            else:
                return visitor.visitChildren(self)




    def rerunEveryRecords(self):

        localctx = CopyBookParser.RerunEveryRecordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_rerunEveryRecords)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.integerLiteral()
            self.state = 2058
            self.match(CopyBookParser.RECORDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RerunEveryOfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OF)
            else:
                return self.getToken(CopyBookParser.OF, i)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def REEL(self):
            return self.getToken(CopyBookParser.REEL, 0)

        def UNIT(self):
            return self.getToken(CopyBookParser.UNIT, 0)

        def END(self):
            return self.getToken(CopyBookParser.END, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_rerunEveryOf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerunEveryOf" ):
                listener.enterRerunEveryOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerunEveryOf" ):
                listener.exitRerunEveryOf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRerunEveryOf" ):
                return visitor.visitRerunEveryOf(self)
            else:
                return visitor.visitChildren(self)




    def rerunEveryOf(self):

        localctx = CopyBookParser.RerunEveryOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_rerunEveryOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163:
                self.state = 2060
                self.match(CopyBookParser.END)


            self.state = 2064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==335:
                self.state = 2063
                self.match(CopyBookParser.OF)


            self.state = 2066
            _la = self._input.LA(1)
            if not(_la==394 or _la==512):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2067
            self.match(CopyBookParser.OF)
            self.state = 2068
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RerunEveryClockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def CLOCK_UNITS(self):
            return self.getToken(CopyBookParser.CLOCK_UNITS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_rerunEveryClock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerunEveryClock" ):
                listener.enterRerunEveryClock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerunEveryClock" ):
                listener.exitRerunEveryClock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRerunEveryClock" ):
                return visitor.visitRerunEveryClock(self)
            else:
                return visitor.visitChildren(self)




    def rerunEveryClock(self):

        localctx = CopyBookParser.RerunEveryClockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_rerunEveryClock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.integerLiteral()
            self.state = 2072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 2071
                self.match(CopyBookParser.CLOCK_UNITS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAME(self):
            return self.getToken(CopyBookParser.SAME, 0)

        def AREA(self):
            return self.getToken(CopyBookParser.AREA, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def fileName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileNameContext,i)


        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def SORT(self):
            return self.getToken(CopyBookParser.SORT, 0)

        def SORT_MERGE(self):
            return self.getToken(CopyBookParser.SORT_MERGE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSameClause" ):
                listener.enterSameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSameClause" ):
                listener.exitSameClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSameClause" ):
                return visitor.visitSameClause(self)
            else:
                return visitor.visitChildren(self)




    def sameClause(self):

        localctx = CopyBookParser.SameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2074
            self.match(CopyBookParser.SAME)
            self.state = 2076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==389 or _la==452 or _la==456:
                self.state = 2075
                _la = self._input.LA(1)
                if not(_la==389 or _la==452 or _la==456):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 2078
                self.match(CopyBookParser.AREA)


            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 2081
                self.match(CopyBookParser.FOR)


            self.state = 2085 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2084
                self.fileName()
                self.state = 2087 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 76842699008641020) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36521446947684353) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 288230376151711873) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 9009398278193317) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 74326986043949315) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & 6782200037507083) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & -9133264830940036607) != 0) or ((((_la - 483)) & ~0x3f) == 0 and ((1 << (_la - 483)) & 577171036831892689) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleFileClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLE(self):
            return self.getToken(CopyBookParser.MULTIPLE, 0)

        def FILE(self):
            return self.getToken(CopyBookParser.FILE, 0)

        def TAPE(self):
            return self.getToken(CopyBookParser.TAPE, 0)

        def CONTAINS(self):
            return self.getToken(CopyBookParser.CONTAINS, 0)

        def multipleFilePosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MultipleFilePositionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MultipleFilePositionContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_multipleFileClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleFileClause" ):
                listener.enterMultipleFileClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleFileClause" ):
                listener.exitMultipleFileClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleFileClause" ):
                return visitor.visitMultipleFileClause(self)
            else:
                return visitor.visitChildren(self)




    def multipleFileClause(self):

        localctx = CopyBookParser.MultipleFileClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_multipleFileClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.match(CopyBookParser.MULTIPLE)
            self.state = 2090
            self.match(CopyBookParser.FILE)
            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==486:
                self.state = 2091
                self.match(CopyBookParser.TAPE)


            self.state = 2095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 2094
                self.match(CopyBookParser.CONTAINS)


            self.state = 2098 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2097
                self.multipleFilePosition()
                self.state = 2100 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 76842699008641020) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36521446947684353) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 288230376151711873) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 9009398278193317) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 74326986043949315) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & 6782200037507083) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & -9133264830940036607) != 0) or ((((_la - 483)) & ~0x3f) == 0 and ((1 << (_la - 483)) & 577171036831892689) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleFilePositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def POSITION(self):
            return self.getToken(CopyBookParser.POSITION, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_multipleFilePosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleFilePosition" ):
                listener.enterMultipleFilePosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleFilePosition" ):
                listener.exitMultipleFilePosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleFilePosition" ):
                return visitor.visitMultipleFilePosition(self)
            else:
                return visitor.visitChildren(self)




    def multipleFilePosition(self):

        localctx = CopyBookParser.MultipleFilePositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_multipleFilePosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self.fileName()
            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==362:
                self.state = 2103
                self.match(CopyBookParser.POSITION)
                self.state = 2104
                self.integerLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitmentControlClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMITMENT(self):
            return self.getToken(CopyBookParser.COMMITMENT, 0)

        def CONTROL(self):
            return self.getToken(CopyBookParser.CONTROL, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_commitmentControlClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitmentControlClause" ):
                listener.enterCommitmentControlClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitmentControlClause" ):
                listener.exitCommitmentControlClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommitmentControlClause" ):
                return visitor.visitCommitmentControlClause(self)
            else:
                return visitor.visitChildren(self)




    def commitmentControlClause(self):

        localctx = CopyBookParser.CommitmentControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_commitmentControlClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.match(CopyBookParser.COMMITMENT)
            self.state = 2108
            self.match(CopyBookParser.CONTROL)
            self.state = 2110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 2109
                self.match(CopyBookParser.FOR)


            self.state = 2112
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDivisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(CopyBookParser.DATA, 0)

        def DIVISION(self):
            return self.getToken(CopyBookParser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def dataDivisionSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDivisionSectionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDivisionSectionContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDivision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDivision" ):
                listener.enterDataDivision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDivision" ):
                listener.exitDataDivision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDivision" ):
                return visitor.visitDataDivision(self)
            else:
                return visitor.visitChildren(self)




    def dataDivision(self):

        localctx = CopyBookParser.DataDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dataDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.match(CopyBookParser.DATA)
            self.state = 2115
            self.match(CopyBookParser.DIVISION)
            self.state = 2116
            self.match(CopyBookParser.DOT_FS)
            self.state = 2120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82 or _la==113 or _la==212 or _la==292 or _la==295 or ((((_la - 375)) & ~0x3f) == 0 and ((1 << (_la - 375)) & 9007203549708289) != 0) or _la==529:
                self.state = 2117
                self.dataDivisionSection()
                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDivisionSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileSection(self):
            return self.getTypedRuleContext(CopyBookParser.FileSectionContext,0)


        def dataBaseSection(self):
            return self.getTypedRuleContext(CopyBookParser.DataBaseSectionContext,0)


        def workingStorageSection(self):
            return self.getTypedRuleContext(CopyBookParser.WorkingStorageSectionContext,0)


        def linkageSection(self):
            return self.getTypedRuleContext(CopyBookParser.LinkageSectionContext,0)


        def communicationSection(self):
            return self.getTypedRuleContext(CopyBookParser.CommunicationSectionContext,0)


        def localStorageSection(self):
            return self.getTypedRuleContext(CopyBookParser.LocalStorageSectionContext,0)


        def screenSection(self):
            return self.getTypedRuleContext(CopyBookParser.ScreenSectionContext,0)


        def reportSection(self):
            return self.getTypedRuleContext(CopyBookParser.ReportSectionContext,0)


        def programLibrarySection(self):
            return self.getTypedRuleContext(CopyBookParser.ProgramLibrarySectionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDivisionSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDivisionSection" ):
                listener.enterDataDivisionSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDivisionSection" ):
                listener.exitDataDivisionSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDivisionSection" ):
                return visitor.visitDataDivisionSection(self)
            else:
                return visitor.visitChildren(self)




    def dataDivisionSection(self):

        localctx = CopyBookParser.DataDivisionSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dataDivisionSection)
        try:
            self.state = 2132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [212]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2123
                self.fileSection()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2124
                self.dataBaseSection()
                pass
            elif token in [529]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2125
                self.workingStorageSection()
                pass
            elif token in [292]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2126
                self.linkageSection()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2127
                self.communicationSection()
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2128
                self.localStorageSection()
                pass
            elif token in [428]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2129
                self.screenSection()
                pass
            elif token in [407]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2130
                self.reportSection()
                pass
            elif token in [375]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2131
                self.programLibrarySection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self):
            return self.getToken(CopyBookParser.FILE, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def fileDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileDescriptionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_fileSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSection" ):
                listener.enterFileSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSection" ):
                listener.exitFileSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileSection" ):
                return visitor.visitFileSection(self)
            else:
                return visitor.visitChildren(self)




    def fileSection(self):

        localctx = CopyBookParser.FileSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_fileSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self.match(CopyBookParser.FILE)
            self.state = 2135
            self.match(CopyBookParser.SECTION)
            self.state = 2136
            self.match(CopyBookParser.DOT_FS)
            self.state = 2140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==105 or _la==211 or _la==429:
                self.state = 2137
                self.fileDescriptionEntry()
                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileDescriptionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def FD(self):
            return self.getToken(CopyBookParser.FD, 0)

        def SD(self):
            return self.getToken(CopyBookParser.SD, 0)

        def fileDescriptionEntryClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileDescriptionEntryClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileDescriptionEntryClauseContext,i)


        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def dataDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryContext,i)


        def copyStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CopyStatementContext,0)


        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_fileDescriptionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileDescriptionEntry" ):
                listener.enterFileDescriptionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileDescriptionEntry" ):
                listener.exitFileDescriptionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileDescriptionEntry" ):
                return visitor.visitFileDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def fileDescriptionEntry(self):

        localctx = CopyBookParser.FileDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_fileDescriptionEntry)
        self._la = 0 # Token type
        try:
            self.state = 2166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211, 429]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2143
                _la = self._input.LA(1)
                if not(_la==211 or _la==429):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2144
                self.fileName()
                self.state = 2151
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==550:
                            self.state = 2145
                            self.match(CopyBookParser.DOT_FS)


                        self.state = 2148
                        self.fileDescriptionEntryClause() 
                    self.state = 2153
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==550:
                    self.state = 2154
                    self.match(CopyBookParser.DOT_FS)


                self.state = 2160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2157
                        self.dataDescriptionEntry() 
                    self.state = 2162
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2163
                self.copyStatement()
                self.state = 2164
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileDescriptionEntryClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalClause(self):
            return self.getTypedRuleContext(CopyBookParser.ExternalClauseContext,0)


        def globalClause(self):
            return self.getTypedRuleContext(CopyBookParser.GlobalClauseContext,0)


        def blockContainsClause(self):
            return self.getTypedRuleContext(CopyBookParser.BlockContainsClauseContext,0)


        def recordContainsClause(self):
            return self.getTypedRuleContext(CopyBookParser.RecordContainsClauseContext,0)


        def labelRecordsClause(self):
            return self.getTypedRuleContext(CopyBookParser.LabelRecordsClauseContext,0)


        def valueOfClause(self):
            return self.getTypedRuleContext(CopyBookParser.ValueOfClauseContext,0)


        def dataRecordsClause(self):
            return self.getTypedRuleContext(CopyBookParser.DataRecordsClauseContext,0)


        def linageClause(self):
            return self.getTypedRuleContext(CopyBookParser.LinageClauseContext,0)


        def codeSetClause(self):
            return self.getTypedRuleContext(CopyBookParser.CodeSetClauseContext,0)


        def reportClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportClauseContext,0)


        def recordingModeClause(self):
            return self.getTypedRuleContext(CopyBookParser.RecordingModeClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_fileDescriptionEntryClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileDescriptionEntryClause" ):
                listener.enterFileDescriptionEntryClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileDescriptionEntryClause" ):
                listener.exitFileDescriptionEntryClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileDescriptionEntryClause" ):
                return visitor.visitFileDescriptionEntryClause(self)
            else:
                return visitor.visitChildren(self)




    def fileDescriptionEntryClause(self):

        localctx = CopyBookParser.FileDescriptionEntryClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_fileDescriptionEntryClause)
        try:
            self.state = 2179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2168
                self.externalClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2169
                self.globalClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2170
                self.blockContainsClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2171
                self.recordContainsClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2172
                self.labelRecordsClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2173
                self.valueOfClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2174
                self.dataRecordsClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2175
                self.linageClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2176
                self.codeSetClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2177
                self.reportClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2178
                self.recordingModeClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(CopyBookParser.EXTERNAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_externalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalClause" ):
                listener.enterExternalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalClause" ):
                listener.exitExternalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalClause" ):
                return visitor.visitExternalClause(self)
            else:
                return visitor.visitChildren(self)




    def externalClause(self):

        localctx = CopyBookParser.ExternalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_externalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2181
                self.match(CopyBookParser.IS)


            self.state = 2184
            self.match(CopyBookParser.EXTERNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(CopyBookParser.GLOBAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_globalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalClause" ):
                listener.enterGlobalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalClause" ):
                listener.exitGlobalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalClause" ):
                return visitor.visitGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def globalClause(self):

        localctx = CopyBookParser.GlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_globalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2186
                self.match(CopyBookParser.IS)


            self.state = 2189
            self.match(CopyBookParser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContainsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(CopyBookParser.BLOCK, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def CONTAINS(self):
            return self.getToken(CopyBookParser.CONTAINS, 0)

        def blockContainsTo(self):
            return self.getTypedRuleContext(CopyBookParser.BlockContainsToContext,0)


        def RECORDS(self):
            return self.getToken(CopyBookParser.RECORDS, 0)

        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_blockContainsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockContainsClause" ):
                listener.enterBlockContainsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockContainsClause" ):
                listener.exitBlockContainsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockContainsClause" ):
                return visitor.visitBlockContainsClause(self)
            else:
                return visitor.visitChildren(self)




    def blockContainsClause(self):

        localctx = CopyBookParser.BlockContainsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_blockContainsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(CopyBookParser.BLOCK)
            self.state = 2193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 2192
                self.match(CopyBookParser.CONTAINS)


            self.state = 2195
            self.integerLiteral()
            self.state = 2197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 2196
                self.blockContainsTo()


            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==391:
                self.state = 2199
                _la = self._input.LA(1)
                if not(_la==66 or _la==391):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContainsToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_blockContainsTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockContainsTo" ):
                listener.enterBlockContainsTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockContainsTo" ):
                listener.exitBlockContainsTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockContainsTo" ):
                return visitor.visitBlockContainsTo(self)
            else:
                return visitor.visitChildren(self)




    def blockContainsTo(self):

        localctx = CopyBookParser.BlockContainsToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_blockContainsTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            self.match(CopyBookParser.TO)
            self.state = 2203
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContainsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def recordContainsClauseFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.RecordContainsClauseFormat1Context,0)


        def recordContainsClauseFormat2(self):
            return self.getTypedRuleContext(CopyBookParser.RecordContainsClauseFormat2Context,0)


        def recordContainsClauseFormat3(self):
            return self.getTypedRuleContext(CopyBookParser.RecordContainsClauseFormat3Context,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_recordContainsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordContainsClause" ):
                listener.enterRecordContainsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordContainsClause" ):
                listener.exitRecordContainsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordContainsClause" ):
                return visitor.visitRecordContainsClause(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClause(self):

        localctx = CopyBookParser.RecordContainsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_recordContainsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.match(CopyBookParser.RECORD)
            self.state = 2209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2206
                self.recordContainsClauseFormat1()
                pass

            elif la_ == 2:
                self.state = 2207
                self.recordContainsClauseFormat2()
                pass

            elif la_ == 3:
                self.state = 2208
                self.recordContainsClauseFormat3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContainsClauseFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def CONTAINS(self):
            return self.getToken(CopyBookParser.CONTAINS, 0)

        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_recordContainsClauseFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordContainsClauseFormat1" ):
                listener.enterRecordContainsClauseFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordContainsClauseFormat1" ):
                listener.exitRecordContainsClauseFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordContainsClauseFormat1" ):
                return visitor.visitRecordContainsClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClauseFormat1(self):

        localctx = CopyBookParser.RecordContainsClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_recordContainsClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 2211
                self.match(CopyBookParser.CONTAINS)


            self.state = 2214
            self.integerLiteral()
            self.state = 2216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 2215
                self.match(CopyBookParser.CHARACTERS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContainsClauseFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(CopyBookParser.VARYING, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def DEPENDING(self):
            return self.getToken(CopyBookParser.DEPENDING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def recordContainsTo(self):
            return self.getTypedRuleContext(CopyBookParser.RecordContainsToContext,0)


        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_recordContainsClauseFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordContainsClauseFormat2" ):
                listener.enterRecordContainsClauseFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordContainsClauseFormat2" ):
                listener.exitRecordContainsClauseFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordContainsClauseFormat2" ):
                return visitor.visitRecordContainsClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClauseFormat2(self):

        localctx = CopyBookParser.RecordContainsClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_recordContainsClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2218
                self.match(CopyBookParser.IS)


            self.state = 2221
            self.match(CopyBookParser.VARYING)
            self.state = 2223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 2222
                self.match(CopyBookParser.IN)


            self.state = 2226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 2225
                self.match(CopyBookParser.SIZE)


            self.state = 2238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==221:
                    self.state = 2228
                    self.match(CopyBookParser.FROM)


                self.state = 2231
                self.integerLiteral()
                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==501:
                    self.state = 2232
                    self.recordContainsTo()


                self.state = 2236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 2235
                    self.match(CopyBookParser.CHARACTERS)




            self.state = 2245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2240
                self.match(CopyBookParser.DEPENDING)
                self.state = 2242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 2241
                    self.match(CopyBookParser.ON)


                self.state = 2244
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContainsClauseFormat3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def recordContainsTo(self):
            return self.getTypedRuleContext(CopyBookParser.RecordContainsToContext,0)


        def CONTAINS(self):
            return self.getToken(CopyBookParser.CONTAINS, 0)

        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_recordContainsClauseFormat3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordContainsClauseFormat3" ):
                listener.enterRecordContainsClauseFormat3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordContainsClauseFormat3" ):
                listener.exitRecordContainsClauseFormat3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordContainsClauseFormat3" ):
                return visitor.visitRecordContainsClauseFormat3(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClauseFormat3(self):

        localctx = CopyBookParser.RecordContainsClauseFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_recordContainsClauseFormat3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 2247
                self.match(CopyBookParser.CONTAINS)


            self.state = 2250
            self.integerLiteral()
            self.state = 2251
            self.recordContainsTo()
            self.state = 2253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 2252
                self.match(CopyBookParser.CHARACTERS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContainsToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_recordContainsTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordContainsTo" ):
                listener.enterRecordContainsTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordContainsTo" ):
                listener.exitRecordContainsTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordContainsTo" ):
                return visitor.visitRecordContainsTo(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsTo(self):

        localctx = CopyBookParser.RecordContainsToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_recordContainsTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.match(CopyBookParser.TO)
            self.state = 2256
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelRecordsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(CopyBookParser.LABEL, 0)

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def RECORDS(self):
            return self.getToken(CopyBookParser.RECORDS, 0)

        def OMITTED(self):
            return self.getToken(CopyBookParser.OMITTED, 0)

        def STANDARD(self):
            return self.getToken(CopyBookParser.STANDARD, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def dataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_labelRecordsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelRecordsClause" ):
                listener.enterLabelRecordsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelRecordsClause" ):
                listener.exitLabelRecordsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelRecordsClause" ):
                return visitor.visitLabelRecordsClause(self)
            else:
                return visitor.visitChildren(self)




    def labelRecordsClause(self):

        localctx = CopyBookParser.LabelRecordsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_labelRecordsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            self.match(CopyBookParser.LABEL)
            self.state = 2267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [389]:
                self.state = 2259
                self.match(CopyBookParser.RECORD)
                self.state = 2261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2260
                    self.match(CopyBookParser.IS)


                pass
            elif token in [391]:
                self.state = 2263
                self.match(CopyBookParser.RECORDS)
                self.state = 2265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 2264
                    self.match(CopyBookParser.ARE)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [337]:
                self.state = 2269
                self.match(CopyBookParser.OMITTED)
                pass
            elif token in [465]:
                self.state = 2270
                self.match(CopyBookParser.STANDARD)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 2272 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2271
                        self.dataName()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2274 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueOfClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(CopyBookParser.VALUE, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def valuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ValuePairContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ValuePairContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_valueOfClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueOfClause" ):
                listener.enterValueOfClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueOfClause" ):
                listener.exitValueOfClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueOfClause" ):
                return visitor.visitValueOfClause(self)
            else:
                return visitor.visitChildren(self)




    def valueOfClause(self):

        localctx = CopyBookParser.ValueOfClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_valueOfClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            self.match(CopyBookParser.VALUE)
            self.state = 2279
            self.match(CopyBookParser.OF)
            self.state = 2281 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2280
                    self.valuePair()

                else:
                    raise NoViableAltException(self)
                self.state = 2283 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(CopyBookParser.SystemNameContext,0)


        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_valuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuePair" ):
                listener.enterValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuePair" ):
                listener.exitValuePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuePair" ):
                return visitor.visitValuePair(self)
            else:
                return visitor.visitChildren(self)




    def valuePair(self):

        localctx = CopyBookParser.ValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_valuePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.systemName()
            self.state = 2287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2286
                self.match(CopyBookParser.IS)


            self.state = 2291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 2289
                self.qualifiedDataName()
                pass

            elif la_ == 2:
                self.state = 2290
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataRecordsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(CopyBookParser.DATA, 0)

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def RECORDS(self):
            return self.getToken(CopyBookParser.RECORDS, 0)

        def dataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataNameContext,i)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataRecordsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataRecordsClause" ):
                listener.enterDataRecordsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataRecordsClause" ):
                listener.exitDataRecordsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataRecordsClause" ):
                return visitor.visitDataRecordsClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRecordsClause(self):

        localctx = CopyBookParser.DataRecordsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_dataRecordsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2293
            self.match(CopyBookParser.DATA)
            self.state = 2302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [389]:
                self.state = 2294
                self.match(CopyBookParser.RECORD)
                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2295
                    self.match(CopyBookParser.IS)


                pass
            elif token in [391]:
                self.state = 2298
                self.match(CopyBookParser.RECORDS)
                self.state = 2300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 2299
                    self.match(CopyBookParser.ARE)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2305 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2304
                    self.dataName()

                else:
                    raise NoViableAltException(self)
                self.state = 2307 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINAGE(self):
            return self.getToken(CopyBookParser.LINAGE, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def LINES(self):
            return self.getToken(CopyBookParser.LINES, 0)

        def linageAt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LinageAtContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LinageAtContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_linageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinageClause" ):
                listener.enterLinageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinageClause" ):
                listener.exitLinageClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinageClause" ):
                return visitor.visitLinageClause(self)
            else:
                return visitor.visitChildren(self)




    def linageClause(self):

        localctx = CopyBookParser.LinageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_linageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.match(CopyBookParser.LINAGE)
            self.state = 2311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2310
                self.match(CopyBookParser.IS)


            self.state = 2315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 2313
                self.dataName()
                pass
            elif token in [570, 571, 572, 573]:
                self.state = 2314
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 2317
                self.match(CopyBookParser.LINES)


            self.state = 2323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==31 or _la==51 or _la==217 or _la==290 or _la==504 or _la==527:
                self.state = 2320
                self.linageAt()
                self.state = 2325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinageAtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def linageFootingAt(self):
            return self.getTypedRuleContext(CopyBookParser.LinageFootingAtContext,0)


        def linageLinesAtTop(self):
            return self.getTypedRuleContext(CopyBookParser.LinageLinesAtTopContext,0)


        def linageLinesAtBottom(self):
            return self.getTypedRuleContext(CopyBookParser.LinageLinesAtBottomContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_linageAt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinageAt" ):
                listener.enterLinageAt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinageAt" ):
                listener.exitLinageAt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinageAt" ):
                return visitor.visitLinageAt(self)
            else:
                return visitor.visitChildren(self)




    def linageAt(self):

        localctx = CopyBookParser.LinageAtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_linageAt)
        try:
            self.state = 2329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2326
                self.linageFootingAt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2327
                self.linageLinesAtTop()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2328
                self.linageLinesAtBottom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinageFootingAtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOOTING(self):
            return self.getToken(CopyBookParser.FOOTING, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_linageFootingAt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinageFootingAt" ):
                listener.enterLinageFootingAt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinageFootingAt" ):
                listener.exitLinageFootingAt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinageFootingAt" ):
                return visitor.visitLinageFootingAt(self)
            else:
                return visitor.visitChildren(self)




    def linageFootingAt(self):

        localctx = CopyBookParser.LinageFootingAtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_linageFootingAt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 2331
                self.match(CopyBookParser.WITH)


            self.state = 2334
            self.match(CopyBookParser.FOOTING)
            self.state = 2336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 2335
                self.match(CopyBookParser.AT)


            self.state = 2340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 2338
                self.dataName()
                pass
            elif token in [570, 571, 572, 573]:
                self.state = 2339
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinageLinesAtTopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(CopyBookParser.TOP, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def LINES(self):
            return self.getToken(CopyBookParser.LINES, 0)

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_linageLinesAtTop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinageLinesAtTop" ):
                listener.enterLinageLinesAtTop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinageLinesAtTop" ):
                listener.exitLinageLinesAtTop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinageLinesAtTop" ):
                return visitor.visitLinageLinesAtTop(self)
            else:
                return visitor.visitChildren(self)




    def linageLinesAtTop(self):

        localctx = CopyBookParser.LinageLinesAtTopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_linageLinesAtTop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2342
                self.match(CopyBookParser.LINES)


            self.state = 2346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 2345
                self.match(CopyBookParser.AT)


            self.state = 2348
            self.match(CopyBookParser.TOP)
            self.state = 2351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 2349
                self.dataName()
                pass
            elif token in [570, 571, 572, 573]:
                self.state = 2350
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinageLinesAtBottomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOTTOM(self):
            return self.getToken(CopyBookParser.BOTTOM, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def LINES(self):
            return self.getToken(CopyBookParser.LINES, 0)

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_linageLinesAtBottom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinageLinesAtBottom" ):
                listener.enterLinageLinesAtBottom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinageLinesAtBottom" ):
                listener.exitLinageLinesAtBottom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinageLinesAtBottom" ):
                return visitor.visitLinageLinesAtBottom(self)
            else:
                return visitor.visitChildren(self)




    def linageLinesAtBottom(self):

        localctx = CopyBookParser.LinageLinesAtBottomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_linageLinesAtBottom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290:
                self.state = 2353
                self.match(CopyBookParser.LINES)


            self.state = 2357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 2356
                self.match(CopyBookParser.AT)


            self.state = 2359
            self.match(CopyBookParser.BOTTOM)
            self.state = 2362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 2360
                self.dataName()
                pass
            elif token in [570, 571, 572, 573]:
                self.state = 2361
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordingModeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORDING(self):
            return self.getToken(CopyBookParser.RECORDING, 0)

        def modeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ModeStatementContext,0)


        def MODE(self):
            return self.getToken(CopyBookParser.MODE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_recordingModeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordingModeClause" ):
                listener.enterRecordingModeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordingModeClause" ):
                listener.exitRecordingModeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordingModeClause" ):
                return visitor.visitRecordingModeClause(self)
            else:
                return visitor.visitChildren(self)




    def recordingModeClause(self):

        localctx = CopyBookParser.RecordingModeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_recordingModeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self.match(CopyBookParser.RECORDING)
            self.state = 2366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==307:
                self.state = 2365
                self.match(CopyBookParser.MODE)


            self.state = 2369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2368
                self.match(CopyBookParser.IS)


            self.state = 2371
            self.modeStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_modeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeStatement" ):
                listener.enterModeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeStatement" ):
                listener.exitModeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModeStatement" ):
                return visitor.visitModeStatement(self)
            else:
                return visitor.visitChildren(self)




    def modeStatement(self):

        localctx = CopyBookParser.ModeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_modeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeSetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CODE_SET(self):
            return self.getToken(CopyBookParser.CODE_SET, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_codeSetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSetClause" ):
                listener.enterCodeSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSetClause" ):
                listener.exitCodeSetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeSetClause" ):
                return visitor.visitCodeSetClause(self)
            else:
                return visitor.visitChildren(self)




    def codeSetClause(self):

        localctx = CopyBookParser.CodeSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_codeSetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            self.match(CopyBookParser.CODE_SET)
            self.state = 2377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2376
                self.match(CopyBookParser.IS)


            self.state = 2379
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(CopyBookParser.REPORT, 0)

        def REPORTS(self):
            return self.getToken(CopyBookParser.REPORTS, 0)

        def reportName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportNameContext,i)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportClause" ):
                listener.enterReportClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportClause" ):
                listener.exitReportClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportClause" ):
                return visitor.visitReportClause(self)
            else:
                return visitor.visitChildren(self)




    def reportClause(self):

        localctx = CopyBookParser.ReportClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_reportClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [407]:
                self.state = 2381
                self.match(CopyBookParser.REPORT)
                self.state = 2383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2382
                    self.match(CopyBookParser.IS)


                pass
            elif token in [409]:
                self.state = 2385
                self.match(CopyBookParser.REPORTS)
                self.state = 2387
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 2386
                    self.match(CopyBookParser.ARE)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2392 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2391
                    self.reportName()

                else:
                    raise NoViableAltException(self)
                self.state = 2394 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataBaseSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_BASE(self):
            return self.getToken(CopyBookParser.DATA_BASE, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def dataBaseSectionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataBaseSectionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataBaseSectionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataBaseSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataBaseSection" ):
                listener.enterDataBaseSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataBaseSection" ):
                listener.exitDataBaseSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataBaseSection" ):
                return visitor.visitDataBaseSection(self)
            else:
                return visitor.visitChildren(self)




    def dataBaseSection(self):

        localctx = CopyBookParser.DataBaseSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_dataBaseSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2396
            self.match(CopyBookParser.DATA_BASE)
            self.state = 2397
            self.match(CopyBookParser.SECTION)
            self.state = 2398
            self.match(CopyBookParser.DOT_FS)
            self.state = 2402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 15) != 0):
                self.state = 2399
                self.dataBaseSectionEntry()
                self.state = 2404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataBaseSectionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def INVOKE(self):
            return self.getToken(CopyBookParser.INVOKE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataBaseSectionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataBaseSectionEntry" ):
                listener.enterDataBaseSectionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataBaseSectionEntry" ):
                listener.exitDataBaseSectionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataBaseSectionEntry" ):
                return visitor.visitDataBaseSectionEntry(self)
            else:
                return visitor.visitChildren(self)




    def dataBaseSectionEntry(self):

        localctx = CopyBookParser.DataBaseSectionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_dataBaseSectionEntry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.integerLiteral()
            self.state = 2406
            self.literal()
            self.state = 2407
            self.match(CopyBookParser.INVOKE)
            self.state = 2408
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WorkingStorageSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WORKING_STORAGE(self):
            return self.getToken(CopyBookParser.WORKING_STORAGE, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def dataDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryContext,i)


        def procedureDeclarative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureDeclarativeContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureDeclarativeContext,i)


        def fileDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileDescriptionEntryContext,i)


        def fileControlEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileControlEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileControlEntryContext,i)


        def labelRecordsClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LabelRecordsClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LabelRecordsClauseContext,i)


        def ifStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IfStatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IfStatementContext,i)


        def paragraph(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ParagraphContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ParagraphContext,i)


        def specialNameClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SpecialNameClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SpecialNameClauseContext,i)


        def execSqlStatement2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ExecSqlStatement2Context)
            else:
                return self.getTypedRuleContext(CopyBookParser.ExecSqlStatement2Context,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT)
            else:
                return self.getToken(CopyBookParser.DOT, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_workingStorageSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkingStorageSection" ):
                listener.enterWorkingStorageSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkingStorageSection" ):
                listener.exitWorkingStorageSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWorkingStorageSection" ):
                return visitor.visitWorkingStorageSection(self)
            else:
                return visitor.visitChildren(self)




    def workingStorageSection(self):

        localctx = CopyBookParser.WorkingStorageSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_workingStorageSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2410
            self.match(CopyBookParser.WORKING_STORAGE)
            self.state = 2411
            self.match(CopyBookParser.SECTION)
            self.state = 2412
            self.match(CopyBookParser.DOT_FS)
            self.state = 2432 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2432
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                    if la_ == 1:
                        self.state = 2413
                        self.dataDescriptionEntry()
                        pass

                    elif la_ == 2:
                        self.state = 2414
                        self.procedureDeclarative()
                        pass

                    elif la_ == 3:
                        self.state = 2415
                        self.statement()
                        self.state = 2417
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==550:
                            self.state = 2416
                            self.match(CopyBookParser.DOT_FS)


                        pass

                    elif la_ == 4:
                        self.state = 2419
                        self.fileDescriptionEntry()
                        pass

                    elif la_ == 5:
                        self.state = 2420
                        self.fileControlEntry()
                        pass

                    elif la_ == 6:
                        self.state = 2421
                        self.labelRecordsClause()
                        self.state = 2423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==551:
                            self.state = 2422
                            self.match(CopyBookParser.DOT)


                        pass

                    elif la_ == 7:
                        self.state = 2425
                        self.ifStatement()
                        pass

                    elif la_ == 8:
                        self.state = 2426
                        self.paragraph()
                        pass

                    elif la_ == 9:
                        self.state = 2427
                        self.specialNameClause()
                        pass

                    elif la_ == 10:
                        self.state = 2428
                        self.execSqlStatement2()
                        self.state = 2430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==550 or _la==551:
                            self.state = 2429
                            _la = self._input.LA(1)
                            if not(_la==550 or _la==551):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 2434 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkageSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINKAGE(self):
            return self.getToken(CopyBookParser.LINKAGE, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def dataDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_linkageSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkageSection" ):
                listener.enterLinkageSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkageSection" ):
                listener.exitLinkageSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkageSection" ):
                return visitor.visitLinkageSection(self)
            else:
                return visitor.visitChildren(self)




    def linkageSection(self):

        localctx = CopyBookParser.LinkageSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_linkageSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(CopyBookParser.LINKAGE)
            self.state = 2437
            self.match(CopyBookParser.SECTION)
            self.state = 2438
            self.match(CopyBookParser.DOT_FS)
            self.state = 2442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==105 or _la==405 or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 2063) != 0):
                self.state = 2439
                self.dataDescriptionEntry()
                self.state = 2444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommunicationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMUNICATION(self):
            return self.getToken(CopyBookParser.COMMUNICATION, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def communicationDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CommunicationDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CommunicationDescriptionEntryContext,i)


        def dataDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_communicationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommunicationSection" ):
                listener.enterCommunicationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommunicationSection" ):
                listener.exitCommunicationSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommunicationSection" ):
                return visitor.visitCommunicationSection(self)
            else:
                return visitor.visitChildren(self)




    def communicationSection(self):

        localctx = CopyBookParser.CommunicationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_communicationSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self.match(CopyBookParser.COMMUNICATION)
            self.state = 2446
            self.match(CopyBookParser.SECTION)
            self.state = 2447
            self.match(CopyBookParser.DOT_FS)
            self.state = 2452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59 or _la==105 or _la==405 or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 2063) != 0):
                self.state = 2450
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59]:
                    self.state = 2448
                    self.communicationDescriptionEntry()
                    pass
                elif token in [105, 405, 570, 571, 572, 573, 581]:
                    self.state = 2449
                    self.dataDescriptionEntry()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommunicationDescriptionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def communicationDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.CommunicationDescriptionEntryFormat1Context,0)


        def communicationDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(CopyBookParser.CommunicationDescriptionEntryFormat2Context,0)


        def communicationDescriptionEntryFormat3(self):
            return self.getTypedRuleContext(CopyBookParser.CommunicationDescriptionEntryFormat3Context,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_communicationDescriptionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommunicationDescriptionEntry" ):
                listener.enterCommunicationDescriptionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommunicationDescriptionEntry" ):
                listener.exitCommunicationDescriptionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommunicationDescriptionEntry" ):
                return visitor.visitCommunicationDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntry(self):

        localctx = CopyBookParser.CommunicationDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_communicationDescriptionEntry)
        try:
            self.state = 2458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2455
                self.communicationDescriptionEntryFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2456
                self.communicationDescriptionEntryFormat2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2457
                self.communicationDescriptionEntryFormat3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommunicationDescriptionEntryFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CD(self):
            return self.getToken(CopyBookParser.CD, 0)

        def cdName(self):
            return self.getTypedRuleContext(CopyBookParser.CdNameContext,0)


        def INPUT(self):
            return self.getToken(CopyBookParser.INPUT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def INITIAL(self):
            return self.getToken(CopyBookParser.INITIAL, 0)

        def dataDescName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDescNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,i)


        def symbolicQueueClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SymbolicQueueClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SymbolicQueueClauseContext,i)


        def symbolicSubQueueClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SymbolicSubQueueClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SymbolicSubQueueClauseContext,i)


        def messageDateClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MessageDateClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MessageDateClauseContext,i)


        def messageTimeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MessageTimeClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MessageTimeClauseContext,i)


        def symbolicSourceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SymbolicSourceClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SymbolicSourceClauseContext,i)


        def textLengthClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.TextLengthClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.TextLengthClauseContext,i)


        def endKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EndKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EndKeyClauseContext,i)


        def statusKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatusKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatusKeyClauseContext,i)


        def messageCountClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MessageCountClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MessageCountClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_communicationDescriptionEntryFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommunicationDescriptionEntryFormat1" ):
                listener.enterCommunicationDescriptionEntryFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommunicationDescriptionEntryFormat1" ):
                listener.exitCommunicationDescriptionEntryFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommunicationDescriptionEntryFormat1" ):
                return visitor.visitCommunicationDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntryFormat1(self):

        localctx = CopyBookParser.CommunicationDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_communicationDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2460
            self.match(CopyBookParser.CD)
            self.state = 2461
            self.cdName()
            self.state = 2463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 2462
                self.match(CopyBookParser.FOR)


            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==250:
                self.state = 2465
                self.match(CopyBookParser.INITIAL)


            self.state = 2468
            self.match(CopyBookParser.INPUT)
            self.state = 2483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & -9223367604447994623) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007200062820353) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144255977105940481) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550486129369121) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 30403713249050627) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208713583105) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 262467) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                self.state = 2481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2478
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                    if la_ == 1:
                        self.state = 2469
                        self.symbolicQueueClause()
                        pass

                    elif la_ == 2:
                        self.state = 2470
                        self.symbolicSubQueueClause()
                        pass

                    elif la_ == 3:
                        self.state = 2471
                        self.messageDateClause()
                        pass

                    elif la_ == 4:
                        self.state = 2472
                        self.messageTimeClause()
                        pass

                    elif la_ == 5:
                        self.state = 2473
                        self.symbolicSourceClause()
                        pass

                    elif la_ == 6:
                        self.state = 2474
                        self.textLengthClause()
                        pass

                    elif la_ == 7:
                        self.state = 2475
                        self.endKeyClause()
                        pass

                    elif la_ == 8:
                        self.state = 2476
                        self.statusKeyClause()
                        pass

                    elif la_ == 9:
                        self.state = 2477
                        self.messageCountClause()
                        pass


                    pass

                elif la_ == 2:
                    self.state = 2480
                    self.dataDescName()
                    pass


                self.state = 2485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2486
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommunicationDescriptionEntryFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CD(self):
            return self.getToken(CopyBookParser.CD, 0)

        def cdName(self):
            return self.getTypedRuleContext(CopyBookParser.CdNameContext,0)


        def OUTPUT(self):
            return self.getToken(CopyBookParser.OUTPUT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def destinationCountClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DestinationCountClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DestinationCountClauseContext,i)


        def textLengthClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.TextLengthClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.TextLengthClauseContext,i)


        def statusKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatusKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatusKeyClauseContext,i)


        def destinationTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DestinationTableClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DestinationTableClauseContext,i)


        def errorKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ErrorKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ErrorKeyClauseContext,i)


        def symbolicDestinationClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SymbolicDestinationClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SymbolicDestinationClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_communicationDescriptionEntryFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommunicationDescriptionEntryFormat2" ):
                listener.enterCommunicationDescriptionEntryFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommunicationDescriptionEntryFormat2" ):
                listener.exitCommunicationDescriptionEntryFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommunicationDescriptionEntryFormat2" ):
                return visitor.visitCommunicationDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntryFormat2(self):

        localctx = CopyBookParser.CommunicationDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_communicationDescriptionEntryFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.match(CopyBookParser.CD)
            self.state = 2489
            self.cdName()
            self.state = 2491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 2490
                self.match(CopyBookParser.FOR)


            self.state = 2493
            self.match(CopyBookParser.OUTPUT)
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==140 or _la==194 or ((((_la - 469)) & ~0x3f) == 0 and ((1 << (_la - 469)) & 2098177) != 0):
                self.state = 2500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2494
                    self.destinationCountClause()
                    pass

                elif la_ == 2:
                    self.state = 2495
                    self.textLengthClause()
                    pass

                elif la_ == 3:
                    self.state = 2496
                    self.statusKeyClause()
                    pass

                elif la_ == 4:
                    self.state = 2497
                    self.destinationTableClause()
                    pass

                elif la_ == 5:
                    self.state = 2498
                    self.errorKeyClause()
                    pass

                elif la_ == 6:
                    self.state = 2499
                    self.symbolicDestinationClause()
                    pass


                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2505
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommunicationDescriptionEntryFormat3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CD(self):
            return self.getToken(CopyBookParser.CD, 0)

        def cdName(self):
            return self.getTypedRuleContext(CopyBookParser.CdNameContext,0)


        def INITIAL(self):
            return self.getToken(CopyBookParser.INITIAL, 0)

        def I_O(self):
            return self.getToken(CopyBookParser.I_O, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def dataDescName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDescNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,i)


        def messageDateClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MessageDateClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MessageDateClauseContext,i)


        def messageTimeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MessageTimeClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MessageTimeClauseContext,i)


        def symbolicTerminalClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SymbolicTerminalClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SymbolicTerminalClauseContext,i)


        def textLengthClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.TextLengthClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.TextLengthClauseContext,i)


        def endKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EndKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EndKeyClauseContext,i)


        def statusKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatusKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatusKeyClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_communicationDescriptionEntryFormat3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommunicationDescriptionEntryFormat3" ):
                listener.enterCommunicationDescriptionEntryFormat3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommunicationDescriptionEntryFormat3" ):
                listener.exitCommunicationDescriptionEntryFormat3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommunicationDescriptionEntryFormat3" ):
                return visitor.visitCommunicationDescriptionEntryFormat3(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntryFormat3(self):

        localctx = CopyBookParser.CommunicationDescriptionEntryFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_communicationDescriptionEntryFormat3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2507
            self.match(CopyBookParser.CD)
            self.state = 2508
            self.cdName()
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 2509
                self.match(CopyBookParser.FOR)


            self.state = 2512
            self.match(CopyBookParser.INITIAL)
            self.state = 2513
            self.match(CopyBookParser.I_O)
            self.state = 2525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 76842699008641020) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36521446947684353) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 288230376420147329) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 9009398278193829) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 74327003223818499) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & 6782200037507083) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & -9133264830940036607) != 0) or ((((_la - 479)) & ~0x3f) == 0 and ((1 << (_la - 479)) & -9212007484399268591) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                self.state = 2523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 2520
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                    if la_ == 1:
                        self.state = 2514
                        self.messageDateClause()
                        pass

                    elif la_ == 2:
                        self.state = 2515
                        self.messageTimeClause()
                        pass

                    elif la_ == 3:
                        self.state = 2516
                        self.symbolicTerminalClause()
                        pass

                    elif la_ == 4:
                        self.state = 2517
                        self.textLengthClause()
                        pass

                    elif la_ == 5:
                        self.state = 2518
                        self.endKeyClause()
                        pass

                    elif la_ == 6:
                        self.state = 2519
                        self.statusKeyClause()
                        pass


                    pass

                elif la_ == 2:
                    self.state = 2522
                    self.dataDescName()
                    pass


                self.state = 2527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2528
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationCountClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESTINATION(self):
            return self.getToken(CopyBookParser.DESTINATION, 0)

        def COUNT(self):
            return self.getToken(CopyBookParser.COUNT, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_destinationCountClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestinationCountClause" ):
                listener.enterDestinationCountClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestinationCountClause" ):
                listener.exitDestinationCountClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDestinationCountClause" ):
                return visitor.visitDestinationCountClause(self)
            else:
                return visitor.visitChildren(self)




    def destinationCountClause(self):

        localctx = CopyBookParser.DestinationCountClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_destinationCountClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2530
            self.match(CopyBookParser.DESTINATION)
            self.state = 2531
            self.match(CopyBookParser.COUNT)
            self.state = 2533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2532
                self.match(CopyBookParser.IS)


            self.state = 2535
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESTINATION(self):
            return self.getToken(CopyBookParser.DESTINATION, 0)

        def TABLE(self):
            return self.getToken(CopyBookParser.TABLE, 0)

        def OCCURS(self):
            return self.getToken(CopyBookParser.OCCURS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def TIMES(self):
            return self.getToken(CopyBookParser.TIMES, 0)

        def INDEXED(self):
            return self.getToken(CopyBookParser.INDEXED, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def indexName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IndexNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IndexNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_destinationTableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestinationTableClause" ):
                listener.enterDestinationTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestinationTableClause" ):
                listener.exitDestinationTableClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDestinationTableClause" ):
                return visitor.visitDestinationTableClause(self)
            else:
                return visitor.visitChildren(self)




    def destinationTableClause(self):

        localctx = CopyBookParser.DestinationTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_destinationTableClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2537
            self.match(CopyBookParser.DESTINATION)
            self.state = 2538
            self.match(CopyBookParser.TABLE)
            self.state = 2539
            self.match(CopyBookParser.OCCURS)
            self.state = 2540
            self.integerLiteral()
            self.state = 2541
            self.match(CopyBookParser.TIMES)
            self.state = 2549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==248:
                self.state = 2542
                self.match(CopyBookParser.INDEXED)
                self.state = 2543
                self.match(CopyBookParser.BY)
                self.state = 2545 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2544
                        self.indexName()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2547 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CopyBookParser.END, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_endKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndKeyClause" ):
                listener.enterEndKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndKeyClause" ):
                listener.exitEndKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndKeyClause" ):
                return visitor.visitEndKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def endKeyClause(self):

        localctx = CopyBookParser.EndKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_endKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2551
            self.match(CopyBookParser.END)
            self.state = 2552
            self.match(CopyBookParser.KEY)
            self.state = 2554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2553
                self.match(CopyBookParser.IS)


            self.state = 2556
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(CopyBookParser.ERROR, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_errorKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorKeyClause" ):
                listener.enterErrorKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorKeyClause" ):
                listener.exitErrorKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorKeyClause" ):
                return visitor.visitErrorKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def errorKeyClause(self):

        localctx = CopyBookParser.ErrorKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_errorKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.match(CopyBookParser.ERROR)
            self.state = 2559
            self.match(CopyBookParser.KEY)
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2560
                self.match(CopyBookParser.IS)


            self.state = 2563
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageCountClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(CopyBookParser.COUNT, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def MESSAGE(self):
            return self.getToken(CopyBookParser.MESSAGE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_messageCountClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageCountClause" ):
                listener.enterMessageCountClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageCountClause" ):
                listener.exitMessageCountClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageCountClause" ):
                return visitor.visitMessageCountClause(self)
            else:
                return visitor.visitChildren(self)




    def messageCountClause(self):

        localctx = CopyBookParser.MessageCountClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_messageCountClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==305:
                self.state = 2565
                self.match(CopyBookParser.MESSAGE)


            self.state = 2568
            self.match(CopyBookParser.COUNT)
            self.state = 2570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2569
                self.match(CopyBookParser.IS)


            self.state = 2572
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageDateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(CopyBookParser.MESSAGE, 0)

        def DATE(self):
            return self.getToken(CopyBookParser.DATE, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_messageDateClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageDateClause" ):
                listener.enterMessageDateClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageDateClause" ):
                listener.exitMessageDateClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageDateClause" ):
                return visitor.visitMessageDateClause(self)
            else:
                return visitor.visitChildren(self)




    def messageDateClause(self):

        localctx = CopyBookParser.MessageDateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_messageDateClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self.match(CopyBookParser.MESSAGE)
            self.state = 2575
            self.match(CopyBookParser.DATE)
            self.state = 2577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2576
                self.match(CopyBookParser.IS)


            self.state = 2579
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageTimeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(CopyBookParser.MESSAGE, 0)

        def TIME(self):
            return self.getToken(CopyBookParser.TIME, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_messageTimeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageTimeClause" ):
                listener.enterMessageTimeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageTimeClause" ):
                listener.exitMessageTimeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageTimeClause" ):
                return visitor.visitMessageTimeClause(self)
            else:
                return visitor.visitChildren(self)




    def messageTimeClause(self):

        localctx = CopyBookParser.MessageTimeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_messageTimeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            self.match(CopyBookParser.MESSAGE)
            self.state = 2582
            self.match(CopyBookParser.TIME)
            self.state = 2584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2583
                self.match(CopyBookParser.IS)


            self.state = 2586
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatusKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(CopyBookParser.STATUS, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_statusKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatusKeyClause" ):
                listener.enterStatusKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatusKeyClause" ):
                listener.exitStatusKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatusKeyClause" ):
                return visitor.visitStatusKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def statusKeyClause(self):

        localctx = CopyBookParser.StatusKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_statusKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(CopyBookParser.STATUS)
            self.state = 2589
            self.match(CopyBookParser.KEY)
            self.state = 2591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2590
                self.match(CopyBookParser.IS)


            self.state = 2593
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicDestinationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESTINATION(self):
            return self.getToken(CopyBookParser.DESTINATION, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(CopyBookParser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicDestinationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicDestinationClause" ):
                listener.enterSymbolicDestinationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicDestinationClause" ):
                listener.exitSymbolicDestinationClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicDestinationClause" ):
                return visitor.visitSymbolicDestinationClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicDestinationClause(self):

        localctx = CopyBookParser.SymbolicDestinationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_symbolicDestinationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==479:
                self.state = 2595
                self.match(CopyBookParser.SYMBOLIC)


            self.state = 2598
            self.match(CopyBookParser.DESTINATION)
            self.state = 2600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2599
                self.match(CopyBookParser.IS)


            self.state = 2602
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicQueueClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUEUE(self):
            return self.getToken(CopyBookParser.QUEUE, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(CopyBookParser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicQueueClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicQueueClause" ):
                listener.enterSymbolicQueueClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicQueueClause" ):
                listener.exitSymbolicQueueClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicQueueClause" ):
                return visitor.visitSymbolicQueueClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicQueueClause(self):

        localctx = CopyBookParser.SymbolicQueueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_symbolicQueueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==479:
                self.state = 2604
                self.match(CopyBookParser.SYMBOLIC)


            self.state = 2607
            self.match(CopyBookParser.QUEUE)
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2608
                self.match(CopyBookParser.IS)


            self.state = 2611
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicSourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE(self):
            return self.getToken(CopyBookParser.SOURCE, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(CopyBookParser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicSourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicSourceClause" ):
                listener.enterSymbolicSourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicSourceClause" ):
                listener.exitSymbolicSourceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicSourceClause" ):
                return visitor.visitSymbolicSourceClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicSourceClause(self):

        localctx = CopyBookParser.SymbolicSourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_symbolicSourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==479:
                self.state = 2613
                self.match(CopyBookParser.SYMBOLIC)


            self.state = 2616
            self.match(CopyBookParser.SOURCE)
            self.state = 2618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2617
                self.match(CopyBookParser.IS)


            self.state = 2620
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicTerminalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINAL(self):
            return self.getToken(CopyBookParser.TERMINAL, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(CopyBookParser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicTerminalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicTerminalClause" ):
                listener.enterSymbolicTerminalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicTerminalClause" ):
                listener.exitSymbolicTerminalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicTerminalClause" ):
                return visitor.visitSymbolicTerminalClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicTerminalClause(self):

        localctx = CopyBookParser.SymbolicTerminalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_symbolicTerminalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==479:
                self.state = 2622
                self.match(CopyBookParser.SYMBOLIC)


            self.state = 2625
            self.match(CopyBookParser.TERMINAL)
            self.state = 2627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2626
                self.match(CopyBookParser.IS)


            self.state = 2629
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicSubQueueClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def SUB_QUEUE_1(self):
            return self.getToken(CopyBookParser.SUB_QUEUE_1, 0)

        def SUB_QUEUE_2(self):
            return self.getToken(CopyBookParser.SUB_QUEUE_2, 0)

        def SUB_QUEUE_3(self):
            return self.getToken(CopyBookParser.SUB_QUEUE_3, 0)

        def SYMBOLIC(self):
            return self.getToken(CopyBookParser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicSubQueueClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicSubQueueClause" ):
                listener.enterSymbolicSubQueueClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicSubQueueClause" ):
                listener.exitSymbolicSubQueueClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicSubQueueClause" ):
                return visitor.visitSymbolicSubQueueClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicSubQueueClause(self):

        localctx = CopyBookParser.SymbolicSubQueueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_symbolicSubQueueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==479:
                self.state = 2631
                self.match(CopyBookParser.SYMBOLIC)


            self.state = 2634
            _la = self._input.LA(1)
            if not(((((_la - 472)) & ~0x3f) == 0 and ((1 << (_la - 472)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2635
                self.match(CopyBookParser.IS)


            self.state = 2638
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextLengthClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT(self):
            return self.getToken(CopyBookParser.TEXT, 0)

        def LENGTH(self):
            return self.getToken(CopyBookParser.LENGTH, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_textLengthClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLengthClause" ):
                listener.enterTextLengthClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLengthClause" ):
                listener.exitTextLengthClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextLengthClause" ):
                return visitor.visitTextLengthClause(self)
            else:
                return visitor.visitChildren(self)




    def textLengthClause(self):

        localctx = CopyBookParser.TextLengthClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_textLengthClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2640
            self.match(CopyBookParser.TEXT)
            self.state = 2641
            self.match(CopyBookParser.LENGTH)
            self.state = 2643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2642
                self.match(CopyBookParser.IS)


            self.state = 2645
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalStorageSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_STORAGE(self):
            return self.getToken(CopyBookParser.LOCAL_STORAGE, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def LD(self):
            return self.getToken(CopyBookParser.LD, 0)

        def localName(self):
            return self.getTypedRuleContext(CopyBookParser.LocalNameContext,0)


        def dataDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_localStorageSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalStorageSection" ):
                listener.enterLocalStorageSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalStorageSection" ):
                listener.exitLocalStorageSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalStorageSection" ):
                return visitor.visitLocalStorageSection(self)
            else:
                return visitor.visitChildren(self)




    def localStorageSection(self):

        localctx = CopyBookParser.LocalStorageSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_localStorageSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2647
            self.match(CopyBookParser.LOCAL_STORAGE)
            self.state = 2648
            self.match(CopyBookParser.SECTION)
            self.state = 2649
            self.match(CopyBookParser.DOT_FS)
            self.state = 2654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==275:
                self.state = 2650
                self.match(CopyBookParser.LD)
                self.state = 2651
                self.localName()
                self.state = 2652
                self.match(CopyBookParser.DOT_FS)


            self.state = 2659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==105 or _la==405 or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 2063) != 0):
                self.state = 2656
                self.dataDescriptionEntry()
                self.state = 2661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCREEN(self):
            return self.getToken(CopyBookParser.SCREEN, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def screenDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_screenSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenSection" ):
                listener.enterScreenSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenSection" ):
                listener.exitScreenSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenSection" ):
                return visitor.visitScreenSection(self)
            else:
                return visitor.visitChildren(self)




    def screenSection(self):

        localctx = CopyBookParser.ScreenSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_screenSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2662
            self.match(CopyBookParser.SCREEN)
            self.state = 2663
            self.match(CopyBookParser.SECTION)
            self.state = 2664
            self.match(CopyBookParser.DOT_FS)
            self.state = 2668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==573:
                self.state = 2665
                self.screenDescriptionEntry()
                self.state = 2670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(CopyBookParser.INTEGERLITERAL, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def FILLER(self):
            return self.getToken(CopyBookParser.FILLER, 0)

        def screenName(self):
            return self.getTypedRuleContext(CopyBookParser.ScreenNameContext,0)


        def screenDescriptionBlankClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionBlankClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionBlankClauseContext,i)


        def screenDescriptionBellClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionBellClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionBellClauseContext,i)


        def screenDescriptionBlinkClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionBlinkClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionBlinkClauseContext,i)


        def screenDescriptionEraseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionEraseClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionEraseClauseContext,i)


        def screenDescriptionLightClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionLightClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionLightClauseContext,i)


        def screenDescriptionGridClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionGridClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionGridClauseContext,i)


        def screenDescriptionReverseVideoClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionReverseVideoClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionReverseVideoClauseContext,i)


        def screenDescriptionUnderlineClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionUnderlineClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionUnderlineClauseContext,i)


        def screenDescriptionSizeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionSizeClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionSizeClauseContext,i)


        def screenDescriptionLineClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionLineClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionLineClauseContext,i)


        def screenDescriptionColumnClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionColumnClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionColumnClauseContext,i)


        def screenDescriptionForegroundColorClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionForegroundColorClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionForegroundColorClauseContext,i)


        def screenDescriptionBackgroundColorClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionBackgroundColorClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionBackgroundColorClauseContext,i)


        def screenDescriptionControlClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionControlClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionControlClauseContext,i)


        def screenDescriptionValueClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionValueClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionValueClauseContext,i)


        def screenDescriptionPictureClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionPictureClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionPictureClauseContext,i)


        def screenDescriptionUsageClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionUsageClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionUsageClauseContext,i)


        def screenDescriptionBlankWhenZeroClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionBlankWhenZeroClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionBlankWhenZeroClauseContext,i)


        def screenDescriptionJustifiedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionJustifiedClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionJustifiedClauseContext,i)


        def screenDescriptionSignClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionSignClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionSignClauseContext,i)


        def screenDescriptionAutoClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionAutoClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionAutoClauseContext,i)


        def screenDescriptionSecureClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionSecureClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionSecureClauseContext,i)


        def screenDescriptionRequiredClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionRequiredClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionRequiredClauseContext,i)


        def screenDescriptionPromptClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionPromptClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionPromptClauseContext,i)


        def screenDescriptionFullClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionFullClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionFullClauseContext,i)


        def screenDescriptionZeroFillClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionZeroFillClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionZeroFillClauseContext,i)


        def screenDescriptionFromClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionFromClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionFromClauseContext,i)


        def screenDescriptionUsingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ScreenDescriptionUsingClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionUsingClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionEntry" ):
                listener.enterScreenDescriptionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionEntry" ):
                listener.exitScreenDescriptionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionEntry" ):
                return visitor.visitScreenDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionEntry(self):

        localctx = CopyBookParser.ScreenDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_screenDescriptionEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2671
            self.match(CopyBookParser.INTEGERLITERAL)
            self.state = 2674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2672
                self.match(CopyBookParser.FILLER)

            elif la_ == 2:
                self.state = 2673
                self.screenName()


            self.state = 2708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 13194139559091) != 0) or _la==100 or _la==161 or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9346855469057) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 2305843284226162691) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 4611686018695826433) != 0) or ((((_la - 413)) & ~0x3f) == 0 and ((1 << (_la - 413)) & 412317384705) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & 536897569) != 0):
                self.state = 2706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2676
                    self.screenDescriptionBlankClause()
                    pass

                elif la_ == 2:
                    self.state = 2677
                    self.screenDescriptionBellClause()
                    pass

                elif la_ == 3:
                    self.state = 2678
                    self.screenDescriptionBlinkClause()
                    pass

                elif la_ == 4:
                    self.state = 2679
                    self.screenDescriptionEraseClause()
                    pass

                elif la_ == 5:
                    self.state = 2680
                    self.screenDescriptionLightClause()
                    pass

                elif la_ == 6:
                    self.state = 2681
                    self.screenDescriptionGridClause()
                    pass

                elif la_ == 7:
                    self.state = 2682
                    self.screenDescriptionReverseVideoClause()
                    pass

                elif la_ == 8:
                    self.state = 2683
                    self.screenDescriptionUnderlineClause()
                    pass

                elif la_ == 9:
                    self.state = 2684
                    self.screenDescriptionSizeClause()
                    pass

                elif la_ == 10:
                    self.state = 2685
                    self.screenDescriptionLineClause()
                    pass

                elif la_ == 11:
                    self.state = 2686
                    self.screenDescriptionColumnClause()
                    pass

                elif la_ == 12:
                    self.state = 2687
                    self.screenDescriptionForegroundColorClause()
                    pass

                elif la_ == 13:
                    self.state = 2688
                    self.screenDescriptionBackgroundColorClause()
                    pass

                elif la_ == 14:
                    self.state = 2689
                    self.screenDescriptionControlClause()
                    pass

                elif la_ == 15:
                    self.state = 2690
                    self.screenDescriptionValueClause()
                    pass

                elif la_ == 16:
                    self.state = 2691
                    self.screenDescriptionPictureClause()
                    pass

                elif la_ == 17:
                    self.state = 2694
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [221]:
                        self.state = 2692
                        self.screenDescriptionFromClause()
                        pass
                    elif token in [519]:
                        self.state = 2693
                        self.screenDescriptionUsingClause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 18:
                    self.state = 2696
                    self.screenDescriptionUsageClause()
                    pass

                elif la_ == 19:
                    self.state = 2697
                    self.screenDescriptionBlankWhenZeroClause()
                    pass

                elif la_ == 20:
                    self.state = 2698
                    self.screenDescriptionJustifiedClause()
                    pass

                elif la_ == 21:
                    self.state = 2699
                    self.screenDescriptionSignClause()
                    pass

                elif la_ == 22:
                    self.state = 2700
                    self.screenDescriptionAutoClause()
                    pass

                elif la_ == 23:
                    self.state = 2701
                    self.screenDescriptionSecureClause()
                    pass

                elif la_ == 24:
                    self.state = 2702
                    self.screenDescriptionRequiredClause()
                    pass

                elif la_ == 25:
                    self.state = 2703
                    self.screenDescriptionPromptClause()
                    pass

                elif la_ == 26:
                    self.state = 2704
                    self.screenDescriptionFullClause()
                    pass

                elif la_ == 27:
                    self.state = 2705
                    self.screenDescriptionZeroFillClause()
                    pass


                self.state = 2710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2711
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionBlankClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(CopyBookParser.BLANK, 0)

        def SCREEN(self):
            return self.getToken(CopyBookParser.SCREEN, 0)

        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionBlankClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionBlankClause" ):
                listener.enterScreenDescriptionBlankClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionBlankClause" ):
                listener.exitScreenDescriptionBlankClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionBlankClause" ):
                return visitor.visitScreenDescriptionBlankClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBlankClause(self):

        localctx = CopyBookParser.ScreenDescriptionBlankClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_screenDescriptionBlankClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(CopyBookParser.BLANK)
            self.state = 2714
            _la = self._input.LA(1)
            if not(_la==289 or _la==428):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionBellClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BELL(self):
            return self.getToken(CopyBookParser.BELL, 0)

        def BEEP(self):
            return self.getToken(CopyBookParser.BEEP, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionBellClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionBellClause" ):
                listener.enterScreenDescriptionBellClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionBellClause" ):
                listener.exitScreenDescriptionBellClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionBellClause" ):
                return visitor.visitScreenDescriptionBellClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBellClause(self):

        localctx = CopyBookParser.ScreenDescriptionBellClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_screenDescriptionBellClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            _la = self._input.LA(1)
            if not(_la==41 or _la==44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionBlinkClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLINK(self):
            return self.getToken(CopyBookParser.BLINK, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionBlinkClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionBlinkClause" ):
                listener.enterScreenDescriptionBlinkClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionBlinkClause" ):
                listener.exitScreenDescriptionBlinkClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionBlinkClause" ):
                return visitor.visitScreenDescriptionBlinkClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBlinkClause(self):

        localctx = CopyBookParser.ScreenDescriptionBlinkClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_screenDescriptionBlinkClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            self.match(CopyBookParser.BLINK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionEraseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(CopyBookParser.ERASE, 0)

        def EOL(self):
            return self.getToken(CopyBookParser.EOL, 0)

        def EOS(self):
            return self.getToken(CopyBookParser.EOS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionEraseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionEraseClause" ):
                listener.enterScreenDescriptionEraseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionEraseClause" ):
                listener.exitScreenDescriptionEraseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionEraseClause" ):
                return visitor.visitScreenDescriptionEraseClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionEraseClause(self):

        localctx = CopyBookParser.ScreenDescriptionEraseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_screenDescriptionEraseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            self.match(CopyBookParser.ERASE)
            self.state = 2721
            _la = self._input.LA(1)
            if not(_la==195 or _la==196):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionLightClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HIGHLIGHT(self):
            return self.getToken(CopyBookParser.HIGHLIGHT, 0)

        def LOWLIGHT(self):
            return self.getToken(CopyBookParser.LOWLIGHT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionLightClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionLightClause" ):
                listener.enterScreenDescriptionLightClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionLightClause" ):
                listener.exitScreenDescriptionLightClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionLightClause" ):
                return visitor.visitScreenDescriptionLightClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionLightClause(self):

        localctx = CopyBookParser.ScreenDescriptionLightClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_screenDescriptionLightClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2723
            _la = self._input.LA(1)
            if not(_la==236 or _la==300):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionGridClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRID(self):
            return self.getToken(CopyBookParser.GRID, 0)

        def LEFTLINE(self):
            return self.getToken(CopyBookParser.LEFTLINE, 0)

        def OVERLINE(self):
            return self.getToken(CopyBookParser.OVERLINE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionGridClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionGridClause" ):
                listener.enterScreenDescriptionGridClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionGridClause" ):
                listener.exitScreenDescriptionGridClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionGridClause" ):
                return visitor.visitScreenDescriptionGridClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionGridClause(self):

        localctx = CopyBookParser.ScreenDescriptionGridClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_screenDescriptionGridClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2725
            _la = self._input.LA(1)
            if not(_la==232 or _la==278 or _la==348):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionReverseVideoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVERSE_VIDEO(self):
            return self.getToken(CopyBookParser.REVERSE_VIDEO, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionReverseVideoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionReverseVideoClause" ):
                listener.enterScreenDescriptionReverseVideoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionReverseVideoClause" ):
                listener.exitScreenDescriptionReverseVideoClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionReverseVideoClause" ):
                return visitor.visitScreenDescriptionReverseVideoClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionReverseVideoClause(self):

        localctx = CopyBookParser.ScreenDescriptionReverseVideoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_screenDescriptionReverseVideoClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2727
            self.match(CopyBookParser.REVERSE_VIDEO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionUnderlineClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERLINE(self):
            return self.getToken(CopyBookParser.UNDERLINE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionUnderlineClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionUnderlineClause" ):
                listener.enterScreenDescriptionUnderlineClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionUnderlineClause" ):
                listener.exitScreenDescriptionUnderlineClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionUnderlineClause" ):
                return visitor.visitScreenDescriptionUnderlineClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionUnderlineClause(self):

        localctx = CopyBookParser.ScreenDescriptionUnderlineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_screenDescriptionUnderlineClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2729
            self.match(CopyBookParser.UNDERLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionSizeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionSizeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionSizeClause" ):
                listener.enterScreenDescriptionSizeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionSizeClause" ):
                listener.exitScreenDescriptionSizeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionSizeClause" ):
                return visitor.visitScreenDescriptionSizeClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionSizeClause(self):

        localctx = CopyBookParser.ScreenDescriptionSizeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_screenDescriptionSizeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2731
            self.match(CopyBookParser.SIZE)
            self.state = 2733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2732
                self.match(CopyBookParser.IS)


            self.state = 2737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2735
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2736
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionLineClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def PLUS(self):
            return self.getToken(CopyBookParser.PLUS, 0)

        def PLUSCHAR(self):
            return self.getToken(CopyBookParser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(CopyBookParser.MINUSCHAR, 0)

        def NUMBER(self):
            return self.getToken(CopyBookParser.NUMBER, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionLineClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionLineClause" ):
                listener.enterScreenDescriptionLineClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionLineClause" ):
                listener.exitScreenDescriptionLineClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionLineClause" ):
                return visitor.visitScreenDescriptionLineClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionLineClause(self):

        localctx = CopyBookParser.ScreenDescriptionLineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_screenDescriptionLineClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self.match(CopyBookParser.LINE)
            self.state = 2747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 2740
                    self.match(CopyBookParser.NUMBER)


                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2743
                    self.match(CopyBookParser.IS)


                self.state = 2746
                _la = self._input.LA(1)
                if not(_la==360 or _la==559 or _la==563):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2749
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2750
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionColumnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(CopyBookParser.COLUMN, 0)

        def COL(self):
            return self.getToken(CopyBookParser.COL, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def PLUS(self):
            return self.getToken(CopyBookParser.PLUS, 0)

        def PLUSCHAR(self):
            return self.getToken(CopyBookParser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(CopyBookParser.MINUSCHAR, 0)

        def NUMBER(self):
            return self.getToken(CopyBookParser.NUMBER, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionColumnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionColumnClause" ):
                listener.enterScreenDescriptionColumnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionColumnClause" ):
                listener.exitScreenDescriptionColumnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionColumnClause" ):
                return visitor.visitScreenDescriptionColumnClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionColumnClause(self):

        localctx = CopyBookParser.ScreenDescriptionColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_screenDescriptionColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2753
            _la = self._input.LA(1)
            if not(_la==76 or _la==77):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 2754
                    self.match(CopyBookParser.NUMBER)


                self.state = 2758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2757
                    self.match(CopyBookParser.IS)


                self.state = 2760
                _la = self._input.LA(1)
                if not(_la==360 or _la==559 or _la==563):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2763
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2764
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionForegroundColorClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREGROUND_COLOR(self):
            return self.getToken(CopyBookParser.FOREGROUND_COLOR, 0)

        def FOREGROUND_COLOUR(self):
            return self.getToken(CopyBookParser.FOREGROUND_COLOUR, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionForegroundColorClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionForegroundColorClause" ):
                listener.enterScreenDescriptionForegroundColorClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionForegroundColorClause" ):
                listener.exitScreenDescriptionForegroundColorClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionForegroundColorClause" ):
                return visitor.visitScreenDescriptionForegroundColorClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionForegroundColorClause(self):

        localctx = CopyBookParser.ScreenDescriptionForegroundColorClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_screenDescriptionForegroundColorClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2767
            _la = self._input.LA(1)
            if not(_la==219 or _la==220):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2768
                self.match(CopyBookParser.IS)


            self.state = 2773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2771
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2772
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionBackgroundColorClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKGROUND_COLOR(self):
            return self.getToken(CopyBookParser.BACKGROUND_COLOR, 0)

        def BACKGROUND_COLOUR(self):
            return self.getToken(CopyBookParser.BACKGROUND_COLOUR, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionBackgroundColorClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionBackgroundColorClause" ):
                listener.enterScreenDescriptionBackgroundColorClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionBackgroundColorClause" ):
                listener.exitScreenDescriptionBackgroundColorClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionBackgroundColorClause" ):
                return visitor.visitScreenDescriptionBackgroundColorClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBackgroundColorClause(self):

        localctx = CopyBookParser.ScreenDescriptionBackgroundColorClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_screenDescriptionBackgroundColorClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2775
            _la = self._input.LA(1)
            if not(_la==38 or _la==39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2776
                self.match(CopyBookParser.IS)


            self.state = 2781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 2779
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2780
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionControlClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(CopyBookParser.CONTROL, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionControlClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionControlClause" ):
                listener.enterScreenDescriptionControlClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionControlClause" ):
                listener.exitScreenDescriptionControlClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionControlClause" ):
                return visitor.visitScreenDescriptionControlClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionControlClause(self):

        localctx = CopyBookParser.ScreenDescriptionControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_screenDescriptionControlClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2783
            self.match(CopyBookParser.CONTROL)
            self.state = 2785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2784
                self.match(CopyBookParser.IS)


            self.state = 2787
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionValueClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def VALUE(self):
            return self.getToken(CopyBookParser.VALUE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionValueClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionValueClause" ):
                listener.enterScreenDescriptionValueClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionValueClause" ):
                listener.exitScreenDescriptionValueClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionValueClause" ):
                return visitor.visitScreenDescriptionValueClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionValueClause(self):

        localctx = CopyBookParser.ScreenDescriptionValueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_screenDescriptionValueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2789
            self.match(CopyBookParser.VALUE)
            self.state = 2791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2790
                self.match(CopyBookParser.IS)


            self.state = 2793
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionPictureClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pictureString(self):
            return self.getTypedRuleContext(CopyBookParser.PictureStringContext,0)


        def PICTURE(self):
            return self.getToken(CopyBookParser.PICTURE, 0)

        def PIC(self):
            return self.getToken(CopyBookParser.PIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionPictureClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionPictureClause" ):
                listener.enterScreenDescriptionPictureClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionPictureClause" ):
                listener.exitScreenDescriptionPictureClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionPictureClause" ):
                return visitor.visitScreenDescriptionPictureClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionPictureClause(self):

        localctx = CopyBookParser.ScreenDescriptionPictureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_screenDescriptionPictureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2795
            _la = self._input.LA(1)
            if not(_la==358 or _la==359):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2796
                self.match(CopyBookParser.IS)


            self.state = 2799
            self.pictureString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionFromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def screenDescriptionToClause(self):
            return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionToClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionFromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionFromClause" ):
                listener.enterScreenDescriptionFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionFromClause" ):
                listener.exitScreenDescriptionFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionFromClause" ):
                return visitor.visitScreenDescriptionFromClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionFromClause(self):

        localctx = CopyBookParser.ScreenDescriptionFromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_screenDescriptionFromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.match(CopyBookParser.FROM)
            self.state = 2804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2802
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2803
                self.literal()
                pass


            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 2806
                self.screenDescriptionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionToClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionToClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionToClause" ):
                listener.enterScreenDescriptionToClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionToClause" ):
                listener.exitScreenDescriptionToClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionToClause" ):
                return visitor.visitScreenDescriptionToClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionToClause(self):

        localctx = CopyBookParser.ScreenDescriptionToClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_screenDescriptionToClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809
            self.match(CopyBookParser.TO)
            self.state = 2810
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionUsingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionUsingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionUsingClause" ):
                listener.enterScreenDescriptionUsingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionUsingClause" ):
                listener.exitScreenDescriptionUsingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionUsingClause" ):
                return visitor.visitScreenDescriptionUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionUsingClause(self):

        localctx = CopyBookParser.ScreenDescriptionUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_screenDescriptionUsingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2812
            self.match(CopyBookParser.USING)
            self.state = 2813
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionUsageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(CopyBookParser.DISPLAY, 0)

        def DISPLAY_1(self):
            return self.getToken(CopyBookParser.DISPLAY_1, 0)

        def USAGE(self):
            return self.getToken(CopyBookParser.USAGE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionUsageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionUsageClause" ):
                listener.enterScreenDescriptionUsageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionUsageClause" ):
                listener.exitScreenDescriptionUsageClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionUsageClause" ):
                return visitor.visitScreenDescriptionUsageClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionUsageClause(self):

        localctx = CopyBookParser.ScreenDescriptionUsageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_screenDescriptionUsageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2815
            self.match(CopyBookParser.USAGE)
            self.state = 2817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2816
                self.match(CopyBookParser.IS)


            self.state = 2819
            _la = self._input.LA(1)
            if not(_la==147 or _la==148):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionBlankWhenZeroClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(CopyBookParser.BLANK, 0)

        def ZERO(self):
            return self.getToken(CopyBookParser.ZERO, 0)

        def WHEN(self):
            return self.getToken(CopyBookParser.WHEN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionBlankWhenZeroClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionBlankWhenZeroClause" ):
                listener.enterScreenDescriptionBlankWhenZeroClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionBlankWhenZeroClause" ):
                listener.exitScreenDescriptionBlankWhenZeroClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionBlankWhenZeroClause" ):
                return visitor.visitScreenDescriptionBlankWhenZeroClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBlankWhenZeroClause(self):

        localctx = CopyBookParser.ScreenDescriptionBlankWhenZeroClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_screenDescriptionBlankWhenZeroClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2821
            self.match(CopyBookParser.BLANK)
            self.state = 2823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==525:
                self.state = 2822
                self.match(CopyBookParser.WHEN)


            self.state = 2825
            self.match(CopyBookParser.ZERO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionJustifiedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JUSTIFIED(self):
            return self.getToken(CopyBookParser.JUSTIFIED, 0)

        def JUST(self):
            return self.getToken(CopyBookParser.JUST, 0)

        def RIGHT(self):
            return self.getToken(CopyBookParser.RIGHT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionJustifiedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionJustifiedClause" ):
                listener.enterScreenDescriptionJustifiedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionJustifiedClause" ):
                listener.exitScreenDescriptionJustifiedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionJustifiedClause" ):
                return visitor.visitScreenDescriptionJustifiedClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionJustifiedClause(self):

        localctx = CopyBookParser.ScreenDescriptionJustifiedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_screenDescriptionJustifiedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            _la = self._input.LA(1)
            if not(_la==262 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==423:
                self.state = 2828
                self.match(CopyBookParser.RIGHT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionSignClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(CopyBookParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(CopyBookParser.TRAILING, 0)

        def SIGN(self):
            return self.getToken(CopyBookParser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(CopyBookParser.SEPARATE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionSignClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionSignClause" ):
                listener.enterScreenDescriptionSignClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionSignClause" ):
                listener.exitScreenDescriptionSignClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionSignClause" ):
                return visitor.visitScreenDescriptionSignClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionSignClause(self):

        localctx = CopyBookParser.ScreenDescriptionSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_screenDescriptionSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==450:
                self.state = 2831
                self.match(CopyBookParser.SIGN)
                self.state = 2833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2832
                    self.match(CopyBookParser.IS)




            self.state = 2837
            _la = self._input.LA(1)
            if not(_la==276 or _la==506):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==439:
                self.state = 2838
                self.match(CopyBookParser.SEPARATE)
                self.state = 2840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 2839
                    self.match(CopyBookParser.CHARACTER)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionAutoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(CopyBookParser.AUTO, 0)

        def AUTO_SKIP(self):
            return self.getToken(CopyBookParser.AUTO_SKIP, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionAutoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionAutoClause" ):
                listener.enterScreenDescriptionAutoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionAutoClause" ):
                listener.exitScreenDescriptionAutoClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionAutoClause" ):
                return visitor.visitScreenDescriptionAutoClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionAutoClause(self):

        localctx = CopyBookParser.ScreenDescriptionAutoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_screenDescriptionAutoClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2844
            _la = self._input.LA(1)
            if not(_la==34 or _la==35):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionSecureClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECURE(self):
            return self.getToken(CopyBookParser.SECURE, 0)

        def NO_ECHO(self):
            return self.getToken(CopyBookParser.NO_ECHO, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionSecureClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionSecureClause" ):
                listener.enterScreenDescriptionSecureClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionSecureClause" ):
                listener.exitScreenDescriptionSecureClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionSecureClause" ):
                return visitor.visitScreenDescriptionSecureClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionSecureClause(self):

        localctx = CopyBookParser.ScreenDescriptionSecureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_screenDescriptionSecureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2846
            _la = self._input.LA(1)
            if not(_la==323 or _la==432):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionRequiredClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRED(self):
            return self.getToken(CopyBookParser.REQUIRED, 0)

        def EMPTY_CHECK(self):
            return self.getToken(CopyBookParser.EMPTY_CHECK, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionRequiredClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionRequiredClause" ):
                listener.enterScreenDescriptionRequiredClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionRequiredClause" ):
                listener.exitScreenDescriptionRequiredClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionRequiredClause" ):
                return visitor.visitScreenDescriptionRequiredClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionRequiredClause(self):

        localctx = CopyBookParser.ScreenDescriptionRequiredClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_screenDescriptionRequiredClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2848
            _la = self._input.LA(1)
            if not(_la==161 or _la==410):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionPromptClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(CopyBookParser.PROMPT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def screenDescriptionPromptOccursClause(self):
            return self.getTypedRuleContext(CopyBookParser.ScreenDescriptionPromptOccursClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionPromptClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionPromptClause" ):
                listener.enterScreenDescriptionPromptClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionPromptClause" ):
                listener.exitScreenDescriptionPromptClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionPromptClause" ):
                return visitor.visitScreenDescriptionPromptClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionPromptClause(self):

        localctx = CopyBookParser.ScreenDescriptionPromptClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_screenDescriptionPromptClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2850
            self.match(CopyBookParser.PROMPT)
            self.state = 2852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 2851
                self.match(CopyBookParser.CHARACTER)


            self.state = 2855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2854
                self.match(CopyBookParser.IS)


            self.state = 2859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2857
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2858
                self.literal()
                pass


            self.state = 2862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==333:
                self.state = 2861
                self.screenDescriptionPromptOccursClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionPromptOccursClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCCURS(self):
            return self.getToken(CopyBookParser.OCCURS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def TIMES(self):
            return self.getToken(CopyBookParser.TIMES, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionPromptOccursClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionPromptOccursClause" ):
                listener.enterScreenDescriptionPromptOccursClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionPromptOccursClause" ):
                listener.exitScreenDescriptionPromptOccursClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionPromptOccursClause" ):
                return visitor.visitScreenDescriptionPromptOccursClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionPromptOccursClause(self):

        localctx = CopyBookParser.ScreenDescriptionPromptOccursClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_screenDescriptionPromptOccursClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2864
            self.match(CopyBookParser.OCCURS)
            self.state = 2865
            self.integerLiteral()
            self.state = 2867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==499:
                self.state = 2866
                self.match(CopyBookParser.TIMES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionFullClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(CopyBookParser.FULL, 0)

        def LENGTH_CHECK(self):
            return self.getToken(CopyBookParser.LENGTH_CHECK, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionFullClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionFullClause" ):
                listener.enterScreenDescriptionFullClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionFullClause" ):
                listener.exitScreenDescriptionFullClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionFullClause" ):
                return visitor.visitScreenDescriptionFullClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionFullClause(self):

        localctx = CopyBookParser.ScreenDescriptionFullClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_screenDescriptionFullClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2869
            _la = self._input.LA(1)
            if not(_la==222 or _la==280):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenDescriptionZeroFillClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZERO_FILL(self):
            return self.getToken(CopyBookParser.ZERO_FILL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_screenDescriptionZeroFillClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenDescriptionZeroFillClause" ):
                listener.enterScreenDescriptionZeroFillClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenDescriptionZeroFillClause" ):
                listener.exitScreenDescriptionZeroFillClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenDescriptionZeroFillClause" ):
                return visitor.visitScreenDescriptionZeroFillClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionZeroFillClause(self):

        localctx = CopyBookParser.ScreenDescriptionZeroFillClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_screenDescriptionZeroFillClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2871
            self.match(CopyBookParser.ZERO_FILL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(CopyBookParser.REPORT, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def reportDescription(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportDescriptionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportDescriptionContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportSection" ):
                listener.enterReportSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportSection" ):
                listener.exitReportSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportSection" ):
                return visitor.visitReportSection(self)
            else:
                return visitor.visitChildren(self)




    def reportSection(self):

        localctx = CopyBookParser.ReportSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_reportSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.match(CopyBookParser.REPORT)
            self.state = 2874
            self.match(CopyBookParser.SECTION)
            self.state = 2875
            self.match(CopyBookParser.DOT_FS)
            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==384:
                self.state = 2876
                self.reportDescription()
                self.state = 2881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reportDescriptionEntry(self):
            return self.getTypedRuleContext(CopyBookParser.ReportDescriptionEntryContext,0)


        def reportGroupDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupDescriptionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescription

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescription" ):
                listener.enterReportDescription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescription" ):
                listener.exitReportDescription(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescription" ):
                return visitor.visitReportDescription(self)
            else:
                return visitor.visitChildren(self)




    def reportDescription(self):

        localctx = CopyBookParser.ReportDescriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_reportDescription)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2882
            self.reportDescriptionEntry()
            self.state = 2884 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2883
                self.reportGroupDescriptionEntry()
                self.state = 2886 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 15) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RD(self):
            return self.getToken(CopyBookParser.RD, 0)

        def reportName(self):
            return self.getTypedRuleContext(CopyBookParser.ReportNameContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def reportDescriptionGlobalClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportDescriptionGlobalClauseContext,0)


        def reportDescriptionPageLimitClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportDescriptionPageLimitClauseContext,0)


        def reportDescriptionHeadingClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportDescriptionHeadingClauseContext,0)


        def reportDescriptionFirstDetailClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportDescriptionFirstDetailClauseContext,0)


        def reportDescriptionLastDetailClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportDescriptionLastDetailClauseContext,0)


        def reportDescriptionFootingClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportDescriptionFootingClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescriptionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescriptionEntry" ):
                listener.enterReportDescriptionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescriptionEntry" ):
                listener.exitReportDescriptionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescriptionEntry" ):
                return visitor.visitReportDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionEntry(self):

        localctx = CopyBookParser.ReportDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_reportDescriptionEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2888
            self.match(CopyBookParser.RD)
            self.state = 2889
            self.reportName()
            self.state = 2891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==229 or _la==261:
                self.state = 2890
                self.reportDescriptionGlobalClause()


            self.state = 2906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 2893
                self.reportDescriptionPageLimitClause()
                self.state = 2895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==235:
                    self.state = 2894
                    self.reportDescriptionHeadingClause()


                self.state = 2898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==216:
                    self.state = 2897
                    self.reportDescriptionFirstDetailClause()


                self.state = 2901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 2900
                    self.reportDescriptionLastDetailClause()


                self.state = 2904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2903
                    self.reportDescriptionFootingClause()




            self.state = 2908
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionGlobalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(CopyBookParser.GLOBAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescriptionGlobalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescriptionGlobalClause" ):
                listener.enterReportDescriptionGlobalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescriptionGlobalClause" ):
                listener.exitReportDescriptionGlobalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescriptionGlobalClause" ):
                return visitor.visitReportDescriptionGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionGlobalClause(self):

        localctx = CopyBookParser.ReportDescriptionGlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_reportDescriptionGlobalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2910
                self.match(CopyBookParser.IS)


            self.state = 2913
            self.match(CopyBookParser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionPageLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(CopyBookParser.PAGE, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def LIMIT(self):
            return self.getToken(CopyBookParser.LIMIT, 0)

        def LIMITS(self):
            return self.getToken(CopyBookParser.LIMITS, 0)

        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def LINES(self):
            return self.getToken(CopyBookParser.LINES, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescriptionPageLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescriptionPageLimitClause" ):
                listener.enterReportDescriptionPageLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescriptionPageLimitClause" ):
                listener.exitReportDescriptionPageLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescriptionPageLimitClause" ):
                return visitor.visitReportDescriptionPageLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionPageLimitClause(self):

        localctx = CopyBookParser.ReportDescriptionPageLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_reportDescriptionPageLimitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2915
            self.match(CopyBookParser.PAGE)
            self.state = 2924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [285]:
                self.state = 2916
                self.match(CopyBookParser.LIMIT)
                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2917
                    self.match(CopyBookParser.IS)


                pass
            elif token in [286]:
                self.state = 2920
                self.match(CopyBookParser.LIMITS)
                self.state = 2922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 2921
                    self.match(CopyBookParser.ARE)


                pass
            elif token in [570, 571, 572, 573]:
                pass
            else:
                pass
            self.state = 2926
            self.integerLiteral()
            self.state = 2928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289 or _la==290:
                self.state = 2927
                _la = self._input.LA(1)
                if not(_la==289 or _la==290):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionHeadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEADING(self):
            return self.getToken(CopyBookParser.HEADING, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescriptionHeadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescriptionHeadingClause" ):
                listener.enterReportDescriptionHeadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescriptionHeadingClause" ):
                listener.exitReportDescriptionHeadingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescriptionHeadingClause" ):
                return visitor.visitReportDescriptionHeadingClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionHeadingClause(self):

        localctx = CopyBookParser.ReportDescriptionHeadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_reportDescriptionHeadingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2930
            self.match(CopyBookParser.HEADING)
            self.state = 2931
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionFirstDetailClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(CopyBookParser.FIRST, 0)

        def DETAIL(self):
            return self.getToken(CopyBookParser.DETAIL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescriptionFirstDetailClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescriptionFirstDetailClause" ):
                listener.enterReportDescriptionFirstDetailClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescriptionFirstDetailClause" ):
                listener.exitReportDescriptionFirstDetailClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescriptionFirstDetailClause" ):
                return visitor.visitReportDescriptionFirstDetailClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionFirstDetailClause(self):

        localctx = CopyBookParser.ReportDescriptionFirstDetailClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_reportDescriptionFirstDetailClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.match(CopyBookParser.FIRST)
            self.state = 2934
            self.match(CopyBookParser.DETAIL)
            self.state = 2935
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionLastDetailClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST(self):
            return self.getToken(CopyBookParser.LAST, 0)

        def DETAIL(self):
            return self.getToken(CopyBookParser.DETAIL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescriptionLastDetailClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescriptionLastDetailClause" ):
                listener.enterReportDescriptionLastDetailClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescriptionLastDetailClause" ):
                listener.exitReportDescriptionLastDetailClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescriptionLastDetailClause" ):
                return visitor.visitReportDescriptionLastDetailClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionLastDetailClause(self):

        localctx = CopyBookParser.ReportDescriptionLastDetailClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_reportDescriptionLastDetailClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2937
            self.match(CopyBookParser.LAST)
            self.state = 2938
            self.match(CopyBookParser.DETAIL)
            self.state = 2939
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportDescriptionFootingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOOTING(self):
            return self.getToken(CopyBookParser.FOOTING, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportDescriptionFootingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportDescriptionFootingClause" ):
                listener.enterReportDescriptionFootingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportDescriptionFootingClause" ):
                listener.exitReportDescriptionFootingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportDescriptionFootingClause" ):
                return visitor.visitReportDescriptionFootingClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionFootingClause(self):

        localctx = CopyBookParser.ReportDescriptionFootingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_reportDescriptionFootingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2941
            self.match(CopyBookParser.FOOTING)
            self.state = 2942
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupDescriptionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reportGroupDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupDescriptionEntryFormat1Context,0)


        def reportGroupDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupDescriptionEntryFormat2Context,0)


        def reportGroupDescriptionEntryFormat3(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupDescriptionEntryFormat3Context,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupDescriptionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupDescriptionEntry" ):
                listener.enterReportGroupDescriptionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupDescriptionEntry" ):
                listener.exitReportGroupDescriptionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupDescriptionEntry" ):
                return visitor.visitReportGroupDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntry(self):

        localctx = CopyBookParser.ReportGroupDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_reportGroupDescriptionEntry)
        try:
            self.state = 2947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2944
                self.reportGroupDescriptionEntryFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2945
                self.reportGroupDescriptionEntryFormat2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2946
                self.reportGroupDescriptionEntryFormat3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupDescriptionEntryFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def reportGroupTypeClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypeClauseContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def reportGroupLineNumberClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupLineNumberClauseContext,0)


        def reportGroupNextGroupClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupNextGroupClauseContext,0)


        def reportGroupUsageClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupUsageClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupDescriptionEntryFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupDescriptionEntryFormat1" ):
                listener.enterReportGroupDescriptionEntryFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupDescriptionEntryFormat1" ):
                listener.exitReportGroupDescriptionEntryFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupDescriptionEntryFormat1" ):
                return visitor.visitReportGroupDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntryFormat1(self):

        localctx = CopyBookParser.ReportGroupDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_reportGroupDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2949
            self.integerLiteral()
            self.state = 2950
            self.dataName()
            self.state = 2952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261 or _la==289 or _la==327 or _la==360 or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 15) != 0):
                self.state = 2951
                self.reportGroupLineNumberClause()


            self.state = 2955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==320:
                self.state = 2954
                self.reportGroupNextGroupClause()


            self.state = 2957
            self.reportGroupTypeClause()
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147 or _la==148 or _la==517:
                self.state = 2958
                self.reportGroupUsageClause()


            self.state = 2961
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupDescriptionEntryFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def reportGroupUsageClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupUsageClauseContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def reportGroupLineNumberClause(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupLineNumberClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupDescriptionEntryFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupDescriptionEntryFormat2" ):
                listener.enterReportGroupDescriptionEntryFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupDescriptionEntryFormat2" ):
                listener.exitReportGroupDescriptionEntryFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupDescriptionEntryFormat2" ):
                return visitor.visitReportGroupDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntryFormat2(self):

        localctx = CopyBookParser.ReportGroupDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_reportGroupDescriptionEntryFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self.integerLiteral()
            self.state = 2965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2964
                self.dataName()


            self.state = 2968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261 or _la==289 or _la==327 or _la==360 or ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 15) != 0):
                self.state = 2967
                self.reportGroupLineNumberClause()


            self.state = 2970
            self.reportGroupUsageClause()
            self.state = 2971
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupDescriptionEntryFormat3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def reportGroupPictureClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupPictureClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupPictureClauseContext,i)


        def reportGroupUsageClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupUsageClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupUsageClauseContext,i)


        def reportGroupSignClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupSignClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupSignClauseContext,i)


        def reportGroupJustifiedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupJustifiedClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupJustifiedClauseContext,i)


        def reportGroupBlankWhenZeroClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupBlankWhenZeroClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupBlankWhenZeroClauseContext,i)


        def reportGroupLineNumberClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupLineNumberClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupLineNumberClauseContext,i)


        def reportGroupColumnNumberClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupColumnNumberClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupColumnNumberClauseContext,i)


        def reportGroupIndicateClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupIndicateClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupIndicateClauseContext,i)


        def reportGroupSourceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupSourceClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupSourceClauseContext,i)


        def reportGroupValueClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupValueClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupValueClauseContext,i)


        def reportGroupSumClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupSumClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupSumClauseContext,i)


        def reportGroupResetClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportGroupResetClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportGroupResetClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupDescriptionEntryFormat3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupDescriptionEntryFormat3" ):
                listener.enterReportGroupDescriptionEntryFormat3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupDescriptionEntryFormat3" ):
                listener.exitReportGroupDescriptionEntryFormat3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupDescriptionEntryFormat3" ):
                return visitor.visitReportGroupDescriptionEntryFormat3(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntryFormat3(self):

        localctx = CopyBookParser.ReportGroupDescriptionEntryFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_reportGroupDescriptionEntryFormat3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self.integerLiteral()
            self.state = 2975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2974
                self.dataName()


            self.state = 2993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47 or _la==77 or _la==147 or _la==148 or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 72057595916976129) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 15032385537) != 0) or ((((_la - 414)) & ~0x3f) == 0 and ((1 << (_la - 414)) & 4611756455891042305) != 0) or ((((_la - 517)) & ~0x3f) == 0 and ((1 << (_la - 517)) & 135107988821114889) != 0):
                self.state = 2991
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [358, 359]:
                    self.state = 2977
                    self.reportGroupPictureClause()
                    pass
                elif token in [147, 148, 517]:
                    self.state = 2978
                    self.reportGroupUsageClause()
                    pass
                elif token in [450]:
                    self.state = 2979
                    self.reportGroupSignClause()
                    pass
                elif token in [262, 263]:
                    self.state = 2980
                    self.reportGroupJustifiedClause()
                    pass
                elif token in [47]:
                    self.state = 2981
                    self.reportGroupBlankWhenZeroClause()
                    pass
                elif token in [261, 289, 327, 360, 570, 571, 572, 573]:
                    self.state = 2982
                    self.reportGroupLineNumberClause()
                    pass
                elif token in [77]:
                    self.state = 2983
                    self.reportGroupColumnNumberClause()
                    pass
                elif token in [414, 460, 476, 520]:
                    self.state = 2988
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [460]:
                        self.state = 2984
                        self.reportGroupSourceClause()
                        pass
                    elif token in [520]:
                        self.state = 2985
                        self.reportGroupValueClause()
                        pass
                    elif token in [476]:
                        self.state = 2986
                        self.reportGroupSumClause()
                        pass
                    elif token in [414]:
                        self.state = 2987
                        self.reportGroupResetClause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [233]:
                    self.state = 2990
                    self.reportGroupIndicateClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2996
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupBlankWhenZeroClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(CopyBookParser.BLANK, 0)

        def ZERO(self):
            return self.getToken(CopyBookParser.ZERO, 0)

        def WHEN(self):
            return self.getToken(CopyBookParser.WHEN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupBlankWhenZeroClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupBlankWhenZeroClause" ):
                listener.enterReportGroupBlankWhenZeroClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupBlankWhenZeroClause" ):
                listener.exitReportGroupBlankWhenZeroClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupBlankWhenZeroClause" ):
                return visitor.visitReportGroupBlankWhenZeroClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupBlankWhenZeroClause(self):

        localctx = CopyBookParser.ReportGroupBlankWhenZeroClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_reportGroupBlankWhenZeroClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(CopyBookParser.BLANK)
            self.state = 3000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==525:
                self.state = 2999
                self.match(CopyBookParser.WHEN)


            self.state = 3002
            self.match(CopyBookParser.ZERO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupColumnNumberClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(CopyBookParser.COLUMN, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def NUMBER(self):
            return self.getToken(CopyBookParser.NUMBER, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupColumnNumberClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupColumnNumberClause" ):
                listener.enterReportGroupColumnNumberClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupColumnNumberClause" ):
                listener.exitReportGroupColumnNumberClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupColumnNumberClause" ):
                return visitor.visitReportGroupColumnNumberClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupColumnNumberClause(self):

        localctx = CopyBookParser.ReportGroupColumnNumberClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_reportGroupColumnNumberClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3004
            self.match(CopyBookParser.COLUMN)
            self.state = 3006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==327:
                self.state = 3005
                self.match(CopyBookParser.NUMBER)


            self.state = 3009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3008
                self.match(CopyBookParser.IS)


            self.state = 3011
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupIndicateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(CopyBookParser.GROUP, 0)

        def INDICATE(self):
            return self.getToken(CopyBookParser.INDICATE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupIndicateClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupIndicateClause" ):
                listener.enterReportGroupIndicateClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupIndicateClause" ):
                listener.exitReportGroupIndicateClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupIndicateClause" ):
                return visitor.visitReportGroupIndicateClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupIndicateClause(self):

        localctx = CopyBookParser.ReportGroupIndicateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_reportGroupIndicateClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3013
            self.match(CopyBookParser.GROUP)
            self.state = 3015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 3014
                self.match(CopyBookParser.INDICATE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupJustifiedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JUSTIFIED(self):
            return self.getToken(CopyBookParser.JUSTIFIED, 0)

        def JUST(self):
            return self.getToken(CopyBookParser.JUST, 0)

        def RIGHT(self):
            return self.getToken(CopyBookParser.RIGHT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupJustifiedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupJustifiedClause" ):
                listener.enterReportGroupJustifiedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupJustifiedClause" ):
                listener.exitReportGroupJustifiedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupJustifiedClause" ):
                return visitor.visitReportGroupJustifiedClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupJustifiedClause(self):

        localctx = CopyBookParser.ReportGroupJustifiedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_reportGroupJustifiedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3017
            _la = self._input.LA(1)
            if not(_la==262 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==423:
                self.state = 3018
                self.match(CopyBookParser.RIGHT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupLineNumberClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reportGroupLineNumberNextPage(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupLineNumberNextPageContext,0)


        def reportGroupLineNumberPlus(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupLineNumberPlusContext,0)


        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def NUMBER(self):
            return self.getToken(CopyBookParser.NUMBER, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupLineNumberClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupLineNumberClause" ):
                listener.enterReportGroupLineNumberClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupLineNumberClause" ):
                listener.exitReportGroupLineNumberClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupLineNumberClause" ):
                return visitor.visitReportGroupLineNumberClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupLineNumberClause(self):

        localctx = CopyBookParser.ReportGroupLineNumberClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_reportGroupLineNumberClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 3021
                self.match(CopyBookParser.LINE)


            self.state = 3025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==327:
                self.state = 3024
                self.match(CopyBookParser.NUMBER)


            self.state = 3028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3027
                self.match(CopyBookParser.IS)


            self.state = 3032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [570, 571, 572, 573]:
                self.state = 3030
                self.reportGroupLineNumberNextPage()
                pass
            elif token in [360]:
                self.state = 3031
                self.reportGroupLineNumberPlus()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupLineNumberNextPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def NEXT(self):
            return self.getToken(CopyBookParser.NEXT, 0)

        def PAGE(self):
            return self.getToken(CopyBookParser.PAGE, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupLineNumberNextPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupLineNumberNextPage" ):
                listener.enterReportGroupLineNumberNextPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupLineNumberNextPage" ):
                listener.exitReportGroupLineNumberNextPage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupLineNumberNextPage" ):
                return visitor.visitReportGroupLineNumberNextPage(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupLineNumberNextPage(self):

        localctx = CopyBookParser.ReportGroupLineNumberNextPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_reportGroupLineNumberNextPage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3034
            self.integerLiteral()
            self.state = 3040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.state = 3036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==338:
                    self.state = 3035
                    self.match(CopyBookParser.ON)


                self.state = 3038
                self.match(CopyBookParser.NEXT)
                self.state = 3039
                self.match(CopyBookParser.PAGE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupLineNumberPlusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CopyBookParser.PLUS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupLineNumberPlus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupLineNumberPlus" ):
                listener.enterReportGroupLineNumberPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupLineNumberPlus" ):
                listener.exitReportGroupLineNumberPlus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupLineNumberPlus" ):
                return visitor.visitReportGroupLineNumberPlus(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupLineNumberPlus(self):

        localctx = CopyBookParser.ReportGroupLineNumberPlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_reportGroupLineNumberPlus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3042
            self.match(CopyBookParser.PLUS)
            self.state = 3043
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupNextGroupClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(CopyBookParser.NEXT, 0)

        def GROUP(self):
            return self.getToken(CopyBookParser.GROUP, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def reportGroupNextGroupNextPage(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupNextGroupNextPageContext,0)


        def reportGroupNextGroupPlus(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupNextGroupPlusContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupNextGroupClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupNextGroupClause" ):
                listener.enterReportGroupNextGroupClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupNextGroupClause" ):
                listener.exitReportGroupNextGroupClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupNextGroupClause" ):
                return visitor.visitReportGroupNextGroupClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupNextGroupClause(self):

        localctx = CopyBookParser.ReportGroupNextGroupClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_reportGroupNextGroupClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3045
            self.match(CopyBookParser.NEXT)
            self.state = 3046
            self.match(CopyBookParser.GROUP)
            self.state = 3048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3047
                self.match(CopyBookParser.IS)


            self.state = 3053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [570, 571, 572, 573]:
                self.state = 3050
                self.integerLiteral()
                pass
            elif token in [320]:
                self.state = 3051
                self.reportGroupNextGroupNextPage()
                pass
            elif token in [360]:
                self.state = 3052
                self.reportGroupNextGroupPlus()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupNextGroupPlusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(CopyBookParser.PLUS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupNextGroupPlus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupNextGroupPlus" ):
                listener.enterReportGroupNextGroupPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupNextGroupPlus" ):
                listener.exitReportGroupNextGroupPlus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupNextGroupPlus" ):
                return visitor.visitReportGroupNextGroupPlus(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupNextGroupPlus(self):

        localctx = CopyBookParser.ReportGroupNextGroupPlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_reportGroupNextGroupPlus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3055
            self.match(CopyBookParser.PLUS)
            self.state = 3056
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupNextGroupNextPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(CopyBookParser.NEXT, 0)

        def PAGE(self):
            return self.getToken(CopyBookParser.PAGE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupNextGroupNextPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupNextGroupNextPage" ):
                listener.enterReportGroupNextGroupNextPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupNextGroupNextPage" ):
                listener.exitReportGroupNextGroupNextPage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupNextGroupNextPage" ):
                return visitor.visitReportGroupNextGroupNextPage(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupNextGroupNextPage(self):

        localctx = CopyBookParser.ReportGroupNextGroupNextPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_reportGroupNextGroupNextPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3058
            self.match(CopyBookParser.NEXT)
            self.state = 3059
            self.match(CopyBookParser.PAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupPictureClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pictureString(self):
            return self.getTypedRuleContext(CopyBookParser.PictureStringContext,0)


        def PICTURE(self):
            return self.getToken(CopyBookParser.PICTURE, 0)

        def PIC(self):
            return self.getToken(CopyBookParser.PIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupPictureClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupPictureClause" ):
                listener.enterReportGroupPictureClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupPictureClause" ):
                listener.exitReportGroupPictureClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupPictureClause" ):
                return visitor.visitReportGroupPictureClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupPictureClause(self):

        localctx = CopyBookParser.ReportGroupPictureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_reportGroupPictureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            _la = self._input.LA(1)
            if not(_la==358 or _la==359):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3062
                self.match(CopyBookParser.IS)


            self.state = 3065
            self.pictureString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupResetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(CopyBookParser.RESET, 0)

        def FINAL(self):
            return self.getToken(CopyBookParser.FINAL, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupResetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupResetClause" ):
                listener.enterReportGroupResetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupResetClause" ):
                listener.exitReportGroupResetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupResetClause" ):
                return visitor.visitReportGroupResetClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupResetClause(self):

        localctx = CopyBookParser.ReportGroupResetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_reportGroupResetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3067
            self.match(CopyBookParser.RESET)
            self.state = 3069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 3068
                self.match(CopyBookParser.ON)


            self.state = 3073
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [215]:
                self.state = 3071
                self.match(CopyBookParser.FINAL)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 3072
                self.dataName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupSignClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGN(self):
            return self.getToken(CopyBookParser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(CopyBookParser.SEPARATE, 0)

        def LEADING(self):
            return self.getToken(CopyBookParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(CopyBookParser.TRAILING, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupSignClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupSignClause" ):
                listener.enterReportGroupSignClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupSignClause" ):
                listener.exitReportGroupSignClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupSignClause" ):
                return visitor.visitReportGroupSignClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupSignClause(self):

        localctx = CopyBookParser.ReportGroupSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_reportGroupSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3075
            self.match(CopyBookParser.SIGN)
            self.state = 3077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3076
                self.match(CopyBookParser.IS)


            self.state = 3079
            _la = self._input.LA(1)
            if not(_la==276 or _la==506):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3080
            self.match(CopyBookParser.SEPARATE)
            self.state = 3082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 3081
                self.match(CopyBookParser.CHARACTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupSourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE(self):
            return self.getToken(CopyBookParser.SOURCE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupSourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupSourceClause" ):
                listener.enterReportGroupSourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupSourceClause" ):
                listener.exitReportGroupSourceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupSourceClause" ):
                return visitor.visitReportGroupSourceClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupSourceClause(self):

        localctx = CopyBookParser.ReportGroupSourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_reportGroupSourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3084
            self.match(CopyBookParser.SOURCE)
            self.state = 3086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3085
                self.match(CopyBookParser.IS)


            self.state = 3088
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupSumClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(CopyBookParser.SUM, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IdentifierContext,i)


        def UPON(self):
            return self.getToken(CopyBookParser.UPON, 0)

        def dataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataNameContext,i)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMMACHAR)
            else:
                return self.getToken(CopyBookParser.COMMACHAR, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupSumClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupSumClause" ):
                listener.enterReportGroupSumClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupSumClause" ):
                listener.exitReportGroupSumClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupSumClause" ):
                return visitor.visitReportGroupSumClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupSumClause(self):

        localctx = CopyBookParser.ReportGroupSumClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_reportGroupSumClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3090
            self.match(CopyBookParser.SUM)
            self.state = 3091
            self.identifier()
            self.state = 3098
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,364,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3093
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                    if la_ == 1:
                        self.state = 3092
                        self.match(CopyBookParser.COMMACHAR)


                    self.state = 3095
                    self.identifier() 
                self.state = 3100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,364,self._ctx)

            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==516:
                self.state = 3101
                self.match(CopyBookParser.UPON)
                self.state = 3102
                self.dataName()
                self.state = 3109
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,366,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3104
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                        if la_ == 1:
                            self.state = 3103
                            self.match(CopyBookParser.COMMACHAR)


                        self.state = 3106
                        self.dataName() 
                    self.state = 3111
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,366,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(CopyBookParser.TYPE, 0)

        def reportGroupTypeReportHeading(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypeReportHeadingContext,0)


        def reportGroupTypePageHeading(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypePageHeadingContext,0)


        def reportGroupTypeControlHeading(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypeControlHeadingContext,0)


        def reportGroupTypeDetail(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypeDetailContext,0)


        def reportGroupTypeControlFooting(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypeControlFootingContext,0)


        def reportGroupTypePageFooting(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypePageFootingContext,0)


        def reportGroupTypeReportFooting(self):
            return self.getTypedRuleContext(CopyBookParser.ReportGroupTypeReportFootingContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypeClause" ):
                listener.enterReportGroupTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypeClause" ):
                listener.exitReportGroupTypeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypeClause" ):
                return visitor.visitReportGroupTypeClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeClause(self):

        localctx = CopyBookParser.ReportGroupTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_reportGroupTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3114
            self.match(CopyBookParser.TYPE)
            self.state = 3116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3115
                self.match(CopyBookParser.IS)


            self.state = 3125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 3118
                self.reportGroupTypeReportHeading()
                pass

            elif la_ == 2:
                self.state = 3119
                self.reportGroupTypePageHeading()
                pass

            elif la_ == 3:
                self.state = 3120
                self.reportGroupTypeControlHeading()
                pass

            elif la_ == 4:
                self.state = 3121
                self.reportGroupTypeDetail()
                pass

            elif la_ == 5:
                self.state = 3122
                self.reportGroupTypeControlFooting()
                pass

            elif la_ == 6:
                self.state = 3123
                self.reportGroupTypePageFooting()
                pass

            elif la_ == 7:
                self.state = 3124
                self.reportGroupTypeReportFooting()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypeReportHeadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(CopyBookParser.REPORT, 0)

        def HEADING(self):
            return self.getToken(CopyBookParser.HEADING, 0)

        def RH(self):
            return self.getToken(CopyBookParser.RH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypeReportHeading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypeReportHeading" ):
                listener.enterReportGroupTypeReportHeading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypeReportHeading" ):
                listener.exitReportGroupTypeReportHeading(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypeReportHeading" ):
                return visitor.visitReportGroupTypeReportHeading(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeReportHeading(self):

        localctx = CopyBookParser.ReportGroupTypeReportHeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_reportGroupTypeReportHeading)
        try:
            self.state = 3130
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3127
                self.match(CopyBookParser.REPORT)
                self.state = 3128
                self.match(CopyBookParser.HEADING)
                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3129
                self.match(CopyBookParser.RH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypePageHeadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(CopyBookParser.PAGE, 0)

        def HEADING(self):
            return self.getToken(CopyBookParser.HEADING, 0)

        def PH(self):
            return self.getToken(CopyBookParser.PH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypePageHeading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypePageHeading" ):
                listener.enterReportGroupTypePageHeading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypePageHeading" ):
                listener.exitReportGroupTypePageHeading(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypePageHeading" ):
                return visitor.visitReportGroupTypePageHeading(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypePageHeading(self):

        localctx = CopyBookParser.ReportGroupTypePageHeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_reportGroupTypePageHeading)
        try:
            self.state = 3135
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [352]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3132
                self.match(CopyBookParser.PAGE)
                self.state = 3133
                self.match(CopyBookParser.HEADING)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3134
                self.match(CopyBookParser.PH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypeControlHeadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(CopyBookParser.CONTROL, 0)

        def HEADING(self):
            return self.getToken(CopyBookParser.HEADING, 0)

        def CH(self):
            return self.getToken(CopyBookParser.CH, 0)

        def FINAL(self):
            return self.getToken(CopyBookParser.FINAL, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypeControlHeading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypeControlHeading" ):
                listener.enterReportGroupTypeControlHeading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypeControlHeading" ):
                listener.exitReportGroupTypeControlHeading(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypeControlHeading" ):
                return visitor.visitReportGroupTypeControlHeading(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeControlHeading(self):

        localctx = CopyBookParser.ReportGroupTypeControlHeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_reportGroupTypeControlHeading)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.state = 3137
                self.match(CopyBookParser.CONTROL)
                self.state = 3138
                self.match(CopyBookParser.HEADING)
                pass
            elif token in [61]:
                self.state = 3139
                self.match(CopyBookParser.CH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [215]:
                self.state = 3142
                self.match(CopyBookParser.FINAL)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 3143
                self.dataName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypeDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETAIL(self):
            return self.getToken(CopyBookParser.DETAIL, 0)

        def DE(self):
            return self.getToken(CopyBookParser.DE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypeDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypeDetail" ):
                listener.enterReportGroupTypeDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypeDetail" ):
                listener.exitReportGroupTypeDetail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypeDetail" ):
                return visitor.visitReportGroupTypeDetail(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeDetail(self):

        localctx = CopyBookParser.ReportGroupTypeDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_reportGroupTypeDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            _la = self._input.LA(1)
            if not(_la==120 or _la==141):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypeControlFootingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(CopyBookParser.CONTROL, 0)

        def FOOTING(self):
            return self.getToken(CopyBookParser.FOOTING, 0)

        def CF(self):
            return self.getToken(CopyBookParser.CF, 0)

        def FINAL(self):
            return self.getToken(CopyBookParser.FINAL, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypeControlFooting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypeControlFooting" ):
                listener.enterReportGroupTypeControlFooting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypeControlFooting" ):
                listener.exitReportGroupTypeControlFooting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypeControlFooting" ):
                return visitor.visitReportGroupTypeControlFooting(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeControlFooting(self):

        localctx = CopyBookParser.ReportGroupTypeControlFootingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_reportGroupTypeControlFooting)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100]:
                self.state = 3148
                self.match(CopyBookParser.CONTROL)
                self.state = 3149
                self.match(CopyBookParser.FOOTING)
                pass
            elif token in [60]:
                self.state = 3150
                self.match(CopyBookParser.CF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [215]:
                self.state = 3153
                self.match(CopyBookParser.FINAL)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 3154
                self.dataName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupUsageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(CopyBookParser.DISPLAY, 0)

        def DISPLAY_1(self):
            return self.getToken(CopyBookParser.DISPLAY_1, 0)

        def USAGE(self):
            return self.getToken(CopyBookParser.USAGE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupUsageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupUsageClause" ):
                listener.enterReportGroupUsageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupUsageClause" ):
                listener.exitReportGroupUsageClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupUsageClause" ):
                return visitor.visitReportGroupUsageClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupUsageClause(self):

        localctx = CopyBookParser.ReportGroupUsageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_reportGroupUsageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==517:
                self.state = 3157
                self.match(CopyBookParser.USAGE)
                self.state = 3159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 3158
                    self.match(CopyBookParser.IS)




            self.state = 3163
            _la = self._input.LA(1)
            if not(_la==147 or _la==148):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypePageFootingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(CopyBookParser.PAGE, 0)

        def FOOTING(self):
            return self.getToken(CopyBookParser.FOOTING, 0)

        def PF(self):
            return self.getToken(CopyBookParser.PF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypePageFooting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypePageFooting" ):
                listener.enterReportGroupTypePageFooting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypePageFooting" ):
                listener.exitReportGroupTypePageFooting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypePageFooting" ):
                return visitor.visitReportGroupTypePageFooting(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypePageFooting(self):

        localctx = CopyBookParser.ReportGroupTypePageFootingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_reportGroupTypePageFooting)
        try:
            self.state = 3168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [352]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3165
                self.match(CopyBookParser.PAGE)
                self.state = 3166
                self.match(CopyBookParser.FOOTING)
                pass
            elif token in [356]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3167
                self.match(CopyBookParser.PF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupTypeReportFootingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(CopyBookParser.REPORT, 0)

        def FOOTING(self):
            return self.getToken(CopyBookParser.FOOTING, 0)

        def RF(self):
            return self.getToken(CopyBookParser.RF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupTypeReportFooting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupTypeReportFooting" ):
                listener.enterReportGroupTypeReportFooting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupTypeReportFooting" ):
                listener.exitReportGroupTypeReportFooting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupTypeReportFooting" ):
                return visitor.visitReportGroupTypeReportFooting(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeReportFooting(self):

        localctx = CopyBookParser.ReportGroupTypeReportFootingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_reportGroupTypeReportFooting)
        try:
            self.state = 3173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [407]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3170
                self.match(CopyBookParser.REPORT)
                self.state = 3171
                self.match(CopyBookParser.FOOTING)
                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3172
                self.match(CopyBookParser.RF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportGroupValueClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(CopyBookParser.VALUE, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_reportGroupValueClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportGroupValueClause" ):
                listener.enterReportGroupValueClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportGroupValueClause" ):
                listener.exitReportGroupValueClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportGroupValueClause" ):
                return visitor.visitReportGroupValueClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupValueClause(self):

        localctx = CopyBookParser.ReportGroupValueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_reportGroupValueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3175
            self.match(CopyBookParser.VALUE)
            self.state = 3177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3176
                self.match(CopyBookParser.IS)


            self.state = 3179
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramLibrarySectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM_LIBRARY(self):
            return self.getToken(CopyBookParser.PROGRAM_LIBRARY, 0)

        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def libraryDescriptionEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LibraryDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LibraryDescriptionEntryContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_programLibrarySection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramLibrarySection" ):
                listener.enterProgramLibrarySection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramLibrarySection" ):
                listener.exitProgramLibrarySection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramLibrarySection" ):
                return visitor.visitProgramLibrarySection(self)
            else:
                return visitor.visitChildren(self)




    def programLibrarySection(self):

        localctx = CopyBookParser.ProgramLibrarySectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_programLibrarySection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3181
            self.match(CopyBookParser.PROGRAM_LIBRARY)
            self.state = 3182
            self.match(CopyBookParser.SECTION)
            self.state = 3183
            self.match(CopyBookParser.DOT_FS)
            self.state = 3187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==274 or _la==275:
                self.state = 3184
                self.libraryDescriptionEntry()
                self.state = 3189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDescriptionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libraryDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryDescriptionEntryFormat1Context,0)


        def libraryDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryDescriptionEntryFormat2Context,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryDescriptionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDescriptionEntry" ):
                listener.enterLibraryDescriptionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDescriptionEntry" ):
                listener.exitLibraryDescriptionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryDescriptionEntry" ):
                return visitor.visitLibraryDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def libraryDescriptionEntry(self):

        localctx = CopyBookParser.LibraryDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_libraryDescriptionEntry)
        try:
            self.state = 3192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [275]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3190
                self.libraryDescriptionEntryFormat1()
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3191
                self.libraryDescriptionEntryFormat2()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDescriptionEntryFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LD(self):
            return self.getToken(CopyBookParser.LD, 0)

        def libraryName(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryNameContext,0)


        def EXPORT(self):
            return self.getToken(CopyBookParser.EXPORT, 0)

        def libraryAttributeClauseFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryAttributeClauseFormat1Context,0)


        def libraryEntryProcedureClauseFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureClauseFormat1Context,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryDescriptionEntryFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDescriptionEntryFormat1" ):
                listener.enterLibraryDescriptionEntryFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDescriptionEntryFormat1" ):
                listener.exitLibraryDescriptionEntryFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryDescriptionEntryFormat1" ):
                return visitor.visitLibraryDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def libraryDescriptionEntryFormat1(self):

        localctx = CopyBookParser.LibraryDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_libraryDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3194
            self.match(CopyBookParser.LD)
            self.state = 3195
            self.libraryName()
            self.state = 3196
            self.match(CopyBookParser.EXPORT)
            self.state = 3198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 3197
                self.libraryAttributeClauseFormat1()


            self.state = 3201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 3200
                self.libraryEntryProcedureClauseFormat1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDescriptionEntryFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LB(self):
            return self.getToken(CopyBookParser.LB, 0)

        def libraryName(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryNameContext,0)


        def IMPORT(self):
            return self.getToken(CopyBookParser.IMPORT, 0)

        def libraryIsGlobalClause(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryIsGlobalClauseContext,0)


        def libraryIsCommonClause(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryIsCommonClauseContext,0)


        def libraryAttributeClauseFormat2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LibraryAttributeClauseFormat2Context)
            else:
                return self.getTypedRuleContext(CopyBookParser.LibraryAttributeClauseFormat2Context,i)


        def libraryEntryProcedureClauseFormat2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LibraryEntryProcedureClauseFormat2Context)
            else:
                return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureClauseFormat2Context,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryDescriptionEntryFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDescriptionEntryFormat2" ):
                listener.enterLibraryDescriptionEntryFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDescriptionEntryFormat2" ):
                listener.exitLibraryDescriptionEntryFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryDescriptionEntryFormat2" ):
                return visitor.visitLibraryDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def libraryDescriptionEntryFormat2(self):

        localctx = CopyBookParser.LibraryDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_libraryDescriptionEntryFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3203
            self.match(CopyBookParser.LB)
            self.state = 3204
            self.libraryName()
            self.state = 3205
            self.match(CopyBookParser.IMPORT)
            self.state = 3207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.state = 3206
                self.libraryIsGlobalClause()


            self.state = 3210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81 or _la==261:
                self.state = 3209
                self.libraryIsCommonClause()


            self.state = 3216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==32 or _la==189:
                self.state = 3214
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 3212
                    self.libraryAttributeClauseFormat2()
                    pass
                elif token in [189]:
                    self.state = 3213
                    self.libraryEntryProcedureClauseFormat2()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryAttributeClauseFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(CopyBookParser.ATTRIBUTE, 0)

        def SHARING(self):
            return self.getToken(CopyBookParser.SHARING, 0)

        def DONTCARE(self):
            return self.getToken(CopyBookParser.DONTCARE, 0)

        def PRIVATE(self):
            return self.getToken(CopyBookParser.PRIVATE, 0)

        def SHAREDBYRUNUNIT(self):
            return self.getToken(CopyBookParser.SHAREDBYRUNUNIT, 0)

        def SHAREDBYALL(self):
            return self.getToken(CopyBookParser.SHAREDBYALL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryAttributeClauseFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryAttributeClauseFormat1" ):
                listener.enterLibraryAttributeClauseFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryAttributeClauseFormat1" ):
                listener.exitLibraryAttributeClauseFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryAttributeClauseFormat1" ):
                return visitor.visitLibraryAttributeClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeClauseFormat1(self):

        localctx = CopyBookParser.LibraryAttributeClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_libraryAttributeClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self.match(CopyBookParser.ATTRIBUTE)
            self.state = 3225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 3220
                self.match(CopyBookParser.SHARING)
                self.state = 3222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 3221
                    self.match(CopyBookParser.IS)


                self.state = 3224
                _la = self._input.LA(1)
                if not(_la==151 or _la==367 or _la==444 or _la==445):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryAttributeClauseFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(CopyBookParser.ATTRIBUTE, 0)

        def libraryAttributeFunction(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryAttributeFunctionContext,0)


        def LIBACCESS(self):
            return self.getToken(CopyBookParser.LIBACCESS, 0)

        def libraryAttributeParameter(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryAttributeParameterContext,0)


        def libraryAttributeTitle(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryAttributeTitleContext,0)


        def BYFUNCTION(self):
            return self.getToken(CopyBookParser.BYFUNCTION, 0)

        def BYTITLE(self):
            return self.getToken(CopyBookParser.BYTITLE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryAttributeClauseFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryAttributeClauseFormat2" ):
                listener.enterLibraryAttributeClauseFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryAttributeClauseFormat2" ):
                listener.exitLibraryAttributeClauseFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryAttributeClauseFormat2" ):
                return visitor.visitLibraryAttributeClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeClauseFormat2(self):

        localctx = CopyBookParser.LibraryAttributeClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_libraryAttributeClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3227
            self.match(CopyBookParser.ATTRIBUTE)
            self.state = 3229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 3228
                self.libraryAttributeFunction()


            self.state = 3236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==282:
                self.state = 3231
                self.match(CopyBookParser.LIBACCESS)
                self.state = 3233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 3232
                    self.match(CopyBookParser.IS)


                self.state = 3235
                _la = self._input.LA(1)
                if not(_la==53 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==283:
                self.state = 3238
                self.libraryAttributeParameter()


            self.state = 3242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==500:
                self.state = 3241
                self.libraryAttributeTitle()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryAttributeFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTIONNAME(self):
            return self.getToken(CopyBookParser.FUNCTIONNAME, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryAttributeFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryAttributeFunction" ):
                listener.enterLibraryAttributeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryAttributeFunction" ):
                listener.exitLibraryAttributeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryAttributeFunction" ):
                return visitor.visitLibraryAttributeFunction(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeFunction(self):

        localctx = CopyBookParser.LibraryAttributeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_libraryAttributeFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244
            self.match(CopyBookParser.FUNCTIONNAME)
            self.state = 3245
            self.match(CopyBookParser.IS)
            self.state = 3246
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryAttributeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIBPARAMETER(self):
            return self.getToken(CopyBookParser.LIBPARAMETER, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryAttributeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryAttributeParameter" ):
                listener.enterLibraryAttributeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryAttributeParameter" ):
                listener.exitLibraryAttributeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryAttributeParameter" ):
                return visitor.visitLibraryAttributeParameter(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeParameter(self):

        localctx = CopyBookParser.LibraryAttributeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_libraryAttributeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3248
            self.match(CopyBookParser.LIBPARAMETER)
            self.state = 3250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3249
                self.match(CopyBookParser.IS)


            self.state = 3252
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryAttributeTitleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TITLE(self):
            return self.getToken(CopyBookParser.TITLE, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryAttributeTitle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryAttributeTitle" ):
                listener.enterLibraryAttributeTitle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryAttributeTitle" ):
                listener.exitLibraryAttributeTitle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryAttributeTitle" ):
                return visitor.visitLibraryAttributeTitle(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeTitle(self):

        localctx = CopyBookParser.LibraryAttributeTitleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_libraryAttributeTitle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            self.match(CopyBookParser.TITLE)
            self.state = 3256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3255
                self.match(CopyBookParser.IS)


            self.state = 3258
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureClauseFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENTRY_PROCEDURE(self):
            return self.getToken(CopyBookParser.ENTRY_PROCEDURE, 0)

        def programName(self):
            return self.getTypedRuleContext(CopyBookParser.ProgramNameContext,0)


        def libraryEntryProcedureForClause(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureForClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureClauseFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureClauseFormat1" ):
                listener.enterLibraryEntryProcedureClauseFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureClauseFormat1" ):
                listener.exitLibraryEntryProcedureClauseFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureClauseFormat1" ):
                return visitor.visitLibraryEntryProcedureClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureClauseFormat1(self):

        localctx = CopyBookParser.LibraryEntryProcedureClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_libraryEntryProcedureClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3260
            self.match(CopyBookParser.ENTRY_PROCEDURE)
            self.state = 3261
            self.programName()
            self.state = 3263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 3262
                self.libraryEntryProcedureForClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureClauseFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENTRY_PROCEDURE(self):
            return self.getToken(CopyBookParser.ENTRY_PROCEDURE, 0)

        def programName(self):
            return self.getTypedRuleContext(CopyBookParser.ProgramNameContext,0)


        def libraryEntryProcedureForClause(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureForClauseContext,0)


        def libraryEntryProcedureWithClause(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureWithClauseContext,0)


        def libraryEntryProcedureUsingClause(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureUsingClauseContext,0)


        def libraryEntryProcedureGivingClause(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureGivingClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureClauseFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureClauseFormat2" ):
                listener.enterLibraryEntryProcedureClauseFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureClauseFormat2" ):
                listener.exitLibraryEntryProcedureClauseFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureClauseFormat2" ):
                return visitor.visitLibraryEntryProcedureClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureClauseFormat2(self):

        localctx = CopyBookParser.LibraryEntryProcedureClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_libraryEntryProcedureClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3265
            self.match(CopyBookParser.ENTRY_PROCEDURE)
            self.state = 3266
            self.programName()
            self.state = 3268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 3267
                self.libraryEntryProcedureForClause()


            self.state = 3271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 3270
                self.libraryEntryProcedureWithClause()


            self.state = 3274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==519:
                self.state = 3273
                self.libraryEntryProcedureUsingClause()


            self.state = 3277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==228:
                self.state = 3276
                self.libraryEntryProcedureGivingClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureForClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureForClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureForClause" ):
                listener.enterLibraryEntryProcedureForClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureForClause" ):
                listener.exitLibraryEntryProcedureForClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureForClause" ):
                return visitor.visitLibraryEntryProcedureForClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureForClause(self):

        localctx = CopyBookParser.LibraryEntryProcedureForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_libraryEntryProcedureForClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3279
            self.match(CopyBookParser.FOR)
            self.state = 3280
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureGivingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureGivingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureGivingClause" ):
                listener.enterLibraryEntryProcedureGivingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureGivingClause" ):
                listener.exitLibraryEntryProcedureGivingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureGivingClause" ):
                return visitor.visitLibraryEntryProcedureGivingClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureGivingClause(self):

        localctx = CopyBookParser.LibraryEntryProcedureGivingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_libraryEntryProcedureGivingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3282
            self.match(CopyBookParser.GIVING)
            self.state = 3283
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureUsingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def libraryEntryProcedureUsingName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LibraryEntryProcedureUsingNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureUsingNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureUsingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureUsingClause" ):
                listener.enterLibraryEntryProcedureUsingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureUsingClause" ):
                listener.exitLibraryEntryProcedureUsingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureUsingClause" ):
                return visitor.visitLibraryEntryProcedureUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureUsingClause(self):

        localctx = CopyBookParser.LibraryEntryProcedureUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_libraryEntryProcedureUsingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3285
            self.match(CopyBookParser.USING)
            self.state = 3287 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3286
                    self.libraryEntryProcedureUsingName()

                else:
                    raise NoViableAltException(self)
                self.state = 3289 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,403,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureUsingNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureUsingName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureUsingName" ):
                listener.enterLibraryEntryProcedureUsingName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureUsingName" ):
                listener.exitLibraryEntryProcedureUsingName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureUsingName" ):
                return visitor.visitLibraryEntryProcedureUsingName(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureUsingName(self):

        localctx = CopyBookParser.LibraryEntryProcedureUsingNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_libraryEntryProcedureUsingName)
        try:
            self.state = 3293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3291
                self.dataName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3292
                self.fileName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def libraryEntryProcedureWithName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LibraryEntryProcedureWithNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LibraryEntryProcedureWithNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureWithClause" ):
                listener.enterLibraryEntryProcedureWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureWithClause" ):
                listener.exitLibraryEntryProcedureWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureWithClause" ):
                return visitor.visitLibraryEntryProcedureWithClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureWithClause(self):

        localctx = CopyBookParser.LibraryEntryProcedureWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_libraryEntryProcedureWithClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3295
            self.match(CopyBookParser.WITH)
            self.state = 3297 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3296
                    self.libraryEntryProcedureWithName()

                else:
                    raise NoViableAltException(self)
                self.state = 3299 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,405,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryEntryProcedureWithNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localName(self):
            return self.getTypedRuleContext(CopyBookParser.LocalNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryEntryProcedureWithName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryEntryProcedureWithName" ):
                listener.enterLibraryEntryProcedureWithName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryEntryProcedureWithName" ):
                listener.exitLibraryEntryProcedureWithName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryEntryProcedureWithName" ):
                return visitor.visitLibraryEntryProcedureWithName(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureWithName(self):

        localctx = CopyBookParser.LibraryEntryProcedureWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_libraryEntryProcedureWithName)
        try:
            self.state = 3303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3301
                self.localName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3302
                self.fileName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryIsCommonClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMON(self):
            return self.getToken(CopyBookParser.COMMON, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryIsCommonClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryIsCommonClause" ):
                listener.enterLibraryIsCommonClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryIsCommonClause" ):
                listener.exitLibraryIsCommonClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryIsCommonClause" ):
                return visitor.visitLibraryIsCommonClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryIsCommonClause(self):

        localctx = CopyBookParser.LibraryIsCommonClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_libraryIsCommonClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3305
                self.match(CopyBookParser.IS)


            self.state = 3308
            self.match(CopyBookParser.COMMON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryIsGlobalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(CopyBookParser.GLOBAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryIsGlobalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryIsGlobalClause" ):
                listener.enterLibraryIsGlobalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryIsGlobalClause" ):
                listener.exitLibraryIsGlobalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryIsGlobalClause" ):
                return visitor.visitLibraryIsGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryIsGlobalClause(self):

        localctx = CopyBookParser.LibraryIsGlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_libraryIsGlobalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3310
                self.match(CopyBookParser.IS)


            self.state = 3313
            self.match(CopyBookParser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescriptionEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryFormat1Context,0)


        def dataDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryFormat2Context,0)


        def dataDescriptionEntryFormat3(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryFormat3Context,0)


        def dataDescriptionEntryExecSql(self):
            return self.getTypedRuleContext(CopyBookParser.DataDescriptionEntryExecSqlContext,0)


        def copyStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CopyStatementContext,0)


        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def replaceArea(self):
            return self.getTypedRuleContext(CopyBookParser.ReplaceAreaContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDescriptionEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDescriptionEntry" ):
                listener.enterDataDescriptionEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDescriptionEntry" ):
                listener.exitDataDescriptionEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDescriptionEntry" ):
                return visitor.visitDataDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntry(self):

        localctx = CopyBookParser.DataDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_dataDescriptionEntry)
        self._la = 0 # Token type
        try:
            self.state = 3323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [571, 573]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3315
                self.dataDescriptionEntryFormat1()
                pass
            elif token in [570]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3316
                self.dataDescriptionEntryFormat2()
                pass
            elif token in [572]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3317
                self.dataDescriptionEntryFormat3()
                pass
            elif token in [581]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3318
                self.dataDescriptionEntryExecSql()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3319
                self.copyStatement()
                self.state = 3320
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [405]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3322
                self.replaceArea()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(CopyBookParser.COPY, 0)

        def copySource(self):
            return self.getTypedRuleContext(CopyBookParser.CopySourceContext,0)


        def disjoinPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.DisjoinPhraseContext,0)


        def joinPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.JoinPhraseContext,0)


        def directoryPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DirectoryPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DirectoryPhraseContext,i)


        def familyPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FamilyPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FamilyPhraseContext,i)


        def replacingPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReplacingPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReplacingPhraseContext,i)


        def SUPPRESS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SUPPRESS)
            else:
                return self.getToken(CopyBookParser.SUPPRESS, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_copyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyStatement" ):
                listener.enterCopyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyStatement" ):
                listener.exitCopyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyStatement" ):
                return visitor.visitCopyStatement(self)
            else:
                return visitor.visitChildren(self)




    def copyStatement(self):

        localctx = CopyBookParser.CopyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_copyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.match(CopyBookParser.COPY)
            self.state = 3326
            self.copySource()
            self.state = 3335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,411,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3331
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [246, 335]:
                        self.state = 3327
                        self.directoryPhrase()
                        pass
                    elif token in [338]:
                        self.state = 3328
                        self.familyPhrase()
                        pass
                    elif token in [406]:
                        self.state = 3329
                        self.replacingPhrase()
                        pass
                    elif token in [477]:
                        self.state = 3330
                        self.match(CopyBookParser.SUPPRESS)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 3337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,411,self._ctx)

            self.state = 3341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 3338
                self.disjoinPhrase()
                self.state = 3339
                self.joinPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjoinPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISJOINING(self):
            return self.getToken(CopyBookParser.DISJOINING, 0)

        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_disjoinPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjoinPhrase" ):
                listener.enterDisjoinPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjoinPhrase" ):
                listener.exitDisjoinPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjoinPhrase" ):
                return visitor.visitDisjoinPhrase(self)
            else:
                return visitor.visitChildren(self)




    def disjoinPhrase(self):

        localctx = CopyBookParser.DisjoinPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_disjoinPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3343
            self.match(CopyBookParser.DISJOINING)
            self.state = 3344
            self.match(CopyBookParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOINING(self):
            return self.getToken(CopyBookParser.JOINING, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.IDENTIFIER)
            else:
                return self.getToken(CopyBookParser.IDENTIFIER, i)

        def AS(self):
            return self.getToken(CopyBookParser.AS, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_joinPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinPhrase" ):
                listener.enterJoinPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinPhrase" ):
                listener.exitJoinPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinPhrase" ):
                return visitor.visitJoinPhrase(self)
            else:
                return visitor.visitChildren(self)




    def joinPhrase(self):

        localctx = CopyBookParser.JoinPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_joinPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3346
            self.match(CopyBookParser.JOINING)
            self.state = 3347
            self.match(CopyBookParser.IDENTIFIER)
            self.state = 3348
            self.match(CopyBookParser.AS)
            self.state = 3349
            self.match(CopyBookParser.IDENTIFIER)
            self.state = 3351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.state = 3350
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def filename(self):
            return self.getTypedRuleContext(CopyBookParser.FilenameContext,0)


        def copyLibrary(self):
            return self.getTypedRuleContext(CopyBookParser.CopyLibraryContext,0)


        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_copySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopySource" ):
                listener.enterCopySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopySource" ):
                listener.exitCopySource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopySource" ):
                return visitor.visitCopySource(self)
            else:
                return visitor.visitChildren(self)




    def copySource(self):

        localctx = CopyBookParser.CopySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_copySource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.state = 3353
                self.literal()
                pass

            elif la_ == 2:
                self.state = 3354
                self.cobolWord()
                pass

            elif la_ == 3:
                self.state = 3355
                self.filename()
                pass


            self.state = 3360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3358
                _la = self._input.LA(1)
                if not(_la==246 or _la==335):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3359
                self.copyLibrary()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyLibraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_copyLibrary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyLibrary" ):
                listener.enterCopyLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyLibrary" ):
                listener.exitCopyLibrary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyLibrary" ):
                return visitor.visitCopyLibrary(self)
            else:
                return visitor.visitChildren(self)




    def copyLibrary(self):

        localctx = CopyBookParser.CopyLibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_copyLibrary)
        try:
            self.state = 3364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3362
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3363
                self.cobolWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(CopyBookParser.REPLACING, 0)

        def replaceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReplaceClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReplaceClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_replacingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacingPhrase" ):
                listener.enterReplacingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacingPhrase" ):
                listener.exitReplacingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacingPhrase" ):
                return visitor.visitReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def replacingPhrase(self):

        localctx = CopyBookParser.ReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_replacingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3366
            self.match(CopyBookParser.REPLACING)
            self.state = 3367
            self.replaceClause()
            self.state = 3371
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,417,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3368
                    self.replaceClause() 
                self.state = 3373
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceAreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def replaceByStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReplaceByStatementContext,0)


        def copyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CopyStatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CopyStatementContext,i)


        def charData(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CharDataContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CharDataContext,i)


        def replaceOffStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReplaceOffStatementContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_replaceArea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceArea" ):
                listener.enterReplaceArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceArea" ):
                listener.exitReplaceArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceArea" ):
                return visitor.visitReplaceArea(self)
            else:
                return visitor.visitChildren(self)




    def replaceArea(self):

        localctx = CopyBookParser.ReplaceAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_replaceArea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            self.replaceByStatement()
            self.state = 3379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3377
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [105]:
                        self.state = 3375
                        self.copyStatement()
                        pass
                    elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 79, 99, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 234, 246, 258, 267, 271, 272, 279, 292, 293, 315, 321, 322, 327, 333, 335, 336, 338, 341, 354, 372, 373, 378, 379, 386, 387, 393, 406, 415, 420, 427, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 539, 541, 542, 551, 552, 558, 559, 565, 569, 570, 571, 572, 573, 574, 578, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                        self.state = 3376
                        self.charData()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 3381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

            self.state = 3383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.state = 3382
                self.replaceOffStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceByStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(CopyBookParser.REPLACE, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def replaceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReplaceClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReplaceClauseContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NEWLINE)
            else:
                return self.getToken(CopyBookParser.NEWLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_replaceByStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceByStatement" ):
                listener.enterReplaceByStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceByStatement" ):
                listener.exitReplaceByStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceByStatement" ):
                return visitor.visitReplaceByStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceByStatement(self):

        localctx = CopyBookParser.ReplaceByStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_replaceByStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3385
            self.match(CopyBookParser.REPLACE)
            self.state = 3393 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==578:
                        self.state = 3386
                        self.match(CopyBookParser.NEWLINE)
                        self.state = 3391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3392
                    self.replaceClause()

                else:
                    raise NoViableAltException(self)
                self.state = 3395 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)

            self.state = 3397
            self.match(CopyBookParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceOffStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(CopyBookParser.REPLACE, 0)

        def OFF(self):
            return self.getToken(CopyBookParser.OFF, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_replaceOffStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceOffStatement" ):
                listener.enterReplaceOffStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceOffStatement" ):
                listener.exitReplaceOffStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceOffStatement" ):
                return visitor.visitReplaceOffStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceOffStatement(self):

        localctx = CopyBookParser.ReplaceOffStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_replaceOffStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3399
            self.match(CopyBookParser.REPLACE)
            self.state = 3400
            self.match(CopyBookParser.OFF)
            self.state = 3401
            self.match(CopyBookParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def replaceable(self):
            return self.getTypedRuleContext(CopyBookParser.ReplaceableContext,0)


        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def replacement(self):
            return self.getTypedRuleContext(CopyBookParser.ReplacementContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_replaceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceClause" ):
                listener.enterReplaceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceClause" ):
                listener.exitReplaceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceClause" ):
                return visitor.visitReplaceClause(self)
            else:
                return visitor.visitChildren(self)




    def replaceClause(self):

        localctx = CopyBookParser.ReplaceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_replaceClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3403
            self.replaceable()
            self.state = 3404
            self.match(CopyBookParser.BY)
            self.state = 3405
            self.replacement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NEWLINE)
            else:
                return self.getToken(CopyBookParser.NEWLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_directoryPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryPhrase" ):
                listener.enterDirectoryPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryPhrase" ):
                listener.exitDirectoryPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectoryPhrase" ):
                return visitor.visitDirectoryPhrase(self)
            else:
                return visitor.visitChildren(self)




    def directoryPhrase(self):

        localctx = CopyBookParser.DirectoryPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_directoryPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3407
            _la = self._input.LA(1)
            if not(_la==246 or _la==335):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==578:
                self.state = 3408
                self.match(CopyBookParser.NEWLINE)
                self.state = 3413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.state = 3414
                self.literal()
                pass

            elif la_ == 2:
                self.state = 3415
                self.cobolWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FamilyPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NEWLINE)
            else:
                return self.getToken(CopyBookParser.NEWLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_familyPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamilyPhrase" ):
                listener.enterFamilyPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamilyPhrase" ):
                listener.exitFamilyPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFamilyPhrase" ):
                return visitor.visitFamilyPhrase(self)
            else:
                return visitor.visitChildren(self)




    def familyPhrase(self):

        localctx = CopyBookParser.FamilyPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_familyPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3418
            self.match(CopyBookParser.ON)
            self.state = 3422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==578:
                self.state = 3419
                self.match(CopyBookParser.NEWLINE)
                self.state = 3424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.state = 3425
                self.literal()
                pass

            elif la_ == 2:
                self.state = 3426
                self.cobolWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pseudoText(self):
            return self.getTypedRuleContext(CopyBookParser.PseudoTextContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def charDataLine(self):
            return self.getTypedRuleContext(CopyBookParser.CharDataLineContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceable" ):
                listener.enterReplaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceable" ):
                listener.exitReplaceable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceable" ):
                return visitor.visitReplaceable(self)
            else:
                return visitor.visitChildren(self)




    def replaceable(self):

        localctx = CopyBookParser.ReplaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_replaceable)
        try:
            self.state = 3433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3429
                self.pseudoText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3430
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3431
                self.cobolWord()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3432
                self.charDataLine()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pseudoText(self):
            return self.getTypedRuleContext(CopyBookParser.PseudoTextContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def charDataLine(self):
            return self.getTypedRuleContext(CopyBookParser.CharDataLineContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_replacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacement" ):
                listener.enterReplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacement" ):
                listener.exitReplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacement" ):
                return visitor.visitReplacement(self)
            else:
                return visitor.visitChildren(self)




    def replacement(self):

        localctx = CopyBookParser.ReplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_replacement)
        try:
            self.state = 3439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3435
                self.pseudoText()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3436
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3437
                self.cobolWord()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3438
                self.charDataLine()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EjectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EJECT(self):
            return self.getToken(CopyBookParser.EJECT, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_ejectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEjectStatement" ):
                listener.enterEjectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEjectStatement" ):
                listener.exitEjectStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEjectStatement" ):
                return visitor.visitEjectStatement(self)
            else:
                return visitor.visitChildren(self)




    def ejectStatement(self):

        localctx = CopyBookParser.EjectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_ejectStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3441
            self.match(CopyBookParser.EJECT)
            self.state = 3443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==551:
                self.state = 3442
                self.match(CopyBookParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP1(self):
            return self.getToken(CopyBookParser.SKIP1, 0)

        def SKIP2(self):
            return self.getToken(CopyBookParser.SKIP2, 0)

        def SKIP3(self):
            return self.getToken(CopyBookParser.SKIP3, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_skipStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipStatement" ):
                listener.enterSkipStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipStatement" ):
                listener.exitSkipStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipStatement" ):
                return visitor.visitSkipStatement(self)
            else:
                return visitor.visitChildren(self)




    def skipStatement(self):

        localctx = CopyBookParser.SkipStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_skipStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3445
            _la = self._input.LA(1)
            if not(((((_la - 601)) & ~0x3f) == 0 and ((1 << (_la - 601)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==551:
                self.state = 3446
                self.match(CopyBookParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TitleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TITLE(self):
            return self.getToken(CopyBookParser.TITLE, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_titleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitleStatement" ):
                listener.enterTitleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitleStatement" ):
                listener.exitTitleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTitleStatement" ):
                return visitor.visitTitleStatement(self)
            else:
                return visitor.visitChildren(self)




    def titleStatement(self):

        localctx = CopyBookParser.TitleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_titleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self.match(CopyBookParser.TITLE)
            self.state = 3450
            self.literal()
            self.state = 3452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==551:
                self.state = 3451
                self.match(CopyBookParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUALCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOUBLEEQUALCHAR)
            else:
                return self.getToken(CopyBookParser.DOUBLEEQUALCHAR, i)

        def charData(self):
            return self.getTypedRuleContext(CopyBookParser.CharDataContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_pseudoText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudoText" ):
                listener.enterPseudoText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudoText" ):
                listener.exitPseudoText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudoText" ):
                return visitor.visitPseudoText(self)
            else:
                return visitor.visitChildren(self)




    def pseudoText(self):

        localctx = CopyBookParser.PseudoTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_pseudoText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3454
            self.match(CopyBookParser.DOUBLEEQUALCHAR)
            self.state = 3456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & -9151313328269688831) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9009399083978753) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079256797237190143) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550486129895457) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 30405912272306307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430467585) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 20233264917020995) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -29) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                self.state = 3455
                self.charData()


            self.state = 3458
            self.match(CopyBookParser.DOUBLEEQUALCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CharDataLineContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NEWLINE)
            else:
                return self.getToken(CopyBookParser.NEWLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_charData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharData" ):
                listener.enterCharData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharData" ):
                listener.exitCharData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharData" ):
                return visitor.visitCharData(self)
            else:
                return visitor.visitChildren(self)




    def charData(self):

        localctx = CopyBookParser.CharDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_charData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3462 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3462
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 79, 99, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 234, 246, 258, 267, 271, 272, 279, 292, 293, 315, 321, 322, 327, 333, 335, 336, 338, 341, 354, 372, 373, 378, 379, 386, 387, 393, 406, 415, 420, 427, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 539, 541, 542, 551, 552, 558, 559, 565, 569, 570, 571, 572, 573, 574, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                        self.state = 3460
                        self.charDataLine()
                        pass
                    elif token in [578]:
                        self.state = 3461
                        self.match(CopyBookParser.NEWLINE)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 3464 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataSqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CharDataLineContext,i)


        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COPY)
            else:
                return self.getToken(CopyBookParser.COPY, i)

        def REPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.REPLACE)
            else:
                return self.getToken(CopyBookParser.REPLACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NEWLINE)
            else:
                return self.getToken(CopyBookParser.NEWLINE, i)

        def CURSOR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CURSOR)
            else:
                return self.getToken(CopyBookParser.CURSOR, i)

        def SELECT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SELECT)
            else:
                return self.getToken(CopyBookParser.SELECT, i)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.FROM)
            else:
                return self.getToken(CopyBookParser.FROM, i)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.FOR)
            else:
                return self.getToken(CopyBookParser.FOR, i)

        def OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OPEN)
            else:
                return self.getToken(CopyBookParser.OPEN, i)

        def CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CLOSE)
            else:
                return self.getToken(CopyBookParser.CLOSE, i)

        def PAGE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.PAGE)
            else:
                return self.getToken(CopyBookParser.PAGE, i)

        def VALUES(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.VALUES)
            else:
                return self.getToken(CopyBookParser.VALUES, i)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SET)
            else:
                return self.getToken(CopyBookParser.SET, i)

        def SECURITY(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SECURITY)
            else:
                return self.getToken(CopyBookParser.SECURITY, i)

        def TOP(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.TOP)
            else:
                return self.getToken(CopyBookParser.TOP, i)

        def COUNT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COUNT)
            else:
                return self.getToken(CopyBookParser.COUNT, i)

        def ORDER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.ORDER)
            else:
                return self.getToken(CopyBookParser.ORDER, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.WITH)
            else:
                return self.getToken(CopyBookParser.WITH, i)

        def POSITION(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.POSITION)
            else:
                return self.getToken(CopyBookParser.POSITION, i)

        def NEXT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NEXT)
            else:
                return self.getToken(CopyBookParser.NEXT, i)

        def VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.VALUE)
            else:
                return self.getToken(CopyBookParser.VALUE, i)

        def REMARKS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.REMARKS)
            else:
                return self.getToken(CopyBookParser.REMARKS, i)

        def PLUSCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.PLUSCHAR)
            else:
                return self.getToken(CopyBookParser.PLUSCHAR, i)

        def FILLER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.FILLER)
            else:
                return self.getToken(CopyBookParser.FILLER, i)

        def BLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.BLOCK)
            else:
                return self.getToken(CopyBookParser.BLOCK, i)

        def USAGE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.USAGE)
            else:
                return self.getToken(CopyBookParser.USAGE, i)

        def NUMERICLITERAL2(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NUMERICLITERAL2)
            else:
                return self.getToken(CopyBookParser.NUMERICLITERAL2, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OR)
            else:
                return self.getToken(CopyBookParser.OR, i)

        def FILENAME(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.FILENAME)
            else:
                return self.getToken(CopyBookParser.FILENAME, i)

        def INDEX(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.INDEX)
            else:
                return self.getToken(CopyBookParser.INDEX, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NULL_)
            else:
                return self.getToken(CopyBookParser.NULL_, i)

        def CODE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CODE)
            else:
                return self.getToken(CopyBookParser.CODE, i)

        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.IN)
            else:
                return self.getToken(CopyBookParser.IN, i)

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.TYPE)
            else:
                return self.getToken(CopyBookParser.TYPE, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.KEY)
            else:
                return self.getToken(CopyBookParser.KEY, i)

        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.BEFORE)
            else:
                return self.getToken(CopyBookParser.BEFORE, i)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.FIRST)
            else:
                return self.getToken(CopyBookParser.FIRST, i)

        def STATUS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.STATUS)
            else:
                return self.getToken(CopyBookParser.STATUS, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.AS)
            else:
                return self.getToken(CopyBookParser.AS, i)

        def DATE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DATE)
            else:
                return self.getToken(CopyBookParser.DATE, i)

        def SCREEN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SCREEN)
            else:
                return self.getToken(CopyBookParser.SCREEN, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.TO)
            else:
                return self.getToken(CopyBookParser.TO, i)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.WHEN)
            else:
                return self.getToken(CopyBookParser.WHEN, i)

        def SUM(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SUM)
            else:
                return self.getToken(CopyBookParser.SUM, i)

        def RD(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.RD)
            else:
                return self.getToken(CopyBookParser.RD, i)

        def LINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LINE)
            else:
                return self.getToken(CopyBookParser.LINE, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NOT)
            else:
                return self.getToken(CopyBookParser.NOT, i)

        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LEFT)
            else:
                return self.getToken(CopyBookParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.RIGHT)
            else:
                return self.getToken(CopyBookParser.RIGHT, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.THEN)
            else:
                return self.getToken(CopyBookParser.THEN, i)

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.ELSE)
            else:
                return self.getToken(CopyBookParser.ELSE, i)

        def END(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.END)
            else:
                return self.getToken(CopyBookParser.END, i)

        def CLASS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CLASS)
            else:
                return self.getToken(CopyBookParser.CLASS, i)

        def relationalOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.RelationalOperatorContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.RelationalOperatorContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.WS)
            else:
                return self.getToken(CopyBookParser.WS, i)

        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.IS)
            else:
                return self.getToken(CopyBookParser.IS, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.ID)
            else:
                return self.getToken(CopyBookParser.ID, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LOCK)
            else:
                return self.getToken(CopyBookParser.LOCK, i)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.TABLE)
            else:
                return self.getToken(CopyBookParser.TABLE, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EXCLUSIVE)
            else:
                return self.getToken(CopyBookParser.EXCLUSIVE, i)

        def MODE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.MODE)
            else:
                return self.getToken(CopyBookParser.MODE, i)

        def MERGE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.MERGE)
            else:
                return self.getToken(CopyBookParser.MERGE, i)

        def GROUP(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.GROUP)
            else:
                return self.getToken(CopyBookParser.GROUP, i)

        def GLOBAL(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.GLOBAL)
            else:
                return self.getToken(CopyBookParser.GLOBAL, i)

        def USING(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.USING)
            else:
                return self.getToken(CopyBookParser.USING, i)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DAY)
            else:
                return self.getToken(CopyBookParser.DAY, i)

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.REFERENCE)
            else:
                return self.getToken(CopyBookParser.REFERENCE, i)

        def REFERENCES(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.REFERENCES)
            else:
                return self.getToken(CopyBookParser.REFERENCES, i)

        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EOL)
            else:
                return self.getToken(CopyBookParser.EOL, i)

        def MMDDYYYY(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.MMDDYYYY)
            else:
                return self.getToken(CopyBookParser.MMDDYYYY, i)

        def DIVISION(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DIVISION)
            else:
                return self.getToken(CopyBookParser.DIVISION, i)

        def CALL(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CALL)
            else:
                return self.getToken(CopyBookParser.CALL, i)

        def DOUBLE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOUBLE)
            else:
                return self.getToken(CopyBookParser.DOUBLE, i)

        def INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.INTEGER)
            else:
                return self.getToken(CopyBookParser.INTEGER, i)

        def DETAIL(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DETAIL)
            else:
                return self.getToken(CopyBookParser.DETAIL, i)

        def MESSAGE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.MESSAGE)
            else:
                return self.getToken(CopyBookParser.MESSAGE, i)

        def LD(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LD)
            else:
                return self.getToken(CopyBookParser.LD, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LAST)
            else:
                return self.getToken(CopyBookParser.LAST, i)

        def LIMIT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LIMIT)
            else:
                return self.getToken(CopyBookParser.LIMIT, i)

        def SLASHCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SLASHCHAR)
            else:
                return self.getToken(CopyBookParser.SLASHCHAR, i)

        def DESTINATION(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DESTINATION)
            else:
                return self.getToken(CopyBookParser.DESTINATION, i)

        def SORT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SORT)
            else:
                return self.getToken(CopyBookParser.SORT, i)

        def SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SIGN)
            else:
                return self.getToken(CopyBookParser.SIGN, i)

        def COL(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COL)
            else:
                return self.getToken(CopyBookParser.COL, i)

        def COMP(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMP)
            else:
                return self.getToken(CopyBookParser.COMP, i)

        def CHANNEL(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CHANNEL)
            else:
                return self.getToken(CopyBookParser.CHANNEL, i)

        def UP(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.UP)
            else:
                return self.getToken(CopyBookParser.UP, i)

        def PROCEDURE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.PROCEDURE)
            else:
                return self.getToken(CopyBookParser.PROCEDURE, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.PASSWORD)
            else:
                return self.getToken(CopyBookParser.PASSWORD, i)

        def PIPECHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.PIPECHAR)
            else:
                return self.getToken(CopyBookParser.PIPECHAR, i)

        def UNDERSCORECHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.UNDERSCORECHAR)
            else:
                return self.getToken(CopyBookParser.UNDERSCORECHAR, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DEFAULT)
            else:
                return self.getToken(CopyBookParser.DEFAULT, i)

        def UNIT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.UNIT)
            else:
                return self.getToken(CopyBookParser.UNIT, i)

        def CD(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CD)
            else:
                return self.getToken(CopyBookParser.CD, i)

        def RELEASE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.RELEASE)
            else:
                return self.getToken(CopyBookParser.RELEASE, i)

        def BOTTOM(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.BOTTOM)
            else:
                return self.getToken(CopyBookParser.BOTTOM, i)

        def DOLLARCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOLLARCHAR)
            else:
                return self.getToken(CopyBookParser.DOLLARCHAR, i)

        def FUNCTION(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.FUNCTION)
            else:
                return self.getToken(CopyBookParser.FUNCTION, i)

        def YEAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.YEAR)
            else:
                return self.getToken(CopyBookParser.YEAR, i)

        def EXPORT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EXPORT)
            else:
                return self.getToken(CopyBookParser.EXPORT, i)

        def BIT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.BIT)
            else:
                return self.getToken(CopyBookParser.BIT, i)

        def PIC(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.PIC)
            else:
                return self.getToken(CopyBookParser.PIC, i)

        def OTHER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OTHER)
            else:
                return self.getToken(CopyBookParser.OTHER, i)

        def SEGMENT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SEGMENT)
            else:
                return self.getToken(CopyBookParser.SEGMENT, i)

        def STANDARD(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.STANDARD)
            else:
                return self.getToken(CopyBookParser.STANDARD, i)

        def CHANGED(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CHANGED)
            else:
                return self.getToken(CopyBookParser.CHANGED, i)

        def INSTALLATION(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.INSTALLATION)
            else:
                return self.getToken(CopyBookParser.INSTALLATION, i)

        def DEFINITION(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DEFINITION)
            else:
                return self.getToken(CopyBookParser.DEFINITION, i)

        def REQUIRED(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.REQUIRED)
            else:
                return self.getToken(CopyBookParser.REQUIRED, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_charDataSql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataSql" ):
                listener.enterCharDataSql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataSql" ):
                listener.exitCharDataSql(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataSql" ):
                return visitor.visitCharDataSql(self)
            else:
                return visitor.visitChildren(self)




    def charDataSql(self):

        localctx = CopyBookParser.CharDataSqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_charDataSql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3575 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3575
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                    if la_ == 1:
                        self.state = 3466
                        self.charDataLine()
                        pass

                    elif la_ == 2:
                        self.state = 3467
                        self.match(CopyBookParser.COPY)
                        pass

                    elif la_ == 3:
                        self.state = 3468
                        self.match(CopyBookParser.REPLACE)
                        pass

                    elif la_ == 4:
                        self.state = 3469
                        self.match(CopyBookParser.NEWLINE)
                        pass

                    elif la_ == 5:
                        self.state = 3470
                        self.match(CopyBookParser.CURSOR)
                        pass

                    elif la_ == 6:
                        self.state = 3471
                        self.match(CopyBookParser.SELECT)
                        pass

                    elif la_ == 7:
                        self.state = 3472
                        self.match(CopyBookParser.FROM)
                        pass

                    elif la_ == 8:
                        self.state = 3473
                        self.match(CopyBookParser.FOR)
                        pass

                    elif la_ == 9:
                        self.state = 3474
                        self.match(CopyBookParser.OPEN)
                        pass

                    elif la_ == 10:
                        self.state = 3475
                        self.match(CopyBookParser.CLOSE)
                        pass

                    elif la_ == 11:
                        self.state = 3476
                        self.match(CopyBookParser.PAGE)
                        pass

                    elif la_ == 12:
                        self.state = 3477
                        self.match(CopyBookParser.VALUES)
                        pass

                    elif la_ == 13:
                        self.state = 3478
                        self.match(CopyBookParser.SET)
                        pass

                    elif la_ == 14:
                        self.state = 3479
                        self.match(CopyBookParser.SECURITY)
                        pass

                    elif la_ == 15:
                        self.state = 3480
                        self.match(CopyBookParser.TOP)
                        pass

                    elif la_ == 16:
                        self.state = 3481
                        self.match(CopyBookParser.COUNT)
                        pass

                    elif la_ == 17:
                        self.state = 3482
                        self.match(CopyBookParser.ORDER)
                        pass

                    elif la_ == 18:
                        self.state = 3483
                        self.match(CopyBookParser.WITH)
                        pass

                    elif la_ == 19:
                        self.state = 3484
                        self.match(CopyBookParser.POSITION)
                        pass

                    elif la_ == 20:
                        self.state = 3485
                        self.match(CopyBookParser.NEXT)
                        pass

                    elif la_ == 21:
                        self.state = 3486
                        self.match(CopyBookParser.VALUE)
                        pass

                    elif la_ == 22:
                        self.state = 3487
                        self.match(CopyBookParser.REMARKS)
                        pass

                    elif la_ == 23:
                        self.state = 3488
                        self.match(CopyBookParser.PLUSCHAR)
                        pass

                    elif la_ == 24:
                        self.state = 3489
                        self.match(CopyBookParser.FILLER)
                        pass

                    elif la_ == 25:
                        self.state = 3490
                        self.match(CopyBookParser.BLOCK)
                        pass

                    elif la_ == 26:
                        self.state = 3491
                        self.match(CopyBookParser.USAGE)
                        pass

                    elif la_ == 27:
                        self.state = 3492
                        self.match(CopyBookParser.NUMERICLITERAL2)
                        pass

                    elif la_ == 28:
                        self.state = 3493
                        self.match(CopyBookParser.OR)
                        pass

                    elif la_ == 29:
                        self.state = 3494
                        self.match(CopyBookParser.FILENAME)
                        pass

                    elif la_ == 30:
                        self.state = 3495
                        self.match(CopyBookParser.INDEX)
                        pass

                    elif la_ == 31:
                        self.state = 3496
                        self.match(CopyBookParser.NULL_)
                        pass

                    elif la_ == 32:
                        self.state = 3497
                        self.match(CopyBookParser.CODE)
                        pass

                    elif la_ == 33:
                        self.state = 3498
                        self.match(CopyBookParser.IN)
                        pass

                    elif la_ == 34:
                        self.state = 3499
                        self.match(CopyBookParser.TYPE)
                        pass

                    elif la_ == 35:
                        self.state = 3500
                        self.match(CopyBookParser.KEY)
                        pass

                    elif la_ == 36:
                        self.state = 3501
                        self.match(CopyBookParser.BEFORE)
                        pass

                    elif la_ == 37:
                        self.state = 3502
                        self.match(CopyBookParser.FIRST)
                        pass

                    elif la_ == 38:
                        self.state = 3503
                        self.match(CopyBookParser.STATUS)
                        pass

                    elif la_ == 39:
                        self.state = 3504
                        self.match(CopyBookParser.AS)
                        pass

                    elif la_ == 40:
                        self.state = 3505
                        self.match(CopyBookParser.DATE)
                        pass

                    elif la_ == 41:
                        self.state = 3506
                        self.match(CopyBookParser.SCREEN)
                        pass

                    elif la_ == 42:
                        self.state = 3507
                        self.match(CopyBookParser.TO)
                        pass

                    elif la_ == 43:
                        self.state = 3508
                        self.match(CopyBookParser.WHEN)
                        pass

                    elif la_ == 44:
                        self.state = 3509
                        self.match(CopyBookParser.SUM)
                        pass

                    elif la_ == 45:
                        self.state = 3510
                        self.match(CopyBookParser.RD)
                        pass

                    elif la_ == 46:
                        self.state = 3511
                        self.match(CopyBookParser.LINE)
                        pass

                    elif la_ == 47:
                        self.state = 3512
                        self.match(CopyBookParser.NOT)
                        pass

                    elif la_ == 48:
                        self.state = 3513
                        self.match(CopyBookParser.LEFT)
                        pass

                    elif la_ == 49:
                        self.state = 3514
                        self.match(CopyBookParser.RIGHT)
                        pass

                    elif la_ == 50:
                        self.state = 3515
                        self.match(CopyBookParser.THEN)
                        pass

                    elif la_ == 51:
                        self.state = 3516
                        self.match(CopyBookParser.ELSE)
                        pass

                    elif la_ == 52:
                        self.state = 3517
                        self.match(CopyBookParser.END)
                        pass

                    elif la_ == 53:
                        self.state = 3518
                        self.match(CopyBookParser.CLASS)
                        pass

                    elif la_ == 54:
                        self.state = 3519
                        self.relationalOperator()
                        pass

                    elif la_ == 55:
                        self.state = 3520
                        self.match(CopyBookParser.WS)
                        pass

                    elif la_ == 56:
                        self.state = 3521
                        self.match(CopyBookParser.IS)
                        pass

                    elif la_ == 57:
                        self.state = 3522
                        self.match(CopyBookParser.ID)
                        pass

                    elif la_ == 58:
                        self.state = 3523
                        self.match(CopyBookParser.LOCK)
                        pass

                    elif la_ == 59:
                        self.state = 3524
                        self.match(CopyBookParser.TABLE)
                        pass

                    elif la_ == 60:
                        self.state = 3525
                        self.match(CopyBookParser.EXCLUSIVE)
                        pass

                    elif la_ == 61:
                        self.state = 3526
                        self.match(CopyBookParser.MODE)
                        pass

                    elif la_ == 62:
                        self.state = 3527
                        self.match(CopyBookParser.MERGE)
                        pass

                    elif la_ == 63:
                        self.state = 3528
                        self.match(CopyBookParser.GROUP)
                        pass

                    elif la_ == 64:
                        self.state = 3529
                        self.match(CopyBookParser.GLOBAL)
                        pass

                    elif la_ == 65:
                        self.state = 3530
                        self.match(CopyBookParser.USING)
                        pass

                    elif la_ == 66:
                        self.state = 3531
                        self.match(CopyBookParser.DAY)
                        pass

                    elif la_ == 67:
                        self.state = 3532
                        self.match(CopyBookParser.REFERENCE)
                        pass

                    elif la_ == 68:
                        self.state = 3533
                        self.match(CopyBookParser.REFERENCES)
                        pass

                    elif la_ == 69:
                        self.state = 3534
                        self.match(CopyBookParser.EOL)
                        pass

                    elif la_ == 70:
                        self.state = 3535
                        self.match(CopyBookParser.MMDDYYYY)
                        pass

                    elif la_ == 71:
                        self.state = 3536
                        self.match(CopyBookParser.DIVISION)
                        pass

                    elif la_ == 72:
                        self.state = 3537
                        self.match(CopyBookParser.CALL)
                        pass

                    elif la_ == 73:
                        self.state = 3538
                        self.match(CopyBookParser.DOUBLE)
                        pass

                    elif la_ == 74:
                        self.state = 3539
                        self.match(CopyBookParser.INTEGER)
                        pass

                    elif la_ == 75:
                        self.state = 3540
                        self.match(CopyBookParser.DETAIL)
                        pass

                    elif la_ == 76:
                        self.state = 3541
                        self.match(CopyBookParser.MESSAGE)
                        pass

                    elif la_ == 77:
                        self.state = 3542
                        self.match(CopyBookParser.LD)
                        pass

                    elif la_ == 78:
                        self.state = 3543
                        self.match(CopyBookParser.LAST)
                        pass

                    elif la_ == 79:
                        self.state = 3544
                        self.match(CopyBookParser.LIMIT)
                        pass

                    elif la_ == 80:
                        self.state = 3545
                        self.match(CopyBookParser.SLASHCHAR)
                        pass

                    elif la_ == 81:
                        self.state = 3546
                        self.match(CopyBookParser.DESTINATION)
                        pass

                    elif la_ == 82:
                        self.state = 3547
                        self.match(CopyBookParser.SORT)
                        pass

                    elif la_ == 83:
                        self.state = 3548
                        self.match(CopyBookParser.SIGN)
                        pass

                    elif la_ == 84:
                        self.state = 3549
                        self.match(CopyBookParser.COL)
                        pass

                    elif la_ == 85:
                        self.state = 3550
                        self.match(CopyBookParser.COMP)
                        pass

                    elif la_ == 86:
                        self.state = 3551
                        self.match(CopyBookParser.CHANNEL)
                        pass

                    elif la_ == 87:
                        self.state = 3552
                        self.match(CopyBookParser.UP)
                        pass

                    elif la_ == 88:
                        self.state = 3553
                        self.match(CopyBookParser.PROCEDURE)
                        pass

                    elif la_ == 89:
                        self.state = 3554
                        self.match(CopyBookParser.PASSWORD)
                        pass

                    elif la_ == 90:
                        self.state = 3555
                        self.match(CopyBookParser.PIPECHAR)
                        pass

                    elif la_ == 91:
                        self.state = 3556
                        self.match(CopyBookParser.UNDERSCORECHAR)
                        pass

                    elif la_ == 92:
                        self.state = 3557
                        self.match(CopyBookParser.DEFAULT)
                        pass

                    elif la_ == 93:
                        self.state = 3558
                        self.match(CopyBookParser.UNIT)
                        pass

                    elif la_ == 94:
                        self.state = 3559
                        self.match(CopyBookParser.CD)
                        pass

                    elif la_ == 95:
                        self.state = 3560
                        self.match(CopyBookParser.RELEASE)
                        pass

                    elif la_ == 96:
                        self.state = 3561
                        self.match(CopyBookParser.BOTTOM)
                        pass

                    elif la_ == 97:
                        self.state = 3562
                        self.match(CopyBookParser.DOLLARCHAR)
                        pass

                    elif la_ == 98:
                        self.state = 3563
                        self.match(CopyBookParser.FUNCTION)
                        pass

                    elif la_ == 99:
                        self.state = 3564
                        self.match(CopyBookParser.YEAR)
                        pass

                    elif la_ == 100:
                        self.state = 3565
                        self.match(CopyBookParser.EXPORT)
                        pass

                    elif la_ == 101:
                        self.state = 3566
                        self.match(CopyBookParser.BIT)
                        pass

                    elif la_ == 102:
                        self.state = 3567
                        self.match(CopyBookParser.PIC)
                        pass

                    elif la_ == 103:
                        self.state = 3568
                        self.match(CopyBookParser.OTHER)
                        pass

                    elif la_ == 104:
                        self.state = 3569
                        self.match(CopyBookParser.SEGMENT)
                        pass

                    elif la_ == 105:
                        self.state = 3570
                        self.match(CopyBookParser.STANDARD)
                        pass

                    elif la_ == 106:
                        self.state = 3571
                        self.match(CopyBookParser.CHANGED)
                        pass

                    elif la_ == 107:
                        self.state = 3572
                        self.match(CopyBookParser.INSTALLATION)
                        pass

                    elif la_ == 108:
                        self.state = 3573
                        self.match(CopyBookParser.DEFINITION)
                        pass

                    elif la_ == 109:
                        self.state = 3574
                        self.match(CopyBookParser.REQUIRED)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3577 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,436,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CobolWordContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CobolWordContext,i)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def filename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FilenameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FilenameContext,i)


        def TEXT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.TEXT)
            else:
                return self.getToken(CopyBookParser.TEXT, i)

        def ASTERISKCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.ASTERISKCHAR)
            else:
                return self.getToken(CopyBookParser.ASTERISKCHAR, i)

        def COLONCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COLONCHAR)
            else:
                return self.getToken(CopyBookParser.COLONCHAR, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT)
            else:
                return self.getToken(CopyBookParser.DOT, i)

        def HASH(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.HASH)
            else:
                return self.getToken(CopyBookParser.HASH, i)

        def LPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LPARENCHAR)
            else:
                return self.getToken(CopyBookParser.LPARENCHAR, i)

        def RPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.RPARENCHAR)
            else:
                return self.getToken(CopyBookParser.RPARENCHAR, i)

        def RETURN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.RETURN)
            else:
                return self.getToken(CopyBookParser.RETURN, i)

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OF)
            else:
                return self.getToken(CopyBookParser.OF, i)

        def REWRITE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.REWRITE)
            else:
                return self.getToken(CopyBookParser.REWRITE, i)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CONTINUE)
            else:
                return self.getToken(CopyBookParser.CONTINUE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMMA)
            else:
                return self.getToken(CopyBookParser.COMMA, i)

        def EQUALCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EQUALCHAR)
            else:
                return self.getToken(CopyBookParser.EQUALCHAR, i)

        def SAVE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SAVE)
            else:
                return self.getToken(CopyBookParser.SAVE, i)

        def REDEFINES(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.REDEFINES)
            else:
                return self.getToken(CopyBookParser.REDEFINES, i)

        def OCCURS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OCCURS)
            else:
                return self.getToken(CopyBookParser.OCCURS, i)

        def MINUSCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.MINUSCHAR)
            else:
                return self.getToken(CopyBookParser.MINUSCHAR, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OR)
            else:
                return self.getToken(CopyBookParser.OR, i)

        def CONTROL(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.CONTROL)
            else:
                return self.getToken(CopyBookParser.CONTROL, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_charDataLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataLine" ):
                listener.enterCharDataLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataLine" ):
                listener.exitCharDataLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataLine" ):
                return visitor.visitCharDataLine(self)
            else:
                return visitor.visitChildren(self)




    def charDataLine(self):

        localctx = CopyBookParser.CharDataLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_charDataLine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3601 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3601
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                    if la_ == 1:
                        self.state = 3579
                        self.cobolWord()
                        pass

                    elif la_ == 2:
                        self.state = 3580
                        self.literal()
                        pass

                    elif la_ == 3:
                        self.state = 3581
                        self.filename()
                        pass

                    elif la_ == 4:
                        self.state = 3582
                        self.match(CopyBookParser.TEXT)
                        pass

                    elif la_ == 5:
                        self.state = 3583
                        self.match(CopyBookParser.ASTERISKCHAR)
                        pass

                    elif la_ == 6:
                        self.state = 3584
                        self.match(CopyBookParser.COLONCHAR)
                        pass

                    elif la_ == 7:
                        self.state = 3585
                        self.match(CopyBookParser.DOT)
                        pass

                    elif la_ == 8:
                        self.state = 3586
                        self.match(CopyBookParser.HASH)
                        pass

                    elif la_ == 9:
                        self.state = 3587
                        self.match(CopyBookParser.LPARENCHAR)
                        pass

                    elif la_ == 10:
                        self.state = 3588
                        self.match(CopyBookParser.RPARENCHAR)
                        pass

                    elif la_ == 11:
                        self.state = 3589
                        self.match(CopyBookParser.RETURN)
                        pass

                    elif la_ == 12:
                        self.state = 3590
                        self.match(CopyBookParser.OF)
                        pass

                    elif la_ == 13:
                        self.state = 3591
                        self.match(CopyBookParser.REWRITE)
                        pass

                    elif la_ == 14:
                        self.state = 3592
                        self.match(CopyBookParser.CONTINUE)
                        pass

                    elif la_ == 15:
                        self.state = 3593
                        self.match(CopyBookParser.COMMA)
                        pass

                    elif la_ == 16:
                        self.state = 3594
                        self.match(CopyBookParser.EQUALCHAR)
                        pass

                    elif la_ == 17:
                        self.state = 3595
                        self.match(CopyBookParser.SAVE)
                        pass

                    elif la_ == 18:
                        self.state = 3596
                        self.match(CopyBookParser.REDEFINES)
                        pass

                    elif la_ == 19:
                        self.state = 3597
                        self.match(CopyBookParser.OCCURS)
                        pass

                    elif la_ == 20:
                        self.state = 3598
                        self.match(CopyBookParser.MINUSCHAR)
                        pass

                    elif la_ == 21:
                        self.state = 3599
                        self.match(CopyBookParser.OR)
                        pass

                    elif la_ == 22:
                        self.state = 3600
                        self.match(CopyBookParser.CONTROL)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3603 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,438,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CobolWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def charDataKeyword(self):
            return self.getTypedRuleContext(CopyBookParser.CharDataKeywordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_cobolWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCobolWord" ):
                listener.enterCobolWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCobolWord" ):
                listener.exitCobolWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCobolWord" ):
                return visitor.visitCobolWord(self)
            else:
                return visitor.visitChildren(self)




    def cobolWord(self):

        localctx = CopyBookParser.CobolWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_cobolWord)
        try:
            self.state = 3607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [832]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3605
                self.match(CopyBookParser.IDENTIFIER)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3606
                self.charDataKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONNUMERICLITERAL(self):
            return self.getToken(CopyBookParser.NONNUMERICLITERAL, 0)

        def NUMERICLITERAL(self):
            return self.getToken(CopyBookParser.NUMERICLITERAL, 0)

        def INTEGERLITERAL(self):
            return self.getToken(CopyBookParser.INTEGERLITERAL, 0)

        def jpEncodingText(self):
            return self.getTypedRuleContext(CopyBookParser.JpEncodingTextContext,0)


        def LEVEL_NUMBER_66(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_66, 0)

        def LEVEL_NUMBER_88(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_88, 0)

        def LEVEL_NUMBER_77(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_77, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = CopyBookParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_literal)
        try:
            self.state = 3616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [569]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3609
                self.match(CopyBookParser.NONNUMERICLITERAL)
                pass
            elif token in [574]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3610
                self.match(CopyBookParser.NUMERICLITERAL)
                pass
            elif token in [573]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3611
                self.match(CopyBookParser.INTEGERLITERAL)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 267, 271, 272, 279, 292, 293, 315, 321, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3612
                self.jpEncodingText()
                pass
            elif token in [570]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3613
                self.match(CopyBookParser.LEVEL_NUMBER_66)
                pass
            elif token in [572]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3614
                self.match(CopyBookParser.LEVEL_NUMBER_88)
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3615
                self.match(CopyBookParser.LEVEL_NUMBER_77)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JpEncodingTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NC(self):
            return self.getToken(CopyBookParser.NC, 0)

        def DOUBLEQUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOUBLEQUOTE)
            else:
                return self.getToken(CopyBookParser.DOUBLEQUOTE, i)

        def cobolWord(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CobolWordContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CobolWordContext,i)


        def JP_TXT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.JP_TXT)
            else:
                return self.getToken(CopyBookParser.JP_TXT, i)

        def AROBASEEC(self):
            return self.getToken(CopyBookParser.AROBASEEC, 0)

        def NONNUMERICLITERAL(self):
            return self.getToken(CopyBookParser.NONNUMERICLITERAL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_jpEncodingText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJpEncodingText" ):
                listener.enterJpEncodingText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJpEncodingText" ):
                listener.exitJpEncodingText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJpEncodingText" ):
                return visitor.visitJpEncodingText(self)
            else:
                return visitor.visitChildren(self)




    def jpEncodingText(self):

        localctx = CopyBookParser.JpEncodingTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_jpEncodingText)
        self._la = 0 # Token type
        try:
            self.state = 3652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3618
                self.match(CopyBookParser.NC)
                self.state = 3620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
                if la_ == 1:
                    self.state = 3619
                    self.match(CopyBookParser.DOUBLEQUOTE)


                self.state = 3634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
                if la_ == 1:
                    self.state = 3625
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,442,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3622
                            self.cobolWord() 
                        self.state = 3627
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,442,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 3631
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,443,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3628
                            self.match(CopyBookParser.JP_TXT) 
                        self.state = 3633
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,443,self._ctx)

                    pass


                self.state = 3637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==549:
                    self.state = 3636
                    self.match(CopyBookParser.DOUBLEQUOTE)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3639
                self.match(CopyBookParser.AROBASEEC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3641 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3640
                        self.cobolWord()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3643 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,446,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3646 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3645
                        self.match(CopyBookParser.JP_TXT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 3648 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,447,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3650
                self.match(CopyBookParser.NC)
                self.state = 3651
                self.match(CopyBookParser.NONNUMERICLITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILENAME(self):
            return self.getToken(CopyBookParser.FILENAME, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilename" ):
                return visitor.visitFilename(self)
            else:
                return visitor.visitChildren(self)




    def filename(self):

        localctx = CopyBookParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3654
            self.match(CopyBookParser.FILENAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescriptionEntryFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(CopyBookParser.INTEGERLITERAL, 0)

        def LEVEL_NUMBER_77(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_77, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def FILLER(self):
            return self.getToken(CopyBookParser.FILLER, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def dataRedefinesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataRedefinesClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataRedefinesClauseContext,i)


        def dataIntegerStringClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataIntegerStringClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataIntegerStringClauseContext,i)


        def dataExternalClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataExternalClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataExternalClauseContext,i)


        def dataGlobalClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataGlobalClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataGlobalClauseContext,i)


        def dataTypeDefClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataTypeDefClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataTypeDefClauseContext,i)


        def dataThreadLocalClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataThreadLocalClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataThreadLocalClauseContext,i)


        def dataPictureClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataPictureClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataPictureClauseContext,i)


        def dataCommonOwnLocalClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataCommonOwnLocalClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataCommonOwnLocalClauseContext,i)


        def dataTypeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataTypeClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataTypeClauseContext,i)


        def dataUsingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataUsingClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataUsingClauseContext,i)


        def dataUsageClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataUsageClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataUsageClauseContext,i)


        def dataValueClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataValueClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataValueClauseContext,i)


        def dataReceivedByClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataReceivedByClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataReceivedByClauseContext,i)


        def dataOccursClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataOccursClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataOccursClauseContext,i)


        def dataSignClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataSignClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataSignClauseContext,i)


        def dataSynchronizedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataSynchronizedClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataSynchronizedClauseContext,i)


        def dataJustifiedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataJustifiedClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataJustifiedClauseContext,i)


        def dataBlankWhenZeroClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataBlankWhenZeroClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataBlankWhenZeroClauseContext,i)


        def dataWithLowerBoundsClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataWithLowerBoundsClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataWithLowerBoundsClauseContext,i)


        def dataAlignedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataAlignedClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataAlignedClauseContext,i)


        def dataRecordAreaClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataRecordAreaClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataRecordAreaClauseContext,i)


        def dataCharacterClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataCharacterClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataCharacterClauseContext,i)


        def dataSqlTypeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataSqlTypeClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataSqlTypeClauseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDescriptionEntryFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDescriptionEntryFormat1" ):
                listener.enterDataDescriptionEntryFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDescriptionEntryFormat1" ):
                listener.exitDataDescriptionEntryFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDescriptionEntryFormat1" ):
                return visitor.visitDataDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryFormat1(self):

        localctx = CopyBookParser.DataDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_dataDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3656
            _la = self._input.LA(1)
            if not(_la==571 or _la==573):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 3657
                self.match(CopyBookParser.FILLER)

            elif la_ == 2:
                self.state = 3658
                self.dataName()


            self.state = 3686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 77089127052216316) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37647503620440067) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 288230376151855233) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & -1873285925860010335) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -1871227600135745143) != 0) or ((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & -3318904916409122771) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & -8989132050678136319) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -6239947461623982591) != 0) or ((((_la - 536)) & ~0x3f) == 0 and ((1 << (_la - 536)) & -9223371495688896445) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & -1) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & -1) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & -1) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & 1125898950541311) != 0):
                self.state = 3684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                if la_ == 1:
                    self.state = 3661
                    self.dataRedefinesClause()
                    pass

                elif la_ == 2:
                    self.state = 3662
                    self.dataIntegerStringClause()
                    pass

                elif la_ == 3:
                    self.state = 3663
                    self.dataExternalClause()
                    pass

                elif la_ == 4:
                    self.state = 3664
                    self.dataGlobalClause()
                    pass

                elif la_ == 5:
                    self.state = 3665
                    self.dataTypeDefClause()
                    pass

                elif la_ == 6:
                    self.state = 3666
                    self.dataThreadLocalClause()
                    pass

                elif la_ == 7:
                    self.state = 3667
                    self.dataPictureClause()
                    pass

                elif la_ == 8:
                    self.state = 3668
                    self.dataCommonOwnLocalClause()
                    pass

                elif la_ == 9:
                    self.state = 3669
                    self.dataTypeClause()
                    pass

                elif la_ == 10:
                    self.state = 3670
                    self.dataUsingClause()
                    pass

                elif la_ == 11:
                    self.state = 3671
                    self.dataUsageClause()
                    pass

                elif la_ == 12:
                    self.state = 3672
                    self.dataValueClause()
                    pass

                elif la_ == 13:
                    self.state = 3673
                    self.dataReceivedByClause()
                    pass

                elif la_ == 14:
                    self.state = 3674
                    self.dataOccursClause()
                    pass

                elif la_ == 15:
                    self.state = 3675
                    self.dataSignClause()
                    pass

                elif la_ == 16:
                    self.state = 3676
                    self.dataSynchronizedClause()
                    pass

                elif la_ == 17:
                    self.state = 3677
                    self.dataJustifiedClause()
                    pass

                elif la_ == 18:
                    self.state = 3678
                    self.dataBlankWhenZeroClause()
                    pass

                elif la_ == 19:
                    self.state = 3679
                    self.dataWithLowerBoundsClause()
                    pass

                elif la_ == 20:
                    self.state = 3680
                    self.dataAlignedClause()
                    pass

                elif la_ == 21:
                    self.state = 3681
                    self.dataRecordAreaClause()
                    pass

                elif la_ == 22:
                    self.state = 3682
                    self.dataCharacterClause()
                    pass

                elif la_ == 23:
                    self.state = 3683
                    self.dataSqlTypeClause()
                    pass


                self.state = 3688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3689
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataSqlTypeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL(self):
            return self.getToken(CopyBookParser.SQL, 0)

        def TYPE(self):
            return self.getToken(CopyBookParser.TYPE, 0)

        def sqlDataType(self):
            return self.getTypedRuleContext(CopyBookParser.SqlDataTypeContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataSqlTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataSqlTypeClause" ):
                listener.enterDataSqlTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataSqlTypeClause" ):
                listener.exitDataSqlTypeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataSqlTypeClause" ):
                return visitor.visitDataSqlTypeClause(self)
            else:
                return visitor.visitChildren(self)




    def dataSqlTypeClause(self):

        localctx = CopyBookParser.DataSqlTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_dataSqlTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3691
            self.match(CopyBookParser.SQL)
            self.state = 3692
            self.match(CopyBookParser.TYPE)
            self.state = 3694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3693
                self.match(CopyBookParser.IS)


            self.state = 3696
            self.sqlDataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(CopyBookParser.BINARY, 0)

        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def VARYING(self):
            return self.getToken(CopyBookParser.VARYING, 0)

        def INTEGER(self):
            return self.getToken(CopyBookParser.INTEGER, 0)

        def sqlDataLenght(self):
            return self.getTypedRuleContext(CopyBookParser.SqlDataLenghtContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sqlDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlDataType" ):
                listener.enterSqlDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlDataType" ):
                listener.exitSqlDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDataType" ):
                return visitor.visitSqlDataType(self)
            else:
                return visitor.visitChildren(self)




    def sqlDataType(self):

        localctx = CopyBookParser.SqlDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_sqlDataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                self.state = 3698
                self.match(CopyBookParser.BINARY)
                pass

            elif la_ == 2:
                self.state = 3699
                self.match(CopyBookParser.IDENTIFIER)
                pass

            elif la_ == 3:
                self.state = 3700
                self.match(CopyBookParser.IDENTIFIER)
                self.state = 3701
                self.match(CopyBookParser.VARYING)
                pass

            elif la_ == 4:
                self.state = 3702
                self.match(CopyBookParser.INTEGER)
                pass


            self.state = 3706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==558:
                self.state = 3705
                self.sqlDataLenght()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDataLenghtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sqlDataLenght

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlDataLenght" ):
                listener.enterSqlDataLenght(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlDataLenght" ):
                listener.exitSqlDataLenght(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDataLenght" ):
                return visitor.visitSqlDataLenght(self)
            else:
                return visitor.visitChildren(self)




    def sqlDataLenght(self):

        localctx = CopyBookParser.SqlDataLenghtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_sqlDataLenght)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3708
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 3711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [570, 571, 572, 573]:
                self.state = 3709
                self.integerLiteral()
                pass
            elif token in [832]:
                self.state = 3710
                self.match(CopyBookParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3713
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataCharacterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODE_1(self):
            return self.getToken(CopyBookParser.MODE_1, 0)

        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def TYPE(self):
            return self.getToken(CopyBookParser.TYPE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataCharacterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataCharacterClause" ):
                listener.enterDataCharacterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataCharacterClause" ):
                listener.exitDataCharacterClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataCharacterClause" ):
                return visitor.visitDataCharacterClause(self)
            else:
                return visitor.visitChildren(self)




    def dataCharacterClause(self):

        localctx = CopyBookParser.DataCharacterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_dataCharacterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 3715
                self.match(CopyBookParser.CHARACTER)
                self.state = 3716
                self.match(CopyBookParser.TYPE)
                self.state = 3717
                self.match(CopyBookParser.IS)


            self.state = 3720
            self.match(CopyBookParser.MODE_1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescriptionEntryFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEVEL_NUMBER_66(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_66, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def dataRenamesClause(self):
            return self.getTypedRuleContext(CopyBookParser.DataRenamesClauseContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDescriptionEntryFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDescriptionEntryFormat2" ):
                listener.enterDataDescriptionEntryFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDescriptionEntryFormat2" ):
                listener.exitDataDescriptionEntryFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDescriptionEntryFormat2" ):
                return visitor.visitDataDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryFormat2(self):

        localctx = CopyBookParser.DataDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_dataDescriptionEntryFormat2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3722
            self.match(CopyBookParser.LEVEL_NUMBER_66)
            self.state = 3723
            self.dataName()
            self.state = 3724
            self.dataRenamesClause()
            self.state = 3725
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescriptionEntryFormat3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEVEL_NUMBER_88(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_88, 0)

        def conditionName(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionNameContext,0)


        def dataValueClause(self):
            return self.getTypedRuleContext(CopyBookParser.DataValueClauseContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDescriptionEntryFormat3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDescriptionEntryFormat3" ):
                listener.enterDataDescriptionEntryFormat3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDescriptionEntryFormat3" ):
                listener.exitDataDescriptionEntryFormat3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDescriptionEntryFormat3" ):
                return visitor.visitDataDescriptionEntryFormat3(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryFormat3(self):

        localctx = CopyBookParser.DataDescriptionEntryFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_dataDescriptionEntryFormat3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3727
            self.match(CopyBookParser.LEVEL_NUMBER_88)
            self.state = 3728
            self.conditionName()
            self.state = 3729
            self.dataValueClause()
            self.state = 3730
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescriptionEntryExecSqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECSQLLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EXECSQLLINE)
            else:
                return self.getToken(CopyBookParser.EXECSQLLINE, i)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDescriptionEntryExecSql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDescriptionEntryExecSql" ):
                listener.enterDataDescriptionEntryExecSql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDescriptionEntryExecSql" ):
                listener.exitDataDescriptionEntryExecSql(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDescriptionEntryExecSql" ):
                return visitor.visitDataDescriptionEntryExecSql(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryExecSql(self):

        localctx = CopyBookParser.DataDescriptionEntryExecSqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_dataDescriptionEntryExecSql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3733 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3732
                    self.match(CopyBookParser.EXECSQLLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 3735 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,457,self._ctx)

            self.state = 3738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==550:
                self.state = 3737
                self.match(CopyBookParser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataAlignedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGNED(self):
            return self.getToken(CopyBookParser.ALIGNED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataAlignedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataAlignedClause" ):
                listener.enterDataAlignedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataAlignedClause" ):
                listener.exitDataAlignedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataAlignedClause" ):
                return visitor.visitDataAlignedClause(self)
            else:
                return visitor.visitChildren(self)




    def dataAlignedClause(self):

        localctx = CopyBookParser.DataAlignedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_dataAlignedClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3740
            self.match(CopyBookParser.ALIGNED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataBlankWhenZeroClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(CopyBookParser.BLANK, 0)

        def ZERO(self):
            return self.getToken(CopyBookParser.ZERO, 0)

        def ZEROS(self):
            return self.getToken(CopyBookParser.ZEROS, 0)

        def ZEROES(self):
            return self.getToken(CopyBookParser.ZEROES, 0)

        def WHEN(self):
            return self.getToken(CopyBookParser.WHEN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataBlankWhenZeroClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataBlankWhenZeroClause" ):
                listener.enterDataBlankWhenZeroClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataBlankWhenZeroClause" ):
                listener.exitDataBlankWhenZeroClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataBlankWhenZeroClause" ):
                return visitor.visitDataBlankWhenZeroClause(self)
            else:
                return visitor.visitChildren(self)




    def dataBlankWhenZeroClause(self):

        localctx = CopyBookParser.DataBlankWhenZeroClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_dataBlankWhenZeroClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3742
            self.match(CopyBookParser.BLANK)
            self.state = 3744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==525:
                self.state = 3743
                self.match(CopyBookParser.WHEN)


            self.state = 3746
            _la = self._input.LA(1)
            if not(((((_la - 534)) & ~0x3f) == 0 and ((1 << (_la - 534)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataCommonOwnLocalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMON(self):
            return self.getToken(CopyBookParser.COMMON, 0)

        def OWN(self):
            return self.getToken(CopyBookParser.OWN, 0)

        def LOCAL(self):
            return self.getToken(CopyBookParser.LOCAL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataCommonOwnLocalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataCommonOwnLocalClause" ):
                listener.enterDataCommonOwnLocalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataCommonOwnLocalClause" ):
                listener.exitDataCommonOwnLocalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataCommonOwnLocalClause" ):
                return visitor.visitDataCommonOwnLocalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataCommonOwnLocalClause(self):

        localctx = CopyBookParser.DataCommonOwnLocalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_dataCommonOwnLocalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3748
            _la = self._input.LA(1)
            if not(_la==81 or _la==294 or _la==349):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataExternalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(CopyBookParser.EXTERNAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataExternalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataExternalClause" ):
                listener.enterDataExternalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataExternalClause" ):
                listener.exitDataExternalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataExternalClause" ):
                return visitor.visitDataExternalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataExternalClause(self):

        localctx = CopyBookParser.DataExternalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_dataExternalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3750
                self.match(CopyBookParser.IS)


            self.state = 3753
            self.match(CopyBookParser.EXTERNAL)
            self.state = 3756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.state = 3754
                self.match(CopyBookParser.BY)
                self.state = 3755
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataGlobalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(CopyBookParser.GLOBAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataGlobalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataGlobalClause" ):
                listener.enterDataGlobalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataGlobalClause" ):
                listener.exitDataGlobalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataGlobalClause" ):
                return visitor.visitDataGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataGlobalClause(self):

        localctx = CopyBookParser.DataGlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_dataGlobalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3758
                self.match(CopyBookParser.IS)


            self.state = 3761
            self.match(CopyBookParser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataIntegerStringClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(CopyBookParser.INTEGER, 0)

        def STRING(self):
            return self.getToken(CopyBookParser.STRING, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataIntegerStringClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataIntegerStringClause" ):
                listener.enterDataIntegerStringClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataIntegerStringClause" ):
                listener.exitDataIntegerStringClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataIntegerStringClause" ):
                return visitor.visitDataIntegerStringClause(self)
            else:
                return visitor.visitChildren(self)




    def dataIntegerStringClause(self):

        localctx = CopyBookParser.DataIntegerStringClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_dataIntegerStringClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3763
            _la = self._input.LA(1)
            if not(_la==257 or _la==471):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataJustifiedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JUSTIFIED(self):
            return self.getToken(CopyBookParser.JUSTIFIED, 0)

        def JUST(self):
            return self.getToken(CopyBookParser.JUST, 0)

        def RIGHT(self):
            return self.getToken(CopyBookParser.RIGHT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataJustifiedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataJustifiedClause" ):
                listener.enterDataJustifiedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataJustifiedClause" ):
                listener.exitDataJustifiedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataJustifiedClause" ):
                return visitor.visitDataJustifiedClause(self)
            else:
                return visitor.visitChildren(self)




    def dataJustifiedClause(self):

        localctx = CopyBookParser.DataJustifiedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_dataJustifiedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            _la = self._input.LA(1)
            if not(_la==262 or _la==263):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==423:
                self.state = 3766
                self.match(CopyBookParser.RIGHT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataOccursClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCCURS(self):
            return self.getToken(CopyBookParser.OCCURS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def dataOccursTo(self):
            return self.getTypedRuleContext(CopyBookParser.DataOccursToContext,0)


        def TIMES(self):
            return self.getToken(CopyBookParser.TIMES, 0)

        def DEPENDING(self):
            return self.getToken(CopyBookParser.DEPENDING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def dataOccursSort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataOccursSortContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataOccursSortContext,i)


        def INDEXED(self):
            return self.getToken(CopyBookParser.INDEXED, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def LOCAL(self):
            return self.getToken(CopyBookParser.LOCAL, 0)

        def indexName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IndexNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IndexNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataOccursClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataOccursClause" ):
                listener.enterDataOccursClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataOccursClause" ):
                listener.exitDataOccursClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataOccursClause" ):
                return visitor.visitDataOccursClause(self)
            else:
                return visitor.visitChildren(self)




    def dataOccursClause(self):

        localctx = CopyBookParser.DataOccursClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_dataOccursClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3769
            self.match(CopyBookParser.OCCURS)
            self.state = 3770
            self.integerLiteral()
            self.state = 3772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 3771
                self.dataOccursTo()


            self.state = 3775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==499:
                self.state = 3774
                self.match(CopyBookParser.TIMES)


            self.state = 3782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 3777
                self.match(CopyBookParser.DEPENDING)
                self.state = 3779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
                if la_ == 1:
                    self.state = 3778
                    self.match(CopyBookParser.ON)


                self.state = 3781
                self.qualifiedDataName()


            self.state = 3787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26 or _la==139:
                self.state = 3784
                self.dataOccursSort()
                self.state = 3789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==248:
                self.state = 3790
                self.match(CopyBookParser.INDEXED)
                self.state = 3792
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 3791
                    self.match(CopyBookParser.BY)


                self.state = 3795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==294:
                    self.state = 3794
                    self.match(CopyBookParser.LOCAL)


                self.state = 3798 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3797
                        self.indexName()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3800 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,471,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataOccursToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataOccursTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataOccursTo" ):
                listener.enterDataOccursTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataOccursTo" ):
                listener.exitDataOccursTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataOccursTo" ):
                return visitor.visitDataOccursTo(self)
            else:
                return visitor.visitChildren(self)




    def dataOccursTo(self):

        localctx = CopyBookParser.DataOccursToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_dataOccursTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3804
            self.match(CopyBookParser.TO)
            self.state = 3805
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataOccursSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(CopyBookParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CopyBookParser.DESCENDING, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def qualifiedDataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataOccursSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataOccursSort" ):
                listener.enterDataOccursSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataOccursSort" ):
                listener.exitDataOccursSort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataOccursSort" ):
                return visitor.visitDataOccursSort(self)
            else:
                return visitor.visitChildren(self)




    def dataOccursSort(self):

        localctx = CopyBookParser.DataOccursSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_dataOccursSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3807
            _la = self._input.LA(1)
            if not(_la==26 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 3808
                self.match(CopyBookParser.KEY)


            self.state = 3812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3811
                self.match(CopyBookParser.IS)


            self.state = 3815 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3814
                    self.qualifiedDataName()

                else:
                    raise NoViableAltException(self)
                self.state = 3817 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,475,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataPictureClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pictureString(self):
            return self.getTypedRuleContext(CopyBookParser.PictureStringContext,0)


        def PICTURE(self):
            return self.getToken(CopyBookParser.PICTURE, 0)

        def PIC(self):
            return self.getToken(CopyBookParser.PIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataPictureClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataPictureClause" ):
                listener.enterDataPictureClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataPictureClause" ):
                listener.exitDataPictureClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataPictureClause" ):
                return visitor.visitDataPictureClause(self)
            else:
                return visitor.visitChildren(self)




    def dataPictureClause(self):

        localctx = CopyBookParser.DataPictureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_dataPictureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3819
            _la = self._input.LA(1)
            if not(_la==358 or _la==359):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3820
                self.match(CopyBookParser.IS)


            self.state = 3823
            self.pictureString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PictureStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pictureChars(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.PictureCharsContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.PictureCharsContext,i)


        def pictureCardinality(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.PictureCardinalityContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.PictureCardinalityContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_pictureString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPictureString" ):
                listener.enterPictureString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPictureString" ):
                listener.exitPictureString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPictureString" ):
                return visitor.visitPictureString(self)
            else:
                return visitor.visitChildren(self)




    def pictureString(self):

        localctx = CopyBookParser.PictureStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_pictureString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3833 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3826 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3825
                            self.pictureChars()

                        else:
                            raise NoViableAltException(self)
                        self.state = 3828 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,477,self._ctx)

                    self.state = 3831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==558:
                        self.state = 3830
                        self.pictureCardinality()



                else:
                    raise NoViableAltException(self)
                self.state = 3835 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PictureCharsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLARCHAR(self):
            return self.getToken(CopyBookParser.DOLLARCHAR, 0)

        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def NUMERICLITERAL(self):
            return self.getToken(CopyBookParser.NUMERICLITERAL, 0)

        def NUMERICLITERAL3(self):
            return self.getToken(CopyBookParser.NUMERICLITERAL3, 0)

        def SLASHCHAR(self):
            return self.getToken(CopyBookParser.SLASHCHAR, 0)

        def COMMACHAR(self):
            return self.getToken(CopyBookParser.COMMACHAR, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def COLONCHAR(self):
            return self.getToken(CopyBookParser.COLONCHAR, 0)

        def ASTERISKCHAR(self):
            return self.getToken(CopyBookParser.ASTERISKCHAR, 0)

        def DOUBLEASTERISKCHAR(self):
            return self.getToken(CopyBookParser.DOUBLEASTERISKCHAR, 0)

        def PLUSCHAR(self):
            return self.getToken(CopyBookParser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(CopyBookParser.MINUSCHAR, 0)

        def LESSTHANCHAR(self):
            return self.getToken(CopyBookParser.LESSTHANCHAR, 0)

        def MORETHANCHAR(self):
            return self.getToken(CopyBookParser.MORETHANCHAR, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def NUMERICLITERAL2(self):
            return self.getToken(CopyBookParser.NUMERICLITERAL2, 0)

        def DOUBLEMINUSCHAR(self):
            return self.getToken(CopyBookParser.DOUBLEMINUSCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_pictureChars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPictureChars" ):
                listener.enterPictureChars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPictureChars" ):
                listener.exitPictureChars(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPictureChars" ):
                return visitor.visitPictureChars(self)
            else:
                return visitor.visitChildren(self)




    def pictureChars(self):

        localctx = CopyBookParser.PictureCharsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_pictureChars)
        try:
            self.state = 3855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3837
                self.match(CopyBookParser.DOLLARCHAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3838
                self.match(CopyBookParser.IDENTIFIER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3839
                self.match(CopyBookParser.NUMERICLITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3840
                self.match(CopyBookParser.NUMERICLITERAL3)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3841
                self.match(CopyBookParser.SLASHCHAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3842
                self.match(CopyBookParser.COMMACHAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3843
                self.match(CopyBookParser.DOT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3844
                self.match(CopyBookParser.COLONCHAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3845
                self.match(CopyBookParser.ASTERISKCHAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3846
                self.match(CopyBookParser.DOUBLEASTERISKCHAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3847
                self.match(CopyBookParser.PLUSCHAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3848
                self.match(CopyBookParser.MINUSCHAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3849
                self.match(CopyBookParser.LESSTHANCHAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3850
                self.match(CopyBookParser.MORETHANCHAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3851
                self.integerLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3852
                self.match(CopyBookParser.NUMERICLITERAL2)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3853
                self.match(CopyBookParser.DOUBLEMINUSCHAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3854
                self.match(CopyBookParser.DOLLARCHAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PictureCardinalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_pictureCardinality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPictureCardinality" ):
                listener.enterPictureCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPictureCardinality" ):
                listener.exitPictureCardinality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPictureCardinality" ):
                return visitor.visitPictureCardinality(self)
            else:
                return visitor.visitChildren(self)




    def pictureCardinality(self):

        localctx = CopyBookParser.PictureCardinalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_pictureCardinality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3857
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 3858
            self.integerLiteral()
            self.state = 3859
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataReceivedByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTENT(self):
            return self.getToken(CopyBookParser.CONTENT, 0)

        def REFERENCE(self):
            return self.getToken(CopyBookParser.REFERENCE, 0)

        def REF(self):
            return self.getToken(CopyBookParser.REF, 0)

        def RECEIVED(self):
            return self.getToken(CopyBookParser.RECEIVED, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataReceivedByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataReceivedByClause" ):
                listener.enterDataReceivedByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataReceivedByClause" ):
                listener.exitDataReceivedByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataReceivedByClause" ):
                return visitor.visitDataReceivedByClause(self)
            else:
                return visitor.visitChildren(self)




    def dataReceivedByClause(self):

        localctx = CopyBookParser.DataReceivedByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_dataReceivedByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==388:
                self.state = 3861
                self.match(CopyBookParser.RECEIVED)


            self.state = 3865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 3864
                self.match(CopyBookParser.BY)


            self.state = 3867
            _la = self._input.LA(1)
            if not(_la==98 or _la==395 or _la==396):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataRecordAreaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def AREA(self):
            return self.getToken(CopyBookParser.AREA, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataRecordAreaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataRecordAreaClause" ):
                listener.enterDataRecordAreaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataRecordAreaClause" ):
                listener.exitDataRecordAreaClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataRecordAreaClause" ):
                return visitor.visitDataRecordAreaClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRecordAreaClause(self):

        localctx = CopyBookParser.DataRecordAreaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_dataRecordAreaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3869
            self.match(CopyBookParser.RECORD)
            self.state = 3870
            self.match(CopyBookParser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataRedefinesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDEFINES(self):
            return self.getToken(CopyBookParser.REDEFINES, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataRedefinesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataRedefinesClause" ):
                listener.enterDataRedefinesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataRedefinesClause" ):
                listener.exitDataRedefinesClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataRedefinesClause" ):
                return visitor.visitDataRedefinesClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRedefinesClause(self):

        localctx = CopyBookParser.DataRedefinesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_dataRedefinesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3872
            self.match(CopyBookParser.REDEFINES)
            self.state = 3873
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataRenamesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAMES(self):
            return self.getToken(CopyBookParser.RENAMES, 0)

        def qualifiedDataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,i)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataRenamesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataRenamesClause" ):
                listener.enterDataRenamesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataRenamesClause" ):
                listener.exitDataRenamesClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataRenamesClause" ):
                return visitor.visitDataRenamesClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRenamesClause(self):

        localctx = CopyBookParser.DataRenamesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_dataRenamesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3875
            self.match(CopyBookParser.RENAMES)
            self.state = 3876
            self.qualifiedDataName()
            self.state = 3879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 3877
                _la = self._input.LA(1)
                if not(_la==495 or _la==496):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3878
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataSignClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(CopyBookParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(CopyBookParser.TRAILING, 0)

        def SIGN(self):
            return self.getToken(CopyBookParser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(CopyBookParser.SEPARATE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def CHARACTER(self):
            return self.getToken(CopyBookParser.CHARACTER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataSignClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataSignClause" ):
                listener.enterDataSignClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataSignClause" ):
                listener.exitDataSignClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataSignClause" ):
                return visitor.visitDataSignClause(self)
            else:
                return visitor.visitChildren(self)




    def dataSignClause(self):

        localctx = CopyBookParser.DataSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_dataSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==450:
                self.state = 3881
                self.match(CopyBookParser.SIGN)
                self.state = 3883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 3882
                    self.match(CopyBookParser.IS)




            self.state = 3887
            _la = self._input.LA(1)
            if not(_la==276 or _la==506):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.state = 3888
                self.match(CopyBookParser.SEPARATE)
                self.state = 3890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
                if la_ == 1:
                    self.state = 3889
                    self.match(CopyBookParser.CHARACTER)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataSynchronizedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(CopyBookParser.SYNCHRONIZED, 0)

        def SYNC(self):
            return self.getToken(CopyBookParser.SYNC, 0)

        def LEFT(self):
            return self.getToken(CopyBookParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(CopyBookParser.RIGHT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataSynchronizedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataSynchronizedClause" ):
                listener.enterDataSynchronizedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataSynchronizedClause" ):
                listener.exitDataSynchronizedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataSynchronizedClause" ):
                return visitor.visitDataSynchronizedClause(self)
            else:
                return visitor.visitChildren(self)




    def dataSynchronizedClause(self):

        localctx = CopyBookParser.DataSynchronizedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_dataSynchronizedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3894
            _la = self._input.LA(1)
            if not(_la==480 or _la==481):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==277 or _la==423:
                self.state = 3895
                _la = self._input.LA(1)
                if not(_la==277 or _la==423):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataThreadLocalClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THREAD_LOCAL(self):
            return self.getToken(CopyBookParser.THREAD_LOCAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataThreadLocalClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataThreadLocalClause" ):
                listener.enterDataThreadLocalClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataThreadLocalClause" ):
                listener.exitDataThreadLocalClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataThreadLocalClause" ):
                return visitor.visitDataThreadLocalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataThreadLocalClause(self):

        localctx = CopyBookParser.DataThreadLocalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_dataThreadLocalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3898
                self.match(CopyBookParser.IS)


            self.state = 3901
            self.match(CopyBookParser.THREAD_LOCAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(CopyBookParser.TYPE, 0)

        def SHORT_DATE(self):
            return self.getToken(CopyBookParser.SHORT_DATE, 0)

        def LONG_DATE(self):
            return self.getToken(CopyBookParser.LONG_DATE, 0)

        def NUMERIC_DATE(self):
            return self.getToken(CopyBookParser.NUMERIC_DATE, 0)

        def NUMERIC_TIME(self):
            return self.getToken(CopyBookParser.NUMERIC_TIME, 0)

        def LONG_TIME(self):
            return self.getToken(CopyBookParser.LONG_TIME, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeClause" ):
                listener.enterDataTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeClause" ):
                listener.exitDataTypeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTypeClause" ):
                return visitor.visitDataTypeClause(self)
            else:
                return visitor.visitChildren(self)




    def dataTypeClause(self):

        localctx = CopyBookParser.DataTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_dataTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3903
            self.match(CopyBookParser.TYPE)
            self.state = 3905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3904
                self.match(CopyBookParser.IS)


            self.state = 3907
            _la = self._input.LA(1)
            if not(((((_la - 297)) & ~0x3f) == 0 and ((1 << (_la - 297)) & 21474836483) != 0) or _la==449):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeDefClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEDEF(self):
            return self.getToken(CopyBookParser.TYPEDEF, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataTypeDefClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeDefClause" ):
                listener.enterDataTypeDefClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeDefClause" ):
                listener.exitDataTypeDefClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTypeDefClause" ):
                return visitor.visitDataTypeDefClause(self)
            else:
                return visitor.visitChildren(self)




    def dataTypeDefClause(self):

        localctx = CopyBookParser.DataTypeDefClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_dataTypeDefClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3909
                self.match(CopyBookParser.IS)


            self.state = 3912
            self.match(CopyBookParser.TYPEDEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataUsageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(CopyBookParser.BINARY, 0)

        def BIT(self):
            return self.getToken(CopyBookParser.BIT, 0)

        def COMP(self):
            return self.getToken(CopyBookParser.COMP, 0)

        def COMP_1(self):
            return self.getToken(CopyBookParser.COMP_1, 0)

        def COMP_2(self):
            return self.getToken(CopyBookParser.COMP_2, 0)

        def COMP_3(self):
            return self.getToken(CopyBookParser.COMP_3, 0)

        def COMP_4(self):
            return self.getToken(CopyBookParser.COMP_4, 0)

        def COMP_5(self):
            return self.getToken(CopyBookParser.COMP_5, 0)

        def COMPUTATIONAL(self):
            return self.getToken(CopyBookParser.COMPUTATIONAL, 0)

        def COMPUTATIONAL_1(self):
            return self.getToken(CopyBookParser.COMPUTATIONAL_1, 0)

        def COMPUTATIONAL_2(self):
            return self.getToken(CopyBookParser.COMPUTATIONAL_2, 0)

        def COMPUTATIONAL_3(self):
            return self.getToken(CopyBookParser.COMPUTATIONAL_3, 0)

        def COMPUTATIONAL_4(self):
            return self.getToken(CopyBookParser.COMPUTATIONAL_4, 0)

        def COMPUTATIONAL_5(self):
            return self.getToken(CopyBookParser.COMPUTATIONAL_5, 0)

        def CONTROL_POINT(self):
            return self.getToken(CopyBookParser.CONTROL_POINT, 0)

        def DATE(self):
            return self.getToken(CopyBookParser.DATE, 0)

        def DISPLAY(self):
            return self.getToken(CopyBookParser.DISPLAY, 0)

        def DISPLAY_1(self):
            return self.getToken(CopyBookParser.DISPLAY_1, 0)

        def DOUBLE(self):
            return self.getToken(CopyBookParser.DOUBLE, 0)

        def EVENT(self):
            return self.getToken(CopyBookParser.EVENT, 0)

        def FUNCTION_POINTER(self):
            return self.getToken(CopyBookParser.FUNCTION_POINTER, 0)

        def INDEX(self):
            return self.getToken(CopyBookParser.INDEX, 0)

        def KANJI(self):
            return self.getToken(CopyBookParser.KANJI, 0)

        def LOCK(self):
            return self.getToken(CopyBookParser.LOCK, 0)

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def PACKED_DECIMAL(self):
            return self.getToken(CopyBookParser.PACKED_DECIMAL, 0)

        def POINTER(self):
            return self.getToken(CopyBookParser.POINTER, 0)

        def PROCEDURE_POINTER(self):
            return self.getToken(CopyBookParser.PROCEDURE_POINTER, 0)

        def REAL(self):
            return self.getToken(CopyBookParser.REAL, 0)

        def TASK(self):
            return self.getToken(CopyBookParser.TASK, 0)

        def dataSqlTypeClause(self):
            return self.getTypedRuleContext(CopyBookParser.DataSqlTypeClauseContext,0)


        def USAGE(self):
            return self.getToken(CopyBookParser.USAGE, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def TRUNCATED(self):
            return self.getToken(CopyBookParser.TRUNCATED, 0)

        def EXTENDED(self):
            return self.getToken(CopyBookParser.EXTENDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataUsageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataUsageClause" ):
                listener.enterDataUsageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataUsageClause" ):
                listener.exitDataUsageClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataUsageClause" ):
                return visitor.visitDataUsageClause(self)
            else:
                return visitor.visitChildren(self)




    def dataUsageClause(self):

        localctx = CopyBookParser.DataUsageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_dataUsageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==517:
                self.state = 3914
                self.match(CopyBookParser.USAGE)
                self.state = 3916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 3915
                    self.match(CopyBookParser.IS)




            self.state = 3954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.state = 3920
                self.match(CopyBookParser.BINARY)
                self.state = 3922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208 or _la==508:
                    self.state = 3921
                    _la = self._input.LA(1)
                    if not(_la==208 or _la==508):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [46]:
                self.state = 3924
                self.match(CopyBookParser.BIT)
                pass
            elif token in [83]:
                self.state = 3925
                self.match(CopyBookParser.COMP)
                pass
            elif token in [84]:
                self.state = 3926
                self.match(CopyBookParser.COMP_1)
                pass
            elif token in [85]:
                self.state = 3927
                self.match(CopyBookParser.COMP_2)
                pass
            elif token in [86]:
                self.state = 3928
                self.match(CopyBookParser.COMP_3)
                pass
            elif token in [87]:
                self.state = 3929
                self.match(CopyBookParser.COMP_4)
                pass
            elif token in [88]:
                self.state = 3930
                self.match(CopyBookParser.COMP_5)
                pass
            elif token in [89]:
                self.state = 3931
                self.match(CopyBookParser.COMPUTATIONAL)
                pass
            elif token in [90]:
                self.state = 3932
                self.match(CopyBookParser.COMPUTATIONAL_1)
                pass
            elif token in [91]:
                self.state = 3933
                self.match(CopyBookParser.COMPUTATIONAL_2)
                pass
            elif token in [92]:
                self.state = 3934
                self.match(CopyBookParser.COMPUTATIONAL_3)
                pass
            elif token in [93]:
                self.state = 3935
                self.match(CopyBookParser.COMPUTATIONAL_4)
                pass
            elif token in [94]:
                self.state = 3936
                self.match(CopyBookParser.COMPUTATIONAL_5)
                pass
            elif token in [101]:
                self.state = 3937
                self.match(CopyBookParser.CONTROL_POINT)
                pass
            elif token in [114]:
                self.state = 3938
                self.match(CopyBookParser.DATE)
                pass
            elif token in [147]:
                self.state = 3939
                self.match(CopyBookParser.DISPLAY)
                pass
            elif token in [148]:
                self.state = 3940
                self.match(CopyBookParser.DISPLAY_1)
                pass
            elif token in [152]:
                self.state = 3941
                self.match(CopyBookParser.DOUBLE)
                pass
            elif token in [200]:
                self.state = 3942
                self.match(CopyBookParser.EVENT)
                pass
            elif token in [225]:
                self.state = 3943
                self.match(CopyBookParser.FUNCTION_POINTER)
                pass
            elif token in [247]:
                self.state = 3944
                self.match(CopyBookParser.INDEX)
                pass
            elif token in [264]:
                self.state = 3945
                self.match(CopyBookParser.KANJI)
                pass
            elif token in [296]:
                self.state = 3946
                self.match(CopyBookParser.LOCK)
                pass
            elif token in [315]:
                self.state = 3947
                self.match(CopyBookParser.NATIONAL)
                pass
            elif token in [350]:
                self.state = 3948
                self.match(CopyBookParser.PACKED_DECIMAL)
                pass
            elif token in [361]:
                self.state = 3949
                self.match(CopyBookParser.POINTER)
                pass
            elif token in [369]:
                self.state = 3950
                self.match(CopyBookParser.PROCEDURE_POINTER)
                pass
            elif token in [385]:
                self.state = 3951
                self.match(CopyBookParser.REAL)
                pass
            elif token in [485]:
                self.state = 3952
                self.match(CopyBookParser.TASK)
                pass
            elif token in [803]:
                self.state = 3953
                self.dataSqlTypeClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataUsingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def LANGUAGE(self):
            return self.getToken(CopyBookParser.LANGUAGE, 0)

        def CONVENTION(self):
            return self.getToken(CopyBookParser.CONVENTION, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataUsingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataUsingClause" ):
                listener.enterDataUsingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataUsingClause" ):
                listener.exitDataUsingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataUsingClause" ):
                return visitor.visitDataUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def dataUsingClause(self):

        localctx = CopyBookParser.DataUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_dataUsingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3956
            self.match(CopyBookParser.USING)
            self.state = 3957
            _la = self._input.LA(1)
            if not(_la==103 or _la==272):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.state = 3958
                self.match(CopyBookParser.OF)


            self.state = 3963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.state = 3961
                self.cobolWord()
                pass

            elif la_ == 2:
                self.state = 3962
                self.dataName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataValueClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataValueInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DataValueIntervalContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DataValueIntervalContext,i)


        def VALUE(self):
            return self.getToken(CopyBookParser.VALUE, 0)

        def VALUES(self):
            return self.getToken(CopyBookParser.VALUES, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMMACHAR)
            else:
                return self.getToken(CopyBookParser.COMMACHAR, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataValueClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataValueClause" ):
                listener.enterDataValueClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataValueClause" ):
                listener.exitDataValueClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataValueClause" ):
                return visitor.visitDataValueClause(self)
            else:
                return visitor.visitChildren(self)




    def dataValueClause(self):

        localctx = CopyBookParser.DataValueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_dataValueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3973
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [520]:
                self.state = 3965
                self.match(CopyBookParser.VALUE)
                self.state = 3967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 3966
                    self.match(CopyBookParser.IS)


                pass
            elif token in [521]:
                self.state = 3969
                self.match(CopyBookParser.VALUES)
                self.state = 3971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
                if la_ == 1:
                    self.state = 3970
                    self.match(CopyBookParser.ARE)


                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 237, 238, 246, 258, 267, 271, 272, 279, 292, 293, 301, 302, 315, 321, 322, 325, 326, 327, 335, 336, 338, 354, 372, 373, 378, 379, 380, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 463, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 534, 536, 537, 542, 569, 570, 571, 572, 573, 574, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                pass
            else:
                pass
            self.state = 3975
            self.dataValueInterval()
            self.state = 3982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,502,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3977
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
                    if la_ == 1:
                        self.state = 3976
                        self.match(CopyBookParser.COMMACHAR)


                    self.state = 3979
                    self.dataValueInterval() 
                self.state = 3984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,502,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataValueIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataValueIntervalFrom(self):
            return self.getTypedRuleContext(CopyBookParser.DataValueIntervalFromContext,0)


        def dataValueIntervalTo(self):
            return self.getTypedRuleContext(CopyBookParser.DataValueIntervalToContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataValueInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataValueInterval" ):
                listener.enterDataValueInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataValueInterval" ):
                listener.exitDataValueInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataValueInterval" ):
                return visitor.visitDataValueInterval(self)
            else:
                return visitor.visitChildren(self)




    def dataValueInterval(self):

        localctx = CopyBookParser.DataValueIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_dataValueInterval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3985
            self.dataValueIntervalFrom()
            self.state = 3987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 3986
                self.dataValueIntervalTo()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataValueIntervalFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataValueIntervalFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataValueIntervalFrom" ):
                listener.enterDataValueIntervalFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataValueIntervalFrom" ):
                listener.exitDataValueIntervalFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataValueIntervalFrom" ):
                return visitor.visitDataValueIntervalFrom(self)
            else:
                return visitor.visitChildren(self)




    def dataValueIntervalFrom(self):

        localctx = CopyBookParser.DataValueIntervalFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_dataValueIntervalFrom)
        try:
            self.state = 3992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3989
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3990
                self.cobolWord()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3991
                self.figurativeConstant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataValueIntervalToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataValueIntervalTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataValueIntervalTo" ):
                listener.enterDataValueIntervalTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataValueIntervalTo" ):
                listener.exitDataValueIntervalTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataValueIntervalTo" ):
                return visitor.visitDataValueIntervalTo(self)
            else:
                return visitor.visitChildren(self)




    def dataValueIntervalTo(self):

        localctx = CopyBookParser.DataValueIntervalToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_dataValueIntervalTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3994
            _la = self._input.LA(1)
            if not(_la==495 or _la==496):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3995
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataWithLowerBoundsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(CopyBookParser.LOWER, 0)

        def BOUNDS(self):
            return self.getToken(CopyBookParser.BOUNDS, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_dataWithLowerBoundsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataWithLowerBoundsClause" ):
                listener.enterDataWithLowerBoundsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataWithLowerBoundsClause" ):
                listener.exitDataWithLowerBoundsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataWithLowerBoundsClause" ):
                return visitor.visitDataWithLowerBoundsClause(self)
            else:
                return visitor.visitChildren(self)




    def dataWithLowerBoundsClause(self):

        localctx = CopyBookParser.DataWithLowerBoundsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_dataWithLowerBoundsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 3997
                self.match(CopyBookParser.WITH)


            self.state = 4000
            self.match(CopyBookParser.LOWER)
            self.state = 4001
            self.match(CopyBookParser.BOUNDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(CopyBookParser.PROCEDURE, 0)

        def DIVISION(self):
            return self.getToken(CopyBookParser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def procedureDivisionBody(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionBodyContext,0)


        def procedureDivisionUsingClause(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionUsingClauseContext,0)


        def procedureDivisionGivingClause(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionGivingClauseContext,0)


        def procedureDeclaratives(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureDeclarativesContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivision" ):
                listener.enterProcedureDivision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivision" ):
                listener.exitProcedureDivision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivision" ):
                return visitor.visitProcedureDivision(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivision(self):

        localctx = CopyBookParser.ProcedureDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_procedureDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4003
            self.match(CopyBookParser.PROCEDURE)
            self.state = 4004
            self.match(CopyBookParser.DIVISION)
            self.state = 4006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62 or _la==519:
                self.state = 4005
                self.procedureDivisionUsingClause()


            self.state = 4009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==228 or _la==417:
                self.state = 4008
                self.procedureDivisionGivingClause()


            self.state = 4011
            self.match(CopyBookParser.DOT_FS)
            self.state = 4013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 4012
                self.procedureDeclaratives()


            self.state = 4015
            self.procedureDivisionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionUsingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def CHAINING(self):
            return self.getToken(CopyBookParser.CHAINING, 0)

        def procedureDivisionUsingParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureDivisionUsingParameterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionUsingParameterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionUsingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionUsingClause" ):
                listener.enterProcedureDivisionUsingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionUsingClause" ):
                listener.exitProcedureDivisionUsingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionUsingClause" ):
                return visitor.visitProcedureDivisionUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionUsingClause(self):

        localctx = CopyBookParser.ProcedureDivisionUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_procedureDivisionUsingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4017
            _la = self._input.LA(1)
            if not(_la==62 or _la==519):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4019 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4018
                self.procedureDivisionUsingParameter()
                self.state = 4021 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007201134465025) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144115249281261569) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550488277114913) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963875331) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430468061) != 0) or ((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 16888498606838897) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionGivingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def RETURNING(self):
            return self.getToken(CopyBookParser.RETURNING, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionGivingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionGivingClause" ):
                listener.enterProcedureDivisionGivingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionGivingClause" ):
                listener.exitProcedureDivisionGivingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionGivingClause" ):
                return visitor.visitProcedureDivisionGivingClause(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionGivingClause(self):

        localctx = CopyBookParser.ProcedureDivisionGivingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_procedureDivisionGivingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4023
            _la = self._input.LA(1)
            if not(_la==228 or _la==417):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4024
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionUsingParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureDivisionByReferencePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionByReferencePhraseContext,0)


        def procedureDivisionByValuePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionByValuePhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionUsingParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionUsingParameter" ):
                listener.enterProcedureDivisionUsingParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionUsingParameter" ):
                listener.exitProcedureDivisionUsingParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionUsingParameter" ):
                return visitor.visitProcedureDivisionUsingParameter(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionUsingParameter(self):

        localctx = CopyBookParser.ProcedureDivisionUsingParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_procedureDivisionUsingParameter)
        try:
            self.state = 4028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4026
                self.procedureDivisionByReferencePhrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4027
                self.procedureDivisionByValuePhrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionByReferencePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(CopyBookParser.REFERENCE, 0)

        def procedureDivisionByReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureDivisionByReferenceContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionByReferenceContext,i)


        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionByReferencePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionByReferencePhrase" ):
                listener.enterProcedureDivisionByReferencePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionByReferencePhrase" ):
                listener.exitProcedureDivisionByReferencePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionByReferencePhrase" ):
                return visitor.visitProcedureDivisionByReferencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByReferencePhrase(self):

        localctx = CopyBookParser.ProcedureDivisionByReferencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_procedureDivisionByReferencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
            if la_ == 1:
                self.state = 4031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 4030
                    self.match(CopyBookParser.BY)


                self.state = 4033
                self.match(CopyBookParser.REFERENCE)


            self.state = 4037 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4036
                    self.procedureDivisionByReference()

                else:
                    raise NoViableAltException(self)
                self.state = 4039 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,513,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionByReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def OPTIONAL(self):
            return self.getToken(CopyBookParser.OPTIONAL, 0)

        def ANY(self):
            return self.getToken(CopyBookParser.ANY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionByReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionByReference" ):
                listener.enterProcedureDivisionByReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionByReference" ):
                listener.exitProcedureDivisionByReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionByReference" ):
                return visitor.visitProcedureDivisionByReference(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByReference(self):

        localctx = CopyBookParser.ProcedureDivisionByReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_procedureDivisionByReference)
        self._la = 0 # Token type
        try:
            self.state = 4049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==340:
                    self.state = 4041
                    self.match(CopyBookParser.OPTIONAL)


                self.state = 4046
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 4044
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 4045
                    self.fileName()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4048
                self.match(CopyBookParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionByValuePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(CopyBookParser.VALUE, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def procedureDivisionByValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureDivisionByValueContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureDivisionByValueContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionByValuePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionByValuePhrase" ):
                listener.enterProcedureDivisionByValuePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionByValuePhrase" ):
                listener.exitProcedureDivisionByValuePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionByValuePhrase" ):
                return visitor.visitProcedureDivisionByValuePhrase(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByValuePhrase(self):

        localctx = CopyBookParser.ProcedureDivisionByValuePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_procedureDivisionByValuePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 4051
                self.match(CopyBookParser.BY)


            self.state = 4054
            self.match(CopyBookParser.VALUE)
            self.state = 4056 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4055
                    self.procedureDivisionByValue()

                else:
                    raise NoViableAltException(self)
                self.state = 4058 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,518,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionByValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def ANY(self):
            return self.getToken(CopyBookParser.ANY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionByValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionByValue" ):
                listener.enterProcedureDivisionByValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionByValue" ):
                listener.exitProcedureDivisionByValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionByValue" ):
                return visitor.visitProcedureDivisionByValue(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByValue(self):

        localctx = CopyBookParser.ProcedureDivisionByValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_procedureDivisionByValue)
        try:
            self.state = 4063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4060
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4061
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4062
                self.match(CopyBookParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDeclarativesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARATIVES(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DECLARATIVES)
            else:
                return self.getToken(CopyBookParser.DECLARATIVES, i)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def END(self):
            return self.getToken(CopyBookParser.END, 0)

        def copyStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CopyStatementContext,0)


        def procedureDeclarative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureDeclarativeContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureDeclarativeContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDeclaratives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDeclaratives" ):
                listener.enterProcedureDeclaratives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDeclaratives" ):
                listener.exitProcedureDeclaratives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDeclaratives" ):
                return visitor.visitProcedureDeclaratives(self)
            else:
                return visitor.visitChildren(self)




    def procedureDeclaratives(self):

        localctx = CopyBookParser.ProcedureDeclarativesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_procedureDeclaratives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4065
            self.match(CopyBookParser.DECLARATIVES)
            self.state = 4066
            self.match(CopyBookParser.DOT_FS)
            self.state = 4073
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 570, 571, 572, 573, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 4068 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4067
                    self.procedureDeclarative()
                    self.state = 4070 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432406780929) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007200060723201) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144115239617585153) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550486129369121) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 30403713249050627) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430467585) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 1055531162927427) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                        break

                pass
            elif token in [105]:
                self.state = 4072
                self.copyStatement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4075
            self.match(CopyBookParser.END)
            self.state = 4076
            self.match(CopyBookParser.DECLARATIVES)
            self.state = 4077
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDeclarativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureSectionHeader(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureSectionHeaderContext,0)


        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def paragraphs(self):
            return self.getTypedRuleContext(CopyBookParser.ParagraphsContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(CopyBookParser.UseStatementContext,0)


        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDeclarative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDeclarative" ):
                listener.enterProcedureDeclarative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDeclarative" ):
                listener.exitProcedureDeclarative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDeclarative" ):
                return visitor.visitProcedureDeclarative(self)
            else:
                return visitor.visitChildren(self)




    def procedureDeclarative(self):

        localctx = CopyBookParser.ProcedureDeclarativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_procedureDeclarative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4079
            self.procedureSectionHeader()
            self.state = 4081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
            if la_ == 1:
                self.state = 4080
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==518:
                self.state = 4083
                self.useStatement()


            self.state = 4086
            self.match(CopyBookParser.DOT_FS)
            self.state = 4087
            self.paragraphs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSectionHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sectionName(self):
            return self.getTypedRuleContext(CopyBookParser.SectionNameContext,0)


        def SECTION(self):
            return self.getToken(CopyBookParser.SECTION, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureSectionHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSectionHeader" ):
                listener.enterProcedureSectionHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSectionHeader" ):
                listener.exitProcedureSectionHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureSectionHeader" ):
                return visitor.visitProcedureSectionHeader(self)
            else:
                return visitor.visitChildren(self)




    def procedureSectionHeader(self):

        localctx = CopyBookParser.ProcedureSectionHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_procedureSectionHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4089
            self.sectionName()
            self.state = 4090
            self.match(CopyBookParser.SECTION)
            self.state = 4092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 15) != 0):
                self.state = 4091
                self.integerLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureDivisionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paragraphs(self):
            return self.getTypedRuleContext(CopyBookParser.ParagraphsContext,0)


        def procedureSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureSectionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureSectionContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureDivisionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureDivisionBody" ):
                listener.enterProcedureDivisionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureDivisionBody" ):
                listener.exitProcedureDivisionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureDivisionBody" ):
                return visitor.visitProcedureDivisionBody(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionBody(self):

        localctx = CopyBookParser.ProcedureDivisionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_procedureDivisionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4094
            self.paragraphs()
            self.state = 4098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432406780929) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007200060723201) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144115239617585153) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550486129369121) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 30403713249050627) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430467585) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 1055531162927427) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                self.state = 4095
                self.procedureSection()
                self.state = 4100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureSectionHeader(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureSectionHeaderContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def paragraphs(self):
            return self.getTypedRuleContext(CopyBookParser.ParagraphsContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSection" ):
                listener.enterProcedureSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSection" ):
                listener.exitProcedureSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureSection" ):
                return visitor.visitProcedureSection(self)
            else:
                return visitor.visitChildren(self)




    def procedureSection(self):

        localctx = CopyBookParser.ProcedureSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_procedureSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4101
            self.procedureSectionHeader()
            self.state = 4102
            self.match(CopyBookParser.DOT_FS)
            self.state = 4103
            self.paragraphs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParagraphsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SentenceContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SentenceContext,i)


        def paragraph(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ParagraphContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ParagraphContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_paragraphs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParagraphs" ):
                listener.enterParagraphs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParagraphs" ):
                listener.exitParagraphs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParagraphs" ):
                return visitor.visitParagraphs(self)
            else:
                return visitor.visitChildren(self)




    def paragraphs(self):

        localctx = CopyBookParser.ParagraphsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_paragraphs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4108
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,526,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4105
                    self.sentence() 
                self.state = 4110
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,526,self._ctx)

            self.state = 4114
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,527,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4111
                    self.paragraph() 
                self.state = 4116
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,527,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParagraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paragraphName(self):
            return self.getTypedRuleContext(CopyBookParser.ParagraphNameContext,0)


        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def alteredGoTo(self):
            return self.getTypedRuleContext(CopyBookParser.AlteredGoToContext,0)


        def sentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SentenceContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SentenceContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_paragraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParagraph" ):
                listener.enterParagraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParagraph" ):
                listener.exitParagraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParagraph" ):
                return visitor.visitParagraph(self)
            else:
                return visitor.visitChildren(self)




    def paragraph(self):

        localctx = CopyBookParser.ParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_paragraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4117
            self.paragraphName()
            self.state = 4118
            _la = self._input.LA(1)
            if not(_la==550 or _la==551):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
            if la_ == 1:
                self.state = 4119
                self.alteredGoTo()
                pass

            elif la_ == 2:
                self.state = 4123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,528,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4120
                        self.sentence() 
                    self.state = 4125
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,528,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SentenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def commentEntry(self):
            return self.getTypedRuleContext(CopyBookParser.CommentEntryContext,0)


        def COMMENTTAG(self):
            return self.getToken(CopyBookParser.COMMENTTAG, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def NEWLINE(self):
            return self.getToken(CopyBookParser.NEWLINE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sentence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSentence" ):
                listener.enterSentence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSentence" ):
                listener.exitSentence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSentence" ):
                return visitor.visitSentence(self)
            else:
                return visitor.visitChildren(self)




    def sentence(self):

        localctx = CopyBookParser.SentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_sentence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4129 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4128
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 4131 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,530,self._ctx)

            self.state = 4134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 550)) & ~0x3f) == 0 and ((1 << (_la - 550)) & 268435459) != 0):
                self.state = 4133
                _la = self._input.LA(1)
                if not(((((_la - 550)) & ~0x3f) == 0 and ((1 << (_la - 550)) & 268435459) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [582]:
                self.state = 4136
                self.commentEntry()
                pass
            elif token in [544]:
                self.state = 4137
                self.match(CopyBookParser.COMMENTTAG)
                pass
            elif token in [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 55, 56, 64, 67, 70, 82, 95, 99, 100, 105, 110, 111, 112, 113, 119, 129, 132, 133, 135, 142, 144, 147, 149, 162, 163, 188, 193, 199, 204, 205, 207, 210, 211, 212, 221, 222, 226, 227, 230, 241, 242, 243, 246, 251, 252, 255, 258, 271, 272, 279, 292, 293, 295, 304, 311, 313, 315, 322, 327, 334, 335, 336, 338, 339, 354, 355, 372, 373, 375, 377, 378, 379, 386, 387, 399, 405, 406, 407, 412, 415, 420, 428, 429, 430, 436, 437, 439, 440, 442, 451, 452, 460, 462, 468, 469, 470, 471, 475, 479, 483, 487, 488, 489, 490, 493, 497, 500, 505, 507, 513, 524, 525, 529, 530, 532, 542, 570, 571, 572, 573, 577, 579, 580, 581, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def acceptStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AcceptStatementContext,0)


        def addStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AddStatementContext,0)


        def alterStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AlterStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CallStatementContext,0)


        def cancelStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CancelStatementContext,0)


        def closeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CloseStatementContext,0)


        def computeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ComputeStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ContinueStatementContext,0)


        def copyStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CopyStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(CopyBookParser.DeleteStatementContext,0)


        def disableStatement(self):
            return self.getTypedRuleContext(CopyBookParser.DisableStatementContext,0)


        def displayStatement(self):
            return self.getTypedRuleContext(CopyBookParser.DisplayStatementContext,0)


        def divideStatement(self):
            return self.getTypedRuleContext(CopyBookParser.DivideStatementContext,0)


        def enableStatement(self):
            return self.getTypedRuleContext(CopyBookParser.EnableStatementContext,0)


        def entryStatement(self):
            return self.getTypedRuleContext(CopyBookParser.EntryStatementContext,0)


        def evaluateStatement(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateStatementContext,0)


        def exhibitStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ExhibitStatementContext,0)


        def execCicsStatement2(self):
            return self.getTypedRuleContext(CopyBookParser.ExecCicsStatement2Context,0)


        def execCicsStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ExecCicsStatementContext,0)


        def execSqlStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ExecSqlStatementContext,0)


        def execSqlStatement2(self):
            return self.getTypedRuleContext(CopyBookParser.ExecSqlStatement2Context,0)


        def execSqlImsStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ExecSqlImsStatementContext,0)


        def exitStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ExitStatementContext,0)


        def generateStatement(self):
            return self.getTypedRuleContext(CopyBookParser.GenerateStatementContext,0)


        def gobackStatement(self):
            return self.getTypedRuleContext(CopyBookParser.GobackStatementContext,0)


        def goToStatement(self):
            return self.getTypedRuleContext(CopyBookParser.GoToStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(CopyBookParser.IfStatementContext,0)


        def initializeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.InitializeStatementContext,0)


        def initiateStatement(self):
            return self.getTypedRuleContext(CopyBookParser.InitiateStatementContext,0)


        def inspectStatement(self):
            return self.getTypedRuleContext(CopyBookParser.InspectStatementContext,0)


        def mergeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.MergeStatementContext,0)


        def moveStatement(self):
            return self.getTypedRuleContext(CopyBookParser.MoveStatementContext,0)


        def multiplyStatement(self):
            return self.getTypedRuleContext(CopyBookParser.MultiplyStatementContext,0)


        def openStatement(self):
            return self.getTypedRuleContext(CopyBookParser.OpenStatementContext,0)


        def performStatement(self):
            return self.getTypedRuleContext(CopyBookParser.PerformStatementContext,0)


        def purgeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.PurgeStatementContext,0)


        def readStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReadStatementContext,0)


        def receiveStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReceiveStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReleaseStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReturnStatementContext,0)


        def rewriteStatement(self):
            return self.getTypedRuleContext(CopyBookParser.RewriteStatementContext,0)


        def searchStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SearchStatementContext,0)


        def sendStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SendStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SetStatementContext,0)


        def sortStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SortStatementContext,0)


        def startStatement(self):
            return self.getTypedRuleContext(CopyBookParser.StartStatementContext,0)


        def stopStatement(self):
            return self.getTypedRuleContext(CopyBookParser.StopStatementContext,0)


        def stringStatement(self):
            return self.getTypedRuleContext(CopyBookParser.StringStatementContext,0)


        def subtractStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SubtractStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(CopyBookParser.TransactionStatementContext,0)


        def transactionCancelStatement(self):
            return self.getTypedRuleContext(CopyBookParser.TransactionCancelStatementContext,0)


        def terminateStatement(self):
            return self.getTypedRuleContext(CopyBookParser.TerminateStatementContext,0)


        def unstringStatement(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringStatementContext,0)


        def writeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.WriteStatementContext,0)


        def xmlParseStatement(self):
            return self.getTypedRuleContext(CopyBookParser.XmlParseStatementContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CopyBookParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_statement)
        try:
            self.state = 4195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4140
                self.acceptStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4141
                self.addStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4142
                self.alterStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4143
                self.callStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4144
                self.cancelStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4145
                self.closeStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4146
                self.computeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4147
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4148
                self.copyStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4149
                self.deleteStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4150
                self.disableStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4151
                self.displayStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4152
                self.divideStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4153
                self.enableStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4154
                self.entryStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4155
                self.evaluateStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4156
                self.exhibitStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4157
                self.execCicsStatement2()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 4158
                self.execCicsStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 4159
                self.execSqlStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 4160
                self.execSqlStatement2()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 4161
                self.execSqlImsStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 4162
                self.exitStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 4163
                self.generateStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 4164
                self.gobackStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 4165
                self.goToStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 4166
                self.ifStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 4167
                self.initializeStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 4168
                self.initiateStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 4169
                self.inspectStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 4170
                self.mergeStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 4171
                self.moveStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 4172
                self.multiplyStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 4173
                self.openStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 4174
                self.performStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 4175
                self.purgeStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 4176
                self.readStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 4177
                self.receiveStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 4178
                self.releaseStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 4179
                self.returnStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 4180
                self.rewriteStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 4181
                self.searchStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 4182
                self.sendStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 4183
                self.setStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 4184
                self.sortStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 4185
                self.startStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 4186
                self.stopStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 4187
                self.stringStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 4188
                self.subtractStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 4189
                self.transactionStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 4190
                self.transactionCancelStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 4191
                self.terminateStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 4192
                self.unstringStatement()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 4193
                self.writeStatement()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 4194
                self.xmlParseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmlParseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(CopyBookParser.XML, 0)

        def PARSE(self):
            return self.getToken(CopyBookParser.PARSE, 0)

        def xmlDataname(self):
            return self.getTypedRuleContext(CopyBookParser.XmlDatanameContext,0)


        def xmlProcessingProcedure(self):
            return self.getTypedRuleContext(CopyBookParser.XmlProcessingProcedureContext,0)


        def endXml(self):
            return self.getTypedRuleContext(CopyBookParser.EndXmlContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_xmlParseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlParseStatement" ):
                listener.enterXmlParseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlParseStatement" ):
                listener.exitXmlParseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlParseStatement" ):
                return visitor.visitXmlParseStatement(self)
            else:
                return visitor.visitChildren(self)




    def xmlParseStatement(self):

        localctx = CopyBookParser.XmlParseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_xmlParseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4197
            self.match(CopyBookParser.XML)
            self.state = 4198
            self.match(CopyBookParser.PARSE)
            self.state = 4199
            self.xmlDataname()
            self.state = 4200
            self.xmlProcessingProcedure()
            self.state = 4202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==185:
                self.state = 4201
                self.endXml()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmlDatanameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_xmlDataname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlDataname" ):
                listener.enterXmlDataname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlDataname" ):
                listener.exitXmlDataname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlDataname" ):
                return visitor.visitXmlDataname(self)
            else:
                return visitor.visitChildren(self)




    def xmlDataname(self):

        localctx = CopyBookParser.XmlDatanameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_xmlDataname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4204
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmlProcessingProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCESSING(self):
            return self.getToken(CopyBookParser.PROCESSING, 0)

        def PROCEDURE(self):
            return self.getToken(CopyBookParser.PROCEDURE, 0)

        def procedureName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,i)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_xmlProcessingProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlProcessingProcedure" ):
                listener.enterXmlProcessingProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlProcessingProcedure" ):
                listener.exitXmlProcessingProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlProcessingProcedure" ):
                return visitor.visitXmlProcessingProcedure(self)
            else:
                return visitor.visitChildren(self)




    def xmlProcessingProcedure(self):

        localctx = CopyBookParser.XmlProcessingProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_xmlProcessingProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4206
            self.match(CopyBookParser.PROCESSING)
            self.state = 4207
            self.match(CopyBookParser.PROCEDURE)
            self.state = 4209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 4208
                self.match(CopyBookParser.IS)


            self.state = 4211
            self.procedureName()
            self.state = 4214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 4212
                _la = self._input.LA(1)
                if not(_la==495 or _la==496):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4213
                self.procedureName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndXmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END_XML(self):
            return self.getToken(CopyBookParser.END_XML, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_endXml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndXml" ):
                listener.enterEndXml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndXml" ):
                listener.exitEndXml(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndXml" ):
                return visitor.visitEndXml(self)
            else:
                return visitor.visitChildren(self)




    def endXml(self):

        localctx = CopyBookParser.EndXmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_endXml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4216
            self.match(CopyBookParser.END_XML)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecSqlStatement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(CopyBookParser.EXEC, 0)

        def SQL(self):
            return self.getToken(CopyBookParser.SQL, 0)

        def charDataSql(self):
            return self.getTypedRuleContext(CopyBookParser.CharDataSqlContext,0)


        def END_EXEC(self):
            return self.getToken(CopyBookParser.END_EXEC, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_execSqlStatement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecSqlStatement2" ):
                listener.enterExecSqlStatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecSqlStatement2" ):
                listener.exitExecSqlStatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecSqlStatement2" ):
                return visitor.visitExecSqlStatement2(self)
            else:
                return visitor.visitChildren(self)




    def execSqlStatement2(self):

        localctx = CopyBookParser.ExecSqlStatement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_execSqlStatement2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4218
            self.match(CopyBookParser.EXEC)
            self.state = 4219
            self.match(CopyBookParser.SQL)
            self.state = 4220
            self.charDataSql()
            self.state = 4221
            self.match(CopyBookParser.END_EXEC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CopyBookParser.RULE_sqlCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlCode" ):
                listener.enterSqlCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlCode" ):
                listener.exitSqlCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlCode" ):
                return visitor.visitSqlCode(self)
            else:
                return visitor.visitChildren(self)




    def sqlCode(self):

        localctx = CopyBookParser.SqlCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_sqlCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,537,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 4223
                    self.matchWildcard() 
                self.state = 4228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,537,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecCicsStatement2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(CopyBookParser.EXEC, 0)

        def CICS(self):
            return self.getToken(CopyBookParser.CICS, 0)

        def commandName(self):
            return self.getTypedRuleContext(CopyBookParser.CommandNameContext,0)


        def END_EXEC(self):
            return self.getToken(CopyBookParser.END_EXEC, 0)

        def commandBody(self):
            return self.getTypedRuleContext(CopyBookParser.CommandBodyContext,0)


        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_execCicsStatement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecCicsStatement2" ):
                listener.enterExecCicsStatement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecCicsStatement2" ):
                listener.exitExecCicsStatement2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecCicsStatement2" ):
                return visitor.visitExecCicsStatement2(self)
            else:
                return visitor.visitChildren(self)




    def execCicsStatement2(self):

        localctx = CopyBookParser.ExecCicsStatement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_execCicsStatement2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4229
            self.match(CopyBookParser.EXEC)
            self.state = 4230
            self.match(CopyBookParser.CICS)
            self.state = 4231
            self.commandName()
            self.state = 4233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
            if la_ == 1:
                self.state = 4232
                self.commandBody()


            self.state = 4235
            self.match(CopyBookParser.END_EXEC)
            self.state = 4237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
            if la_ == 1:
                self.state = 4236
                self.match(CopyBookParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def WRITE(self):
            return self.getToken(CopyBookParser.WRITE, 0)

        def REWRITE(self):
            return self.getToken(CopyBookParser.REWRITE, 0)

        def START(self):
            return self.getToken(CopyBookParser.START, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_commandName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommandName" ):
                listener.enterCommandName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommandName" ):
                listener.exitCommandName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommandName" ):
                return visitor.visitCommandName(self)
            else:
                return visitor.visitChildren(self)




    def commandName(self):

        localctx = CopyBookParser.CommandNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_commandName)
        try:
            self.state = 4243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4239
                self.cobolWord()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4240
                self.match(CopyBookParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4241
                self.match(CopyBookParser.REWRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4242
                self.match(CopyBookParser.START)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commandParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CommandParameterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CommandParameterContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.NEWLINE)
            else:
                return self.getToken(CopyBookParser.NEWLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_commandBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommandBody" ):
                listener.enterCommandBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommandBody" ):
                listener.exitCommandBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommandBody" ):
                return visitor.visitCommandBody(self)
            else:
                return visitor.visitChildren(self)




    def commandBody(self):

        localctx = CopyBookParser.CommandBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_commandBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4247 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4247
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                        self.state = 4245
                        self.commandParameter()
                        pass
                    elif token in [578]:
                        self.state = 4246
                        self.match(CopyBookParser.NEWLINE)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 4249 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,542,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterName(self):
            return self.getTypedRuleContext(CopyBookParser.ParameterNameContext,0)


        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def parameterValue(self):
            return self.getTypedRuleContext(CopyBookParser.ParameterValueContext,0)


        def parameterValueWithIndex(self):
            return self.getTypedRuleContext(CopyBookParser.ParameterValueWithIndexContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_commandParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommandParameter" ):
                listener.enterCommandParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommandParameter" ):
                listener.exitCommandParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommandParameter" ):
                return visitor.visitCommandParameter(self)
            else:
                return visitor.visitChildren(self)




    def commandParameter(self):

        localctx = CopyBookParser.CommandParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_commandParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4251
            self.parameterName()
            self.state = 4259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==558:
                self.state = 4252
                self.match(CopyBookParser.LPARENCHAR)
                self.state = 4255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                if la_ == 1:
                    self.state = 4253
                    self.parameterValue()
                    pass

                elif la_ == 2:
                    self.state = 4254
                    self.parameterValueWithIndex()
                    pass


                self.state = 4257
                self.match(CopyBookParser.RPARENCHAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def WRITE(self):
            return self.getToken(CopyBookParser.WRITE, 0)

        def REWRITE(self):
            return self.getToken(CopyBookParser.REWRITE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterName" ):
                return visitor.visitParameterName(self)
            else:
                return visitor.visitChildren(self)




    def parameterName(self):

        localctx = CopyBookParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_parameterName)
        try:
            self.state = 4264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4261
                self.cobolWord()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4262
                self.match(CopyBookParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4263
                self.match(CopyBookParser.REWRITE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameWithIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_parameterNameWithIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterNameWithIndex" ):
                listener.enterParameterNameWithIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterNameWithIndex" ):
                listener.exitParameterNameWithIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterNameWithIndex" ):
                return visitor.visitParameterNameWithIndex(self)
            else:
                return visitor.visitChildren(self)




    def parameterNameWithIndex(self):

        localctx = CopyBookParser.ParameterNameWithIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_parameterNameWithIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4266
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterValueWithIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterNameWithIndex(self):
            return self.getTypedRuleContext(CopyBookParser.ParameterNameWithIndexContext,0)


        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def parameterValue(self):
            return self.getTypedRuleContext(CopyBookParser.ParameterValueContext,0)


        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_parameterValueWithIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterValueWithIndex" ):
                listener.enterParameterValueWithIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterValueWithIndex" ):
                listener.exitParameterValueWithIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterValueWithIndex" ):
                return visitor.visitParameterValueWithIndex(self)
            else:
                return visitor.visitChildren(self)




    def parameterValueWithIndex(self):

        localctx = CopyBookParser.ParameterValueWithIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_parameterValueWithIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4268
            self.parameterNameWithIndex()

            self.state = 4269
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 4270
            self.parameterValue()
            self.state = 4271
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CobolWordContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CobolWordContext,i)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def filename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FilenameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FilenameContext,i)


        def SCREEN(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.SCREEN)
            else:
                return self.getToken(CopyBookParser.SCREEN, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_parameterValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterValue" ):
                listener.enterParameterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterValue" ):
                listener.exitParameterValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterValue" ):
                return visitor.visitParameterValue(self)
            else:
                return visitor.visitChildren(self)




    def parameterValue(self):

        localctx = CopyBookParser.ParameterValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_parameterValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4277 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
                if la_ == 1:
                    self.state = 4273
                    self.cobolWord()
                    pass

                elif la_ == 2:
                    self.state = 4274
                    self.literal()
                    pass

                elif la_ == 3:
                    self.state = 4275
                    self.filename()
                    pass

                elif la_ == 4:
                    self.state = 4276
                    self.match(CopyBookParser.SCREEN)
                    pass


                self.state = 4279 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432406780929) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007200060723201) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079256797237190143) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550486129369121) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 30403713249050627) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430467585) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2216615441858883) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -29) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCEPT(self):
            return self.getToken(CopyBookParser.ACCEPT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def acceptFromDateStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AcceptFromDateStatementContext,0)


        def acceptFromEscapeKeyStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AcceptFromEscapeKeyStatementContext,0)


        def acceptFromMnemonicStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AcceptFromMnemonicStatementContext,0)


        def acceptMessageCountStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AcceptMessageCountStatementContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnExceptionClauseContext,0)


        def END_ACCEPT(self):
            return self.getToken(CopyBookParser.END_ACCEPT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_acceptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcceptStatement" ):
                listener.enterAcceptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcceptStatement" ):
                listener.exitAcceptStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAcceptStatement" ):
                return visitor.visitAcceptStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptStatement(self):

        localctx = CopyBookParser.AcceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_acceptStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4281
            self.match(CopyBookParser.ACCEPT)
            self.state = 4282
            self.identifier()
            self.state = 4287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.state = 4283
                self.acceptFromDateStatement()

            elif la_ == 2:
                self.state = 4284
                self.acceptFromEscapeKeyStatement()

            elif la_ == 3:
                self.state = 4285
                self.acceptFromMnemonicStatement()

            elif la_ == 4:
                self.state = 4286
                self.acceptMessageCountStatement()


            self.state = 4290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.state = 4289
                self.onExceptionClause()


            self.state = 4293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.state = 4292
                self.notOnExceptionClause()


            self.state = 4296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
            if la_ == 1:
                self.state = 4295
                self.match(CopyBookParser.END_ACCEPT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptFromDateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def DATE(self):
            return self.getToken(CopyBookParser.DATE, 0)

        def DAY(self):
            return self.getToken(CopyBookParser.DAY, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(CopyBookParser.DAY_OF_WEEK, 0)

        def TIME(self):
            return self.getToken(CopyBookParser.TIME, 0)

        def TIMER(self):
            return self.getToken(CopyBookParser.TIMER, 0)

        def TODAYS_DATE(self):
            return self.getToken(CopyBookParser.TODAYS_DATE, 0)

        def TODAYS_NAME(self):
            return self.getToken(CopyBookParser.TODAYS_NAME, 0)

        def YEAR(self):
            return self.getToken(CopyBookParser.YEAR, 0)

        def YYYYMMDD(self):
            return self.getToken(CopyBookParser.YYYYMMDD, 0)

        def YYYYDDD(self):
            return self.getToken(CopyBookParser.YYYYDDD, 0)

        def MMDDYYYY(self):
            return self.getToken(CopyBookParser.MMDDYYYY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_acceptFromDateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcceptFromDateStatement" ):
                listener.enterAcceptFromDateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcceptFromDateStatement" ):
                listener.exitAcceptFromDateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAcceptFromDateStatement" ):
                return visitor.visitAcceptFromDateStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptFromDateStatement(self):

        localctx = CopyBookParser.AcceptFromDateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_acceptFromDateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4298
            self.match(CopyBookParser.FROM)
            self.state = 4318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.state = 4299
                self.match(CopyBookParser.DATE)
                self.state = 4301
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
                if la_ == 1:
                    self.state = 4300
                    self.match(CopyBookParser.YYYYMMDD)


                pass
            elif token in [117]:
                self.state = 4303
                self.match(CopyBookParser.DAY)
                self.state = 4305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==533:
                    self.state = 4304
                    self.match(CopyBookParser.YYYYDDD)


                pass
            elif token in [118]:
                self.state = 4307
                self.match(CopyBookParser.DAY_OF_WEEK)
                pass
            elif token in [497]:
                self.state = 4308
                self.match(CopyBookParser.TIME)
                pass
            elif token in [498]:
                self.state = 4309
                self.match(CopyBookParser.TIMER)
                pass
            elif token in [502]:
                self.state = 4310
                self.match(CopyBookParser.TODAYS_DATE)
                self.state = 4312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 4311
                    self.match(CopyBookParser.MMDDYYYY)


                pass
            elif token in [503]:
                self.state = 4314
                self.match(CopyBookParser.TODAYS_NAME)
                pass
            elif token in [531]:
                self.state = 4315
                self.match(CopyBookParser.YEAR)
                pass
            elif token in [532]:
                self.state = 4316
                self.match(CopyBookParser.YYYYMMDD)
                pass
            elif token in [533]:
                self.state = 4317
                self.match(CopyBookParser.YYYYDDD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptFromMnemonicStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_acceptFromMnemonicStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcceptFromMnemonicStatement" ):
                listener.enterAcceptFromMnemonicStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcceptFromMnemonicStatement" ):
                listener.exitAcceptFromMnemonicStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAcceptFromMnemonicStatement" ):
                return visitor.visitAcceptFromMnemonicStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptFromMnemonicStatement(self):

        localctx = CopyBookParser.AcceptFromMnemonicStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_acceptFromMnemonicStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4320
            self.match(CopyBookParser.FROM)
            self.state = 4321
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptFromEscapeKeyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def ESCAPE(self):
            return self.getToken(CopyBookParser.ESCAPE, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_acceptFromEscapeKeyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcceptFromEscapeKeyStatement" ):
                listener.enterAcceptFromEscapeKeyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcceptFromEscapeKeyStatement" ):
                listener.exitAcceptFromEscapeKeyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAcceptFromEscapeKeyStatement" ):
                return visitor.visitAcceptFromEscapeKeyStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptFromEscapeKeyStatement(self):

        localctx = CopyBookParser.AcceptFromEscapeKeyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_acceptFromEscapeKeyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4323
            self.match(CopyBookParser.FROM)
            self.state = 4324
            self.match(CopyBookParser.ESCAPE)
            self.state = 4325
            self.match(CopyBookParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptMessageCountStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(CopyBookParser.COUNT, 0)

        def MESSAGE(self):
            return self.getToken(CopyBookParser.MESSAGE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_acceptMessageCountStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcceptMessageCountStatement" ):
                listener.enterAcceptMessageCountStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcceptMessageCountStatement" ):
                listener.exitAcceptMessageCountStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAcceptMessageCountStatement" ):
                return visitor.visitAcceptMessageCountStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptMessageCountStatement(self):

        localctx = CopyBookParser.AcceptMessageCountStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_acceptMessageCountStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==305:
                self.state = 4327
                self.match(CopyBookParser.MESSAGE)


            self.state = 4330
            self.match(CopyBookParser.COUNT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(CopyBookParser.ADD, 0)

        def addToStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AddToStatementContext,0)


        def addToGivingStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AddToGivingStatementContext,0)


        def addCorrespondingStatement(self):
            return self.getTypedRuleContext(CopyBookParser.AddCorrespondingStatementContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnSizeErrorPhraseContext,0)


        def END_ADD(self):
            return self.getToken(CopyBookParser.END_ADD, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_addStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddStatement" ):
                listener.enterAddStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddStatement" ):
                listener.exitAddStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddStatement" ):
                return visitor.visitAddStatement(self)
            else:
                return visitor.visitChildren(self)




    def addStatement(self):

        localctx = CopyBookParser.AddStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_addStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4332
            self.match(CopyBookParser.ADD)
            self.state = 4336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
            if la_ == 1:
                self.state = 4333
                self.addToStatement()
                pass

            elif la_ == 2:
                self.state = 4334
                self.addToGivingStatement()
                pass

            elif la_ == 3:
                self.state = 4335
                self.addCorrespondingStatement()
                pass


            self.state = 4339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
            if la_ == 1:
                self.state = 4338
                self.onSizeErrorPhrase()


            self.state = 4342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.state = 4341
                self.notOnSizeErrorPhrase()


            self.state = 4345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
            if la_ == 1:
                self.state = 4344
                self.match(CopyBookParser.END_ADD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddToStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def addFrom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AddFromContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AddFromContext,i)


        def addTo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AddToContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AddToContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_addToStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddToStatement" ):
                listener.enterAddToStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddToStatement" ):
                listener.exitAddToStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddToStatement" ):
                return visitor.visitAddToStatement(self)
            else:
                return visitor.visitChildren(self)




    def addToStatement(self):

        localctx = CopyBookParser.AddToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_addToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4348 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4347
                self.addFrom()
                self.state = 4350 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007201134465025) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079256787573513727) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550488276852769) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430468061) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2216615441858887) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

            self.state = 4352
            self.match(CopyBookParser.TO)
            self.state = 4354 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4353
                    self.addTo()

                else:
                    raise NoViableAltException(self)
                self.state = 4356 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,562,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddToGivingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def addFrom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AddFromContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AddFromContext,i)


        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def addGiving(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AddGivingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AddGivingContext,i)


        def addToGiving(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AddToGivingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AddToGivingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_addToGivingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddToGivingStatement" ):
                listener.enterAddToGivingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddToGivingStatement" ):
                listener.exitAddToGivingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddToGivingStatement" ):
                return visitor.visitAddToGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def addToGivingStatement(self):

        localctx = CopyBookParser.AddToGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_addToGivingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4359 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4358
                self.addFrom()
                self.state = 4361 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007201134465025) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079256787573513727) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550488276852769) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430468061) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2216615441858887) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

            self.state = 4369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 4363
                self.match(CopyBookParser.TO)
                self.state = 4365 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4364
                    self.addToGiving()
                    self.state = 4367 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9059977692598273) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079230399294447103) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 507780864428564537) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430472157) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2216615441872199) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                        break



            self.state = 4371
            self.match(CopyBookParser.GIVING)
            self.state = 4373 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4372
                    self.addGiving()

                else:
                    raise NoViableAltException(self)
                self.state = 4375 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,566,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddCorrespondingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def addTo(self):
            return self.getTypedRuleContext(CopyBookParser.AddToContext,0)


        def CORRESPONDING(self):
            return self.getToken(CopyBookParser.CORRESPONDING, 0)

        def CORR(self):
            return self.getToken(CopyBookParser.CORR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_addCorrespondingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddCorrespondingStatement" ):
                listener.enterAddCorrespondingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddCorrespondingStatement" ):
                listener.exitAddCorrespondingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddCorrespondingStatement" ):
                return visitor.visitAddCorrespondingStatement(self)
            else:
                return visitor.visitChildren(self)




    def addCorrespondingStatement(self):

        localctx = CopyBookParser.AddCorrespondingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_addCorrespondingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4377
            _la = self._input.LA(1)
            if not(_la==106 or _la==107):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4378
            self.identifier()
            self.state = 4379
            self.match(CopyBookParser.TO)
            self.state = 4380
            self.addTo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_addFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddFrom" ):
                listener.enterAddFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddFrom" ):
                listener.exitAddFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddFrom" ):
                return visitor.visitAddFrom(self)
            else:
                return visitor.visitChildren(self)




    def addFrom(self):

        localctx = CopyBookParser.AddFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_addFrom)
        try:
            self.state = 4384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,567,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4382
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4383
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_addTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTo" ):
                listener.enterAddTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTo" ):
                listener.exitAddTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTo" ):
                return visitor.visitAddTo(self)
            else:
                return visitor.visitChildren(self)




    def addTo(self):

        localctx = CopyBookParser.AddToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_addTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.state = 4386
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4387
                self.figurativeConstant()
                pass


            self.state = 4391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 4390
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddToGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_addToGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddToGiving" ):
                listener.enterAddToGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddToGiving" ):
                listener.exitAddToGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddToGiving" ):
                return visitor.visitAddToGiving(self)
            else:
                return visitor.visitChildren(self)




    def addToGiving(self):

        localctx = CopyBookParser.AddToGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_addToGiving)
        try:
            self.state = 4396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4393
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4394
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4395
                self.figurativeConstant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_addGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddGiving" ):
                listener.enterAddGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddGiving" ):
                listener.exitAddGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddGiving" ):
                return visitor.visitAddGiving(self)
            else:
                return visitor.visitChildren(self)




    def addGiving(self):

        localctx = CopyBookParser.AddGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_addGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4398
            self.identifier()
            self.state = 4400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 4399
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteredGoToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(CopyBookParser.GO, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_alteredGoTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteredGoTo" ):
                listener.enterAlteredGoTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteredGoTo" ):
                listener.exitAlteredGoTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlteredGoTo" ):
                return visitor.visitAlteredGoTo(self)
            else:
                return visitor.visitChildren(self)




    def alteredGoTo(self):

        localctx = CopyBookParser.AlteredGoToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_alteredGoTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4402
            self.match(CopyBookParser.GO)
            self.state = 4404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 4403
                self.match(CopyBookParser.TO)


            self.state = 4406
            self.match(CopyBookParser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(CopyBookParser.ALTER, 0)

        def alterProceedTo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AlterProceedToContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AlterProceedToContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_alterStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterStatement" ):
                listener.enterAlterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterStatement" ):
                listener.exitAlterStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterStatement" ):
                return visitor.visitAlterStatement(self)
            else:
                return visitor.visitChildren(self)




    def alterStatement(self):

        localctx = CopyBookParser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_alterStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4408
            self.match(CopyBookParser.ALTER)
            self.state = 4410 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4409
                    self.alterProceedTo()

                else:
                    raise NoViableAltException(self)
                self.state = 4412 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,573,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterProceedToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,i)


        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.TO)
            else:
                return self.getToken(CopyBookParser.TO, i)

        def PROCEED(self):
            return self.getToken(CopyBookParser.PROCEED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_alterProceedTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterProceedTo" ):
                listener.enterAlterProceedTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterProceedTo" ):
                listener.exitAlterProceedTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterProceedTo" ):
                return visitor.visitAlterProceedTo(self)
            else:
                return visitor.visitChildren(self)




    def alterProceedTo(self):

        localctx = CopyBookParser.AlterProceedToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_alterProceedTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4414
            self.procedureName()
            self.state = 4415
            self.match(CopyBookParser.TO)
            self.state = 4418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==371:
                self.state = 4416
                self.match(CopyBookParser.PROCEED)
                self.state = 4417
                self.match(CopyBookParser.TO)


            self.state = 4420
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CopyBookParser.CALL, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def callUsingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.CallUsingPhraseContext,0)


        def callGivingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.CallGivingPhraseContext,0)


        def onOverflowPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnOverflowPhraseContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnExceptionClauseContext,0)


        def END_CALL(self):
            return self.getToken(CopyBookParser.END_CALL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = CopyBookParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4422
            self.match(CopyBookParser.CALL)
            self.state = 4425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
            if la_ == 1:
                self.state = 4423
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4424
                self.literal()
                pass


            self.state = 4428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==519:
                self.state = 4427
                self.callUsingPhrase()


            self.state = 4431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==228 or _la==417:
                self.state = 4430
                self.callGivingPhrase()


            self.state = 4434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.state = 4433
                self.onOverflowPhrase()


            self.state = 4437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,579,self._ctx)
            if la_ == 1:
                self.state = 4436
                self.onExceptionClause()


            self.state = 4440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
            if la_ == 1:
                self.state = 4439
                self.notOnExceptionClause()


            self.state = 4443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                self.state = 4442
                self.match(CopyBookParser.END_CALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallUsingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def callUsingParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CallUsingParameterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CallUsingParameterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_callUsingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallUsingPhrase" ):
                listener.enterCallUsingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallUsingPhrase" ):
                listener.exitCallUsingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallUsingPhrase" ):
                return visitor.visitCallUsingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def callUsingPhrase(self):

        localctx = CopyBookParser.CallUsingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_callUsingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4445
            self.match(CopyBookParser.USING)
            self.state = 4447 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4446
                    self.callUsingParameter()

                else:
                    raise NoViableAltException(self)
                self.state = 4449 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,582,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallUsingParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callByReferencePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.CallByReferencePhraseContext,0)


        def callByValuePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.CallByValuePhraseContext,0)


        def callByContentPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.CallByContentPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_callUsingParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallUsingParameter" ):
                listener.enterCallUsingParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallUsingParameter" ):
                listener.exitCallUsingParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallUsingParameter" ):
                return visitor.visitCallUsingParameter(self)
            else:
                return visitor.visitChildren(self)




    def callUsingParameter(self):

        localctx = CopyBookParser.CallUsingParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_callUsingParameter)
        try:
            self.state = 4454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4451
                self.callByReferencePhrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4452
                self.callByValuePhrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4453
                self.callByContentPhrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallByReferencePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(CopyBookParser.REFERENCE, 0)

        def callByReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CallByReferenceContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CallByReferenceContext,i)


        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_callByReferencePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallByReferencePhrase" ):
                listener.enterCallByReferencePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallByReferencePhrase" ):
                listener.exitCallByReferencePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallByReferencePhrase" ):
                return visitor.visitCallByReferencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def callByReferencePhrase(self):

        localctx = CopyBookParser.CallByReferencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_callByReferencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,585,self._ctx)
            if la_ == 1:
                self.state = 4457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 4456
                    self.match(CopyBookParser.BY)


                self.state = 4459
                self.match(CopyBookParser.REFERENCE)


            self.state = 4463 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4462
                    self.callByReference()

                else:
                    raise NoViableAltException(self)
                self.state = 4465 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,586,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallByReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def ADDRESS(self):
            return self.getToken(CopyBookParser.ADDRESS, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def INTEGER(self):
            return self.getToken(CopyBookParser.INTEGER, 0)

        def STRING(self):
            return self.getToken(CopyBookParser.STRING, 0)

        def OMITTED(self):
            return self.getToken(CopyBookParser.OMITTED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_callByReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallByReference" ):
                listener.enterCallByReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallByReference" ):
                listener.exitCallByReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallByReference" ):
                return visitor.visitCallByReference(self)
            else:
                return visitor.visitChildren(self)




    def callByReference(self):

        localctx = CopyBookParser.CallByReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_callByReference)
        try:
            self.state = 4479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 100, 110, 111, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 135, 142, 193, 205, 207, 210, 212, 221, 222, 223, 246, 257, 258, 267, 271, 272, 279, 288, 291, 292, 293, 315, 321, 322, 327, 335, 336, 338, 353, 354, 372, 373, 378, 379, 386, 387, 406, 415, 416, 420, 428, 436, 437, 439, 440, 447, 448, 451, 453, 454, 455, 457, 458, 459, 460, 462, 469, 471, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 526, 530, 532, 542, 569, 570, 571, 572, 573, 574, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4476
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
                if la_ == 1:
                    self.state = 4471
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
                    if la_ == 1:
                        self.state = 4467
                        self.match(CopyBookParser.ADDRESS)
                        self.state = 4468
                        self.match(CopyBookParser.OF)

                    elif la_ == 2:
                        self.state = 4469
                        self.match(CopyBookParser.INTEGER)

                    elif la_ == 3:
                        self.state = 4470
                        self.match(CopyBookParser.STRING)


                    self.state = 4473
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 4474
                    self.literal()
                    pass

                elif la_ == 3:
                    self.state = 4475
                    self.fileName()
                    pass


                pass
            elif token in [337]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4478
                self.match(CopyBookParser.OMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallByValuePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(CopyBookParser.VALUE, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def callByValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CallByValueContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CallByValueContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_callByValuePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallByValuePhrase" ):
                listener.enterCallByValuePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallByValuePhrase" ):
                listener.exitCallByValuePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallByValuePhrase" ):
                return visitor.visitCallByValuePhrase(self)
            else:
                return visitor.visitChildren(self)




    def callByValuePhrase(self):

        localctx = CopyBookParser.CallByValuePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_callByValuePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 4481
                self.match(CopyBookParser.BY)


            self.state = 4484
            self.match(CopyBookParser.VALUE)
            self.state = 4486 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4485
                    self.callByValue()

                else:
                    raise NoViableAltException(self)
                self.state = 4488 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,591,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallByValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def ADDRESS(self):
            return self.getToken(CopyBookParser.ADDRESS, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def LENGTH(self):
            return self.getToken(CopyBookParser.LENGTH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_callByValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallByValue" ):
                listener.enterCallByValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallByValue" ):
                listener.exitCallByValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallByValue" ):
                return visitor.visitCallByValue(self)
            else:
                return visitor.visitChildren(self)




    def callByValue(self):

        localctx = CopyBookParser.CallByValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_callByValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.state = 4490
                self.match(CopyBookParser.ADDRESS)
                self.state = 4491
                self.match(CopyBookParser.OF)

            elif la_ == 2:
                self.state = 4492
                self.match(CopyBookParser.LENGTH)
                self.state = 4494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
                if la_ == 1:
                    self.state = 4493
                    self.match(CopyBookParser.OF)




            self.state = 4500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
            if la_ == 1:
                self.state = 4498
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4499
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallByContentPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTENT(self):
            return self.getToken(CopyBookParser.CONTENT, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def callByContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CallByContentContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CallByContentContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_callByContentPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallByContentPhrase" ):
                listener.enterCallByContentPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallByContentPhrase" ):
                listener.exitCallByContentPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallByContentPhrase" ):
                return visitor.visitCallByContentPhrase(self)
            else:
                return visitor.visitChildren(self)




    def callByContentPhrase(self):

        localctx = CopyBookParser.CallByContentPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_callByContentPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 4502
                self.match(CopyBookParser.BY)


            self.state = 4505
            self.match(CopyBookParser.CONTENT)
            self.state = 4507 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4506
                    self.callByContent()

                else:
                    raise NoViableAltException(self)
                self.state = 4509 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,596,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallByContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ADDRESS(self):
            return self.getToken(CopyBookParser.ADDRESS, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def LENGTH(self):
            return self.getToken(CopyBookParser.LENGTH, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def OMITTED(self):
            return self.getToken(CopyBookParser.OMITTED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_callByContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallByContent" ):
                listener.enterCallByContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallByContent" ):
                listener.exitCallByContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallByContent" ):
                return visitor.visitCallByContent(self)
            else:
                return visitor.visitChildren(self)




    def callByContent(self):

        localctx = CopyBookParser.CallByContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_callByContent)
        try:
            self.state = 4522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,599,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
                if la_ == 1:
                    self.state = 4511
                    self.match(CopyBookParser.ADDRESS)
                    self.state = 4512
                    self.match(CopyBookParser.OF)

                elif la_ == 2:
                    self.state = 4513
                    self.match(CopyBookParser.LENGTH)
                    self.state = 4515
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,597,self._ctx)
                    if la_ == 1:
                        self.state = 4514
                        self.match(CopyBookParser.OF)




                self.state = 4519
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4520
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4521
                self.match(CopyBookParser.OMITTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallGivingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def RETURNING(self):
            return self.getToken(CopyBookParser.RETURNING, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_callGivingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallGivingPhrase" ):
                listener.enterCallGivingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallGivingPhrase" ):
                listener.exitCallGivingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallGivingPhrase" ):
                return visitor.visitCallGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def callGivingPhrase(self):

        localctx = CopyBookParser.CallGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_callGivingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4524
            _la = self._input.LA(1)
            if not(_la==228 or _la==417):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4525
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(CopyBookParser.CANCEL, 0)

        def cancelCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CancelCallContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CancelCallContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_cancelStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelStatement" ):
                listener.enterCancelStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelStatement" ):
                listener.exitCancelStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCancelStatement" ):
                return visitor.visitCancelStatement(self)
            else:
                return visitor.visitChildren(self)




    def cancelStatement(self):

        localctx = CopyBookParser.CancelStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_cancelStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4527
            self.match(CopyBookParser.CANCEL)
            self.state = 4529 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4528
                    self.cancelCall()

                else:
                    raise NoViableAltException(self)
                self.state = 4531 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,600,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libraryName(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryNameContext,0)


        def BYTITLE(self):
            return self.getToken(CopyBookParser.BYTITLE, 0)

        def BYFUNCTION(self):
            return self.getToken(CopyBookParser.BYFUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_cancelCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelCall" ):
                listener.enterCancelCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelCall" ):
                listener.exitCancelCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCancelCall" ):
                return visitor.visitCancelCall(self)
            else:
                return visitor.visitChildren(self)




    def cancelCall(self):

        localctx = CopyBookParser.CancelCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_cancelCall)
        self._la = 0 # Token type
        try:
            self.state = 4538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,601,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4533
                self.libraryName()
                self.state = 4534
                _la = self._input.LA(1)
                if not(_la==53 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4536
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4537
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(CopyBookParser.CLOSE, 0)

        def closeFile(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CloseFileContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CloseFileContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_closeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStatement" ):
                listener.enterCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStatement" ):
                listener.exitCloseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseStatement" ):
                return visitor.visitCloseStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeStatement(self):

        localctx = CopyBookParser.CloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_closeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4540
            self.match(CopyBookParser.CLOSE)
            self.state = 4542 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4541
                    self.closeFile()

                else:
                    raise NoViableAltException(self)
                self.state = 4544 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,602,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def closeReelUnitStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CloseReelUnitStatementContext,0)


        def closeRelativeStatement(self):
            return self.getTypedRuleContext(CopyBookParser.CloseRelativeStatementContext,0)


        def closePortFileIOStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ClosePortFileIOStatementContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_closeFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseFile" ):
                listener.enterCloseFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseFile" ):
                listener.exitCloseFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseFile" ):
                return visitor.visitCloseFile(self)
            else:
                return visitor.visitChildren(self)




    def closeFile(self):

        localctx = CopyBookParser.CloseFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_closeFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4546
            self.fileName()
            self.state = 4550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
            if la_ == 1:
                self.state = 4547
                self.closeReelUnitStatement()

            elif la_ == 2:
                self.state = 4548
                self.closeRelativeStatement()

            elif la_ == 3:
                self.state = 4549
                self.closePortFileIOStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseReelUnitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REEL(self):
            return self.getToken(CopyBookParser.REEL, 0)

        def UNIT(self):
            return self.getToken(CopyBookParser.UNIT, 0)

        def REMOVAL(self):
            return self.getToken(CopyBookParser.REMOVAL, 0)

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def REWIND(self):
            return self.getToken(CopyBookParser.REWIND, 0)

        def LOCK(self):
            return self.getToken(CopyBookParser.LOCK, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_closeReelUnitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseReelUnitStatement" ):
                listener.enterCloseReelUnitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseReelUnitStatement" ):
                listener.exitCloseReelUnitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseReelUnitStatement" ):
                return visitor.visitCloseReelUnitStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeReelUnitStatement(self):

        localctx = CopyBookParser.CloseReelUnitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_closeReelUnitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4552
            _la = self._input.LA(1)
            if not(_la==394 or _la==512):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218 or _la==402:
                self.state = 4554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 4553
                    self.match(CopyBookParser.FOR)


                self.state = 4556
                self.match(CopyBookParser.REMOVAL)


            self.state = 4567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
            if la_ == 1:
                self.state = 4560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 4559
                    self.match(CopyBookParser.WITH)


                self.state = 4565
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [322]:
                    self.state = 4562
                    self.match(CopyBookParser.NO)
                    self.state = 4563
                    self.match(CopyBookParser.REWIND)
                    pass
                elif token in [296]:
                    self.state = 4564
                    self.match(CopyBookParser.LOCK)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseRelativeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def REWIND(self):
            return self.getToken(CopyBookParser.REWIND, 0)

        def LOCK(self):
            return self.getToken(CopyBookParser.LOCK, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_closeRelativeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseRelativeStatement" ):
                listener.enterCloseRelativeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseRelativeStatement" ):
                listener.exitCloseRelativeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseRelativeStatement" ):
                return visitor.visitCloseRelativeStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeRelativeStatement(self):

        localctx = CopyBookParser.CloseRelativeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_closeRelativeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 4569
                self.match(CopyBookParser.WITH)


            self.state = 4575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [322]:
                self.state = 4572
                self.match(CopyBookParser.NO)
                self.state = 4573
                self.match(CopyBookParser.REWIND)
                pass
            elif token in [296]:
                self.state = 4574
                self.match(CopyBookParser.LOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosePortFileIOStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def WAIT(self):
            return self.getToken(CopyBookParser.WAIT, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def closePortFileIOUsing(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ClosePortFileIOUsingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ClosePortFileIOUsingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_closePortFileIOStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosePortFileIOStatement" ):
                listener.enterClosePortFileIOStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosePortFileIOStatement" ):
                listener.exitClosePortFileIOStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosePortFileIOStatement" ):
                return visitor.visitClosePortFileIOStatement(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOStatement(self):

        localctx = CopyBookParser.ClosePortFileIOStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_closePortFileIOStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,612,self._ctx)
            if la_ == 1:
                self.state = 4578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 4577
                    self.match(CopyBookParser.WITH)


                self.state = 4580
                self.match(CopyBookParser.NO)
                self.state = 4581
                self.match(CopyBookParser.WAIT)
                pass

            elif la_ == 2:
                self.state = 4582
                self.match(CopyBookParser.WITH)
                self.state = 4583
                self.match(CopyBookParser.WAIT)
                pass


            self.state = 4592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==519:
                self.state = 4586
                self.match(CopyBookParser.USING)
                self.state = 4588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4587
                    self.closePortFileIOUsing()
                    self.state = 4590 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 4398046511107) != 0)):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosePortFileIOUsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closePortFileIOUsingCloseDisposition(self):
            return self.getTypedRuleContext(CopyBookParser.ClosePortFileIOUsingCloseDispositionContext,0)


        def closePortFileIOUsingAssociatedData(self):
            return self.getTypedRuleContext(CopyBookParser.ClosePortFileIOUsingAssociatedDataContext,0)


        def closePortFileIOUsingAssociatedDataLength(self):
            return self.getTypedRuleContext(CopyBookParser.ClosePortFileIOUsingAssociatedDataLengthContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_closePortFileIOUsing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosePortFileIOUsing" ):
                listener.enterClosePortFileIOUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosePortFileIOUsing" ):
                listener.exitClosePortFileIOUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosePortFileIOUsing" ):
                return visitor.visitClosePortFileIOUsing(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsing(self):

        localctx = CopyBookParser.ClosePortFileIOUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_closePortFileIOUsing)
        try:
            self.state = 4597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4594
                self.closePortFileIOUsingCloseDisposition()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4595
                self.closePortFileIOUsingAssociatedData()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4596
                self.closePortFileIOUsingAssociatedDataLength()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosePortFileIOUsingCloseDispositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_DISPOSITION(self):
            return self.getToken(CopyBookParser.CLOSE_DISPOSITION, 0)

        def ABORT(self):
            return self.getToken(CopyBookParser.ABORT, 0)

        def ORDERLY(self):
            return self.getToken(CopyBookParser.ORDERLY, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_closePortFileIOUsingCloseDisposition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosePortFileIOUsingCloseDisposition" ):
                listener.enterClosePortFileIOUsingCloseDisposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosePortFileIOUsingCloseDisposition" ):
                listener.exitClosePortFileIOUsingCloseDisposition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosePortFileIOUsingCloseDisposition" ):
                return visitor.visitClosePortFileIOUsingCloseDisposition(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsingCloseDisposition(self):

        localctx = CopyBookParser.ClosePortFileIOUsingCloseDispositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_closePortFileIOUsingCloseDisposition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4599
            self.match(CopyBookParser.CLOSE_DISPOSITION)
            self.state = 4601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==335:
                self.state = 4600
                self.match(CopyBookParser.OF)


            self.state = 4603
            _la = self._input.LA(1)
            if not(_la==2 or _la==343):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosePortFileIOUsingAssociatedDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_DATA(self):
            return self.getToken(CopyBookParser.ASSOCIATED_DATA, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_closePortFileIOUsingAssociatedData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosePortFileIOUsingAssociatedData" ):
                listener.enterClosePortFileIOUsingAssociatedData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosePortFileIOUsingAssociatedData" ):
                listener.exitClosePortFileIOUsingAssociatedData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosePortFileIOUsingAssociatedData" ):
                return visitor.visitClosePortFileIOUsingAssociatedData(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsingAssociatedData(self):

        localctx = CopyBookParser.ClosePortFileIOUsingAssociatedDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_closePortFileIOUsingAssociatedData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4605
            self.match(CopyBookParser.ASSOCIATED_DATA)
            self.state = 4608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
            if la_ == 1:
                self.state = 4606
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4607
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosePortFileIOUsingAssociatedDataLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_DATA_LENGTH(self):
            return self.getToken(CopyBookParser.ASSOCIATED_DATA_LENGTH, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_closePortFileIOUsingAssociatedDataLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosePortFileIOUsingAssociatedDataLength" ):
                listener.enterClosePortFileIOUsingAssociatedDataLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosePortFileIOUsingAssociatedDataLength" ):
                listener.exitClosePortFileIOUsingAssociatedDataLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosePortFileIOUsingAssociatedDataLength" ):
                return visitor.visitClosePortFileIOUsingAssociatedDataLength(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsingAssociatedDataLength(self):

        localctx = CopyBookParser.ClosePortFileIOUsingAssociatedDataLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_closePortFileIOUsingAssociatedDataLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4610
            self.match(CopyBookParser.ASSOCIATED_DATA_LENGTH)
            self.state = 4612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
            if la_ == 1:
                self.state = 4611
                self.match(CopyBookParser.OF)


            self.state = 4616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
            if la_ == 1:
                self.state = 4614
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4615
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComputeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPUTE(self):
            return self.getToken(CopyBookParser.COMPUTE, 0)

        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def EQUALCHAR(self):
            return self.getToken(CopyBookParser.EQUALCHAR, 0)

        def EQUAL(self):
            return self.getToken(CopyBookParser.EQUAL, 0)

        def computeStore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ComputeStoreContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ComputeStoreContext,i)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnSizeErrorPhraseContext,0)


        def END_COMPUTE(self):
            return self.getToken(CopyBookParser.END_COMPUTE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_computeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputeStatement" ):
                listener.enterComputeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputeStatement" ):
                listener.exitComputeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComputeStatement" ):
                return visitor.visitComputeStatement(self)
            else:
                return visitor.visitChildren(self)




    def computeStatement(self):

        localctx = CopyBookParser.ComputeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_computeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4618
            self.match(CopyBookParser.COMPUTE)
            self.state = 4620 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4619
                self.computeStore()
                self.state = 4622 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007201134465025) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144115249281261569) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550488276852769) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430468061) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 1055531162927431) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

            self.state = 4624
            _la = self._input.LA(1)
            if not(_la==192 or _la==552):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4625
            self.arithmeticExpression()
            self.state = 4627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
            if la_ == 1:
                self.state = 4626
                self.onSizeErrorPhrase()


            self.state = 4630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.state = 4629
                self.notOnSizeErrorPhrase()


            self.state = 4633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,623,self._ctx)
            if la_ == 1:
                self.state = 4632
                self.match(CopyBookParser.END_COMPUTE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComputeStoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_computeStore

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputeStore" ):
                listener.enterComputeStore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputeStore" ):
                listener.exitComputeStore(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComputeStore" ):
                return visitor.visitComputeStore(self)
            else:
                return visitor.visitChildren(self)




    def computeStore(self):

        localctx = CopyBookParser.ComputeStoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_computeStore)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4635
            self.identifier()
            self.state = 4637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 4636
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(CopyBookParser.CONTINUE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = CopyBookParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4639
            self.match(CopyBookParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CopyBookParser.DELETE, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotInvalidKeyPhraseContext,0)


        def END_DELETE(self):
            return self.getToken(CopyBookParser.END_DELETE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = CopyBookParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4641
            self.match(CopyBookParser.DELETE)
            self.state = 4642
            self.fileName()
            self.state = 4644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==389:
                self.state = 4643
                self.match(CopyBookParser.RECORD)


            self.state = 4647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,626,self._ctx)
            if la_ == 1:
                self.state = 4646
                self.invalidKeyPhrase()


            self.state = 4650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,627,self._ctx)
            if la_ == 1:
                self.state = 4649
                self.notInvalidKeyPhrase()


            self.state = 4653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
            if la_ == 1:
                self.state = 4652
                self.match(CopyBookParser.END_DELETE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISABLE(self):
            return self.getToken(CopyBookParser.DISABLE, 0)

        def cdName(self):
            return self.getTypedRuleContext(CopyBookParser.CdNameContext,0)


        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def INPUT(self):
            return self.getToken(CopyBookParser.INPUT, 0)

        def I_O(self):
            return self.getToken(CopyBookParser.I_O, 0)

        def TERMINAL(self):
            return self.getToken(CopyBookParser.TERMINAL, 0)

        def OUTPUT(self):
            return self.getToken(CopyBookParser.OUTPUT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_disableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisableStatement" ):
                listener.enterDisableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisableStatement" ):
                listener.exitDisableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisableStatement" ):
                return visitor.visitDisableStatement(self)
            else:
                return visitor.visitChildren(self)




    def disableStatement(self):

        localctx = CopyBookParser.DisableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_disableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4655
            self.match(CopyBookParser.DISABLE)
            self.state = 4663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [253]:
                self.state = 4656
                self.match(CopyBookParser.INPUT)
                self.state = 4658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
                if la_ == 1:
                    self.state = 4657
                    self.match(CopyBookParser.TERMINAL)


                pass
            elif token in [239]:
                self.state = 4660
                self.match(CopyBookParser.I_O)
                self.state = 4661
                self.match(CopyBookParser.TERMINAL)
                pass
            elif token in [346]:
                self.state = 4662
                self.match(CopyBookParser.OUTPUT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4665
            self.cdName()
            self.state = 4667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 4666
                self.match(CopyBookParser.WITH)


            self.state = 4669
            self.match(CopyBookParser.KEY)
            self.state = 4672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,632,self._ctx)
            if la_ == 1:
                self.state = 4670
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4671
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(CopyBookParser.DISPLAY, 0)

        def displayOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DisplayOperandContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DisplayOperandContext,i)


        def displayAt(self):
            return self.getTypedRuleContext(CopyBookParser.DisplayAtContext,0)


        def displayUpon(self):
            return self.getTypedRuleContext(CopyBookParser.DisplayUponContext,0)


        def displayWith(self):
            return self.getTypedRuleContext(CopyBookParser.DisplayWithContext,0)


        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_displayStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayStatement" ):
                listener.enterDisplayStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayStatement" ):
                listener.exitDisplayStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayStatement" ):
                return visitor.visitDisplayStatement(self)
            else:
                return visitor.visitChildren(self)




    def displayStatement(self):

        localctx = CopyBookParser.DisplayStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_displayStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4674
            self.match(CopyBookParser.DISPLAY)
            self.state = 4676 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4675
                    self.displayOperand()

                else:
                    raise NoViableAltException(self)
                self.state = 4678 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,633,self._ctx)

            self.state = 4681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
            if la_ == 1:
                self.state = 4680
                self.displayAt()


            self.state = 4684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==516:
                self.state = 4683
                self.displayUpon()


            self.state = 4687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
            if la_ == 1:
                self.state = 4686
                self.displayWith()


            self.state = 4690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
            if la_ == 1:
                self.state = 4689
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_displayOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayOperand" ):
                listener.enterDisplayOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayOperand" ):
                listener.exitDisplayOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayOperand" ):
                return visitor.visitDisplayOperand(self)
            else:
                return visitor.visitChildren(self)




    def displayOperand(self):

        localctx = CopyBookParser.DisplayOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_displayOperand)
        try:
            self.state = 4694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4692
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4693
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayAtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_displayAt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayAt" ):
                listener.enterDisplayAt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayAt" ):
                listener.exitDisplayAt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayAt" ):
                return visitor.visitDisplayAt(self)
            else:
                return visitor.visitChildren(self)




    def displayAt(self):

        localctx = CopyBookParser.DisplayAtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_displayAt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4696
            self.match(CopyBookParser.AT)
            self.state = 4699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.state = 4697
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4698
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayUponContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPON(self):
            return self.getToken(CopyBookParser.UPON, 0)

        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def environmentName(self):
            return self.getTypedRuleContext(CopyBookParser.EnvironmentNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_displayUpon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayUpon" ):
                listener.enterDisplayUpon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayUpon" ):
                listener.exitDisplayUpon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayUpon" ):
                return visitor.visitDisplayUpon(self)
            else:
                return visitor.visitChildren(self)




    def displayUpon(self):

        localctx = CopyBookParser.DisplayUponContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_displayUpon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4701
            self.match(CopyBookParser.UPON)
            self.state = 4704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.state = 4702
                self.mnemonicName()
                pass

            elif la_ == 2:
                self.state = 4703
                self.environmentName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisplayWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def ADVANCING(self):
            return self.getToken(CopyBookParser.ADVANCING, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_displayWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayWith" ):
                listener.enterDisplayWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayWith" ):
                listener.exitDisplayWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayWith" ):
                return visitor.visitDisplayWith(self)
            else:
                return visitor.visitChildren(self)




    def displayWith(self):

        localctx = CopyBookParser.DisplayWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_displayWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 4706
                self.match(CopyBookParser.WITH)


            self.state = 4709
            self.match(CopyBookParser.NO)
            self.state = 4710
            self.match(CopyBookParser.ADVANCING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIVIDE(self):
            return self.getToken(CopyBookParser.DIVIDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def divideIntoStatement(self):
            return self.getTypedRuleContext(CopyBookParser.DivideIntoStatementContext,0)


        def divideIntoGivingStatement(self):
            return self.getTypedRuleContext(CopyBookParser.DivideIntoGivingStatementContext,0)


        def divideByGivingStatement(self):
            return self.getTypedRuleContext(CopyBookParser.DivideByGivingStatementContext,0)


        def divideRemainder(self):
            return self.getTypedRuleContext(CopyBookParser.DivideRemainderContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnSizeErrorPhraseContext,0)


        def END_DIVIDE(self):
            return self.getToken(CopyBookParser.END_DIVIDE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_divideStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideStatement" ):
                listener.enterDivideStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideStatement" ):
                listener.exitDivideStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideStatement" ):
                return visitor.visitDivideStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideStatement(self):

        localctx = CopyBookParser.DivideStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_divideStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4712
            self.match(CopyBookParser.DIVIDE)
            self.state = 4715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.state = 4713
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4714
                self.literal()
                pass


            self.state = 4720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
            if la_ == 1:
                self.state = 4717
                self.divideIntoStatement()
                pass

            elif la_ == 2:
                self.state = 4718
                self.divideIntoGivingStatement()
                pass

            elif la_ == 3:
                self.state = 4719
                self.divideByGivingStatement()
                pass


            self.state = 4723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==400:
                self.state = 4722
                self.divideRemainder()


            self.state = 4726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
            if la_ == 1:
                self.state = 4725
                self.onSizeErrorPhrase()


            self.state = 4729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
            if la_ == 1:
                self.state = 4728
                self.notOnSizeErrorPhrase()


            self.state = 4732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
            if la_ == 1:
                self.state = 4731
                self.match(CopyBookParser.END_DIVIDE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideIntoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def divideInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DivideIntoContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DivideIntoContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_divideIntoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideIntoStatement" ):
                listener.enterDivideIntoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideIntoStatement" ):
                listener.exitDivideIntoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideIntoStatement" ):
                return visitor.visitDivideIntoStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideIntoStatement(self):

        localctx = CopyBookParser.DivideIntoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_divideIntoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4734
            self.match(CopyBookParser.INTO)
            self.state = 4736 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4735
                    self.divideInto()

                else:
                    raise NoViableAltException(self)
                self.state = 4738 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,648,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideIntoGivingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def divideGivingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.DivideGivingPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_divideIntoGivingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideIntoGivingStatement" ):
                listener.enterDivideIntoGivingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideIntoGivingStatement" ):
                listener.exitDivideIntoGivingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideIntoGivingStatement" ):
                return visitor.visitDivideIntoGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideIntoGivingStatement(self):

        localctx = CopyBookParser.DivideIntoGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_divideIntoGivingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4740
            self.match(CopyBookParser.INTO)
            self.state = 4743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
            if la_ == 1:
                self.state = 4741
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4742
                self.literal()
                pass


            self.state = 4746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==228:
                self.state = 4745
                self.divideGivingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideByGivingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def divideGivingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.DivideGivingPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_divideByGivingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideByGivingStatement" ):
                listener.enterDivideByGivingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideByGivingStatement" ):
                listener.exitDivideByGivingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideByGivingStatement" ):
                return visitor.visitDivideByGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideByGivingStatement(self):

        localctx = CopyBookParser.DivideByGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_divideByGivingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4748
            self.match(CopyBookParser.BY)
            self.state = 4751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.state = 4749
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4750
                self.literal()
                pass


            self.state = 4754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==228:
                self.state = 4753
                self.divideGivingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideGivingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def divideGiving(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.DivideGivingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.DivideGivingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_divideGivingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideGivingPhrase" ):
                listener.enterDivideGivingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideGivingPhrase" ):
                listener.exitDivideGivingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideGivingPhrase" ):
                return visitor.visitDivideGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def divideGivingPhrase(self):

        localctx = CopyBookParser.DivideGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_divideGivingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4756
            self.match(CopyBookParser.GIVING)
            self.state = 4758 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4757
                    self.divideGiving()

                else:
                    raise NoViableAltException(self)
                self.state = 4760 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,653,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_divideInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideInto" ):
                listener.enterDivideInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideInto" ):
                listener.exitDivideInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideInto" ):
                return visitor.visitDivideInto(self)
            else:
                return visitor.visitChildren(self)




    def divideInto(self):

        localctx = CopyBookParser.DivideIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_divideInto)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4762
            self.identifier()
            self.state = 4764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 4763
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_divideGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideGiving" ):
                listener.enterDivideGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideGiving" ):
                listener.exitDivideGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideGiving" ):
                return visitor.visitDivideGiving(self)
            else:
                return visitor.visitChildren(self)




    def divideGiving(self):

        localctx = CopyBookParser.DivideGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_divideGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4766
            self.identifier()
            self.state = 4768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 4767
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideRemainderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMAINDER(self):
            return self.getToken(CopyBookParser.REMAINDER, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_divideRemainder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideRemainder" ):
                listener.enterDivideRemainder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideRemainder" ):
                listener.exitDivideRemainder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideRemainder" ):
                return visitor.visitDivideRemainder(self)
            else:
                return visitor.visitChildren(self)




    def divideRemainder(self):

        localctx = CopyBookParser.DivideRemainderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_divideRemainder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4770
            self.match(CopyBookParser.REMAINDER)
            self.state = 4771
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(CopyBookParser.ENABLE, 0)

        def cdName(self):
            return self.getTypedRuleContext(CopyBookParser.CdNameContext,0)


        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def INPUT(self):
            return self.getToken(CopyBookParser.INPUT, 0)

        def I_O(self):
            return self.getToken(CopyBookParser.I_O, 0)

        def TERMINAL(self):
            return self.getToken(CopyBookParser.TERMINAL, 0)

        def OUTPUT(self):
            return self.getToken(CopyBookParser.OUTPUT, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_enableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableStatement" ):
                listener.enterEnableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableStatement" ):
                listener.exitEnableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnableStatement" ):
                return visitor.visitEnableStatement(self)
            else:
                return visitor.visitChildren(self)




    def enableStatement(self):

        localctx = CopyBookParser.EnableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_enableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4773
            self.match(CopyBookParser.ENABLE)
            self.state = 4781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [253]:
                self.state = 4774
                self.match(CopyBookParser.INPUT)
                self.state = 4776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
                if la_ == 1:
                    self.state = 4775
                    self.match(CopyBookParser.TERMINAL)


                pass
            elif token in [239]:
                self.state = 4778
                self.match(CopyBookParser.I_O)
                self.state = 4779
                self.match(CopyBookParser.TERMINAL)
                pass
            elif token in [346]:
                self.state = 4780
                self.match(CopyBookParser.OUTPUT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4783
            self.cdName()
            self.state = 4785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 4784
                self.match(CopyBookParser.WITH)


            self.state = 4787
            self.match(CopyBookParser.KEY)
            self.state = 4790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,659,self._ctx)
            if la_ == 1:
                self.state = 4788
                self.literal()
                pass

            elif la_ == 2:
                self.state = 4789
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENTRY(self):
            return self.getToken(CopyBookParser.ENTRY, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_entryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntryStatement" ):
                listener.enterEntryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntryStatement" ):
                listener.exitEntryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntryStatement" ):
                return visitor.visitEntryStatement(self)
            else:
                return visitor.visitChildren(self)




    def entryStatement(self):

        localctx = CopyBookParser.EntryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_entryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4792
            self.match(CopyBookParser.ENTRY)
            self.state = 4793
            self.literal()
            self.state = 4800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==519:
                self.state = 4794
                self.match(CopyBookParser.USING)
                self.state = 4796 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4795
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4798 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,660,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVALUATE(self):
            return self.getToken(CopyBookParser.EVALUATE, 0)

        def evaluateSelect(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateSelectContext,0)


        def END_EVALUATE(self):
            return self.getToken(CopyBookParser.END_EVALUATE, 0)

        def evaluateAlsoSelect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EvaluateAlsoSelectContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EvaluateAlsoSelectContext,i)


        def evaluateWhenPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EvaluateWhenPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EvaluateWhenPhraseContext,i)


        def evaluateWhenOther(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateWhenOtherContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateStatement" ):
                listener.enterEvaluateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateStatement" ):
                listener.exitEvaluateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateStatement" ):
                return visitor.visitEvaluateStatement(self)
            else:
                return visitor.visitChildren(self)




    def evaluateStatement(self):

        localctx = CopyBookParser.EvaluateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_evaluateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4802
            self.match(CopyBookParser.EVALUATE)
            self.state = 4803
            self.evaluateSelect()
            self.state = 4807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17:
                self.state = 4804
                self.evaluateAlsoSelect()
                self.state = 4809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4811 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4810
                    self.evaluateWhenPhrase()

                else:
                    raise NoViableAltException(self)
                self.state = 4813 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,663,self._ctx)

            self.state = 4816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==525:
                self.state = 4815
                self.evaluateWhenOther()


            self.state = 4818
            self.match(CopyBookParser.END_EVALUATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IdentifierContext,i)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.LiteralContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.LiteralContext,i)


        def arithmeticExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ArithmeticExpressionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,i)


        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ConditionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ConditionContext,i)


        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.IDENTIFIER)
            else:
                return self.getToken(CopyBookParser.IDENTIFIER, i)

        def COLONCHAR(self):
            return self.getToken(CopyBookParser.COLONCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateSelect" ):
                listener.enterEvaluateSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateSelect" ):
                listener.exitEvaluateSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateSelect" ):
                return visitor.visitEvaluateSelect(self)
            else:
                return visitor.visitChildren(self)




    def evaluateSelect(self):

        localctx = CopyBookParser.EvaluateSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_evaluateSelect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4824 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4824
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,665,self._ctx)
                    if la_ == 1:
                        self.state = 4820
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 4821
                        self.literal()
                        pass

                    elif la_ == 3:
                        self.state = 4822
                        self.arithmeticExpression()
                        pass

                    elif la_ == 4:
                        self.state = 4823
                        self.condition()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 4826 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,666,self._ctx)

            self.state = 4833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==558:
                self.state = 4828
                self.match(CopyBookParser.LPARENCHAR)
                self.state = 4829
                self.match(CopyBookParser.IDENTIFIER)
                self.state = 4830
                self.match(CopyBookParser.COLONCHAR)
                self.state = 4831
                self.match(CopyBookParser.IDENTIFIER)
                self.state = 4832
                self.match(CopyBookParser.RPARENCHAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateAlsoSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(CopyBookParser.ALSO, 0)

        def evaluateSelect(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateSelectContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateAlsoSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateAlsoSelect" ):
                listener.enterEvaluateAlsoSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateAlsoSelect" ):
                listener.exitEvaluateAlsoSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateAlsoSelect" ):
                return visitor.visitEvaluateAlsoSelect(self)
            else:
                return visitor.visitChildren(self)




    def evaluateAlsoSelect(self):

        localctx = CopyBookParser.EvaluateAlsoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_evaluateAlsoSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4835
            self.match(CopyBookParser.ALSO)
            self.state = 4836
            self.evaluateSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateWhenPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def evaluateWhen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EvaluateWhenContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EvaluateWhenContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateWhenPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateWhenPhrase" ):
                listener.enterEvaluateWhenPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateWhenPhrase" ):
                listener.exitEvaluateWhenPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateWhenPhrase" ):
                return visitor.visitEvaluateWhenPhrase(self)
            else:
                return visitor.visitChildren(self)




    def evaluateWhenPhrase(self):

        localctx = CopyBookParser.EvaluateWhenPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_evaluateWhenPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4839 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4838
                    self.evaluateWhen()

                else:
                    raise NoViableAltException(self)
                self.state = 4841 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,668,self._ctx)

            self.state = 4846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 108086391057154088) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 34930163713) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 9007199388979713) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 85585987656220769) != 0) or ((((_la - 304)) & ~0x3f) == 0 and ((1 << (_la - 304)) & 2251834173424257) != 0) or ((((_la - 377)) & ~0x3f) == 0 and ((1 << (_la - 377)) & 1161937774836712961) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & -9223301658648247295) != 0) or _la==513 or _la==530 or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & 29) != 0) or _la==823:
                self.state = 4843
                self.statement()
                self.state = 4848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateWhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CopyBookParser.WHEN, 0)

        def evaluateCondition(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateConditionContext,0)


        def evaluateAlsoCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EvaluateAlsoConditionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EvaluateAlsoConditionContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateWhen" ):
                listener.enterEvaluateWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateWhen" ):
                listener.exitEvaluateWhen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateWhen" ):
                return visitor.visitEvaluateWhen(self)
            else:
                return visitor.visitChildren(self)




    def evaluateWhen(self):

        localctx = CopyBookParser.EvaluateWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_evaluateWhen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4849
            self.match(CopyBookParser.WHEN)
            self.state = 4850
            self.evaluateCondition()
            self.state = 4854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17:
                self.state = 4851
                self.evaluateAlsoCondition()
                self.state = 4856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(CopyBookParser.ANY, 0)

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def evaluateValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.EvaluateValueContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.EvaluateValueContext,i)


        def evaluateThrough(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateThroughContext,0)


        def condition(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.BooleanLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateCondition" ):
                listener.enterEvaluateCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateCondition" ):
                listener.exitEvaluateCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateCondition" ):
                return visitor.visitEvaluateCondition(self)
            else:
                return visitor.visitChildren(self)




    def evaluateCondition(self):

        localctx = CopyBookParser.EvaluateConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_evaluateCondition)
        self._la = 0 # Token type
        try:
            self.state = 4871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,674,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4857
                self.match(CopyBookParser.ANY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==324:
                    self.state = 4858
                    self.match(CopyBookParser.NOT)


                self.state = 4862 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4861
                        self.evaluateValue()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4864 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,672,self._ctx)

                self.state = 4867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==495 or _la==496:
                    self.state = 4866
                    self.evaluateThrough()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4869
                self.condition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4870
                self.booleanLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateThroughContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def evaluateValue(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateValueContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateThrough

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateThrough" ):
                listener.enterEvaluateThrough(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateThrough" ):
                listener.exitEvaluateThrough(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateThrough" ):
                return visitor.visitEvaluateThrough(self)
            else:
                return visitor.visitChildren(self)




    def evaluateThrough(self):

        localctx = CopyBookParser.EvaluateThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_evaluateThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4873
            _la = self._input.LA(1)
            if not(_la==495 or _la==496):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4874
            self.evaluateValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateAlsoConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(CopyBookParser.ALSO, 0)

        def evaluateCondition(self):
            return self.getTypedRuleContext(CopyBookParser.EvaluateConditionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateAlsoCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateAlsoCondition" ):
                listener.enterEvaluateAlsoCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateAlsoCondition" ):
                listener.exitEvaluateAlsoCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateAlsoCondition" ):
                return visitor.visitEvaluateAlsoCondition(self)
            else:
                return visitor.visitChildren(self)




    def evaluateAlsoCondition(self):

        localctx = CopyBookParser.EvaluateAlsoConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_evaluateAlsoCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4876
            self.match(CopyBookParser.ALSO)
            self.state = 4877
            self.evaluateCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateWhenOtherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CopyBookParser.WHEN, 0)

        def OTHER(self):
            return self.getToken(CopyBookParser.OTHER, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateWhenOther

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateWhenOther" ):
                listener.enterEvaluateWhenOther(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateWhenOther" ):
                listener.exitEvaluateWhenOther(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateWhenOther" ):
                return visitor.visitEvaluateWhenOther(self)
            else:
                return visitor.visitChildren(self)




    def evaluateWhenOther(self):

        localctx = CopyBookParser.EvaluateWhenOtherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_evaluateWhenOther)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4879
            self.match(CopyBookParser.WHEN)
            self.state = 4880
            self.match(CopyBookParser.OTHER)
            self.state = 4884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 108086391057154088) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 34930163713) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 9007199388979713) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 85585987656220769) != 0) or ((((_la - 304)) & ~0x3f) == 0 and ((1 << (_la - 304)) & 2251834173424257) != 0) or ((((_la - 377)) & ~0x3f) == 0 and ((1 << (_la - 377)) & 1161937774836712961) != 0) or ((((_la - 442)) & ~0x3f) == 0 and ((1 << (_la - 442)) & -9223301658648247295) != 0) or _la==513 or _la==530 or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & 29) != 0) or _la==823:
                self.state = 4881
                self.statement()
                self.state = 4886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_evaluateValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateValue" ):
                listener.enterEvaluateValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateValue" ):
                listener.exitEvaluateValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateValue" ):
                return visitor.visitEvaluateValue(self)
            else:
                return visitor.visitChildren(self)




    def evaluateValue(self):

        localctx = CopyBookParser.EvaluateValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_evaluateValue)
        try:
            self.state = 4890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,676,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4887
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4888
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4889
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecCicsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECCICSLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EXECCICSLINE)
            else:
                return self.getToken(CopyBookParser.EXECCICSLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_execCicsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecCicsStatement" ):
                listener.enterExecCicsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecCicsStatement" ):
                listener.exitExecCicsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecCicsStatement" ):
                return visitor.visitExecCicsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execCicsStatement(self):

        localctx = CopyBookParser.ExecCicsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_execCicsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4893 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4892
                    self.match(CopyBookParser.EXECCICSLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 4895 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,677,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecSqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECSQLLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EXECSQLLINE)
            else:
                return self.getToken(CopyBookParser.EXECSQLLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_execSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecSqlStatement" ):
                listener.enterExecSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecSqlStatement" ):
                listener.exitExecSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecSqlStatement" ):
                return visitor.visitExecSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlStatement(self):

        localctx = CopyBookParser.ExecSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_execSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4898 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4897
                    self.match(CopyBookParser.EXECSQLLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 4900 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,678,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecSqlImsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECSQLIMSLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.EXECSQLIMSLINE)
            else:
                return self.getToken(CopyBookParser.EXECSQLIMSLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_execSqlImsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecSqlImsStatement" ):
                listener.enterExecSqlImsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecSqlImsStatement" ):
                listener.exitExecSqlImsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecSqlImsStatement" ):
                return visitor.visitExecSqlImsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlImsStatement(self):

        localctx = CopyBookParser.ExecSqlImsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_execSqlImsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4903 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4902
                    self.match(CopyBookParser.EXECSQLIMSLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 4905 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,679,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExhibitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXHIBIT(self):
            return self.getToken(CopyBookParser.EXHIBIT, 0)

        def NAMED(self):
            return self.getToken(CopyBookParser.NAMED, 0)

        def CHANGED(self):
            return self.getToken(CopyBookParser.CHANGED, 0)

        def exhibitOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ExhibitOperandContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ExhibitOperandContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_exhibitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExhibitStatement" ):
                listener.enterExhibitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExhibitStatement" ):
                listener.exitExhibitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExhibitStatement" ):
                return visitor.visitExhibitStatement(self)
            else:
                return visitor.visitChildren(self)




    def exhibitStatement(self):

        localctx = CopyBookParser.ExhibitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_exhibitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4907
            self.match(CopyBookParser.EXHIBIT)
            self.state = 4909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 4908
                self.match(CopyBookParser.NAMED)


            self.state = 4912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 4911
                self.match(CopyBookParser.CHANGED)


            self.state = 4915 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4914
                    self.exhibitOperand()

                else:
                    raise NoViableAltException(self)
                self.state = 4917 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,682,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExhibitOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_exhibitOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExhibitOperand" ):
                listener.enterExhibitOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExhibitOperand" ):
                listener.exitExhibitOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExhibitOperand" ):
                return visitor.visitExhibitOperand(self)
            else:
                return visitor.visitChildren(self)




    def exhibitOperand(self):

        localctx = CopyBookParser.ExhibitOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_exhibitOperand)
        try:
            self.state = 4921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,683,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4919
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4920
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(CopyBookParser.EXIT, 0)

        def PROGRAM(self):
            return self.getToken(CopyBookParser.PROGRAM, 0)

        def PERFORM(self):
            return self.getToken(CopyBookParser.PERFORM, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_exitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStatement" ):
                listener.enterExitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStatement" ):
                listener.exitExitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitStatement" ):
                return visitor.visitExitStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitStatement(self):

        localctx = CopyBookParser.ExitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_exitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4923
            self.match(CopyBookParser.EXIT)
            self.state = 4925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,684,self._ctx)
            if la_ == 1:
                self.state = 4924
                _la = self._input.LA(1)
                if not(_la==355 or _la==373):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenerateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERATE(self):
            return self.getToken(CopyBookParser.GENERATE, 0)

        def reportName(self):
            return self.getTypedRuleContext(CopyBookParser.ReportNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_generateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerateStatement" ):
                listener.enterGenerateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerateStatement" ):
                listener.exitGenerateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerateStatement" ):
                return visitor.visitGenerateStatement(self)
            else:
                return visitor.visitChildren(self)




    def generateStatement(self):

        localctx = CopyBookParser.GenerateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_generateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4927
            self.match(CopyBookParser.GENERATE)
            self.state = 4928
            self.reportName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GobackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOBACK(self):
            return self.getToken(CopyBookParser.GOBACK, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_gobackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGobackStatement" ):
                listener.enterGobackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGobackStatement" ):
                listener.exitGobackStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGobackStatement" ):
                return visitor.visitGobackStatement(self)
            else:
                return visitor.visitChildren(self)




    def gobackStatement(self):

        localctx = CopyBookParser.GobackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_gobackStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4930
            self.match(CopyBookParser.GOBACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoToStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(CopyBookParser.GO, 0)

        def goToStatementSimple(self):
            return self.getTypedRuleContext(CopyBookParser.GoToStatementSimpleContext,0)


        def goToDependingOnStatement(self):
            return self.getTypedRuleContext(CopyBookParser.GoToDependingOnStatementContext,0)


        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_goToStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToStatement" ):
                listener.enterGoToStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToStatement" ):
                listener.exitGoToStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoToStatement" ):
                return visitor.visitGoToStatement(self)
            else:
                return visitor.visitChildren(self)




    def goToStatement(self):

        localctx = CopyBookParser.GoToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_goToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4932
            self.match(CopyBookParser.GO)
            self.state = 4934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==501:
                self.state = 4933
                self.match(CopyBookParser.TO)


            self.state = 4938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
            if la_ == 1:
                self.state = 4936
                self.goToStatementSimple()
                pass

            elif la_ == 2:
                self.state = 4937
                self.goToDependingOnStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoToStatementSimpleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_goToStatementSimple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToStatementSimple" ):
                listener.enterGoToStatementSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToStatementSimple" ):
                listener.exitGoToStatementSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoToStatementSimple" ):
                return visitor.visitGoToStatementSimple(self)
            else:
                return visitor.visitChildren(self)




    def goToStatementSimple(self):

        localctx = CopyBookParser.GoToStatementSimpleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_goToStatementSimple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4940
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoToDependingOnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MORE_LABELS(self):
            return self.getToken(CopyBookParser.MORE_LABELS, 0)

        def procedureName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,i)


        def DEPENDING(self):
            return self.getToken(CopyBookParser.DEPENDING, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_goToDependingOnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToDependingOnStatement" ):
                listener.enterGoToDependingOnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToDependingOnStatement" ):
                listener.exitGoToDependingOnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoToDependingOnStatement" ):
                return visitor.visitGoToDependingOnStatement(self)
            else:
                return visitor.visitChildren(self)




    def goToDependingOnStatement(self):

        localctx = CopyBookParser.GoToDependingOnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_goToDependingOnStatement)
        self._la = 0 # Token type
        try:
            self.state = 4955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [310]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4942
                self.match(CopyBookParser.MORE_LABELS)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 570, 571, 572, 573, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4944 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4943
                        self.procedureName()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4946 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,687,self._ctx)

                self.state = 4953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 4948
                    self.match(CopyBookParser.DEPENDING)
                    self.state = 4950
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,688,self._ctx)
                    if la_ == 1:
                        self.state = 4949
                        self.match(CopyBookParser.ON)


                    self.state = 4952
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CopyBookParser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionContext,0)


        def ifThen(self):
            return self.getTypedRuleContext(CopyBookParser.IfThenContext,0)


        def ifElse(self):
            return self.getTypedRuleContext(CopyBookParser.IfElseContext,0)


        def END_IF(self):
            return self.getToken(CopyBookParser.END_IF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = CopyBookParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4957
            self.match(CopyBookParser.IF)
            self.state = 4958
            self.condition()
            self.state = 4959
            self.ifThen()
            self.state = 4961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
            if la_ == 1:
                self.state = 4960
                self.ifElse()


            self.state = 4964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
            if la_ == 1:
                self.state = 4963
                self.match(CopyBookParser.END_IF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(CopyBookParser.NEXT, 0)

        def SENTENCE(self):
            return self.getToken(CopyBookParser.SENTENCE, 0)

        def THEN(self):
            return self.getToken(CopyBookParser.THEN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_ifThen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThen" ):
                listener.enterIfThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThen" ):
                listener.exitIfThen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfThen" ):
                return visitor.visitIfThen(self)
            else:
                return visitor.visitChildren(self)




    def ifThen(self):

        localctx = CopyBookParser.IfThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_ifThen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==492:
                self.state = 4966
                self.match(CopyBookParser.THEN)


            self.state = 4976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [320]:
                self.state = 4969
                self.match(CopyBookParser.NEXT)
                self.state = 4970
                self.match(CopyBookParser.SENTENCE)
                pass
            elif token in [3, 5, 18, 55, 56, 70, 95, 99, 105, 135, 144, 147, 149, 162, 188, 199, 204, 205, 226, 227, 230, 243, 251, 252, 255, 304, 311, 313, 339, 355, 377, 386, 387, 399, 415, 420, 430, 437, 442, 452, 468, 470, 471, 475, 488, 505, 513, 530, 577, 579, 580, 581, 823]:
                self.state = 4972 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4971
                        self.statement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4974 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,694,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(CopyBookParser.ELSE, 0)

        def NEXT(self):
            return self.getToken(CopyBookParser.NEXT, 0)

        def SENTENCE(self):
            return self.getToken(CopyBookParser.SENTENCE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_ifElse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElse" ):
                listener.enterIfElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElse" ):
                listener.exitIfElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfElse" ):
                return visitor.visitIfElse(self)
            else:
                return visitor.visitChildren(self)




    def ifElse(self):

        localctx = CopyBookParser.IfElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_ifElse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4978
            self.match(CopyBookParser.ELSE)
            self.state = 4987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [320]:
                self.state = 4979
                self.match(CopyBookParser.NEXT)
                self.state = 4980
                self.match(CopyBookParser.SENTENCE)
                pass
            elif token in [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 28, 31, 32, 33, 34, 48, 52, 55, 56, 64, 67, 70, 82, 95, 99, 100, 105, 110, 111, 112, 113, 119, 129, 132, 133, 135, 142, 144, 147, 149, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 193, 199, 202, 204, 205, 207, 210, 211, 212, 221, 222, 226, 227, 230, 241, 242, 243, 246, 251, 252, 255, 258, 259, 271, 272, 279, 292, 293, 295, 304, 311, 313, 315, 322, 324, 327, 334, 335, 336, 338, 339, 354, 355, 372, 373, 375, 377, 378, 379, 386, 387, 399, 405, 406, 407, 412, 415, 420, 428, 429, 430, 436, 437, 439, 440, 442, 451, 452, 460, 462, 468, 469, 470, 471, 475, 479, 483, 487, 488, 489, 490, 493, 497, 500, 505, 507, 513, 524, 525, 527, 529, 530, 532, 542, 544, 550, 551, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 4984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,696,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4981
                        self.statement() 
                    self.state = 4986
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,696,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIALIZE(self):
            return self.getToken(CopyBookParser.INITIALIZE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IdentifierContext,i)


        def initializeReplacingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InitializeReplacingPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_initializeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializeStatement" ):
                listener.enterInitializeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializeStatement" ):
                listener.exitInitializeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializeStatement" ):
                return visitor.visitInitializeStatement(self)
            else:
                return visitor.visitChildren(self)




    def initializeStatement(self):

        localctx = CopyBookParser.InitializeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_initializeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4989
            self.match(CopyBookParser.INITIALIZE)
            self.state = 4991 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4990
                    self.identifier()

                else:
                    raise NoViableAltException(self)
                self.state = 4993 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,698,self._ctx)

            self.state = 4996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
            if la_ == 1:
                self.state = 4995
                self.initializeReplacingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializeReplacingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(CopyBookParser.REPLACING, 0)

        def initializeReplacingBy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InitializeReplacingByContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InitializeReplacingByContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_initializeReplacingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializeReplacingPhrase" ):
                listener.enterInitializeReplacingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializeReplacingPhrase" ):
                listener.exitInitializeReplacingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializeReplacingPhrase" ):
                return visitor.visitInitializeReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def initializeReplacingPhrase(self):

        localctx = CopyBookParser.InitializeReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_initializeReplacingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4998
            self.match(CopyBookParser.REPLACING)
            self.state = 5000 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4999
                    self.initializeReplacingBy()

                else:
                    raise NoViableAltException(self)
                self.state = 5002 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,700,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializeReplacingByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def ALPHABETIC(self):
            return self.getToken(CopyBookParser.ALPHABETIC, 0)

        def ALPHANUMERIC(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC, 0)

        def ALPHANUMERIC_EDITED(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC_EDITED, 0)

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def NATIONAL_EDITED(self):
            return self.getToken(CopyBookParser.NATIONAL_EDITED, 0)

        def NUMERIC(self):
            return self.getToken(CopyBookParser.NUMERIC, 0)

        def NUMERIC_EDITED(self):
            return self.getToken(CopyBookParser.NUMERIC_EDITED, 0)

        def DBCS(self):
            return self.getToken(CopyBookParser.DBCS, 0)

        def EGCS(self):
            return self.getToken(CopyBookParser.EGCS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def DATA(self):
            return self.getToken(CopyBookParser.DATA, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_initializeReplacingBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializeReplacingBy" ):
                listener.enterInitializeReplacingBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializeReplacingBy" ):
                listener.exitInitializeReplacingBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializeReplacingBy" ):
                return visitor.visitInitializeReplacingBy(self)
            else:
                return visitor.visitChildren(self)




    def initializeReplacingBy(self):

        localctx = CopyBookParser.InitializeReplacingByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_initializeReplacingBy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5004
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 102400) != 0) or _la==119 or _la==157 or ((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & 40963) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 5005
                self.match(CopyBookParser.DATA)


            self.state = 5008
            self.match(CopyBookParser.BY)
            self.state = 5011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,702,self._ctx)
            if la_ == 1:
                self.state = 5009
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5010
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitiateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIATE(self):
            return self.getToken(CopyBookParser.INITIATE, 0)

        def reportName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReportNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReportNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_initiateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitiateStatement" ):
                listener.enterInitiateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitiateStatement" ):
                listener.exitInitiateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitiateStatement" ):
                return visitor.visitInitiateStatement(self)
            else:
                return visitor.visitChildren(self)




    def initiateStatement(self):

        localctx = CopyBookParser.InitiateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_initiateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5013
            self.match(CopyBookParser.INITIATE)
            self.state = 5015 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5014
                    self.reportName()

                else:
                    raise NoViableAltException(self)
                self.state = 5017 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,703,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSPECT(self):
            return self.getToken(CopyBookParser.INSPECT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def inspectTallyingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InspectTallyingPhraseContext,0)


        def inspectReplacingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InspectReplacingPhraseContext,0)


        def inspectTallyingReplacingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InspectTallyingReplacingPhraseContext,0)


        def inspectConvertingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InspectConvertingPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectStatement" ):
                listener.enterInspectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectStatement" ):
                listener.exitInspectStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectStatement" ):
                return visitor.visitInspectStatement(self)
            else:
                return visitor.visitChildren(self)




    def inspectStatement(self):

        localctx = CopyBookParser.InspectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_inspectStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5019
            self.match(CopyBookParser.INSPECT)
            self.state = 5020
            self.identifier()
            self.state = 5025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                self.state = 5021
                self.inspectTallyingPhrase()
                pass

            elif la_ == 2:
                self.state = 5022
                self.inspectReplacingPhrase()
                pass

            elif la_ == 3:
                self.state = 5023
                self.inspectTallyingReplacingPhrase()
                pass

            elif la_ == 4:
                self.state = 5024
                self.inspectConvertingPhrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectTallyingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TALLYING(self):
            return self.getToken(CopyBookParser.TALLYING, 0)

        def inspectFor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectForContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectForContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectTallyingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectTallyingPhrase" ):
                listener.enterInspectTallyingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectTallyingPhrase" ):
                listener.exitInspectTallyingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectTallyingPhrase" ):
                return visitor.visitInspectTallyingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectTallyingPhrase(self):

        localctx = CopyBookParser.InspectTallyingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_inspectTallyingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5027
            self.match(CopyBookParser.TALLYING)
            self.state = 5029 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5028
                    self.inspectFor()

                else:
                    raise NoViableAltException(self)
                self.state = 5031 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,705,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectReplacingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(CopyBookParser.REPLACING, 0)

        def inspectReplacingCharacters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectReplacingCharactersContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectReplacingCharactersContext,i)


        def inspectReplacingAllLeadings(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectReplacingAllLeadingsContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectReplacingAllLeadingsContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectReplacingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectReplacingPhrase" ):
                listener.enterInspectReplacingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectReplacingPhrase" ):
                listener.exitInspectReplacingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectReplacingPhrase" ):
                return visitor.visitInspectReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingPhrase(self):

        localctx = CopyBookParser.InspectReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_inspectReplacingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5033
            self.match(CopyBookParser.REPLACING)
            self.state = 5036 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5036
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [66]:
                        self.state = 5034
                        self.inspectReplacingCharacters()
                        pass
                    elif token in [10, 216, 276]:
                        self.state = 5035
                        self.inspectReplacingAllLeadings()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 5038 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,707,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectTallyingReplacingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TALLYING(self):
            return self.getToken(CopyBookParser.TALLYING, 0)

        def inspectFor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectForContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectForContext,i)


        def inspectReplacingPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectReplacingPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectReplacingPhraseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectTallyingReplacingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectTallyingReplacingPhrase" ):
                listener.enterInspectTallyingReplacingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectTallyingReplacingPhrase" ):
                listener.exitInspectTallyingReplacingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectTallyingReplacingPhrase" ):
                return visitor.visitInspectTallyingReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectTallyingReplacingPhrase(self):

        localctx = CopyBookParser.InspectTallyingReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_inspectTallyingReplacingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5040
            self.match(CopyBookParser.TALLYING)
            self.state = 5042 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5041
                    self.inspectFor()

                else:
                    raise NoViableAltException(self)
                self.state = 5044 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,708,self._ctx)

            self.state = 5047 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5046
                    self.inspectReplacingPhrase()

                else:
                    raise NoViableAltException(self)
                self.state = 5049 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,709,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectConvertingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONVERTING(self):
            return self.getToken(CopyBookParser.CONVERTING, 0)

        def inspectTo(self):
            return self.getTypedRuleContext(CopyBookParser.InspectToContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def inspectBeforeAfter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectConvertingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectConvertingPhrase" ):
                listener.enterInspectConvertingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectConvertingPhrase" ):
                listener.exitInspectConvertingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectConvertingPhrase" ):
                return visitor.visitInspectConvertingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectConvertingPhrase(self):

        localctx = CopyBookParser.InspectConvertingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_inspectConvertingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5051
            self.match(CopyBookParser.CONVERTING)
            self.state = 5054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
            if la_ == 1:
                self.state = 5052
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5053
                self.literal()
                pass


            self.state = 5056
            self.inspectTo()
            self.state = 5060
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,711,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5057
                    self.inspectBeforeAfter() 
                self.state = 5062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,711,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def inspectCharacters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectCharactersContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectCharactersContext,i)


        def inspectAllLeadings(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectAllLeadingsContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectAllLeadingsContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectFor" ):
                listener.enterInspectFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectFor" ):
                listener.exitInspectFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectFor" ):
                return visitor.visitInspectFor(self)
            else:
                return visitor.visitChildren(self)




    def inspectFor(self):

        localctx = CopyBookParser.InspectForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_inspectFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5063
            self.identifier()
            self.state = 5064
            self.match(CopyBookParser.FOR)
            self.state = 5067 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5067
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [66]:
                        self.state = 5065
                        self.inspectCharacters()
                        pass
                    elif token in [10, 276]:
                        self.state = 5066
                        self.inspectAllLeadings()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 5069 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,713,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectCharactersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def inspectBeforeAfter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectCharacters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectCharacters" ):
                listener.enterInspectCharacters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectCharacters" ):
                listener.exitInspectCharacters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectCharacters" ):
                return visitor.visitInspectCharacters(self)
            else:
                return visitor.visitChildren(self)




    def inspectCharacters(self):

        localctx = CopyBookParser.InspectCharactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_inspectCharacters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5071
            self.match(CopyBookParser.CHARACTERS)
            self.state = 5075
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,714,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5072
                    self.inspectBeforeAfter() 
                self.state = 5077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,714,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectReplacingCharactersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTERS(self):
            return self.getToken(CopyBookParser.CHARACTERS, 0)

        def inspectBy(self):
            return self.getTypedRuleContext(CopyBookParser.InspectByContext,0)


        def inspectBeforeAfter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectReplacingCharacters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectReplacingCharacters" ):
                listener.enterInspectReplacingCharacters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectReplacingCharacters" ):
                listener.exitInspectReplacingCharacters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectReplacingCharacters" ):
                return visitor.visitInspectReplacingCharacters(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingCharacters(self):

        localctx = CopyBookParser.InspectReplacingCharactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_inspectReplacingCharacters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5078
            self.match(CopyBookParser.CHARACTERS)
            self.state = 5079
            self.inspectBy()
            self.state = 5083
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,715,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5080
                    self.inspectBeforeAfter() 
                self.state = 5085
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,715,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectAllLeadingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def LEADING(self):
            return self.getToken(CopyBookParser.LEADING, 0)

        def inspectAllLeading(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectAllLeadingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectAllLeadingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectAllLeadings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectAllLeadings" ):
                listener.enterInspectAllLeadings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectAllLeadings" ):
                listener.exitInspectAllLeadings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectAllLeadings" ):
                return visitor.visitInspectAllLeadings(self)
            else:
                return visitor.visitChildren(self)




    def inspectAllLeadings(self):

        localctx = CopyBookParser.InspectAllLeadingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_inspectAllLeadings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5086
            _la = self._input.LA(1)
            if not(_la==10 or _la==276):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5088 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5087
                    self.inspectAllLeading()

                else:
                    raise NoViableAltException(self)
                self.state = 5090 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,716,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectReplacingAllLeadingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def LEADING(self):
            return self.getToken(CopyBookParser.LEADING, 0)

        def FIRST(self):
            return self.getToken(CopyBookParser.FIRST, 0)

        def inspectReplacingAllLeading(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectReplacingAllLeadingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectReplacingAllLeadingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectReplacingAllLeadings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectReplacingAllLeadings" ):
                listener.enterInspectReplacingAllLeadings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectReplacingAllLeadings" ):
                listener.exitInspectReplacingAllLeadings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectReplacingAllLeadings" ):
                return visitor.visitInspectReplacingAllLeadings(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingAllLeadings(self):

        localctx = CopyBookParser.InspectReplacingAllLeadingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_inspectReplacingAllLeadings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5092
            _la = self._input.LA(1)
            if not(_la==10 or _la==216 or _la==276):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5094 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5093
                    self.inspectReplacingAllLeading()

                else:
                    raise NoViableAltException(self)
                self.state = 5096 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,717,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectAllLeadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def inspectBeforeAfter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectAllLeading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectAllLeading" ):
                listener.enterInspectAllLeading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectAllLeading" ):
                listener.exitInspectAllLeading(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectAllLeading" ):
                return visitor.visitInspectAllLeading(self)
            else:
                return visitor.visitChildren(self)




    def inspectAllLeading(self):

        localctx = CopyBookParser.InspectAllLeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_inspectAllLeading)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,718,self._ctx)
            if la_ == 1:
                self.state = 5098
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5099
                self.literal()
                pass

            elif la_ == 3:
                self.state = 5100
                self.figurativeConstant()
                pass


            self.state = 5106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,719,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5103
                    self.inspectBeforeAfter() 
                self.state = 5108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,719,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectReplacingAllLeadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inspectBy(self):
            return self.getTypedRuleContext(CopyBookParser.InspectByContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def inspectBeforeAfter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectReplacingAllLeading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectReplacingAllLeading" ):
                listener.enterInspectReplacingAllLeading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectReplacingAllLeading" ):
                listener.exitInspectReplacingAllLeading(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectReplacingAllLeading" ):
                return visitor.visitInspectReplacingAllLeading(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingAllLeading(self):

        localctx = CopyBookParser.InspectReplacingAllLeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_inspectReplacingAllLeading)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
            if la_ == 1:
                self.state = 5109
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5110
                self.literal()
                pass

            elif la_ == 3:
                self.state = 5111
                self.figurativeConstant()
                pass


            self.state = 5114
            self.inspectBy()
            self.state = 5118
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,721,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5115
                    self.inspectBeforeAfter() 
                self.state = 5120
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,721,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectBy" ):
                listener.enterInspectBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectBy" ):
                listener.exitInspectBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectBy" ):
                return visitor.visitInspectBy(self)
            else:
                return visitor.visitChildren(self)




    def inspectBy(self):

        localctx = CopyBookParser.InspectByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_inspectBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5121
            self.match(CopyBookParser.BY)
            self.state = 5125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.state = 5122
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5123
                self.literal()
                pass

            elif la_ == 3:
                self.state = 5124
                self.figurativeConstant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectTo" ):
                listener.enterInspectTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectTo" ):
                listener.exitInspectTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectTo" ):
                return visitor.visitInspectTo(self)
            else:
                return visitor.visitChildren(self)




    def inspectTo(self):

        localctx = CopyBookParser.InspectToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_inspectTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5127
            self.match(CopyBookParser.TO)
            self.state = 5130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
            if la_ == 1:
                self.state = 5128
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5129
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InspectBeforeAfterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(CopyBookParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(CopyBookParser.AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def INITIAL(self):
            return self.getToken(CopyBookParser.INITIAL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_inspectBeforeAfter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInspectBeforeAfter" ):
                listener.enterInspectBeforeAfter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInspectBeforeAfter" ):
                listener.exitInspectBeforeAfter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInspectBeforeAfter" ):
                return visitor.visitInspectBeforeAfter(self)
            else:
                return visitor.visitChildren(self)




    def inspectBeforeAfter(self):

        localctx = CopyBookParser.InspectBeforeAfterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_inspectBeforeAfter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5132
            _la = self._input.LA(1)
            if not(_la==8 or _la==42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==250:
                self.state = 5133
                self.match(CopyBookParser.INITIAL)


            self.state = 5138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,725,self._ctx)
            if la_ == 1:
                self.state = 5136
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5137
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CopyBookParser.MERGE, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def mergeOnKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MergeOnKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MergeOnKeyClauseContext,i)


        def mergeCollatingSequencePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.MergeCollatingSequencePhraseContext,0)


        def mergeUsing(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MergeUsingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MergeUsingContext,i)


        def mergeOutputProcedurePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.MergeOutputProcedurePhraseContext,0)


        def mergeGivingPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MergeGivingPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MergeGivingPhraseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeStatement" ):
                listener.enterMergeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeStatement" ):
                listener.exitMergeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeStatement" ):
                return visitor.visitMergeStatement(self)
            else:
                return visitor.visitChildren(self)




    def mergeStatement(self):

        localctx = CopyBookParser.MergeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_mergeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5140
            self.match(CopyBookParser.MERGE)
            self.state = 5141
            self.fileName()
            self.state = 5143 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5142
                    self.mergeOnKeyClause()

                else:
                    raise NoViableAltException(self)
                self.state = 5145 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,726,self._ctx)

            self.state = 5148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
            if la_ == 1:
                self.state = 5147
                self.mergeCollatingSequencePhrase()


            self.state = 5153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==519:
                self.state = 5150
                self.mergeUsing()
                self.state = 5155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==346:
                self.state = 5156
                self.mergeOutputProcedurePhrase()


            self.state = 5162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==228:
                self.state = 5159
                self.mergeGivingPhrase()
                self.state = 5164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeOnKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(CopyBookParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CopyBookParser.DESCENDING, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def qualifiedDataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeOnKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeOnKeyClause" ):
                listener.enterMergeOnKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeOnKeyClause" ):
                listener.exitMergeOnKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeOnKeyClause" ):
                return visitor.visitMergeOnKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def mergeOnKeyClause(self):

        localctx = CopyBookParser.MergeOnKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_mergeOnKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 5165
                self.match(CopyBookParser.ON)


            self.state = 5168
            _la = self._input.LA(1)
            if not(_la==26 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 5169
                self.match(CopyBookParser.KEY)


            self.state = 5173 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5172
                    self.qualifiedDataName()

                else:
                    raise NoViableAltException(self)
                self.state = 5175 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,733,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCollatingSequencePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQUENCE(self):
            return self.getToken(CopyBookParser.SEQUENCE, 0)

        def COLLATING(self):
            return self.getToken(CopyBookParser.COLLATING, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def alphabetName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AlphabetNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,i)


        def mergeCollatingAlphanumeric(self):
            return self.getTypedRuleContext(CopyBookParser.MergeCollatingAlphanumericContext,0)


        def mergeCollatingNational(self):
            return self.getTypedRuleContext(CopyBookParser.MergeCollatingNationalContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeCollatingSequencePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeCollatingSequencePhrase" ):
                listener.enterMergeCollatingSequencePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeCollatingSequencePhrase" ):
                listener.exitMergeCollatingSequencePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeCollatingSequencePhrase" ):
                return visitor.visitMergeCollatingSequencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def mergeCollatingSequencePhrase(self):

        localctx = CopyBookParser.MergeCollatingSequencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_mergeCollatingSequencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 5177
                self.match(CopyBookParser.COLLATING)


            self.state = 5180
            self.match(CopyBookParser.SEQUENCE)
            self.state = 5182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5181
                self.match(CopyBookParser.IS)


            self.state = 5185 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5184
                    self.alphabetName()

                else:
                    raise NoViableAltException(self)
                self.state = 5187 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,736,self._ctx)

            self.state = 5190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,737,self._ctx)
            if la_ == 1:
                self.state = 5189
                self.mergeCollatingAlphanumeric()


            self.state = 5193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
            if la_ == 1:
                self.state = 5192
                self.mergeCollatingNational()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCollatingAlphanumericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHANUMERIC(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeCollatingAlphanumeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeCollatingAlphanumeric" ):
                listener.enterMergeCollatingAlphanumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeCollatingAlphanumeric" ):
                listener.exitMergeCollatingAlphanumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeCollatingAlphanumeric" ):
                return visitor.visitMergeCollatingAlphanumeric(self)
            else:
                return visitor.visitChildren(self)




    def mergeCollatingAlphanumeric(self):

        localctx = CopyBookParser.MergeCollatingAlphanumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_mergeCollatingAlphanumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 5195
                self.match(CopyBookParser.FOR)


            self.state = 5198
            self.match(CopyBookParser.ALPHANUMERIC)
            self.state = 5199
            self.match(CopyBookParser.IS)
            self.state = 5200
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeCollatingNationalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeCollatingNational

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeCollatingNational" ):
                listener.enterMergeCollatingNational(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeCollatingNational" ):
                listener.exitMergeCollatingNational(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeCollatingNational" ):
                return visitor.visitMergeCollatingNational(self)
            else:
                return visitor.visitChildren(self)




    def mergeCollatingNational(self):

        localctx = CopyBookParser.MergeCollatingNationalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_mergeCollatingNational)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 5202
                self.match(CopyBookParser.FOR)


            self.state = 5205
            self.match(CopyBookParser.NATIONAL)
            self.state = 5207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5206
                self.match(CopyBookParser.IS)


            self.state = 5209
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeUsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def fileName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeUsing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeUsing" ):
                listener.enterMergeUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeUsing" ):
                listener.exitMergeUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeUsing" ):
                return visitor.visitMergeUsing(self)
            else:
                return visitor.visitChildren(self)




    def mergeUsing(self):

        localctx = CopyBookParser.MergeUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_mergeUsing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5211
            self.match(CopyBookParser.USING)
            self.state = 5213 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5212
                    self.fileName()

                else:
                    raise NoViableAltException(self)
                self.state = 5215 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,742,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeOutputProcedurePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(CopyBookParser.OUTPUT, 0)

        def PROCEDURE(self):
            return self.getToken(CopyBookParser.PROCEDURE, 0)

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def mergeOutputThrough(self):
            return self.getTypedRuleContext(CopyBookParser.MergeOutputThroughContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeOutputProcedurePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeOutputProcedurePhrase" ):
                listener.enterMergeOutputProcedurePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeOutputProcedurePhrase" ):
                listener.exitMergeOutputProcedurePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeOutputProcedurePhrase" ):
                return visitor.visitMergeOutputProcedurePhrase(self)
            else:
                return visitor.visitChildren(self)




    def mergeOutputProcedurePhrase(self):

        localctx = CopyBookParser.MergeOutputProcedurePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_mergeOutputProcedurePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5217
            self.match(CopyBookParser.OUTPUT)
            self.state = 5218
            self.match(CopyBookParser.PROCEDURE)
            self.state = 5220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5219
                self.match(CopyBookParser.IS)


            self.state = 5222
            self.procedureName()
            self.state = 5224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 5223
                self.mergeOutputThrough()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeOutputThroughContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeOutputThrough

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeOutputThrough" ):
                listener.enterMergeOutputThrough(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeOutputThrough" ):
                listener.exitMergeOutputThrough(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeOutputThrough" ):
                return visitor.visitMergeOutputThrough(self)
            else:
                return visitor.visitChildren(self)




    def mergeOutputThrough(self):

        localctx = CopyBookParser.MergeOutputThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_mergeOutputThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5226
            _la = self._input.LA(1)
            if not(_la==495 or _la==496):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5227
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeGivingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def mergeGiving(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MergeGivingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MergeGivingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeGivingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeGivingPhrase" ):
                listener.enterMergeGivingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeGivingPhrase" ):
                listener.exitMergeGivingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeGivingPhrase" ):
                return visitor.visitMergeGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def mergeGivingPhrase(self):

        localctx = CopyBookParser.MergeGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_mergeGivingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5229
            self.match(CopyBookParser.GIVING)
            self.state = 5231 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5230
                    self.mergeGiving()

                else:
                    raise NoViableAltException(self)
                self.state = 5233 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,745,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def LOCK(self):
            return self.getToken(CopyBookParser.LOCK, 0)

        def SAVE(self):
            return self.getToken(CopyBookParser.SAVE, 0)

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def REWIND(self):
            return self.getToken(CopyBookParser.REWIND, 0)

        def CRUNCH(self):
            return self.getToken(CopyBookParser.CRUNCH, 0)

        def RELEASE(self):
            return self.getToken(CopyBookParser.RELEASE, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def REMOVE(self):
            return self.getToken(CopyBookParser.REMOVE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_mergeGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeGiving" ):
                listener.enterMergeGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeGiving" ):
                listener.exitMergeGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeGiving" ):
                return visitor.visitMergeGiving(self)
            else:
                return visitor.visitChildren(self)




    def mergeGiving(self):

        localctx = CopyBookParser.MergeGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_mergeGiving)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5235
            self.fileName()
            self.state = 5245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
            if la_ == 1:
                self.state = 5236
                self.match(CopyBookParser.LOCK)

            elif la_ == 2:
                self.state = 5237
                self.match(CopyBookParser.SAVE)

            elif la_ == 3:
                self.state = 5238
                self.match(CopyBookParser.NO)
                self.state = 5239
                self.match(CopyBookParser.REWIND)

            elif la_ == 4:
                self.state = 5240
                self.match(CopyBookParser.CRUNCH)

            elif la_ == 5:
                self.state = 5241
                self.match(CopyBookParser.RELEASE)

            elif la_ == 6:
                self.state = 5242
                self.match(CopyBookParser.WITH)
                self.state = 5243
                self.match(CopyBookParser.REMOVE)
                self.state = 5244
                self.match(CopyBookParser.CRUNCH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(CopyBookParser.MOVE, 0)

        def moveToStatement(self):
            return self.getTypedRuleContext(CopyBookParser.MoveToStatementContext,0)


        def moveCorrespondingToStatement(self):
            return self.getTypedRuleContext(CopyBookParser.MoveCorrespondingToStatementContext,0)


        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_moveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMoveStatement" ):
                listener.enterMoveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMoveStatement" ):
                listener.exitMoveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMoveStatement" ):
                return visitor.visitMoveStatement(self)
            else:
                return visitor.visitChildren(self)




    def moveStatement(self):

        localctx = CopyBookParser.MoveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_moveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5247
            self.match(CopyBookParser.MOVE)
            self.state = 5249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,747,self._ctx)
            if la_ == 1:
                self.state = 5248
                self.match(CopyBookParser.ALL)


            self.state = 5253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 100, 110, 111, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 135, 142, 193, 205, 207, 210, 212, 221, 222, 223, 237, 238, 246, 258, 267, 271, 272, 279, 288, 291, 292, 293, 301, 302, 315, 321, 322, 325, 326, 327, 335, 336, 338, 353, 354, 372, 373, 378, 379, 380, 386, 387, 406, 415, 416, 420, 428, 436, 437, 439, 440, 447, 448, 451, 453, 454, 455, 457, 458, 459, 460, 462, 463, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 526, 530, 532, 534, 536, 537, 542, 569, 570, 571, 572, 573, 574, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 5251
                self.moveToStatement()
                pass
            elif token in [106, 107]:
                self.state = 5252
                self.moveCorrespondingToStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveToStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moveToSendingArea(self):
            return self.getTypedRuleContext(CopyBookParser.MoveToSendingAreaContext,0)


        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_moveToStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMoveToStatement" ):
                listener.enterMoveToStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMoveToStatement" ):
                listener.exitMoveToStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMoveToStatement" ):
                return visitor.visitMoveToStatement(self)
            else:
                return visitor.visitChildren(self)




    def moveToStatement(self):

        localctx = CopyBookParser.MoveToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_moveToStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5255
            self.moveToSendingArea()
            self.state = 5256
            self.match(CopyBookParser.TO)
            self.state = 5258 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5257
                    self.identifier()

                else:
                    raise NoViableAltException(self)
                self.state = 5260 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,749,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveToSendingAreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_moveToSendingArea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMoveToSendingArea" ):
                listener.enterMoveToSendingArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMoveToSendingArea" ):
                listener.exitMoveToSendingArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMoveToSendingArea" ):
                return visitor.visitMoveToSendingArea(self)
            else:
                return visitor.visitChildren(self)




    def moveToSendingArea(self):

        localctx = CopyBookParser.MoveToSendingAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_moveToSendingArea)
        try:
            self.state = 5265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,750,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5262
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5263
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5264
                self.figurativeConstant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveCorrespondingToStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moveCorrespondingToSendingArea(self):
            return self.getTypedRuleContext(CopyBookParser.MoveCorrespondingToSendingAreaContext,0)


        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def CORRESPONDING(self):
            return self.getToken(CopyBookParser.CORRESPONDING, 0)

        def CORR(self):
            return self.getToken(CopyBookParser.CORR, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.IdentifierContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_moveCorrespondingToStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMoveCorrespondingToStatement" ):
                listener.enterMoveCorrespondingToStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMoveCorrespondingToStatement" ):
                listener.exitMoveCorrespondingToStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMoveCorrespondingToStatement" ):
                return visitor.visitMoveCorrespondingToStatement(self)
            else:
                return visitor.visitChildren(self)




    def moveCorrespondingToStatement(self):

        localctx = CopyBookParser.MoveCorrespondingToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_moveCorrespondingToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5267
            _la = self._input.LA(1)
            if not(_la==106 or _la==107):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5268
            self.moveCorrespondingToSendingArea()
            self.state = 5269
            self.match(CopyBookParser.TO)
            self.state = 5271 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5270
                    self.identifier()

                else:
                    raise NoViableAltException(self)
                self.state = 5273 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,751,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveCorrespondingToSendingAreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_moveCorrespondingToSendingArea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMoveCorrespondingToSendingArea" ):
                listener.enterMoveCorrespondingToSendingArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMoveCorrespondingToSendingArea" ):
                listener.exitMoveCorrespondingToSendingArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMoveCorrespondingToSendingArea" ):
                return visitor.visitMoveCorrespondingToSendingArea(self)
            else:
                return visitor.visitChildren(self)




    def moveCorrespondingToSendingArea(self):

        localctx = CopyBookParser.MoveCorrespondingToSendingAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_moveCorrespondingToSendingArea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5275
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLY(self):
            return self.getToken(CopyBookParser.MULTIPLY, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def multiplyRegular(self):
            return self.getTypedRuleContext(CopyBookParser.MultiplyRegularContext,0)


        def multiplyGiving(self):
            return self.getTypedRuleContext(CopyBookParser.MultiplyGivingContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnSizeErrorPhraseContext,0)


        def END_MULTIPLY(self):
            return self.getToken(CopyBookParser.END_MULTIPLY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_multiplyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyStatement" ):
                listener.enterMultiplyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyStatement" ):
                listener.exitMultiplyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyStatement" ):
                return visitor.visitMultiplyStatement(self)
            else:
                return visitor.visitChildren(self)




    def multiplyStatement(self):

        localctx = CopyBookParser.MultiplyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_multiplyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5277
            self.match(CopyBookParser.MULTIPLY)
            self.state = 5280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
            if la_ == 1:
                self.state = 5278
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5279
                self.literal()
                pass


            self.state = 5282
            self.match(CopyBookParser.BY)
            self.state = 5285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
            if la_ == 1:
                self.state = 5283
                self.multiplyRegular()
                pass

            elif la_ == 2:
                self.state = 5284
                self.multiplyGiving()
                pass


            self.state = 5288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
            if la_ == 1:
                self.state = 5287
                self.onSizeErrorPhrase()


            self.state = 5291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
            if la_ == 1:
                self.state = 5290
                self.notOnSizeErrorPhrase()


            self.state = 5294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
            if la_ == 1:
                self.state = 5293
                self.match(CopyBookParser.END_MULTIPLY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyRegularContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplyRegularOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MultiplyRegularOperandContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MultiplyRegularOperandContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_multiplyRegular

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyRegular" ):
                listener.enterMultiplyRegular(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyRegular" ):
                listener.exitMultiplyRegular(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyRegular" ):
                return visitor.visitMultiplyRegular(self)
            else:
                return visitor.visitChildren(self)




    def multiplyRegular(self):

        localctx = CopyBookParser.MultiplyRegularContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_multiplyRegular)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5297 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5296
                    self.multiplyRegularOperand()

                else:
                    raise NoViableAltException(self)
                self.state = 5299 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,757,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyRegularOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_multiplyRegularOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyRegularOperand" ):
                listener.enterMultiplyRegularOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyRegularOperand" ):
                listener.exitMultiplyRegularOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyRegularOperand" ):
                return visitor.visitMultiplyRegularOperand(self)
            else:
                return visitor.visitChildren(self)




    def multiplyRegularOperand(self):

        localctx = CopyBookParser.MultiplyRegularOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_multiplyRegularOperand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5301
            self.identifier()
            self.state = 5303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 5302
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplyGivingOperand(self):
            return self.getTypedRuleContext(CopyBookParser.MultiplyGivingOperandContext,0)


        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def multiplyGivingResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MultiplyGivingResultContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MultiplyGivingResultContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_multiplyGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyGiving" ):
                listener.enterMultiplyGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyGiving" ):
                listener.exitMultiplyGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyGiving" ):
                return visitor.visitMultiplyGiving(self)
            else:
                return visitor.visitChildren(self)




    def multiplyGiving(self):

        localctx = CopyBookParser.MultiplyGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_multiplyGiving)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5305
            self.multiplyGivingOperand()
            self.state = 5306
            self.match(CopyBookParser.GIVING)
            self.state = 5308 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5307
                    self.multiplyGivingResult()

                else:
                    raise NoViableAltException(self)
                self.state = 5310 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,759,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyGivingOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_multiplyGivingOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyGivingOperand" ):
                listener.enterMultiplyGivingOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyGivingOperand" ):
                listener.exitMultiplyGivingOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyGivingOperand" ):
                return visitor.visitMultiplyGivingOperand(self)
            else:
                return visitor.visitChildren(self)




    def multiplyGivingOperand(self):

        localctx = CopyBookParser.MultiplyGivingOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_multiplyGivingOperand)
        try:
            self.state = 5314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5312
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5313
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyGivingResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_multiplyGivingResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyGivingResult" ):
                listener.enterMultiplyGivingResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyGivingResult" ):
                listener.exitMultiplyGivingResult(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyGivingResult" ):
                return visitor.visitMultiplyGivingResult(self)
            else:
                return visitor.visitChildren(self)




    def multiplyGivingResult(self):

        localctx = CopyBookParser.MultiplyGivingResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_multiplyGivingResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5316
            self.identifier()
            self.state = 5318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 5317
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(CopyBookParser.OPEN, 0)

        def openInputStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.OpenInputStatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.OpenInputStatementContext,i)


        def openOutputStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.OpenOutputStatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.OpenOutputStatementContext,i)


        def openIOStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.OpenIOStatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.OpenIOStatementContext,i)


        def openExtendStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.OpenExtendStatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.OpenExtendStatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_openStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStatement" ):
                listener.enterOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStatement" ):
                listener.exitOpenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenStatement" ):
                return visitor.visitOpenStatement(self)
            else:
                return visitor.visitChildren(self)




    def openStatement(self):

        localctx = CopyBookParser.OpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_openStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5320
            self.match(CopyBookParser.OPEN)
            self.state = 5325 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5325
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [253]:
                        self.state = 5321
                        self.openInputStatement()
                        pass
                    elif token in [346]:
                        self.state = 5322
                        self.openOutputStatement()
                        pass
                    elif token in [239]:
                        self.state = 5323
                        self.openIOStatement()
                        pass
                    elif token in [207]:
                        self.state = 5324
                        self.openExtendStatement()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 5327 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,763,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenInputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(CopyBookParser.INPUT, 0)

        def openInput(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.OpenInputContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.OpenInputContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_openInputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenInputStatement" ):
                listener.enterOpenInputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenInputStatement" ):
                listener.exitOpenInputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenInputStatement" ):
                return visitor.visitOpenInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def openInputStatement(self):

        localctx = CopyBookParser.OpenInputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_openInputStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5329
            self.match(CopyBookParser.INPUT)
            self.state = 5331 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5330
                    self.openInput()

                else:
                    raise NoViableAltException(self)
                self.state = 5333 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,764,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenInputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def REVERSED(self):
            return self.getToken(CopyBookParser.REVERSED, 0)

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def REWIND(self):
            return self.getToken(CopyBookParser.REWIND, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_openInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenInput" ):
                listener.enterOpenInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenInput" ):
                listener.exitOpenInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenInput" ):
                return visitor.visitOpenInput(self)
            else:
                return visitor.visitChildren(self)




    def openInput(self):

        localctx = CopyBookParser.OpenInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_openInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5335
            self.fileName()
            self.state = 5342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,766,self._ctx)
            if la_ == 1:
                self.state = 5336
                self.match(CopyBookParser.REVERSED)

            elif la_ == 2:
                self.state = 5338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 5337
                    self.match(CopyBookParser.WITH)


                self.state = 5340
                self.match(CopyBookParser.NO)
                self.state = 5341
                self.match(CopyBookParser.REWIND)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenOutputStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(CopyBookParser.OUTPUT, 0)

        def openOutput(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.OpenOutputContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.OpenOutputContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_openOutputStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenOutputStatement" ):
                listener.enterOpenOutputStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenOutputStatement" ):
                listener.exitOpenOutputStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenOutputStatement" ):
                return visitor.visitOpenOutputStatement(self)
            else:
                return visitor.visitChildren(self)




    def openOutputStatement(self):

        localctx = CopyBookParser.OpenOutputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_openOutputStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5344
            self.match(CopyBookParser.OUTPUT)
            self.state = 5346 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5345
                    self.openOutput()

                else:
                    raise NoViableAltException(self)
                self.state = 5348 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,767,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenOutputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def REWIND(self):
            return self.getToken(CopyBookParser.REWIND, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_openOutput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenOutput" ):
                listener.enterOpenOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenOutput" ):
                listener.exitOpenOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenOutput" ):
                return visitor.visitOpenOutput(self)
            else:
                return visitor.visitChildren(self)




    def openOutput(self):

        localctx = CopyBookParser.OpenOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_openOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5350
            self.fileName()
            self.state = 5356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,769,self._ctx)
            if la_ == 1:
                self.state = 5352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==527:
                    self.state = 5351
                    self.match(CopyBookParser.WITH)


                self.state = 5354
                self.match(CopyBookParser.NO)
                self.state = 5355
                self.match(CopyBookParser.REWIND)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenIOStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I_O(self):
            return self.getToken(CopyBookParser.I_O, 0)

        def fileName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_openIOStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenIOStatement" ):
                listener.enterOpenIOStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenIOStatement" ):
                listener.exitOpenIOStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenIOStatement" ):
                return visitor.visitOpenIOStatement(self)
            else:
                return visitor.visitChildren(self)




    def openIOStatement(self):

        localctx = CopyBookParser.OpenIOStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_openIOStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5358
            self.match(CopyBookParser.I_O)
            self.state = 5360 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5359
                    self.fileName()

                else:
                    raise NoViableAltException(self)
                self.state = 5362 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,770,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenExtendStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTEND(self):
            return self.getToken(CopyBookParser.EXTEND, 0)

        def fileName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_openExtendStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenExtendStatement" ):
                listener.enterOpenExtendStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenExtendStatement" ):
                listener.exitOpenExtendStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenExtendStatement" ):
                return visitor.visitOpenExtendStatement(self)
            else:
                return visitor.visitChildren(self)




    def openExtendStatement(self):

        localctx = CopyBookParser.OpenExtendStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_openExtendStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5364
            self.match(CopyBookParser.EXTEND)
            self.state = 5366 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5365
                    self.fileName()

                else:
                    raise NoViableAltException(self)
                self.state = 5368 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,771,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERFORM(self):
            return self.getToken(CopyBookParser.PERFORM, 0)

        def performInlineStatement(self):
            return self.getTypedRuleContext(CopyBookParser.PerformInlineStatementContext,0)


        def performProcedureStatement(self):
            return self.getTypedRuleContext(CopyBookParser.PerformProcedureStatementContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformStatement" ):
                listener.enterPerformStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformStatement" ):
                listener.exitPerformStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformStatement" ):
                return visitor.visitPerformStatement(self)
            else:
                return visitor.visitChildren(self)




    def performStatement(self):

        localctx = CopyBookParser.PerformStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_performStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5370
            self.match(CopyBookParser.PERFORM)
            self.state = 5373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,772,self._ctx)
            if la_ == 1:
                self.state = 5371
                self.performInlineStatement()
                pass

            elif la_ == 2:
                self.state = 5372
                self.performProcedureStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformInlineStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END_PERFORM(self):
            return self.getToken(CopyBookParser.END_PERFORM, 0)

        def EXIT(self):
            return self.getToken(CopyBookParser.EXIT, 0)

        def PERFORM(self):
            return self.getToken(CopyBookParser.PERFORM, 0)

        def END_IF(self):
            return self.getToken(CopyBookParser.END_IF, 0)

        def performType(self):
            return self.getTypedRuleContext(CopyBookParser.PerformTypeContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performInlineStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformInlineStatement" ):
                listener.enterPerformInlineStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformInlineStatement" ):
                listener.exitPerformInlineStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformInlineStatement" ):
                return visitor.visitPerformInlineStatement(self)
            else:
                return visitor.visitChildren(self)




    def performInlineStatement(self):

        localctx = CopyBookParser.PerformInlineStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_performInlineStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
            if la_ == 1:
                self.state = 5375
                self.performType()


            self.state = 5381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,774,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5378
                    self.statement() 
                self.state = 5383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,774,self._ctx)

            self.state = 5389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [174]:
                self.state = 5384
                self.match(CopyBookParser.END_PERFORM)
                pass
            elif token in [205]:
                self.state = 5385
                self.match(CopyBookParser.EXIT)
                self.state = 5386
                self.match(CopyBookParser.PERFORM)
                self.state = 5387
                self.match(CopyBookParser.T__0)
                self.state = 5388
                self.match(CopyBookParser.END_IF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ProcedureNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,i)


        def performType(self):
            return self.getTypedRuleContext(CopyBookParser.PerformTypeContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_performProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformProcedureStatement" ):
                listener.enterPerformProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformProcedureStatement" ):
                listener.exitPerformProcedureStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformProcedureStatement" ):
                return visitor.visitPerformProcedureStatement(self)
            else:
                return visitor.visitChildren(self)




    def performProcedureStatement(self):

        localctx = CopyBookParser.PerformProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_performProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5391
            self.procedureName()
            self.state = 5394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 5392
                _la = self._input.LA(1)
                if not(_la==495 or _la==496):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5393
                self.procedureName()


            self.state = 5397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
            if la_ == 1:
                self.state = 5396
                self.performType()


            self.state = 5400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.state = 5399
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def performTimes(self):
            return self.getTypedRuleContext(CopyBookParser.PerformTimesContext,0)


        def performUntil(self):
            return self.getTypedRuleContext(CopyBookParser.PerformUntilContext,0)


        def performVarying(self):
            return self.getTypedRuleContext(CopyBookParser.PerformVaryingContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformType" ):
                listener.enterPerformType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformType" ):
                listener.exitPerformType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformType" ):
                return visitor.visitPerformType(self)
            else:
                return visitor.visitChildren(self)




    def performType(self):

        localctx = CopyBookParser.PerformTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_performType)
        try:
            self.state = 5405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,779,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5402
                self.performTimes()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5403
                self.performUntil()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5404
                self.performVarying()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformTimesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(CopyBookParser.TIMES, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performTimes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformTimes" ):
                listener.enterPerformTimes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformTimes" ):
                listener.exitPerformTimes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformTimes" ):
                return visitor.visitPerformTimes(self)
            else:
                return visitor.visitChildren(self)




    def performTimes(self):

        localctx = CopyBookParser.PerformTimesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_performTimes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.state = 5407
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5408
                self.integerLiteral()
                pass


            self.state = 5411
            self.match(CopyBookParser.TIMES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformUntilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(CopyBookParser.UNTIL, 0)

        def condition(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionContext,0)


        def performTestClause(self):
            return self.getTypedRuleContext(CopyBookParser.PerformTestClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performUntil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformUntil" ):
                listener.enterPerformUntil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformUntil" ):
                listener.exitPerformUntil(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformUntil" ):
                return visitor.visitPerformUntil(self)
            else:
                return visitor.visitChildren(self)




    def performUntil(self):

        localctx = CopyBookParser.PerformUntilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_performUntil)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==489 or _la==527:
                self.state = 5413
                self.performTestClause()


            self.state = 5416
            self.match(CopyBookParser.UNTIL)
            self.state = 5417
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformVaryingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def performTestClause(self):
            return self.getTypedRuleContext(CopyBookParser.PerformTestClauseContext,0)


        def performVaryingClause(self):
            return self.getTypedRuleContext(CopyBookParser.PerformVaryingClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performVarying

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformVarying" ):
                listener.enterPerformVarying(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformVarying" ):
                listener.exitPerformVarying(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformVarying" ):
                return visitor.visitPerformVarying(self)
            else:
                return visitor.visitChildren(self)




    def performVarying(self):

        localctx = CopyBookParser.PerformVaryingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_performVarying)
        try:
            self.state = 5426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [489, 527]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5419
                self.performTestClause()
                self.state = 5420
                self.performVaryingClause()
                pass
            elif token in [522]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5422
                self.performVaryingClause()
                self.state = 5424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,782,self._ctx)
                if la_ == 1:
                    self.state = 5423
                    self.performTestClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformVaryingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(CopyBookParser.VARYING, 0)

        def performVaryingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.PerformVaryingPhraseContext,0)


        def performAfter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.PerformAfterContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.PerformAfterContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performVaryingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformVaryingClause" ):
                listener.enterPerformVaryingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformVaryingClause" ):
                listener.exitPerformVaryingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformVaryingClause" ):
                return visitor.visitPerformVaryingClause(self)
            else:
                return visitor.visitChildren(self)




    def performVaryingClause(self):

        localctx = CopyBookParser.PerformVaryingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_performVaryingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5428
            self.match(CopyBookParser.VARYING)
            self.state = 5429
            self.performVaryingPhrase()
            self.state = 5433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,784,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5430
                    self.performAfter() 
                self.state = 5435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,784,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformVaryingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def performFrom(self):
            return self.getTypedRuleContext(CopyBookParser.PerformFromContext,0)


        def performBy(self):
            return self.getTypedRuleContext(CopyBookParser.PerformByContext,0)


        def performUntil(self):
            return self.getTypedRuleContext(CopyBookParser.PerformUntilContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performVaryingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformVaryingPhrase" ):
                listener.enterPerformVaryingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformVaryingPhrase" ):
                listener.exitPerformVaryingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformVaryingPhrase" ):
                return visitor.visitPerformVaryingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def performVaryingPhrase(self):

        localctx = CopyBookParser.PerformVaryingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_performVaryingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.state = 5436
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5437
                self.literal()
                pass


            self.state = 5440
            self.performFrom()
            self.state = 5441
            self.performBy()
            self.state = 5442
            self.performUntil()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformAfterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(CopyBookParser.AFTER, 0)

        def performVaryingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.PerformVaryingPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performAfter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformAfter" ):
                listener.enterPerformAfter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformAfter" ):
                listener.exitPerformAfter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformAfter" ):
                return visitor.visitPerformAfter(self)
            else:
                return visitor.visitChildren(self)




    def performAfter(self):

        localctx = CopyBookParser.PerformAfterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_performAfter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5444
            self.match(CopyBookParser.AFTER)
            self.state = 5445
            self.performVaryingPhrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformFrom" ):
                listener.enterPerformFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformFrom" ):
                listener.exitPerformFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformFrom" ):
                return visitor.visitPerformFrom(self)
            else:
                return visitor.visitChildren(self)




    def performFrom(self):

        localctx = CopyBookParser.PerformFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_performFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5447
            self.match(CopyBookParser.FROM)
            self.state = 5451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,786,self._ctx)
            if la_ == 1:
                self.state = 5448
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5449
                self.literal()
                pass

            elif la_ == 3:
                self.state = 5450
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_performBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformBy" ):
                listener.enterPerformBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformBy" ):
                listener.exitPerformBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformBy" ):
                return visitor.visitPerformBy(self)
            else:
                return visitor.visitChildren(self)




    def performBy(self):

        localctx = CopyBookParser.PerformByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_performBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5453
            self.match(CopyBookParser.BY)
            self.state = 5457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,787,self._ctx)
            if la_ == 1:
                self.state = 5454
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5455
                self.literal()
                pass

            elif la_ == 3:
                self.state = 5456
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PerformTestClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEST(self):
            return self.getToken(CopyBookParser.TEST, 0)

        def BEFORE(self):
            return self.getToken(CopyBookParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(CopyBookParser.AFTER, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_performTestClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerformTestClause" ):
                listener.enterPerformTestClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerformTestClause" ):
                listener.exitPerformTestClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerformTestClause" ):
                return visitor.visitPerformTestClause(self)
            else:
                return visitor.visitChildren(self)




    def performTestClause(self):

        localctx = CopyBookParser.PerformTestClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_performTestClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 5459
                self.match(CopyBookParser.WITH)


            self.state = 5462
            self.match(CopyBookParser.TEST)
            self.state = 5463
            _la = self._input.LA(1)
            if not(_la==8 or _la==42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurgeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURGE(self):
            return self.getToken(CopyBookParser.PURGE, 0)

        def cdName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.CdNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.CdNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_purgeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurgeStatement" ):
                listener.enterPurgeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurgeStatement" ):
                listener.exitPurgeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurgeStatement" ):
                return visitor.visitPurgeStatement(self)
            else:
                return visitor.visitChildren(self)




    def purgeStatement(self):

        localctx = CopyBookParser.PurgeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_purgeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5465
            self.match(CopyBookParser.PURGE)
            self.state = 5467 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5466
                    self.cdName()

                else:
                    raise NoViableAltException(self)
                self.state = 5469 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,789,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(CopyBookParser.READ, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def NEXT(self):
            return self.getToken(CopyBookParser.NEXT, 0)

        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def readInto(self):
            return self.getTypedRuleContext(CopyBookParser.ReadIntoContext,0)


        def readWith(self):
            return self.getTypedRuleContext(CopyBookParser.ReadWithContext,0)


        def readKey(self):
            return self.getTypedRuleContext(CopyBookParser.ReadKeyContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotInvalidKeyPhraseContext,0)


        def atEndPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.AtEndPhraseContext,0)


        def notAtEndPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotAtEndPhraseContext,0)


        def END_READ(self):
            return self.getToken(CopyBookParser.END_READ, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_readStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadStatement" ):
                listener.enterReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadStatement" ):
                listener.exitReadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadStatement" ):
                return visitor.visitReadStatement(self)
            else:
                return visitor.visitChildren(self)




    def readStatement(self):

        localctx = CopyBookParser.ReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_readStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5471
            self.match(CopyBookParser.READ)
            self.state = 5472
            self.fileName()
            self.state = 5474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==320:
                self.state = 5473
                self.match(CopyBookParser.NEXT)


            self.state = 5477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==389:
                self.state = 5476
                self.match(CopyBookParser.RECORD)


            self.state = 5480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,792,self._ctx)
            if la_ == 1:
                self.state = 5479
                self.readInto()


            self.state = 5483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,793,self._ctx)
            if la_ == 1:
                self.state = 5482
                self.readWith()


            self.state = 5486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 5485
                self.readKey()


            self.state = 5489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
            if la_ == 1:
                self.state = 5488
                self.invalidKeyPhrase()


            self.state = 5492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
            if la_ == 1:
                self.state = 5491
                self.notInvalidKeyPhrase()


            self.state = 5495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
            if la_ == 1:
                self.state = 5494
                self.atEndPhrase()


            self.state = 5498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
            if la_ == 1:
                self.state = 5497
                self.notAtEndPhrase()


            self.state = 5501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,799,self._ctx)
            if la_ == 1:
                self.state = 5500
                self.match(CopyBookParser.END_READ)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_readInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadInto" ):
                listener.enterReadInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadInto" ):
                listener.exitReadInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadInto" ):
                return visitor.visitReadInto(self)
            else:
                return visitor.visitChildren(self)




    def readInto(self):

        localctx = CopyBookParser.ReadIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_readInto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5503
            self.match(CopyBookParser.INTO)
            self.state = 5504
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(CopyBookParser.LOCK, 0)

        def WAIT(self):
            return self.getToken(CopyBookParser.WAIT, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def KEPT(self):
            return self.getToken(CopyBookParser.KEPT, 0)

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_readWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadWith" ):
                listener.enterReadWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadWith" ):
                listener.exitReadWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadWith" ):
                return visitor.visitReadWith(self)
            else:
                return visitor.visitChildren(self)




    def readWith(self):

        localctx = CopyBookParser.ReadWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_readWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 5506
                self.match(CopyBookParser.WITH)


            self.state = 5512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268, 322]:
                self.state = 5509
                _la = self._input.LA(1)
                if not(_la==268 or _la==322):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5510
                self.match(CopyBookParser.LOCK)
                pass
            elif token in [524]:
                self.state = 5511
                self.match(CopyBookParser.WAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_readKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadKey" ):
                listener.enterReadKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadKey" ):
                listener.exitReadKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadKey" ):
                return visitor.visitReadKey(self)
            else:
                return visitor.visitChildren(self)




    def readKey(self):

        localctx = CopyBookParser.ReadKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_readKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5514
            self.match(CopyBookParser.KEY)
            self.state = 5516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5515
                self.match(CopyBookParser.IS)


            self.state = 5518
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECEIVE(self):
            return self.getToken(CopyBookParser.RECEIVE, 0)

        def receiveFromStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReceiveFromStatementContext,0)


        def receiveIntoStatement(self):
            return self.getTypedRuleContext(CopyBookParser.ReceiveIntoStatementContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnExceptionClauseContext,0)


        def END_RECEIVE(self):
            return self.getToken(CopyBookParser.END_RECEIVE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveStatement" ):
                listener.enterReceiveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveStatement" ):
                listener.exitReceiveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveStatement" ):
                return visitor.visitReceiveStatement(self)
            else:
                return visitor.visitChildren(self)




    def receiveStatement(self):

        localctx = CopyBookParser.ReceiveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_receiveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5520
            self.match(CopyBookParser.RECEIVE)
            self.state = 5523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,803,self._ctx)
            if la_ == 1:
                self.state = 5521
                self.receiveFromStatement()
                pass

            elif la_ == 2:
                self.state = 5522
                self.receiveIntoStatement()
                pass


            self.state = 5526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,804,self._ctx)
            if la_ == 1:
                self.state = 5525
                self.onExceptionClause()


            self.state = 5529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                self.state = 5528
                self.notOnExceptionClause()


            self.state = 5532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,806,self._ctx)
            if la_ == 1:
                self.state = 5531
                self.match(CopyBookParser.END_RECEIVE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveFromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def receiveFrom(self):
            return self.getTypedRuleContext(CopyBookParser.ReceiveFromContext,0)


        def receiveBefore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReceiveBeforeContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReceiveBeforeContext,i)


        def receiveWith(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReceiveWithContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReceiveWithContext,i)


        def receiveThread(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReceiveThreadContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReceiveThreadContext,i)


        def receiveSize(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReceiveSizeContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReceiveSizeContext,i)


        def receiveStatus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ReceiveStatusContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ReceiveStatusContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveFromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveFromStatement" ):
                listener.enterReceiveFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveFromStatement" ):
                listener.exitReceiveFromStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveFromStatement" ):
                return visitor.visitReceiveFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def receiveFromStatement(self):

        localctx = CopyBookParser.ReceiveFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_receiveFromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5534
            self.dataName()
            self.state = 5535
            self.match(CopyBookParser.FROM)
            self.state = 5536
            self.receiveFrom()
            self.state = 5544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,808,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5542
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [42]:
                        self.state = 5537
                        self.receiveBefore()
                        pass
                    elif token in [322, 527]:
                        self.state = 5538
                        self.receiveWith()
                        pass
                    elif token in [493]:
                        self.state = 5539
                        self.receiveThread()
                        pass
                    elif token in [451]:
                        self.state = 5540
                        self.receiveSize()
                        pass
                    elif token in [469]:
                        self.state = 5541
                        self.receiveStatus()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 5546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,808,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THREAD(self):
            return self.getToken(CopyBookParser.THREAD, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def LAST(self):
            return self.getToken(CopyBookParser.LAST, 0)

        def ANY(self):
            return self.getToken(CopyBookParser.ANY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveFrom" ):
                listener.enterReceiveFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveFrom" ):
                listener.exitReceiveFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveFrom" ):
                return visitor.visitReceiveFrom(self)
            else:
                return visitor.visitChildren(self)




    def receiveFrom(self):

        localctx = CopyBookParser.ReceiveFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_receiveFrom)
        try:
            self.state = 5553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [493]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5547
                self.match(CopyBookParser.THREAD)
                self.state = 5548
                self.dataName()
                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5549
                self.match(CopyBookParser.LAST)
                self.state = 5550
                self.match(CopyBookParser.THREAD)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5551
                self.match(CopyBookParser.ANY)
                self.state = 5552
                self.match(CopyBookParser.THREAD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveIntoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cdName(self):
            return self.getTypedRuleContext(CopyBookParser.CdNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def MESSAGE(self):
            return self.getToken(CopyBookParser.MESSAGE, 0)

        def SEGMENT(self):
            return self.getToken(CopyBookParser.SEGMENT, 0)

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def receiveNoData(self):
            return self.getTypedRuleContext(CopyBookParser.ReceiveNoDataContext,0)


        def receiveWithData(self):
            return self.getTypedRuleContext(CopyBookParser.ReceiveWithDataContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveIntoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveIntoStatement" ):
                listener.enterReceiveIntoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveIntoStatement" ):
                listener.exitReceiveIntoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveIntoStatement" ):
                return visitor.visitReceiveIntoStatement(self)
            else:
                return visitor.visitChildren(self)




    def receiveIntoStatement(self):

        localctx = CopyBookParser.ReceiveIntoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_receiveIntoStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5555
            self.cdName()
            self.state = 5556
            _la = self._input.LA(1)
            if not(_la==305 or _la==434):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,810,self._ctx)
            if la_ == 1:
                self.state = 5557
                self.match(CopyBookParser.INTO)


            self.state = 5560
            self.identifier()
            self.state = 5562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,811,self._ctx)
            if la_ == 1:
                self.state = 5561
                self.receiveNoData()


            self.state = 5565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,812,self._ctx)
            if la_ == 1:
                self.state = 5564
                self.receiveWithData()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveNoDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def DATA(self):
            return self.getToken(CopyBookParser.DATA, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveNoData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveNoData" ):
                listener.enterReceiveNoData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveNoData" ):
                listener.exitReceiveNoData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveNoData" ):
                return visitor.visitReceiveNoData(self)
            else:
                return visitor.visitChildren(self)




    def receiveNoData(self):

        localctx = CopyBookParser.ReceiveNoDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_receiveNoData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5567
            self.match(CopyBookParser.NO)
            self.state = 5568
            self.match(CopyBookParser.DATA)
            self.state = 5572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,813,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5569
                    self.statement() 
                self.state = 5574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,813,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveWithDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def DATA(self):
            return self.getToken(CopyBookParser.DATA, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveWithData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveWithData" ):
                listener.enterReceiveWithData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveWithData" ):
                listener.exitReceiveWithData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveWithData" ):
                return visitor.visitReceiveWithData(self)
            else:
                return visitor.visitChildren(self)




    def receiveWithData(self):

        localctx = CopyBookParser.ReceiveWithDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_receiveWithData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5575
            self.match(CopyBookParser.WITH)
            self.state = 5576
            self.match(CopyBookParser.DATA)
            self.state = 5580
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,814,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5577
                    self.statement() 
                self.state = 5582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,814,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveBeforeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(CopyBookParser.BEFORE, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.NumericLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def TIME(self):
            return self.getToken(CopyBookParser.TIME, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveBefore

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveBefore" ):
                listener.enterReceiveBefore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveBefore" ):
                listener.exitReceiveBefore(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveBefore" ):
                return visitor.visitReceiveBefore(self)
            else:
                return visitor.visitChildren(self)




    def receiveBefore(self):

        localctx = CopyBookParser.ReceiveBeforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_receiveBefore)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5583
            self.match(CopyBookParser.BEFORE)
            self.state = 5585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
            if la_ == 1:
                self.state = 5584
                self.match(CopyBookParser.TIME)


            self.state = 5589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
            if la_ == 1:
                self.state = 5587
                self.numericLiteral()
                pass

            elif la_ == 2:
                self.state = 5588
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def WAIT(self):
            return self.getToken(CopyBookParser.WAIT, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveWith" ):
                listener.enterReceiveWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveWith" ):
                listener.exitReceiveWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveWith" ):
                return visitor.visitReceiveWith(self)
            else:
                return visitor.visitChildren(self)




    def receiveWith(self):

        localctx = CopyBookParser.ReceiveWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_receiveWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 5591
                self.match(CopyBookParser.WITH)


            self.state = 5594
            self.match(CopyBookParser.NO)
            self.state = 5595
            self.match(CopyBookParser.WAIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveThreadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THREAD(self):
            return self.getToken(CopyBookParser.THREAD, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveThread

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveThread" ):
                listener.enterReceiveThread(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveThread" ):
                listener.exitReceiveThread(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveThread" ):
                return visitor.visitReceiveThread(self)
            else:
                return visitor.visitChildren(self)




    def receiveThread(self):

        localctx = CopyBookParser.ReceiveThreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_receiveThread)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5597
            self.match(CopyBookParser.THREAD)
            self.state = 5599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
            if la_ == 1:
                self.state = 5598
                self.match(CopyBookParser.IN)


            self.state = 5601
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.NumericLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveSize" ):
                listener.enterReceiveSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveSize" ):
                listener.exitReceiveSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveSize" ):
                return visitor.visitReceiveSize(self)
            else:
                return visitor.visitChildren(self)




    def receiveSize(self):

        localctx = CopyBookParser.ReceiveSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_receiveSize)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5603
            self.match(CopyBookParser.SIZE)
            self.state = 5605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
            if la_ == 1:
                self.state = 5604
                self.match(CopyBookParser.IN)


            self.state = 5609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,820,self._ctx)
            if la_ == 1:
                self.state = 5607
                self.numericLiteral()
                pass

            elif la_ == 2:
                self.state = 5608
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveStatusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(CopyBookParser.STATUS, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_receiveStatus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveStatus" ):
                listener.enterReceiveStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveStatus" ):
                listener.exitReceiveStatus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveStatus" ):
                return visitor.visitReceiveStatus(self)
            else:
                return visitor.visitChildren(self)




    def receiveStatus(self):

        localctx = CopyBookParser.ReceiveStatusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_receiveStatus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5611
            self.match(CopyBookParser.STATUS)
            self.state = 5613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
            if la_ == 1:
                self.state = 5612
                self.match(CopyBookParser.IN)


            self.state = 5615
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(CopyBookParser.RELEASE, 0)

        def recordName(self):
            return self.getTypedRuleContext(CopyBookParser.RecordNameContext,0)


        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReleaseStatement" ):
                return visitor.visitReleaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def releaseStatement(self):

        localctx = CopyBookParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5617
            self.match(CopyBookParser.RELEASE)
            self.state = 5618
            self.recordName()
            self.state = 5621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,822,self._ctx)
            if la_ == 1:
                self.state = 5619
                self.match(CopyBookParser.FROM)
                self.state = 5620
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CopyBookParser.RETURN, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def atEndPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.AtEndPhraseContext,0)


        def RECORD(self):
            return self.getToken(CopyBookParser.RECORD, 0)

        def returnInto(self):
            return self.getTypedRuleContext(CopyBookParser.ReturnIntoContext,0)


        def notAtEndPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotAtEndPhraseContext,0)


        def END_RETURN(self):
            return self.getToken(CopyBookParser.END_RETURN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = CopyBookParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5623
            self.match(CopyBookParser.RETURN)
            self.state = 5624
            self.fileName()
            self.state = 5626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==389:
                self.state = 5625
                self.match(CopyBookParser.RECORD)


            self.state = 5629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 5628
                self.returnInto()


            self.state = 5631
            self.atEndPhrase()
            self.state = 5633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,825,self._ctx)
            if la_ == 1:
                self.state = 5632
                self.notAtEndPhrase()


            self.state = 5636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,826,self._ctx)
            if la_ == 1:
                self.state = 5635
                self.match(CopyBookParser.END_RETURN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_returnInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnInto" ):
                listener.enterReturnInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnInto" ):
                listener.exitReturnInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnInto" ):
                return visitor.visitReturnInto(self)
            else:
                return visitor.visitChildren(self)




    def returnInto(self):

        localctx = CopyBookParser.ReturnIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_returnInto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5638
            self.match(CopyBookParser.INTO)
            self.state = 5639
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REWRITE(self):
            return self.getToken(CopyBookParser.REWRITE, 0)

        def recordName(self):
            return self.getTypedRuleContext(CopyBookParser.RecordNameContext,0)


        def rewriteFrom(self):
            return self.getTypedRuleContext(CopyBookParser.RewriteFromContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotInvalidKeyPhraseContext,0)


        def END_REWRITE(self):
            return self.getToken(CopyBookParser.END_REWRITE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_rewriteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteStatement" ):
                listener.enterRewriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteStatement" ):
                listener.exitRewriteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRewriteStatement" ):
                return visitor.visitRewriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def rewriteStatement(self):

        localctx = CopyBookParser.RewriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_rewriteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5641
            self.match(CopyBookParser.REWRITE)
            self.state = 5642
            self.recordName()
            self.state = 5644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,827,self._ctx)
            if la_ == 1:
                self.state = 5643
                self.rewriteFrom()


            self.state = 5647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,828,self._ctx)
            if la_ == 1:
                self.state = 5646
                self.invalidKeyPhrase()


            self.state = 5650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                self.state = 5649
                self.notInvalidKeyPhrase()


            self.state = 5653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,830,self._ctx)
            if la_ == 1:
                self.state = 5652
                self.match(CopyBookParser.END_REWRITE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RewriteFromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_rewriteFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteFrom" ):
                listener.enterRewriteFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteFrom" ):
                listener.exitRewriteFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRewriteFrom" ):
                return visitor.visitRewriteFrom(self)
            else:
                return visitor.visitChildren(self)




    def rewriteFrom(self):

        localctx = CopyBookParser.RewriteFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_rewriteFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5655
            self.match(CopyBookParser.FROM)
            self.state = 5656
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(CopyBookParser.SEARCH, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def searchVarying(self):
            return self.getTypedRuleContext(CopyBookParser.SearchVaryingContext,0)


        def atEndPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.AtEndPhraseContext,0)


        def searchWhen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SearchWhenContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SearchWhenContext,i)


        def END_SEARCH(self):
            return self.getToken(CopyBookParser.END_SEARCH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_searchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchStatement" ):
                listener.enterSearchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchStatement" ):
                listener.exitSearchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchStatement" ):
                return visitor.visitSearchStatement(self)
            else:
                return visitor.visitChildren(self)




    def searchStatement(self):

        localctx = CopyBookParser.SearchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_searchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5658
            self.match(CopyBookParser.SEARCH)
            self.state = 5660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
            if la_ == 1:
                self.state = 5659
                self.match(CopyBookParser.ALL)


            self.state = 5662
            self.qualifiedDataName()
            self.state = 5664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==522:
                self.state = 5663
                self.searchVarying()


            self.state = 5667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31 or _la==163:
                self.state = 5666
                self.atEndPhrase()


            self.state = 5670 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5669
                    self.searchWhen()

                else:
                    raise NoViableAltException(self)
                self.state = 5672 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,834,self._ctx)

            self.state = 5675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
            if la_ == 1:
                self.state = 5674
                self.match(CopyBookParser.END_SEARCH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchVaryingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(CopyBookParser.VARYING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_searchVarying

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchVarying" ):
                listener.enterSearchVarying(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchVarying" ):
                listener.exitSearchVarying(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchVarying" ):
                return visitor.visitSearchVarying(self)
            else:
                return visitor.visitChildren(self)




    def searchVarying(self):

        localctx = CopyBookParser.SearchVaryingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_searchVarying)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5677
            self.match(CopyBookParser.VARYING)
            self.state = 5678
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchWhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CopyBookParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionContext,0)


        def NEXT(self):
            return self.getToken(CopyBookParser.NEXT, 0)

        def SENTENCE(self):
            return self.getToken(CopyBookParser.SENTENCE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_searchWhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchWhen" ):
                listener.enterSearchWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchWhen" ):
                listener.exitSearchWhen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchWhen" ):
                return visitor.visitSearchWhen(self)
            else:
                return visitor.visitChildren(self)




    def searchWhen(self):

        localctx = CopyBookParser.SearchWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_searchWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5680
            self.match(CopyBookParser.WHEN)
            self.state = 5681
            self.condition()
            self.state = 5690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [320]:
                self.state = 5682
                self.match(CopyBookParser.NEXT)
                self.state = 5683
                self.match(CopyBookParser.SENTENCE)
                pass
            elif token in [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 28, 31, 32, 33, 34, 48, 52, 55, 56, 64, 67, 70, 82, 95, 99, 100, 105, 110, 111, 112, 113, 119, 129, 132, 133, 135, 142, 144, 147, 149, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 193, 199, 202, 204, 205, 207, 210, 211, 212, 221, 222, 226, 227, 230, 241, 242, 243, 246, 251, 252, 255, 258, 259, 271, 272, 279, 292, 293, 295, 304, 311, 313, 315, 322, 324, 327, 334, 335, 336, 338, 339, 354, 355, 372, 373, 375, 377, 378, 379, 386, 387, 399, 405, 406, 407, 412, 415, 420, 428, 429, 430, 436, 437, 439, 440, 442, 451, 452, 460, 462, 468, 469, 470, 471, 475, 479, 483, 487, 488, 489, 490, 493, 497, 500, 505, 507, 513, 524, 525, 527, 529, 530, 532, 542, 544, 550, 551, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 5687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,836,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5684
                        self.statement() 
                    self.state = 5689
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,836,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEND(self):
            return self.getToken(CopyBookParser.SEND, 0)

        def sendStatementSync(self):
            return self.getTypedRuleContext(CopyBookParser.SendStatementSyncContext,0)


        def sendStatementAsync(self):
            return self.getTypedRuleContext(CopyBookParser.SendStatementAsyncContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnExceptionClauseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sendStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendStatement" ):
                listener.enterSendStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendStatement" ):
                listener.exitSendStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendStatement" ):
                return visitor.visitSendStatement(self)
            else:
                return visitor.visitChildren(self)




    def sendStatement(self):

        localctx = CopyBookParser.SendStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_sendStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5692
            self.match(CopyBookParser.SEND)
            self.state = 5695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 100, 110, 111, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 135, 142, 193, 205, 207, 210, 212, 221, 222, 223, 246, 258, 267, 271, 272, 279, 288, 291, 292, 293, 315, 321, 322, 327, 335, 336, 338, 353, 354, 372, 373, 378, 379, 386, 387, 406, 415, 416, 420, 428, 436, 437, 439, 440, 447, 448, 451, 453, 454, 455, 457, 458, 459, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 526, 530, 532, 542, 569, 570, 571, 572, 573, 574, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 5693
                self.sendStatementSync()
                pass
            elif token in [501]:
                self.state = 5694
                self.sendStatementAsync()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,839,self._ctx)
            if la_ == 1:
                self.state = 5697
                self.onExceptionClause()


            self.state = 5701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
            if la_ == 1:
                self.state = 5700
                self.notOnExceptionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendStatementSyncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def sendFromPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SendFromPhraseContext,0)


        def sendWithPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SendWithPhraseContext,0)


        def sendReplacingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SendReplacingPhraseContext,0)


        def sendAdvancingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SendAdvancingPhraseContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sendStatementSync

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendStatementSync" ):
                listener.enterSendStatementSync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendStatementSync" ):
                listener.exitSendStatementSync(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendStatementSync" ):
                return visitor.visitSendStatementSync(self)
            else:
                return visitor.visitChildren(self)




    def sendStatementSync(self):

        localctx = CopyBookParser.SendStatementSyncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_sendStatementSync)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
            if la_ == 1:
                self.state = 5703
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5704
                self.literal()
                pass


            self.state = 5708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
            if la_ == 1:
                self.state = 5707
                self.sendFromPhrase()


            self.state = 5711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
            if la_ == 1:
                self.state = 5710
                self.sendWithPhrase()


            self.state = 5714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
            if la_ == 1:
                self.state = 5713
                self.sendReplacingPhrase()


            self.state = 5717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
            if la_ == 1:
                self.state = 5716
                self.sendAdvancingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendStatementAsyncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def TOP(self):
            return self.getToken(CopyBookParser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(CopyBookParser.BOTTOM, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sendStatementAsync

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendStatementAsync" ):
                listener.enterSendStatementAsync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendStatementAsync" ):
                listener.exitSendStatementAsync(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendStatementAsync" ):
                return visitor.visitSendStatementAsync(self)
            else:
                return visitor.visitChildren(self)




    def sendStatementAsync(self):

        localctx = CopyBookParser.SendStatementAsyncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_sendStatementAsync)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5719
            self.match(CopyBookParser.TO)
            self.state = 5720
            _la = self._input.LA(1)
            if not(_la==51 or _la==504):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5721
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendFromPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sendFromPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendFromPhrase" ):
                listener.enterSendFromPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendFromPhrase" ):
                listener.exitSendFromPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendFromPhrase" ):
                return visitor.visitSendFromPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendFromPhrase(self):

        localctx = CopyBookParser.SendFromPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_sendFromPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5723
            self.match(CopyBookParser.FROM)
            self.state = 5724
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendWithPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def EGI(self):
            return self.getToken(CopyBookParser.EGI, 0)

        def EMI(self):
            return self.getToken(CopyBookParser.EMI, 0)

        def ESI(self):
            return self.getToken(CopyBookParser.ESI, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sendWithPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendWithPhrase" ):
                listener.enterSendWithPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendWithPhrase" ):
                listener.exitSendWithPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendWithPhrase" ):
                return visitor.visitSendWithPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendWithPhrase(self):

        localctx = CopyBookParser.SendWithPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_sendWithPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5726
            self.match(CopyBookParser.WITH)
            self.state = 5731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158]:
                self.state = 5727
                self.match(CopyBookParser.EGI)
                pass
            elif token in [160]:
                self.state = 5728
                self.match(CopyBookParser.EMI)
                pass
            elif token in [198]:
                self.state = 5729
                self.match(CopyBookParser.ESI)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 135, 142, 193, 205, 207, 210, 212, 221, 222, 223, 246, 258, 271, 272, 279, 288, 291, 292, 293, 315, 322, 327, 335, 336, 338, 353, 354, 372, 373, 378, 379, 386, 387, 406, 415, 416, 420, 428, 436, 437, 439, 440, 447, 448, 451, 453, 454, 455, 457, 458, 459, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 526, 530, 532, 542, 570, 571, 572, 573, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 5730
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendReplacingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(CopyBookParser.REPLACING, 0)

        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sendReplacingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendReplacingPhrase" ):
                listener.enterSendReplacingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendReplacingPhrase" ):
                listener.exitSendReplacingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendReplacingPhrase" ):
                return visitor.visitSendReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendReplacingPhrase(self):

        localctx = CopyBookParser.SendReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_sendReplacingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5733
            self.match(CopyBookParser.REPLACING)
            self.state = 5735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 5734
                self.match(CopyBookParser.LINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendAdvancingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(CopyBookParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(CopyBookParser.AFTER, 0)

        def sendAdvancingPage(self):
            return self.getTypedRuleContext(CopyBookParser.SendAdvancingPageContext,0)


        def sendAdvancingLines(self):
            return self.getTypedRuleContext(CopyBookParser.SendAdvancingLinesContext,0)


        def sendAdvancingMnemonic(self):
            return self.getTypedRuleContext(CopyBookParser.SendAdvancingMnemonicContext,0)


        def ADVANCING(self):
            return self.getToken(CopyBookParser.ADVANCING, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sendAdvancingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendAdvancingPhrase" ):
                listener.enterSendAdvancingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendAdvancingPhrase" ):
                listener.exitSendAdvancingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendAdvancingPhrase" ):
                return visitor.visitSendAdvancingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingPhrase(self):

        localctx = CopyBookParser.SendAdvancingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_sendAdvancingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5737
            _la = self._input.LA(1)
            if not(_la==8 or _la==42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.state = 5738
                self.match(CopyBookParser.ADVANCING)


            self.state = 5744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.state = 5741
                self.sendAdvancingPage()
                pass

            elif la_ == 2:
                self.state = 5742
                self.sendAdvancingLines()
                pass

            elif la_ == 3:
                self.state = 5743
                self.sendAdvancingMnemonic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendAdvancingPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(CopyBookParser.PAGE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sendAdvancingPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendAdvancingPage" ):
                listener.enterSendAdvancingPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendAdvancingPage" ):
                listener.exitSendAdvancingPage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendAdvancingPage" ):
                return visitor.visitSendAdvancingPage(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingPage(self):

        localctx = CopyBookParser.SendAdvancingPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_sendAdvancingPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5746
            self.match(CopyBookParser.PAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendAdvancingLinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def LINES(self):
            return self.getToken(CopyBookParser.LINES, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sendAdvancingLines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendAdvancingLines" ):
                listener.enterSendAdvancingLines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendAdvancingLines" ):
                listener.exitSendAdvancingLines(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendAdvancingLines" ):
                return visitor.visitSendAdvancingLines(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingLines(self):

        localctx = CopyBookParser.SendAdvancingLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_sendAdvancingLines)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 5748
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5749
                self.literal()
                pass


            self.state = 5753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289 or _la==290:
                self.state = 5752
                _la = self._input.LA(1)
                if not(_la==289 or _la==290):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendAdvancingMnemonicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sendAdvancingMnemonic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendAdvancingMnemonic" ):
                listener.enterSendAdvancingMnemonic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendAdvancingMnemonic" ):
                listener.exitSendAdvancingMnemonic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendAdvancingMnemonic" ):
                return visitor.visitSendAdvancingMnemonic(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingMnemonic(self):

        localctx = CopyBookParser.SendAdvancingMnemonicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_sendAdvancingMnemonic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5755
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CopyBookParser.SET, 0)

        def setUpDownByStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SetUpDownByStatementContext,0)


        def setToStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SetToStatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SetToStatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = CopyBookParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_setStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5757
            self.match(CopyBookParser.SET)
            self.state = 5764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
            if la_ == 1:
                self.state = 5759 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5758
                        self.setToStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 5761 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,852,self._ctx)

                pass

            elif la_ == 2:
                self.state = 5763
                self.setUpDownByStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetToStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def setTo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SetToContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SetToContext,i)


        def setToValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SetToValueContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SetToValueContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_setToStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetToStatement" ):
                listener.enterSetToStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetToStatement" ):
                listener.exitSetToStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetToStatement" ):
                return visitor.visitSetToStatement(self)
            else:
                return visitor.visitChildren(self)




    def setToStatement(self):

        localctx = CopyBookParser.SetToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_setToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5767 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5766
                self.setTo()
                self.state = 5769 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007201134465025) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144115249281261569) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550488276852769) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430468061) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 1055531162927431) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

            self.state = 5771
            self.match(CopyBookParser.TO)
            self.state = 5773 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5772
                    self.setToValue()

                else:
                    raise NoViableAltException(self)
                self.state = 5775 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,855,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetUpDownByStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setByValue(self):
            return self.getTypedRuleContext(CopyBookParser.SetByValueContext,0)


        def UP(self):
            return self.getToken(CopyBookParser.UP, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def DOWN(self):
            return self.getToken(CopyBookParser.DOWN, 0)

        def setTo(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SetToContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SetToContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_setUpDownByStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetUpDownByStatement" ):
                listener.enterSetUpDownByStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetUpDownByStatement" ):
                listener.exitSetUpDownByStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetUpDownByStatement" ):
                return visitor.visitSetUpDownByStatement(self)
            else:
                return visitor.visitChildren(self)




    def setUpDownByStatement(self):

        localctx = CopyBookParser.SetUpDownByStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_setUpDownByStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5778 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5777
                self.setTo()
                self.state = 5780 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007201134465025) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144115249281261569) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550488276852769) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430468061) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 1055531162927431) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

            self.state = 5786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [515]:
                self.state = 5782
                self.match(CopyBookParser.UP)
                self.state = 5783
                self.match(CopyBookParser.BY)
                pass
            elif token in [153]:
                self.state = 5784
                self.match(CopyBookParser.DOWN)
                self.state = 5785
                self.match(CopyBookParser.BY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5788
            self.setByValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetToContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_setTo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTo" ):
                listener.enterSetTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTo" ):
                listener.exitSetTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTo" ):
                return visitor.visitSetTo(self)
            else:
                return visitor.visitChildren(self)




    def setTo(self):

        localctx = CopyBookParser.SetToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_setTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5790
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def OFF(self):
            return self.getToken(CopyBookParser.OFF, 0)

        def ENTRY(self):
            return self.getToken(CopyBookParser.ENTRY, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def TRUE(self):
            return self.getToken(CopyBookParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CopyBookParser.FALSE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_setToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetToValue" ):
                listener.enterSetToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetToValue" ):
                listener.exitSetToValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetToValue" ):
                return visitor.visitSetToValue(self)
            else:
                return visitor.visitChildren(self)




    def setToValue(self):

        localctx = CopyBookParser.SetToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_setToValue)
        try:
            self.state = 5803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,859,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5792
                self.match(CopyBookParser.ON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5793
                self.match(CopyBookParser.OFF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5794
                self.match(CopyBookParser.ENTRY)
                self.state = 5797
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,858,self._ctx)
                if la_ == 1:
                    self.state = 5795
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 5796
                    self.literal()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5799
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5800
                self.literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5801
                self.match(CopyBookParser.TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5802
                self.match(CopyBookParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetByValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_setByValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetByValue" ):
                listener.enterSetByValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetByValue" ):
                listener.exitSetByValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetByValue" ):
                return visitor.visitSetByValue(self)
            else:
                return visitor.visitChildren(self)




    def setByValue(self):

        localctx = CopyBookParser.SetByValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_setByValue)
        try:
            self.state = 5807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,860,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5805
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5806
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SORT(self):
            return self.getToken(CopyBookParser.SORT, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def sortOnKeyClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SortOnKeyClauseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SortOnKeyClauseContext,i)


        def sortDuplicatesPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SortDuplicatesPhraseContext,0)


        def sortCollatingSequencePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SortCollatingSequencePhraseContext,0)


        def sortInputProcedurePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SortInputProcedurePhraseContext,0)


        def sortUsing(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SortUsingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SortUsingContext,i)


        def sortOutputProcedurePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.SortOutputProcedurePhraseContext,0)


        def sortGivingPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SortGivingPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SortGivingPhraseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sortStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortStatement" ):
                listener.enterSortStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortStatement" ):
                listener.exitSortStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortStatement" ):
                return visitor.visitSortStatement(self)
            else:
                return visitor.visitChildren(self)




    def sortStatement(self):

        localctx = CopyBookParser.SortStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_sortStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5809
            self.match(CopyBookParser.SORT)
            self.state = 5810
            self.fileName()
            self.state = 5812 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5811
                    self.sortOnKeyClause()

                else:
                    raise NoViableAltException(self)
                self.state = 5814 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,861,self._ctx)

            self.state = 5817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,862,self._ctx)
            if la_ == 1:
                self.state = 5816
                self.sortDuplicatesPhrase()


            self.state = 5820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,863,self._ctx)
            if la_ == 1:
                self.state = 5819
                self.sortCollatingSequencePhrase()


            self.state = 5823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==253:
                self.state = 5822
                self.sortInputProcedurePhrase()


            self.state = 5828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==519:
                self.state = 5825
                self.sortUsing()
                self.state = 5830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==346:
                self.state = 5831
                self.sortOutputProcedurePhrase()


            self.state = 5837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==228:
                self.state = 5834
                self.sortGivingPhrase()
                self.state = 5839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOnKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(CopyBookParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(CopyBookParser.DESCENDING, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def qualifiedDataName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sortOnKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOnKeyClause" ):
                listener.enterSortOnKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOnKeyClause" ):
                listener.exitSortOnKeyClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortOnKeyClause" ):
                return visitor.visitSortOnKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def sortOnKeyClause(self):

        localctx = CopyBookParser.SortOnKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_sortOnKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 5840
                self.match(CopyBookParser.ON)


            self.state = 5843
            _la = self._input.LA(1)
            if not(_la==26 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 5844
                self.match(CopyBookParser.KEY)


            self.state = 5848 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5847
                    self.qualifiedDataName()

                else:
                    raise NoViableAltException(self)
                self.state = 5850 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,870,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortDuplicatesPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DUPLICATES(self):
            return self.getToken(CopyBookParser.DUPLICATES, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def ORDER(self):
            return self.getToken(CopyBookParser.ORDER, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sortDuplicatesPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortDuplicatesPhrase" ):
                listener.enterSortDuplicatesPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortDuplicatesPhrase" ):
                listener.exitSortDuplicatesPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortDuplicatesPhrase" ):
                return visitor.visitSortDuplicatesPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortDuplicatesPhrase(self):

        localctx = CopyBookParser.SortDuplicatesPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_sortDuplicatesPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 5852
                self.match(CopyBookParser.WITH)


            self.state = 5855
            self.match(CopyBookParser.DUPLICATES)
            self.state = 5857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,872,self._ctx)
            if la_ == 1:
                self.state = 5856
                self.match(CopyBookParser.IN)


            self.state = 5860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==342:
                self.state = 5859
                self.match(CopyBookParser.ORDER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortCollatingSequencePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQUENCE(self):
            return self.getToken(CopyBookParser.SEQUENCE, 0)

        def COLLATING(self):
            return self.getToken(CopyBookParser.COLLATING, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def alphabetName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AlphabetNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,i)


        def sortCollatingAlphanumeric(self):
            return self.getTypedRuleContext(CopyBookParser.SortCollatingAlphanumericContext,0)


        def sortCollatingNational(self):
            return self.getTypedRuleContext(CopyBookParser.SortCollatingNationalContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sortCollatingSequencePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortCollatingSequencePhrase" ):
                listener.enterSortCollatingSequencePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortCollatingSequencePhrase" ):
                listener.exitSortCollatingSequencePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortCollatingSequencePhrase" ):
                return visitor.visitSortCollatingSequencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortCollatingSequencePhrase(self):

        localctx = CopyBookParser.SortCollatingSequencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_sortCollatingSequencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 5862
                self.match(CopyBookParser.COLLATING)


            self.state = 5865
            self.match(CopyBookParser.SEQUENCE)
            self.state = 5867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5866
                self.match(CopyBookParser.IS)


            self.state = 5870 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5869
                    self.alphabetName()

                else:
                    raise NoViableAltException(self)
                self.state = 5872 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,876,self._ctx)

            self.state = 5875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,877,self._ctx)
            if la_ == 1:
                self.state = 5874
                self.sortCollatingAlphanumeric()


            self.state = 5878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
            if la_ == 1:
                self.state = 5877
                self.sortCollatingNational()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortCollatingAlphanumericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALPHANUMERIC(self):
            return self.getToken(CopyBookParser.ALPHANUMERIC, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sortCollatingAlphanumeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortCollatingAlphanumeric" ):
                listener.enterSortCollatingAlphanumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortCollatingAlphanumeric" ):
                listener.exitSortCollatingAlphanumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortCollatingAlphanumeric" ):
                return visitor.visitSortCollatingAlphanumeric(self)
            else:
                return visitor.visitChildren(self)




    def sortCollatingAlphanumeric(self):

        localctx = CopyBookParser.SortCollatingAlphanumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_sortCollatingAlphanumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 5880
                self.match(CopyBookParser.FOR)


            self.state = 5883
            self.match(CopyBookParser.ALPHANUMERIC)
            self.state = 5884
            self.match(CopyBookParser.IS)
            self.state = 5885
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortCollatingNationalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(CopyBookParser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sortCollatingNational

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortCollatingNational" ):
                listener.enterSortCollatingNational(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortCollatingNational" ):
                listener.exitSortCollatingNational(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortCollatingNational" ):
                return visitor.visitSortCollatingNational(self)
            else:
                return visitor.visitChildren(self)




    def sortCollatingNational(self):

        localctx = CopyBookParser.SortCollatingNationalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_sortCollatingNational)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 5887
                self.match(CopyBookParser.FOR)


            self.state = 5890
            self.match(CopyBookParser.NATIONAL)
            self.state = 5892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5891
                self.match(CopyBookParser.IS)


            self.state = 5894
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortInputProcedurePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(CopyBookParser.INPUT, 0)

        def PROCEDURE(self):
            return self.getToken(CopyBookParser.PROCEDURE, 0)

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def sortInputThrough(self):
            return self.getTypedRuleContext(CopyBookParser.SortInputThroughContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sortInputProcedurePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortInputProcedurePhrase" ):
                listener.enterSortInputProcedurePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortInputProcedurePhrase" ):
                listener.exitSortInputProcedurePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortInputProcedurePhrase" ):
                return visitor.visitSortInputProcedurePhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortInputProcedurePhrase(self):

        localctx = CopyBookParser.SortInputProcedurePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_sortInputProcedurePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5896
            self.match(CopyBookParser.INPUT)
            self.state = 5897
            self.match(CopyBookParser.PROCEDURE)
            self.state = 5899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5898
                self.match(CopyBookParser.IS)


            self.state = 5901
            self.procedureName()
            self.state = 5903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 5902
                self.sortInputThrough()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortInputThroughContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sortInputThrough

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortInputThrough" ):
                listener.enterSortInputThrough(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortInputThrough" ):
                listener.exitSortInputThrough(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortInputThrough" ):
                return visitor.visitSortInputThrough(self)
            else:
                return visitor.visitChildren(self)




    def sortInputThrough(self):

        localctx = CopyBookParser.SortInputThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_sortInputThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5905
            _la = self._input.LA(1)
            if not(_la==495 or _la==496):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5906
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortUsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CopyBookParser.USING, 0)

        def fileName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sortUsing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortUsing" ):
                listener.enterSortUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortUsing" ):
                listener.exitSortUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortUsing" ):
                return visitor.visitSortUsing(self)
            else:
                return visitor.visitChildren(self)




    def sortUsing(self):

        localctx = CopyBookParser.SortUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_sortUsing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5908
            self.match(CopyBookParser.USING)
            self.state = 5910 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5909
                    self.fileName()

                else:
                    raise NoViableAltException(self)
                self.state = 5912 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,884,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOutputProcedurePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(CopyBookParser.OUTPUT, 0)

        def PROCEDURE(self):
            return self.getToken(CopyBookParser.PROCEDURE, 0)

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def sortOutputThrough(self):
            return self.getTypedRuleContext(CopyBookParser.SortOutputThroughContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sortOutputProcedurePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOutputProcedurePhrase" ):
                listener.enterSortOutputProcedurePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOutputProcedurePhrase" ):
                listener.exitSortOutputProcedurePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortOutputProcedurePhrase" ):
                return visitor.visitSortOutputProcedurePhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortOutputProcedurePhrase(self):

        localctx = CopyBookParser.SortOutputProcedurePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_sortOutputProcedurePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5914
            self.match(CopyBookParser.OUTPUT)
            self.state = 5915
            self.match(CopyBookParser.PROCEDURE)
            self.state = 5917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5916
                self.match(CopyBookParser.IS)


            self.state = 5919
            self.procedureName()
            self.state = 5921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==495 or _la==496:
                self.state = 5920
                self.sortOutputThrough()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOutputThroughContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def THROUGH(self):
            return self.getToken(CopyBookParser.THROUGH, 0)

        def THRU(self):
            return self.getToken(CopyBookParser.THRU, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sortOutputThrough

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOutputThrough" ):
                listener.enterSortOutputThrough(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOutputThrough" ):
                listener.exitSortOutputThrough(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortOutputThrough" ):
                return visitor.visitSortOutputThrough(self)
            else:
                return visitor.visitChildren(self)




    def sortOutputThrough(self):

        localctx = CopyBookParser.SortOutputThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_sortOutputThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5923
            _la = self._input.LA(1)
            if not(_la==495 or _la==496):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5924
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortGivingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def sortGiving(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SortGivingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SortGivingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sortGivingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortGivingPhrase" ):
                listener.enterSortGivingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortGivingPhrase" ):
                listener.exitSortGivingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortGivingPhrase" ):
                return visitor.visitSortGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortGivingPhrase(self):

        localctx = CopyBookParser.SortGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_sortGivingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5926
            self.match(CopyBookParser.GIVING)
            self.state = 5928 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5927
                    self.sortGiving()

                else:
                    raise NoViableAltException(self)
                self.state = 5930 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,887,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def LOCK(self):
            return self.getToken(CopyBookParser.LOCK, 0)

        def SAVE(self):
            return self.getToken(CopyBookParser.SAVE, 0)

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def REWIND(self):
            return self.getToken(CopyBookParser.REWIND, 0)

        def CRUNCH(self):
            return self.getToken(CopyBookParser.CRUNCH, 0)

        def RELEASE(self):
            return self.getToken(CopyBookParser.RELEASE, 0)

        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def REMOVE(self):
            return self.getToken(CopyBookParser.REMOVE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_sortGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortGiving" ):
                listener.enterSortGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortGiving" ):
                listener.exitSortGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortGiving" ):
                return visitor.visitSortGiving(self)
            else:
                return visitor.visitChildren(self)




    def sortGiving(self):

        localctx = CopyBookParser.SortGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_sortGiving)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5932
            self.fileName()
            self.state = 5942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
            if la_ == 1:
                self.state = 5933
                self.match(CopyBookParser.LOCK)

            elif la_ == 2:
                self.state = 5934
                self.match(CopyBookParser.SAVE)

            elif la_ == 3:
                self.state = 5935
                self.match(CopyBookParser.NO)
                self.state = 5936
                self.match(CopyBookParser.REWIND)

            elif la_ == 4:
                self.state = 5937
                self.match(CopyBookParser.CRUNCH)

            elif la_ == 5:
                self.state = 5938
                self.match(CopyBookParser.RELEASE)

            elif la_ == 6:
                self.state = 5939
                self.match(CopyBookParser.WITH)
                self.state = 5940
                self.match(CopyBookParser.REMOVE)
                self.state = 5941
                self.match(CopyBookParser.CRUNCH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(CopyBookParser.START, 0)

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def startKey(self):
            return self.getTypedRuleContext(CopyBookParser.StartKeyContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotInvalidKeyPhraseContext,0)


        def END_START(self):
            return self.getToken(CopyBookParser.END_START, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_startStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartStatement" ):
                listener.enterStartStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartStatement" ):
                listener.exitStartStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartStatement" ):
                return visitor.visitStartStatement(self)
            else:
                return visitor.visitChildren(self)




    def startStatement(self):

        localctx = CopyBookParser.StartStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_startStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5944
            self.match(CopyBookParser.START)
            self.state = 5945
            self.fileName()
            self.state = 5947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 5946
                self.startKey()


            self.state = 5950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,890,self._ctx)
            if la_ == 1:
                self.state = 5949
                self.invalidKeyPhrase()


            self.state = 5953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
            if la_ == 1:
                self.state = 5952
                self.notInvalidKeyPhrase()


            self.state = 5956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,892,self._ctx)
            if la_ == 1:
                self.state = 5955
                self.match(CopyBookParser.END_START)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def EQUAL(self):
            return self.getToken(CopyBookParser.EQUAL, 0)

        def EQUALCHAR(self):
            return self.getToken(CopyBookParser.EQUALCHAR, 0)

        def GREATER(self):
            return self.getToken(CopyBookParser.GREATER, 0)

        def MORETHANCHAR(self):
            return self.getToken(CopyBookParser.MORETHANCHAR, 0)

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def LESS(self):
            return self.getToken(CopyBookParser.LESS, 0)

        def LESSTHANCHAR(self):
            return self.getToken(CopyBookParser.LESSTHANCHAR, 0)

        def OR(self):
            return self.getToken(CopyBookParser.OR, 0)

        def MORETHANOREQUAL(self):
            return self.getToken(CopyBookParser.MORETHANOREQUAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def THAN(self):
            return self.getToken(CopyBookParser.THAN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_startKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartKey" ):
                listener.enterStartKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartKey" ):
                listener.exitStartKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartKey" ):
                return visitor.visitStartKey(self)
            else:
                return visitor.visitChildren(self)




    def startKey(self):

        localctx = CopyBookParser.StartKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_startKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5958
            self.match(CopyBookParser.KEY)
            self.state = 5960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 5959
                self.match(CopyBookParser.IS)


            self.state = 5989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
            if la_ == 1:
                self.state = 5962
                self.match(CopyBookParser.EQUAL)
                self.state = 5964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==501:
                    self.state = 5963
                    self.match(CopyBookParser.TO)


                pass

            elif la_ == 2:
                self.state = 5966
                self.match(CopyBookParser.EQUALCHAR)
                pass

            elif la_ == 3:
                self.state = 5967
                self.match(CopyBookParser.GREATER)
                self.state = 5969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==491:
                    self.state = 5968
                    self.match(CopyBookParser.THAN)


                pass

            elif la_ == 4:
                self.state = 5971
                self.match(CopyBookParser.MORETHANCHAR)
                pass

            elif la_ == 5:
                self.state = 5972
                self.match(CopyBookParser.NOT)
                self.state = 5973
                self.match(CopyBookParser.LESS)
                self.state = 5975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==491:
                    self.state = 5974
                    self.match(CopyBookParser.THAN)


                pass

            elif la_ == 6:
                self.state = 5977
                self.match(CopyBookParser.NOT)
                self.state = 5978
                self.match(CopyBookParser.LESSTHANCHAR)
                pass

            elif la_ == 7:
                self.state = 5979
                self.match(CopyBookParser.GREATER)
                self.state = 5981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==491:
                    self.state = 5980
                    self.match(CopyBookParser.THAN)


                self.state = 5983
                self.match(CopyBookParser.OR)
                self.state = 5984
                self.match(CopyBookParser.EQUAL)
                self.state = 5986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==501:
                    self.state = 5985
                    self.match(CopyBookParser.TO)


                pass

            elif la_ == 8:
                self.state = 5988
                self.match(CopyBookParser.MORETHANOREQUAL)
                pass


            self.state = 5991
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(CopyBookParser.STOP, 0)

        def RUN(self):
            return self.getToken(CopyBookParser.RUN, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_stopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStatement" ):
                listener.enterStopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStatement" ):
                listener.exitStopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopStatement" ):
                return visitor.visitStopStatement(self)
            else:
                return visitor.visitChildren(self)




    def stopStatement(self):

        localctx = CopyBookParser.StopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_stopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5993
            self.match(CopyBookParser.STOP)
            self.state = 5996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [425]:
                self.state = 5994
                self.match(CopyBookParser.RUN)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 37, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 267, 271, 272, 279, 292, 293, 315, 321, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 569, 570, 571, 572, 573, 574, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.state = 5995
                self.literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(CopyBookParser.STRING, 0)

        def stringIntoPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.StringIntoPhraseContext,0)


        def stringSendingPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StringSendingPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StringSendingPhraseContext,i)


        def stringWithPointerPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.StringWithPointerPhraseContext,0)


        def onOverflowPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnOverflowPhraseContext,0)


        def notOnOverflowPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnOverflowPhraseContext,0)


        def END_STRING(self):
            return self.getToken(CopyBookParser.END_STRING, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_stringStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringStatement" ):
                listener.enterStringStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringStatement" ):
                listener.exitStringStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringStatement" ):
                return visitor.visitStringStatement(self)
            else:
                return visitor.visitChildren(self)




    def stringStatement(self):

        localctx = CopyBookParser.StringStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_stringStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5998
            self.match(CopyBookParser.STRING)
            self.state = 6000 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5999
                    self.stringSendingPhrase()

                else:
                    raise NoViableAltException(self)
                self.state = 6002 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,901,self._ctx)

            self.state = 6004
            self.stringIntoPhrase()
            self.state = 6006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,902,self._ctx)
            if la_ == 1:
                self.state = 6005
                self.stringWithPointerPhrase()


            self.state = 6009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,903,self._ctx)
            if la_ == 1:
                self.state = 6008
                self.onOverflowPhrase()


            self.state = 6012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,904,self._ctx)
            if la_ == 1:
                self.state = 6011
                self.notOnOverflowPhrase()


            self.state = 6015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,905,self._ctx)
            if la_ == 1:
                self.state = 6014
                self.match(CopyBookParser.END_STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringSendingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringDelimitedByPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.StringDelimitedByPhraseContext,0)


        def stringForPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.StringForPhraseContext,0)


        def stringSending(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StringSendingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StringSendingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_stringSendingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringSendingPhrase" ):
                listener.enterStringSendingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringSendingPhrase" ):
                listener.exitStringSendingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringSendingPhrase" ):
                return visitor.visitStringSendingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringSendingPhrase(self):

        localctx = CopyBookParser.StringSendingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_stringSendingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6018 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6017
                self.stringSending()
                self.state = 6020 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007201134465025) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079256787573513727) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550488276852769) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430468061) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2216615441858887) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

            self.state = 6024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.state = 6022
                self.stringDelimitedByPhrase()
                pass
            elif token in [218]:
                self.state = 6023
                self.stringForPhrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringSendingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_stringSending

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringSending" ):
                listener.enterStringSending(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringSending" ):
                listener.exitStringSending(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringSending" ):
                return visitor.visitStringSending(self)
            else:
                return visitor.visitChildren(self)




    def stringSending(self):

        localctx = CopyBookParser.StringSendingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_stringSending)
        try:
            self.state = 6028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,908,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6026
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6027
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringDelimitedByPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELIMITED(self):
            return self.getToken(CopyBookParser.DELIMITED, 0)

        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_stringDelimitedByPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDelimitedByPhrase" ):
                listener.enterStringDelimitedByPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDelimitedByPhrase" ):
                listener.exitStringDelimitedByPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringDelimitedByPhrase" ):
                return visitor.visitStringDelimitedByPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringDelimitedByPhrase(self):

        localctx = CopyBookParser.StringDelimitedByPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_stringDelimitedByPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6030
            self.match(CopyBookParser.DELIMITED)
            self.state = 6032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,909,self._ctx)
            if la_ == 1:
                self.state = 6031
                self.match(CopyBookParser.BY)


            self.state = 6037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,910,self._ctx)
            if la_ == 1:
                self.state = 6034
                self.match(CopyBookParser.SIZE)
                pass

            elif la_ == 2:
                self.state = 6035
                self.identifier()
                pass

            elif la_ == 3:
                self.state = 6036
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringForPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_stringForPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringForPhrase" ):
                listener.enterStringForPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringForPhrase" ):
                listener.exitStringForPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringForPhrase" ):
                return visitor.visitStringForPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringForPhrase(self):

        localctx = CopyBookParser.StringForPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_stringForPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6039
            self.match(CopyBookParser.FOR)
            self.state = 6042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,911,self._ctx)
            if la_ == 1:
                self.state = 6040
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6041
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringIntoPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_stringIntoPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringIntoPhrase" ):
                listener.enterStringIntoPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringIntoPhrase" ):
                listener.exitStringIntoPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringIntoPhrase" ):
                return visitor.visitStringIntoPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringIntoPhrase(self):

        localctx = CopyBookParser.StringIntoPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_stringIntoPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6044
            self.match(CopyBookParser.INTO)
            self.state = 6045
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringWithPointerPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POINTER(self):
            return self.getToken(CopyBookParser.POINTER, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_stringWithPointerPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringWithPointerPhrase" ):
                listener.enterStringWithPointerPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringWithPointerPhrase" ):
                listener.exitStringWithPointerPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringWithPointerPhrase" ):
                return visitor.visitStringWithPointerPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringWithPointerPhrase(self):

        localctx = CopyBookParser.StringWithPointerPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_stringWithPointerPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 6047
                self.match(CopyBookParser.WITH)


            self.state = 6050
            self.match(CopyBookParser.POINTER)
            self.state = 6051
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTRACT(self):
            return self.getToken(CopyBookParser.SUBTRACT, 0)

        def subtractFromStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SubtractFromStatementContext,0)


        def subtractFromGivingStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SubtractFromGivingStatementContext,0)


        def subtractCorrespondingStatement(self):
            return self.getTypedRuleContext(CopyBookParser.SubtractCorrespondingStatementContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnSizeErrorPhraseContext,0)


        def END_SUBTRACT(self):
            return self.getToken(CopyBookParser.END_SUBTRACT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractStatement" ):
                listener.enterSubtractStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractStatement" ):
                listener.exitSubtractStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractStatement" ):
                return visitor.visitSubtractStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractStatement(self):

        localctx = CopyBookParser.SubtractStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_subtractStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6053
            self.match(CopyBookParser.SUBTRACT)
            self.state = 6057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,913,self._ctx)
            if la_ == 1:
                self.state = 6054
                self.subtractFromStatement()
                pass

            elif la_ == 2:
                self.state = 6055
                self.subtractFromGivingStatement()
                pass

            elif la_ == 3:
                self.state = 6056
                self.subtractCorrespondingStatement()
                pass


            self.state = 6060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,914,self._ctx)
            if la_ == 1:
                self.state = 6059
                self.onSizeErrorPhrase()


            self.state = 6063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,915,self._ctx)
            if la_ == 1:
                self.state = 6062
                self.notOnSizeErrorPhrase()


            self.state = 6066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.state = 6065
                self.match(CopyBookParser.END_SUBTRACT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractFromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def subtractSubtrahend(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SubtractSubtrahendContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SubtractSubtrahendContext,i)


        def subtractMinuend(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SubtractMinuendContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SubtractMinuendContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractFromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractFromStatement" ):
                listener.enterSubtractFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractFromStatement" ):
                listener.exitSubtractFromStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractFromStatement" ):
                return visitor.visitSubtractFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractFromStatement(self):

        localctx = CopyBookParser.SubtractFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_subtractFromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6069 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6068
                    self.subtractSubtrahend()

                else:
                    raise NoViableAltException(self)
                self.state = 6071 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,917,self._ctx)

            self.state = 6073
            self.match(CopyBookParser.FROM)
            self.state = 6075 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6074
                    self.subtractMinuend()

                else:
                    raise NoViableAltException(self)
                self.state = 6077 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,918,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractFromGivingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def subtractMinuendGiving(self):
            return self.getTypedRuleContext(CopyBookParser.SubtractMinuendGivingContext,0)


        def GIVING(self):
            return self.getToken(CopyBookParser.GIVING, 0)

        def subtractSubtrahend(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SubtractSubtrahendContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SubtractSubtrahendContext,i)


        def subtractGiving(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.SubtractGivingContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.SubtractGivingContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractFromGivingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractFromGivingStatement" ):
                listener.enterSubtractFromGivingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractFromGivingStatement" ):
                listener.exitSubtractFromGivingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractFromGivingStatement" ):
                return visitor.visitSubtractFromGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractFromGivingStatement(self):

        localctx = CopyBookParser.SubtractFromGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_subtractFromGivingStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6080 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6079
                    self.subtractSubtrahend()

                else:
                    raise NoViableAltException(self)
                self.state = 6082 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,919,self._ctx)

            self.state = 6084
            self.match(CopyBookParser.FROM)
            self.state = 6085
            self.subtractMinuendGiving()
            self.state = 6086
            self.match(CopyBookParser.GIVING)
            self.state = 6088 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6087
                    self.subtractGiving()

                else:
                    raise NoViableAltException(self)
                self.state = 6090 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,920,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractCorrespondingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def subtractMinuendCorresponding(self):
            return self.getTypedRuleContext(CopyBookParser.SubtractMinuendCorrespondingContext,0)


        def CORRESPONDING(self):
            return self.getToken(CopyBookParser.CORRESPONDING, 0)

        def CORR(self):
            return self.getToken(CopyBookParser.CORR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractCorrespondingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractCorrespondingStatement" ):
                listener.enterSubtractCorrespondingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractCorrespondingStatement" ):
                listener.exitSubtractCorrespondingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractCorrespondingStatement" ):
                return visitor.visitSubtractCorrespondingStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractCorrespondingStatement(self):

        localctx = CopyBookParser.SubtractCorrespondingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_subtractCorrespondingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6092
            _la = self._input.LA(1)
            if not(_la==106 or _la==107):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6093
            self.qualifiedDataName()
            self.state = 6094
            self.match(CopyBookParser.FROM)
            self.state = 6095
            self.subtractMinuendCorresponding()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractSubtrahendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractSubtrahend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractSubtrahend" ):
                listener.enterSubtractSubtrahend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractSubtrahend" ):
                listener.exitSubtractSubtrahend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractSubtrahend" ):
                return visitor.visitSubtractSubtrahend(self)
            else:
                return visitor.visitChildren(self)




    def subtractSubtrahend(self):

        localctx = CopyBookParser.SubtractSubtrahendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_subtractSubtrahend)
        try:
            self.state = 6099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6097
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6098
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractMinuendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractMinuend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractMinuend" ):
                listener.enterSubtractMinuend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractMinuend" ):
                listener.exitSubtractMinuend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractMinuend" ):
                return visitor.visitSubtractMinuend(self)
            else:
                return visitor.visitChildren(self)




    def subtractMinuend(self):

        localctx = CopyBookParser.SubtractMinuendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_subtractMinuend)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6101
            self.identifier()
            self.state = 6103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 6102
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractMinuendGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractMinuendGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractMinuendGiving" ):
                listener.enterSubtractMinuendGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractMinuendGiving" ):
                listener.exitSubtractMinuendGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractMinuendGiving" ):
                return visitor.visitSubtractMinuendGiving(self)
            else:
                return visitor.visitChildren(self)




    def subtractMinuendGiving(self):

        localctx = CopyBookParser.SubtractMinuendGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_subtractMinuendGiving)
        try:
            self.state = 6107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6105
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6106
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractGivingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractGiving

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractGiving" ):
                listener.enterSubtractGiving(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractGiving" ):
                listener.exitSubtractGiving(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractGiving" ):
                return visitor.visitSubtractGiving(self)
            else:
                return visitor.visitChildren(self)




    def subtractGiving(self):

        localctx = CopyBookParser.SubtractGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_subtractGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6109
            self.identifier()
            self.state = 6111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 6110
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractMinuendCorrespondingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def ROUNDED(self):
            return self.getToken(CopyBookParser.ROUNDED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_subtractMinuendCorresponding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractMinuendCorresponding" ):
                listener.enterSubtractMinuendCorresponding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractMinuendCorresponding" ):
                listener.exitSubtractMinuendCorresponding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractMinuendCorresponding" ):
                return visitor.visitSubtractMinuendCorresponding(self)
            else:
                return visitor.visitChildren(self)




    def subtractMinuendCorresponding(self):

        localctx = CopyBookParser.SubtractMinuendCorrespondingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_subtractMinuendCorresponding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6113
            self.qualifiedDataName()
            self.state = 6115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==424:
                self.state = 6114
                self.match(CopyBookParser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transactionStart(self):
            return self.getTypedRuleContext(CopyBookParser.TransactionStartContext,0)


        def transactionBody(self):
            return self.getTypedRuleContext(CopyBookParser.TransactionBodyContext,0)


        def transactionEnd(self):
            return self.getTypedRuleContext(CopyBookParser.TransactionEndContext,0)


        def transactionCancelStatement(self):
            return self.getTypedRuleContext(CopyBookParser.TransactionCancelStatementContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionStatement" ):
                return visitor.visitTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def transactionStatement(self):

        localctx = CopyBookParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_transactionStatement)
        try:
            self.state = 6122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6117
                self.transactionStart()
                self.state = 6118
                self.transactionBody()
                self.state = 6119
                self.transactionEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6121
                self.transactionCancelStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(CopyBookParser.TRANSACTION, 0)

        def START(self):
            return self.getToken(CopyBookParser.START, 0)

        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT)
            else:
                return self.getToken(CopyBookParser.DOT, i)

        def DOT_FS(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.DOT_FS)
            else:
                return self.getToken(CopyBookParser.DOT_FS, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_transactionStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStart" ):
                listener.enterTransactionStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStart" ):
                listener.exitTransactionStart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionStart" ):
                return visitor.visitTransactionStart(self)
            else:
                return visitor.visitChildren(self)




    def transactionStart(self):

        localctx = CopyBookParser.TransactionStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_transactionStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6124
            self.match(CopyBookParser.TRANSACTION)
            self.state = 6125
            self.match(CopyBookParser.START)
            self.state = 6127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
            if la_ == 1:
                self.state = 6126
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==832:
                self.state = 6129
                self.match(CopyBookParser.IDENTIFIER)


            self.state = 6133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==550 or _la==551:
                self.state = 6132
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_transactionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionBody" ):
                listener.enterTransactionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionBody" ):
                listener.exitTransactionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionBody" ):
                return visitor.visitTransactionBody(self)
            else:
                return visitor.visitChildren(self)




    def transactionBody(self):

        localctx = CopyBookParser.TransactionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_transactionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6138
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,930,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6135
                    self.statement() 
                self.state = 6140
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,930,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(CopyBookParser.TRANSACTION, 0)

        def END(self):
            return self.getToken(CopyBookParser.END, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_transactionEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionEnd" ):
                listener.enterTransactionEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionEnd" ):
                listener.exitTransactionEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionEnd" ):
                return visitor.visitTransactionEnd(self)
            else:
                return visitor.visitChildren(self)




    def transactionEnd(self):

        localctx = CopyBookParser.TransactionEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_transactionEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6141
            self.match(CopyBookParser.TRANSACTION)
            self.state = 6142
            self.match(CopyBookParser.END)
            self.state = 6144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
            if la_ == 1:
                self.state = 6143
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionCancelStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(CopyBookParser.TRANSACTION, 0)

        def CANCEL(self):
            return self.getToken(CopyBookParser.CANCEL, 0)

        def IDENTIFIER(self):
            return self.getToken(CopyBookParser.IDENTIFIER, 0)

        def DOT(self):
            return self.getToken(CopyBookParser.DOT, 0)

        def DOT_FS(self):
            return self.getToken(CopyBookParser.DOT_FS, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_transactionCancelStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionCancelStatement" ):
                listener.enterTransactionCancelStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionCancelStatement" ):
                listener.exitTransactionCancelStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionCancelStatement" ):
                return visitor.visitTransactionCancelStatement(self)
            else:
                return visitor.visitChildren(self)




    def transactionCancelStatement(self):

        localctx = CopyBookParser.TransactionCancelStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_transactionCancelStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6146
            self.match(CopyBookParser.TRANSACTION)
            self.state = 6147
            self.match(CopyBookParser.CANCEL)
            self.state = 6149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
            if la_ == 1:
                self.state = 6148
                self.match(CopyBookParser.IDENTIFIER)


            self.state = 6152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
            if la_ == 1:
                self.state = 6151
                _la = self._input.LA(1)
                if not(_la==550 or _la==551):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERMINATE(self):
            return self.getToken(CopyBookParser.TERMINATE, 0)

        def reportName(self):
            return self.getTypedRuleContext(CopyBookParser.ReportNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_terminateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminateStatement" ):
                listener.enterTerminateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminateStatement" ):
                listener.exitTerminateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminateStatement" ):
                return visitor.visitTerminateStatement(self)
            else:
                return visitor.visitChildren(self)




    def terminateStatement(self):

        localctx = CopyBookParser.TerminateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_terminateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6154
            self.match(CopyBookParser.TERMINATE)
            self.state = 6155
            self.reportName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSTRING(self):
            return self.getToken(CopyBookParser.UNSTRING, 0)

        def unstringSendingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringSendingPhraseContext,0)


        def unstringIntoPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringIntoPhraseContext,0)


        def unstringWithPointerPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringWithPointerPhraseContext,0)


        def unstringTallyingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringTallyingPhraseContext,0)


        def onOverflowPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.OnOverflowPhraseContext,0)


        def notOnOverflowPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotOnOverflowPhraseContext,0)


        def END_UNSTRING(self):
            return self.getToken(CopyBookParser.END_UNSTRING, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringStatement" ):
                listener.enterUnstringStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringStatement" ):
                listener.exitUnstringStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringStatement" ):
                return visitor.visitUnstringStatement(self)
            else:
                return visitor.visitChildren(self)




    def unstringStatement(self):

        localctx = CopyBookParser.UnstringStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_unstringStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6157
            self.match(CopyBookParser.UNSTRING)
            self.state = 6158
            self.unstringSendingPhrase()
            self.state = 6159
            self.unstringIntoPhrase()
            self.state = 6161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,934,self._ctx)
            if la_ == 1:
                self.state = 6160
                self.unstringWithPointerPhrase()


            self.state = 6164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==484:
                self.state = 6163
                self.unstringTallyingPhrase()


            self.state = 6167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,936,self._ctx)
            if la_ == 1:
                self.state = 6166
                self.onOverflowPhrase()


            self.state = 6170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
            if la_ == 1:
                self.state = 6169
                self.notOnOverflowPhrase()


            self.state = 6173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
            if la_ == 1:
                self.state = 6172
                self.match(CopyBookParser.END_UNSTRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringSendingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def unstringDelimitedByPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringDelimitedByPhraseContext,0)


        def unstringOrAllPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.UnstringOrAllPhraseContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.UnstringOrAllPhraseContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringSendingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringSendingPhrase" ):
                listener.enterUnstringSendingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringSendingPhrase" ):
                listener.exitUnstringSendingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringSendingPhrase" ):
                return visitor.visitUnstringSendingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringSendingPhrase(self):

        localctx = CopyBookParser.UnstringSendingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_unstringSendingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6175
            self.identifier()
            self.state = 6183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 6176
                self.unstringDelimitedByPhrase()
                self.state = 6180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==341:
                    self.state = 6177
                    self.unstringOrAllPhrase()
                    self.state = 6182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringDelimitedByPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELIMITED(self):
            return self.getToken(CopyBookParser.DELIMITED, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringDelimitedByPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringDelimitedByPhrase" ):
                listener.enterUnstringDelimitedByPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringDelimitedByPhrase" ):
                listener.exitUnstringDelimitedByPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringDelimitedByPhrase" ):
                return visitor.visitUnstringDelimitedByPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringDelimitedByPhrase(self):

        localctx = CopyBookParser.UnstringDelimitedByPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_unstringDelimitedByPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6185
            self.match(CopyBookParser.DELIMITED)
            self.state = 6187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
            if la_ == 1:
                self.state = 6186
                self.match(CopyBookParser.BY)


            self.state = 6190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
            if la_ == 1:
                self.state = 6189
                self.match(CopyBookParser.ALL)


            self.state = 6194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
            if la_ == 1:
                self.state = 6192
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6193
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringOrAllPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(CopyBookParser.OR, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringOrAllPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringOrAllPhrase" ):
                listener.enterUnstringOrAllPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringOrAllPhrase" ):
                listener.exitUnstringOrAllPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringOrAllPhrase" ):
                return visitor.visitUnstringOrAllPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringOrAllPhrase(self):

        localctx = CopyBookParser.UnstringOrAllPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_unstringOrAllPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6196
            self.match(CopyBookParser.OR)
            self.state = 6198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
            if la_ == 1:
                self.state = 6197
                self.match(CopyBookParser.ALL)


            self.state = 6202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,945,self._ctx)
            if la_ == 1:
                self.state = 6200
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6201
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringIntoPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def unstringInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.UnstringIntoContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.UnstringIntoContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringIntoPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringIntoPhrase" ):
                listener.enterUnstringIntoPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringIntoPhrase" ):
                listener.exitUnstringIntoPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringIntoPhrase" ):
                return visitor.visitUnstringIntoPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringIntoPhrase(self):

        localctx = CopyBookParser.UnstringIntoPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_unstringIntoPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6204
            self.match(CopyBookParser.INTO)
            self.state = 6206 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6205
                    self.unstringInto()

                else:
                    raise NoViableAltException(self)
                self.state = 6208 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,946,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def unstringDelimiterIn(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringDelimiterInContext,0)


        def unstringCountIn(self):
            return self.getTypedRuleContext(CopyBookParser.UnstringCountInContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringInto" ):
                listener.enterUnstringInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringInto" ):
                listener.exitUnstringInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringInto" ):
                return visitor.visitUnstringInto(self)
            else:
                return visitor.visitChildren(self)




    def unstringInto(self):

        localctx = CopyBookParser.UnstringIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_unstringInto)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6210
            self.identifier()
            self.state = 6212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 6211
                self.unstringDelimiterIn()


            self.state = 6215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 6214
                self.unstringCountIn()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringDelimiterInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELIMITER(self):
            return self.getToken(CopyBookParser.DELIMITER, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringDelimiterIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringDelimiterIn" ):
                listener.enterUnstringDelimiterIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringDelimiterIn" ):
                listener.exitUnstringDelimiterIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringDelimiterIn" ):
                return visitor.visitUnstringDelimiterIn(self)
            else:
                return visitor.visitChildren(self)




    def unstringDelimiterIn(self):

        localctx = CopyBookParser.UnstringDelimiterInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_unstringDelimiterIn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6217
            self.match(CopyBookParser.DELIMITER)
            self.state = 6219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,949,self._ctx)
            if la_ == 1:
                self.state = 6218
                self.match(CopyBookParser.IN)


            self.state = 6221
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringCountInContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(CopyBookParser.COUNT, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringCountIn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringCountIn" ):
                listener.enterUnstringCountIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringCountIn" ):
                listener.exitUnstringCountIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringCountIn" ):
                return visitor.visitUnstringCountIn(self)
            else:
                return visitor.visitChildren(self)




    def unstringCountIn(self):

        localctx = CopyBookParser.UnstringCountInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_unstringCountIn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6223
            self.match(CopyBookParser.COUNT)
            self.state = 6225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,950,self._ctx)
            if la_ == 1:
                self.state = 6224
                self.match(CopyBookParser.IN)


            self.state = 6227
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringWithPointerPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POINTER(self):
            return self.getToken(CopyBookParser.POINTER, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def WITH(self):
            return self.getToken(CopyBookParser.WITH, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringWithPointerPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringWithPointerPhrase" ):
                listener.enterUnstringWithPointerPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringWithPointerPhrase" ):
                listener.exitUnstringWithPointerPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringWithPointerPhrase" ):
                return visitor.visitUnstringWithPointerPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringWithPointerPhrase(self):

        localctx = CopyBookParser.UnstringWithPointerPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_unstringWithPointerPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==527:
                self.state = 6229
                self.match(CopyBookParser.WITH)


            self.state = 6232
            self.match(CopyBookParser.POINTER)
            self.state = 6233
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnstringTallyingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TALLYING(self):
            return self.getToken(CopyBookParser.TALLYING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_unstringTallyingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnstringTallyingPhrase" ):
                listener.enterUnstringTallyingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnstringTallyingPhrase" ):
                listener.exitUnstringTallyingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnstringTallyingPhrase" ):
                return visitor.visitUnstringTallyingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringTallyingPhrase(self):

        localctx = CopyBookParser.UnstringTallyingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_unstringTallyingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6235
            self.match(CopyBookParser.TALLYING)
            self.state = 6237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
            if la_ == 1:
                self.state = 6236
                self.match(CopyBookParser.IN)


            self.state = 6239
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(CopyBookParser.USE, 0)

        def useAfterClause(self):
            return self.getTypedRuleContext(CopyBookParser.UseAfterClauseContext,0)


        def useDebugClause(self):
            return self.getTypedRuleContext(CopyBookParser.UseDebugClauseContext,0)


        def useDeadLock(self):
            return self.getTypedRuleContext(CopyBookParser.UseDeadLockContext,0)


        def useFor(self):
            return self.getTypedRuleContext(CopyBookParser.UseForContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseStatement" ):
                return visitor.visitUseStatement(self)
            else:
                return visitor.visitChildren(self)




    def useStatement(self):

        localctx = CopyBookParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6241
            self.match(CopyBookParser.USE)
            self.state = 6246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
            if la_ == 1:
                self.state = 6242
                self.useAfterClause()
                pass

            elif la_ == 2:
                self.state = 6243
                self.useDebugClause()
                pass

            elif la_ == 3:
                self.state = 6244
                self.useDeadLock()
                pass

            elif la_ == 4:
                self.state = 6245
                self.useFor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_useFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseFor" ):
                listener.enterUseFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseFor" ):
                listener.exitUseFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseFor" ):
                return visitor.visitUseFor(self)
            else:
                return visitor.visitChildren(self)




    def useFor(self):

        localctx = CopyBookParser.UseForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_useFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6248
            self.match(CopyBookParser.FOR)
            self.state = 6249
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseAfterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(CopyBookParser.AFTER, 0)

        def PROCEDURE(self):
            return self.getToken(CopyBookParser.PROCEDURE, 0)

        def useAfterOn(self):
            return self.getTypedRuleContext(CopyBookParser.UseAfterOnContext,0)


        def EXCEPTION(self):
            return self.getToken(CopyBookParser.EXCEPTION, 0)

        def ERROR(self):
            return self.getToken(CopyBookParser.ERROR, 0)

        def GLOBAL(self):
            return self.getToken(CopyBookParser.GLOBAL, 0)

        def STANDARD(self):
            return self.getToken(CopyBookParser.STANDARD, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_useAfterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseAfterClause" ):
                listener.enterUseAfterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseAfterClause" ):
                listener.exitUseAfterClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseAfterClause" ):
                return visitor.visitUseAfterClause(self)
            else:
                return visitor.visitChildren(self)




    def useAfterClause(self):

        localctx = CopyBookParser.UseAfterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_useAfterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==229:
                self.state = 6251
                self.match(CopyBookParser.GLOBAL)


            self.state = 6254
            self.match(CopyBookParser.AFTER)
            self.state = 6256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==465:
                self.state = 6255
                self.match(CopyBookParser.STANDARD)


            self.state = 6258
            _la = self._input.LA(1)
            if not(_la==194 or _la==202):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6259
            self.match(CopyBookParser.PROCEDURE)
            self.state = 6261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,956,self._ctx)
            if la_ == 1:
                self.state = 6260
                self.match(CopyBookParser.ON)


            self.state = 6263
            self.useAfterOn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseAfterOnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(CopyBookParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(CopyBookParser.OUTPUT, 0)

        def I_O(self):
            return self.getToken(CopyBookParser.I_O, 0)

        def EXTEND(self):
            return self.getToken(CopyBookParser.EXTEND, 0)

        def fileName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.FileNameContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.FileNameContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_useAfterOn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseAfterOn" ):
                listener.enterUseAfterOn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseAfterOn" ):
                listener.exitUseAfterOn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseAfterOn" ):
                return visitor.visitUseAfterOn(self)
            else:
                return visitor.visitChildren(self)




    def useAfterOn(self):

        localctx = CopyBookParser.UseAfterOnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_useAfterOn)
        self._la = 0 # Token type
        try:
            self.state = 6274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,958,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6265
                self.match(CopyBookParser.INPUT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6266
                self.match(CopyBookParser.OUTPUT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6267
                self.match(CopyBookParser.I_O)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6268
                self.match(CopyBookParser.EXTEND)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6270 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6269
                    self.fileName()
                    self.state = 6272 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 76842699008641020) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36521446947684353) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 288230376151711873) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 9009398278193317) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 74326986043949315) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & 6782200037507083) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & -9133264830940036607) != 0) or ((((_la - 483)) & ~0x3f) == 0 and ((1 << (_la - 483)) & 577171036831892689) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDebugClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEBUGGING(self):
            return self.getToken(CopyBookParser.DEBUGGING, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def useDebugOn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.UseDebugOnContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.UseDebugOnContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_useDebugClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDebugClause" ):
                listener.enterUseDebugClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDebugClause" ):
                listener.exitUseDebugClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDebugClause" ):
                return visitor.visitUseDebugClause(self)
            else:
                return visitor.visitChildren(self)




    def useDebugClause(self):

        localctx = CopyBookParser.UseDebugClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_useDebugClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 6276
                self.match(CopyBookParser.FOR)


            self.state = 6279
            self.match(CopyBookParser.DEBUGGING)
            self.state = 6281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,960,self._ctx)
            if la_ == 1:
                self.state = 6280
                self.match(CopyBookParser.ON)


            self.state = 6284 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6283
                self.useDebugOn()
                self.state = 6286 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896693179548159) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432406780929) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007200060723201) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 144115239617585153) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 219550486129369121) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 30403713249050627) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430467585) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 1055531162927427) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDebugOnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def PROCEDURES(self):
            return self.getToken(CopyBookParser.PROCEDURES, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def REFERENCES(self):
            return self.getToken(CopyBookParser.REFERENCES, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def procedureName(self):
            return self.getTypedRuleContext(CopyBookParser.ProcedureNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_useDebugOn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDebugOn" ):
                listener.enterUseDebugOn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDebugOn" ):
                listener.exitUseDebugOn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDebugOn" ):
                return visitor.visitUseDebugOn(self)
            else:
                return visitor.visitChildren(self)




    def useDebugOn(self):

        localctx = CopyBookParser.UseDebugOnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_useDebugOn)
        self._la = 0 # Token type
        try:
            self.state = 6300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6288
                self.match(CopyBookParser.ALL)
                self.state = 6289
                self.match(CopyBookParser.PROCEDURES)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6290
                self.match(CopyBookParser.ALL)
                self.state = 6292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==397:
                    self.state = 6291
                    self.match(CopyBookParser.REFERENCES)


                self.state = 6295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
                if la_ == 1:
                    self.state = 6294
                    self.match(CopyBookParser.OF)


                self.state = 6297
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6298
                self.procedureName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6299
                self.fileName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeadLockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEAD_LOCK(self):
            return self.getToken(CopyBookParser.DEAD_LOCK, 0)

        def FOR(self):
            return self.getToken(CopyBookParser.FOR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_useDeadLock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeadLock" ):
                listener.enterUseDeadLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeadLock" ):
                listener.exitUseDeadLock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDeadLock" ):
                return visitor.visitUseDeadLock(self)
            else:
                return visitor.visitChildren(self)




    def useDeadLock(self):

        localctx = CopyBookParser.UseDeadLockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_useDeadLock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 6302
                self.match(CopyBookParser.FOR)


            self.state = 6305
            self.match(CopyBookParser.DEAD_LOCK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(CopyBookParser.WRITE, 0)

        def recordName(self):
            return self.getTypedRuleContext(CopyBookParser.RecordNameContext,0)


        def writeFromPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.WriteFromPhraseContext,0)


        def writeAdvancingPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.WriteAdvancingPhraseContext,0)


        def writeAtEndOfPagePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.WriteAtEndOfPagePhraseContext,0)


        def writeNotAtEndOfPagePhrase(self):
            return self.getTypedRuleContext(CopyBookParser.WriteNotAtEndOfPagePhraseContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(CopyBookParser.NotInvalidKeyPhraseContext,0)


        def END_WRITE(self):
            return self.getToken(CopyBookParser.END_WRITE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_writeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStatement" ):
                listener.enterWriteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStatement" ):
                listener.exitWriteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteStatement" ):
                return visitor.visitWriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def writeStatement(self):

        localctx = CopyBookParser.WriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_writeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6307
            self.match(CopyBookParser.WRITE)
            self.state = 6308
            self.recordName()
            self.state = 6310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,966,self._ctx)
            if la_ == 1:
                self.state = 6309
                self.writeFromPhrase()


            self.state = 6313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
            if la_ == 1:
                self.state = 6312
                self.writeAdvancingPhrase()


            self.state = 6316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
            if la_ == 1:
                self.state = 6315
                self.writeAtEndOfPagePhrase()


            self.state = 6319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,969,self._ctx)
            if la_ == 1:
                self.state = 6318
                self.writeNotAtEndOfPagePhrase()


            self.state = 6322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
            if la_ == 1:
                self.state = 6321
                self.invalidKeyPhrase()


            self.state = 6325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,971,self._ctx)
            if la_ == 1:
                self.state = 6324
                self.notInvalidKeyPhrase()


            self.state = 6328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,972,self._ctx)
            if la_ == 1:
                self.state = 6327
                self.match(CopyBookParser.END_WRITE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteFromPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_writeFromPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteFromPhrase" ):
                listener.enterWriteFromPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteFromPhrase" ):
                listener.exitWriteFromPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteFromPhrase" ):
                return visitor.visitWriteFromPhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeFromPhrase(self):

        localctx = CopyBookParser.WriteFromPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_writeFromPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6330
            self.match(CopyBookParser.FROM)
            self.state = 6333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
            if la_ == 1:
                self.state = 6331
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6332
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteAdvancingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(CopyBookParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(CopyBookParser.AFTER, 0)

        def writeAdvancingPage(self):
            return self.getTypedRuleContext(CopyBookParser.WriteAdvancingPageContext,0)


        def writeAdvancingLines(self):
            return self.getTypedRuleContext(CopyBookParser.WriteAdvancingLinesContext,0)


        def writeAdvancingMnemonic(self):
            return self.getTypedRuleContext(CopyBookParser.WriteAdvancingMnemonicContext,0)


        def ADVANCING(self):
            return self.getToken(CopyBookParser.ADVANCING, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_writeAdvancingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteAdvancingPhrase" ):
                listener.enterWriteAdvancingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteAdvancingPhrase" ):
                listener.exitWriteAdvancingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteAdvancingPhrase" ):
                return visitor.visitWriteAdvancingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingPhrase(self):

        localctx = CopyBookParser.WriteAdvancingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_writeAdvancingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6335
            _la = self._input.LA(1)
            if not(_la==8 or _la==42):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                self.state = 6336
                self.match(CopyBookParser.ADVANCING)


            self.state = 6342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
            if la_ == 1:
                self.state = 6339
                self.writeAdvancingPage()
                pass

            elif la_ == 2:
                self.state = 6340
                self.writeAdvancingLines()
                pass

            elif la_ == 3:
                self.state = 6341
                self.writeAdvancingMnemonic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteAdvancingPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(CopyBookParser.PAGE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_writeAdvancingPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteAdvancingPage" ):
                listener.enterWriteAdvancingPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteAdvancingPage" ):
                listener.exitWriteAdvancingPage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteAdvancingPage" ):
                return visitor.visitWriteAdvancingPage(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingPage(self):

        localctx = CopyBookParser.WriteAdvancingPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_writeAdvancingPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6344
            self.match(CopyBookParser.PAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteAdvancingLinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def LINE(self):
            return self.getToken(CopyBookParser.LINE, 0)

        def LINES(self):
            return self.getToken(CopyBookParser.LINES, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_writeAdvancingLines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteAdvancingLines" ):
                listener.enterWriteAdvancingLines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteAdvancingLines" ):
                listener.exitWriteAdvancingLines(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteAdvancingLines" ):
                return visitor.visitWriteAdvancingLines(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingLines(self):

        localctx = CopyBookParser.WriteAdvancingLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_writeAdvancingLines)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,976,self._ctx)
            if la_ == 1:
                self.state = 6346
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 6347
                self.literal()
                pass


            self.state = 6351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289 or _la==290:
                self.state = 6350
                _la = self._input.LA(1)
                if not(_la==289 or _la==290):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteAdvancingMnemonicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_writeAdvancingMnemonic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteAdvancingMnemonic" ):
                listener.enterWriteAdvancingMnemonic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteAdvancingMnemonic" ):
                listener.exitWriteAdvancingMnemonic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteAdvancingMnemonic" ):
                return visitor.visitWriteAdvancingMnemonic(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingMnemonic(self):

        localctx = CopyBookParser.WriteAdvancingMnemonicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_writeAdvancingMnemonic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6353
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteAtEndOfPagePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END_OF_PAGE(self):
            return self.getToken(CopyBookParser.END_OF_PAGE, 0)

        def EOP(self):
            return self.getToken(CopyBookParser.EOP, 0)

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_writeAtEndOfPagePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteAtEndOfPagePhrase" ):
                listener.enterWriteAtEndOfPagePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteAtEndOfPagePhrase" ):
                listener.exitWriteAtEndOfPagePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteAtEndOfPagePhrase" ):
                return visitor.visitWriteAtEndOfPagePhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeAtEndOfPagePhrase(self):

        localctx = CopyBookParser.WriteAtEndOfPagePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_writeAtEndOfPagePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 6355
                self.match(CopyBookParser.AT)


            self.state = 6358
            _la = self._input.LA(1)
            if not(_la==173 or _la==191):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6362
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,979,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6359
                    self.statement() 
                self.state = 6364
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,979,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteNotAtEndOfPagePhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def END_OF_PAGE(self):
            return self.getToken(CopyBookParser.END_OF_PAGE, 0)

        def EOP(self):
            return self.getToken(CopyBookParser.EOP, 0)

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_writeNotAtEndOfPagePhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteNotAtEndOfPagePhrase" ):
                listener.enterWriteNotAtEndOfPagePhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteNotAtEndOfPagePhrase" ):
                listener.exitWriteNotAtEndOfPagePhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWriteNotAtEndOfPagePhrase" ):
                return visitor.visitWriteNotAtEndOfPagePhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeNotAtEndOfPagePhrase(self):

        localctx = CopyBookParser.WriteNotAtEndOfPagePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_writeNotAtEndOfPagePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6365
            self.match(CopyBookParser.NOT)
            self.state = 6367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 6366
                self.match(CopyBookParser.AT)


            self.state = 6369
            _la = self._input.LA(1)
            if not(_la==173 or _la==191):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6373
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,981,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6370
                    self.statement() 
                self.state = 6375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,981,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtEndPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CopyBookParser.END, 0)

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_atEndPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtEndPhrase" ):
                listener.enterAtEndPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtEndPhrase" ):
                listener.exitAtEndPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtEndPhrase" ):
                return visitor.visitAtEndPhrase(self)
            else:
                return visitor.visitChildren(self)




    def atEndPhrase(self):

        localctx = CopyBookParser.AtEndPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_atEndPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 6376
                self.match(CopyBookParser.AT)


            self.state = 6379
            self.match(CopyBookParser.END)
            self.state = 6383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,983,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6380
                    self.statement() 
                self.state = 6385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,983,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotAtEndPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def END(self):
            return self.getToken(CopyBookParser.END, 0)

        def AT(self):
            return self.getToken(CopyBookParser.AT, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_notAtEndPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotAtEndPhrase" ):
                listener.enterNotAtEndPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotAtEndPhrase" ):
                listener.exitNotAtEndPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotAtEndPhrase" ):
                return visitor.visitNotAtEndPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notAtEndPhrase(self):

        localctx = CopyBookParser.NotAtEndPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_notAtEndPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6386
            self.match(CopyBookParser.NOT)
            self.state = 6388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 6387
                self.match(CopyBookParser.AT)


            self.state = 6390
            self.match(CopyBookParser.END)
            self.state = 6394
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,985,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6391
                    self.statement() 
                self.state = 6396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,985,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvalidKeyPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALID(self):
            return self.getToken(CopyBookParser.INVALID, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_invalidKeyPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvalidKeyPhrase" ):
                listener.enterInvalidKeyPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvalidKeyPhrase" ):
                listener.exitInvalidKeyPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvalidKeyPhrase" ):
                return visitor.visitInvalidKeyPhrase(self)
            else:
                return visitor.visitChildren(self)




    def invalidKeyPhrase(self):

        localctx = CopyBookParser.InvalidKeyPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_invalidKeyPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6397
            self.match(CopyBookParser.INVALID)
            self.state = 6399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 6398
                self.match(CopyBookParser.KEY)


            self.state = 6404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,987,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6401
                    self.statement() 
                self.state = 6406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,987,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotInvalidKeyPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def INVALID(self):
            return self.getToken(CopyBookParser.INVALID, 0)

        def KEY(self):
            return self.getToken(CopyBookParser.KEY, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_notInvalidKeyPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotInvalidKeyPhrase" ):
                listener.enterNotInvalidKeyPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotInvalidKeyPhrase" ):
                listener.exitNotInvalidKeyPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotInvalidKeyPhrase" ):
                return visitor.visitNotInvalidKeyPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notInvalidKeyPhrase(self):

        localctx = CopyBookParser.NotInvalidKeyPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_notInvalidKeyPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6407
            self.match(CopyBookParser.NOT)
            self.state = 6408
            self.match(CopyBookParser.INVALID)
            self.state = 6410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==269:
                self.state = 6409
                self.match(CopyBookParser.KEY)


            self.state = 6415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,989,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6412
                    self.statement() 
                self.state = 6417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,989,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnOverflowPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERFLOW(self):
            return self.getToken(CopyBookParser.OVERFLOW, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_onOverflowPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnOverflowPhrase" ):
                listener.enterOnOverflowPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnOverflowPhrase" ):
                listener.exitOnOverflowPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnOverflowPhrase" ):
                return visitor.visitOnOverflowPhrase(self)
            else:
                return visitor.visitChildren(self)




    def onOverflowPhrase(self):

        localctx = CopyBookParser.OnOverflowPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_onOverflowPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 6418
                self.match(CopyBookParser.ON)


            self.state = 6421
            self.match(CopyBookParser.OVERFLOW)
            self.state = 6425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,991,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6422
                    self.statement() 
                self.state = 6427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,991,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotOnOverflowPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def OVERFLOW(self):
            return self.getToken(CopyBookParser.OVERFLOW, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_notOnOverflowPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOnOverflowPhrase" ):
                listener.enterNotOnOverflowPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOnOverflowPhrase" ):
                listener.exitNotOnOverflowPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOnOverflowPhrase" ):
                return visitor.visitNotOnOverflowPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notOnOverflowPhrase(self):

        localctx = CopyBookParser.NotOnOverflowPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_notOnOverflowPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6428
            self.match(CopyBookParser.NOT)
            self.state = 6430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 6429
                self.match(CopyBookParser.ON)


            self.state = 6432
            self.match(CopyBookParser.OVERFLOW)
            self.state = 6436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,993,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6433
                    self.statement() 
                self.state = 6438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,993,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnSizeErrorPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def ERROR(self):
            return self.getToken(CopyBookParser.ERROR, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_onSizeErrorPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnSizeErrorPhrase" ):
                listener.enterOnSizeErrorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnSizeErrorPhrase" ):
                listener.exitOnSizeErrorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnSizeErrorPhrase" ):
                return visitor.visitOnSizeErrorPhrase(self)
            else:
                return visitor.visitChildren(self)




    def onSizeErrorPhrase(self):

        localctx = CopyBookParser.OnSizeErrorPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_onSizeErrorPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 6439
                self.match(CopyBookParser.ON)


            self.state = 6442
            self.match(CopyBookParser.SIZE)
            self.state = 6443
            self.match(CopyBookParser.ERROR)
            self.state = 6447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,995,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6444
                    self.statement() 
                self.state = 6449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,995,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotOnSizeErrorPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def ERROR(self):
            return self.getToken(CopyBookParser.ERROR, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_notOnSizeErrorPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOnSizeErrorPhrase" ):
                listener.enterNotOnSizeErrorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOnSizeErrorPhrase" ):
                listener.exitNotOnSizeErrorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOnSizeErrorPhrase" ):
                return visitor.visitNotOnSizeErrorPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notOnSizeErrorPhrase(self):

        localctx = CopyBookParser.NotOnSizeErrorPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_notOnSizeErrorPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6450
            self.match(CopyBookParser.NOT)
            self.state = 6452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 6451
                self.match(CopyBookParser.ON)


            self.state = 6454
            self.match(CopyBookParser.SIZE)
            self.state = 6455
            self.match(CopyBookParser.ERROR)
            self.state = 6459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,997,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6456
                    self.statement() 
                self.state = 6461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,997,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnExceptionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTION(self):
            return self.getToken(CopyBookParser.EXCEPTION, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_onExceptionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnExceptionClause" ):
                listener.enterOnExceptionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnExceptionClause" ):
                listener.exitOnExceptionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnExceptionClause" ):
                return visitor.visitOnExceptionClause(self)
            else:
                return visitor.visitChildren(self)




    def onExceptionClause(self):

        localctx = CopyBookParser.OnExceptionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_onExceptionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 6462
                self.match(CopyBookParser.ON)


            self.state = 6465
            self.match(CopyBookParser.EXCEPTION)
            self.state = 6469
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,999,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6466
                    self.statement() 
                self.state = 6471
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,999,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotOnExceptionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def EXCEPTION(self):
            return self.getToken(CopyBookParser.EXCEPTION, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.StatementContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.StatementContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_notOnExceptionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOnExceptionClause" ):
                listener.enterNotOnExceptionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOnExceptionClause" ):
                listener.exitNotOnExceptionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOnExceptionClause" ):
                return visitor.visitNotOnExceptionClause(self)
            else:
                return visitor.visitChildren(self)




    def notOnExceptionClause(self):

        localctx = CopyBookParser.NotOnExceptionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_notOnExceptionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6472
            self.match(CopyBookParser.NOT)
            self.state = 6474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==338:
                self.state = 6473
                self.match(CopyBookParser.ON)


            self.state = 6476
            self.match(CopyBookParser.EXCEPTION)
            self.state = 6480
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1001,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6477
                    self.statement() 
                self.state = 6482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1001,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multDivs(self):
            return self.getTypedRuleContext(CopyBookParser.MultDivsContext,0)


        def plusMinus(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.PlusMinusContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.PlusMinusContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_arithmeticExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExpression" ):
                listener.enterArithmeticExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExpression" ):
                listener.exitArithmeticExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticExpression" ):
                return visitor.visitArithmeticExpression(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticExpression(self):

        localctx = CopyBookParser.ArithmeticExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_arithmeticExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6483
            self.multDivs()
            self.state = 6487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1002,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6484
                    self.plusMinus() 
                self.state = 6489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1002,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlusMinusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multDivs(self):
            return self.getTypedRuleContext(CopyBookParser.MultDivsContext,0)


        def PLUSCHAR(self):
            return self.getToken(CopyBookParser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(CopyBookParser.MINUSCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_plusMinus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusMinus" ):
                listener.enterPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusMinus" ):
                listener.exitPlusMinus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusMinus" ):
                return visitor.visitPlusMinus(self)
            else:
                return visitor.visitChildren(self)




    def plusMinus(self):

        localctx = CopyBookParser.PlusMinusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_plusMinus)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6490
            _la = self._input.LA(1)
            if not(_la==559 or _la==563):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6491
            self.multDivs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultDivsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powers(self):
            return self.getTypedRuleContext(CopyBookParser.PowersContext,0)


        def multDiv(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.MultDivContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.MultDivContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_multDivs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDivs" ):
                listener.enterMultDivs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDivs" ):
                listener.exitMultDivs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultDivs" ):
                return visitor.visitMultDivs(self)
            else:
                return visitor.visitChildren(self)




    def multDivs(self):

        localctx = CopyBookParser.MultDivsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_multDivs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6493
            self.powers()
            self.state = 6497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==539 or _la==566:
                self.state = 6494
                self.multDiv()
                self.state = 6499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultDivContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powers(self):
            return self.getTypedRuleContext(CopyBookParser.PowersContext,0)


        def ASTERISKCHAR(self):
            return self.getToken(CopyBookParser.ASTERISKCHAR, 0)

        def SLASHCHAR(self):
            return self.getToken(CopyBookParser.SLASHCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_multDiv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDiv" ):
                listener.enterMultDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDiv" ):
                listener.exitMultDiv(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultDiv" ):
                return visitor.visitMultDiv(self)
            else:
                return visitor.visitChildren(self)




    def multDiv(self):

        localctx = CopyBookParser.MultDivContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_multDiv)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6500
            _la = self._input.LA(1)
            if not(_la==539 or _la==566):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6501
            self.powers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basis(self):
            return self.getTypedRuleContext(CopyBookParser.BasisContext,0)


        def power(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.PowerContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.PowerContext,i)


        def PLUSCHAR(self):
            return self.getToken(CopyBookParser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(CopyBookParser.MINUSCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_powers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowers" ):
                listener.enterPowers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowers" ):
                listener.exitPowers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowers" ):
                return visitor.visitPowers(self)
            else:
                return visitor.visitChildren(self)




    def powers(self):

        localctx = CopyBookParser.PowersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_powers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==559 or _la==563:
                self.state = 6503
                _la = self._input.LA(1)
                if not(_la==559 or _la==563):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6506
            self.basis()
            self.state = 6510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==540:
                self.state = 6507
                self.power()
                self.state = 6512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEASTERISKCHAR(self):
            return self.getToken(CopyBookParser.DOUBLEASTERISKCHAR, 0)

        def basis(self):
            return self.getTypedRuleContext(CopyBookParser.BasisContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = CopyBookParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6513
            self.match(CopyBookParser.DOUBLEASTERISKCHAR)
            self.state = 6514
            self.basis()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def figurativeConstant(self):
            return self.getTypedRuleContext(CopyBookParser.FigurativeConstantContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_basis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasis" ):
                listener.enterBasis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasis" ):
                listener.exitBasis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasis" ):
                return visitor.visitBasis(self)
            else:
                return visitor.visitChildren(self)




    def basis(self):

        localctx = CopyBookParser.BasisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_basis)
        try:
            self.state = 6523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6516
                self.match(CopyBookParser.LPARENCHAR)
                self.state = 6517
                self.arithmeticExpression()
                self.state = 6518
                self.match(CopyBookParser.RPARENCHAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6520
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6521
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6522
                self.figurativeConstant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def combinableCondition(self):
            return self.getTypedRuleContext(CopyBookParser.CombinableConditionContext,0)


        def andOrCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AndOrConditionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AndOrConditionContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = CopyBookParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6525
            self.combinableCondition()
            self.state = 6529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1007,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6526
                    self.andOrCondition() 
                self.state = 6531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1007,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndOrConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(CopyBookParser.AND, 0)

        def OR(self):
            return self.getToken(CopyBookParser.OR, 0)

        def combinableCondition(self):
            return self.getTypedRuleContext(CopyBookParser.CombinableConditionContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def abbreviation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.AbbreviationContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.AbbreviationContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_andOrCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOrCondition" ):
                listener.enterAndOrCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOrCondition" ):
                listener.exitAndOrCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOrCondition" ):
                return visitor.visitAndOrCondition(self)
            else:
                return visitor.visitChildren(self)




    def andOrCondition(self):

        localctx = CopyBookParser.AndOrConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_andOrCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6532
            _la = self._input.LA(1)
            if not(_la==20 or _la==341):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
            if la_ == 1:
                self.state = 6533
                self.combinableCondition()
                pass

            elif la_ == 2:
                self.state = 6535 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6534
                        self.abbreviation()

                    else:
                        raise NoViableAltException(self)
                    self.state = 6537 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1008,self._ctx)

                pass

            elif la_ == 3:
                self.state = 6539
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CombinableConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCondition(self):
            return self.getTypedRuleContext(CopyBookParser.SimpleConditionContext,0)


        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_combinableCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombinableCondition" ):
                listener.enterCombinableCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombinableCondition" ):
                listener.exitCombinableCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCombinableCondition" ):
                return visitor.visitCombinableCondition(self)
            else:
                return visitor.visitChildren(self)




    def combinableCondition(self):

        localctx = CopyBookParser.CombinableConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_combinableCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==324:
                self.state = 6542
                self.match(CopyBookParser.NOT)


            self.state = 6545
            self.simpleCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def condition(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionContext,0)


        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def relationCondition(self):
            return self.getTypedRuleContext(CopyBookParser.RelationConditionContext,0)


        def classCondition(self):
            return self.getTypedRuleContext(CopyBookParser.ClassConditionContext,0)


        def conditionNameReference(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionNameReferenceContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_simpleCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCondition" ):
                listener.enterSimpleCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCondition" ):
                listener.exitSimpleCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCondition" ):
                return visitor.visitSimpleCondition(self)
            else:
                return visitor.visitChildren(self)




    def simpleCondition(self):

        localctx = CopyBookParser.SimpleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_simpleCondition)
        try:
            self.state = 6554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1011,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6547
                self.match(CopyBookParser.LPARENCHAR)
                self.state = 6548
                self.condition()
                self.state = 6549
                self.match(CopyBookParser.RPARENCHAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6551
                self.relationCondition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6552
                self.classCondition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6553
                self.conditionNameReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def NUMERIC(self):
            return self.getToken(CopyBookParser.NUMERIC, 0)

        def ALPHABETIC(self):
            return self.getToken(CopyBookParser.ALPHABETIC, 0)

        def ALPHABETIC_LOWER(self):
            return self.getToken(CopyBookParser.ALPHABETIC_LOWER, 0)

        def ALPHABETIC_UPPER(self):
            return self.getToken(CopyBookParser.ALPHABETIC_UPPER, 0)

        def DBCS(self):
            return self.getToken(CopyBookParser.DBCS, 0)

        def KANJI(self):
            return self.getToken(CopyBookParser.KANJI, 0)

        def className(self):
            return self.getTypedRuleContext(CopyBookParser.ClassNameContext,0)


        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_classCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCondition" ):
                listener.enterClassCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCondition" ):
                listener.exitClassCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassCondition" ):
                return visitor.visitClassCondition(self)
            else:
                return visitor.visitChildren(self)




    def classCondition(self):

        localctx = CopyBookParser.ClassConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_classCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6556
            self.identifier()
            self.state = 6558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 6557
                self.match(CopyBookParser.IS)


            self.state = 6561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==324:
                self.state = 6560
                self.match(CopyBookParser.NOT)


            self.state = 6570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1014,self._ctx)
            if la_ == 1:
                self.state = 6563
                self.match(CopyBookParser.NUMERIC)
                pass

            elif la_ == 2:
                self.state = 6564
                self.match(CopyBookParser.ALPHABETIC)
                pass

            elif la_ == 3:
                self.state = 6565
                self.match(CopyBookParser.ALPHABETIC_LOWER)
                pass

            elif la_ == 4:
                self.state = 6566
                self.match(CopyBookParser.ALPHABETIC_UPPER)
                pass

            elif la_ == 5:
                self.state = 6567
                self.match(CopyBookParser.DBCS)
                pass

            elif la_ == 6:
                self.state = 6568
                self.match(CopyBookParser.KANJI)
                pass

            elif la_ == 7:
                self.state = 6569
                self.className()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionName(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionNameContext,0)


        def inData(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InDataContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InDataContext,i)


        def inFile(self):
            return self.getTypedRuleContext(CopyBookParser.InFileContext,0)


        def conditionNameSubscriptReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ConditionNameSubscriptReferenceContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ConditionNameSubscriptReferenceContext,i)


        def inMnemonic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.InMnemonicContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.InMnemonicContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_conditionNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionNameReference" ):
                listener.enterConditionNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionNameReference" ):
                listener.exitConditionNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionNameReference" ):
                return visitor.visitConditionNameReference(self)
            else:
                return visitor.visitChildren(self)




    def conditionNameReference(self):

        localctx = CopyBookParser.ConditionNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_conditionNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6572
            self.conditionName()
            self.state = 6594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1019,self._ctx)
            if la_ == 1:
                self.state = 6576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1015,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6573
                        self.inData() 
                    self.state = 6578
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1015,self._ctx)

                self.state = 6580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1016,self._ctx)
                if la_ == 1:
                    self.state = 6579
                    self.inFile()


                self.state = 6585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1017,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6582
                        self.conditionNameSubscriptReference() 
                    self.state = 6587
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1017,self._ctx)

                pass

            elif la_ == 2:
                self.state = 6591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1018,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6588
                        self.inMnemonic() 
                    self.state = 6593
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1018,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionNameSubscriptReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.Subscript_Context)
            else:
                return self.getTypedRuleContext(CopyBookParser.Subscript_Context,i)


        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMMACHAR)
            else:
                return self.getToken(CopyBookParser.COMMACHAR, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_conditionNameSubscriptReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionNameSubscriptReference" ):
                listener.enterConditionNameSubscriptReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionNameSubscriptReference" ):
                listener.exitConditionNameSubscriptReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionNameSubscriptReference" ):
                return visitor.visitConditionNameSubscriptReference(self)
            else:
                return visitor.visitChildren(self)




    def conditionNameSubscriptReference(self):

        localctx = CopyBookParser.ConditionNameSubscriptReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_conditionNameSubscriptReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6596
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 6597
            self.subscript_()
            self.state = 6604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9059977692598273) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079230399294447103) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 507780864428564537) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430472157) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2217216737293639) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                self.state = 6599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1020,self._ctx)
                if la_ == 1:
                    self.state = 6598
                    self.match(CopyBookParser.COMMACHAR)


                self.state = 6601
                self.subscript_()
                self.state = 6606
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6607
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationSignCondition(self):
            return self.getTypedRuleContext(CopyBookParser.RelationSignConditionContext,0)


        def relationArithmeticComparison(self):
            return self.getTypedRuleContext(CopyBookParser.RelationArithmeticComparisonContext,0)


        def relationCombinedComparison(self):
            return self.getTypedRuleContext(CopyBookParser.RelationCombinedComparisonContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_relationCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationCondition" ):
                listener.enterRelationCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationCondition" ):
                listener.exitRelationCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationCondition" ):
                return visitor.visitRelationCondition(self)
            else:
                return visitor.visitChildren(self)




    def relationCondition(self):

        localctx = CopyBookParser.RelationConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_relationCondition)
        try:
            self.state = 6612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1022,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6609
                self.relationSignCondition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6610
                self.relationArithmeticComparison()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6611
                self.relationCombinedComparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationSignConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def POSITIVE(self):
            return self.getToken(CopyBookParser.POSITIVE, 0)

        def NEGATIVE(self):
            return self.getToken(CopyBookParser.NEGATIVE, 0)

        def ZERO(self):
            return self.getToken(CopyBookParser.ZERO, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_relationSignCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationSignCondition" ):
                listener.enterRelationSignCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationSignCondition" ):
                listener.exitRelationSignCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationSignCondition" ):
                return visitor.visitRelationSignCondition(self)
            else:
                return visitor.visitChildren(self)




    def relationSignCondition(self):

        localctx = CopyBookParser.RelationSignConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_relationSignCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6614
            self.arithmeticExpression()
            self.state = 6616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 6615
                self.match(CopyBookParser.IS)


            self.state = 6619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==324:
                self.state = 6618
                self.match(CopyBookParser.NOT)


            self.state = 6621
            _la = self._input.LA(1)
            if not(_la==318 or _la==363 or _la==534):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationArithmeticComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ArithmeticExpressionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,i)


        def relationalOperator(self):
            return self.getTypedRuleContext(CopyBookParser.RelationalOperatorContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_relationArithmeticComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationArithmeticComparison" ):
                listener.enterRelationArithmeticComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationArithmeticComparison" ):
                listener.exitRelationArithmeticComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationArithmeticComparison" ):
                return visitor.visitRelationArithmeticComparison(self)
            else:
                return visitor.visitChildren(self)




    def relationArithmeticComparison(self):

        localctx = CopyBookParser.RelationArithmeticComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_relationArithmeticComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6623
            self.arithmeticExpression()
            self.state = 6624
            self.relationalOperator()
            self.state = 6625
            self.arithmeticExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationCombinedComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def relationalOperator(self):
            return self.getTypedRuleContext(CopyBookParser.RelationalOperatorContext,0)


        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def relationCombinedCondition(self):
            return self.getTypedRuleContext(CopyBookParser.RelationCombinedConditionContext,0)


        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_relationCombinedComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationCombinedComparison" ):
                listener.enterRelationCombinedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationCombinedComparison" ):
                listener.exitRelationCombinedComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationCombinedComparison" ):
                return visitor.visitRelationCombinedComparison(self)
            else:
                return visitor.visitChildren(self)




    def relationCombinedComparison(self):

        localctx = CopyBookParser.RelationCombinedComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_relationCombinedComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6627
            self.arithmeticExpression()
            self.state = 6628
            self.relationalOperator()
            self.state = 6629
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 6630
            self.relationCombinedCondition()
            self.state = 6631
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationCombinedConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ArithmeticExpressionContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.AND)
            else:
                return self.getToken(CopyBookParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.OR)
            else:
                return self.getToken(CopyBookParser.OR, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_relationCombinedCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationCombinedCondition" ):
                listener.enterRelationCombinedCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationCombinedCondition" ):
                listener.exitRelationCombinedCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationCombinedCondition" ):
                return visitor.visitRelationCombinedCondition(self)
            else:
                return visitor.visitChildren(self)




    def relationCombinedCondition(self):

        localctx = CopyBookParser.RelationCombinedConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_relationCombinedCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6633
            self.arithmeticExpression()
            self.state = 6636 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6634
                _la = self._input.LA(1)
                if not(_la==20 or _la==341):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6635
                self.arithmeticExpression()
                self.state = 6638 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==20 or _la==341):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTEQUALCHAR(self):
            return self.getToken(CopyBookParser.NOTEQUALCHAR, 0)

        def GREATER(self):
            return self.getToken(CopyBookParser.GREATER, 0)

        def OR(self):
            return self.getToken(CopyBookParser.OR, 0)

        def EQUAL(self):
            return self.getToken(CopyBookParser.EQUAL, 0)

        def MORETHANOREQUAL(self):
            return self.getToken(CopyBookParser.MORETHANOREQUAL, 0)

        def LESS(self):
            return self.getToken(CopyBookParser.LESS, 0)

        def LESSTHANOREQUAL(self):
            return self.getToken(CopyBookParser.LESSTHANOREQUAL, 0)

        def IS(self):
            return self.getToken(CopyBookParser.IS, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def MORETHANCHAR(self):
            return self.getToken(CopyBookParser.MORETHANCHAR, 0)

        def LESSTHANCHAR(self):
            return self.getToken(CopyBookParser.LESSTHANCHAR, 0)

        def EQUALCHAR(self):
            return self.getToken(CopyBookParser.EQUALCHAR, 0)

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def THAN(self):
            return self.getToken(CopyBookParser.THAN, 0)

        def TO(self):
            return self.getToken(CopyBookParser.TO, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_relationalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalOperator" ):
                listener.enterRelationalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalOperator" ):
                listener.exitRelationalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalOperator" ):
                return visitor.visitRelationalOperator(self)
            else:
                return visitor.visitChildren(self)




    def relationalOperator(self):

        localctx = CopyBookParser.RelationalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_relationalOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==261:
                self.state = 6640
                _la = self._input.LA(1)
                if not(_la==22 or _la==261):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1036,self._ctx)
            if la_ == 1:
                self.state = 6644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==324:
                    self.state = 6643
                    self.match(CopyBookParser.NOT)


                self.state = 6661
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [231]:
                    self.state = 6646
                    self.match(CopyBookParser.GREATER)
                    self.state = 6648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==491:
                        self.state = 6647
                        self.match(CopyBookParser.THAN)


                    pass
                elif token in [560]:
                    self.state = 6650
                    self.match(CopyBookParser.MORETHANCHAR)
                    pass
                elif token in [281]:
                    self.state = 6651
                    self.match(CopyBookParser.LESS)
                    self.state = 6653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==491:
                        self.state = 6652
                        self.match(CopyBookParser.THAN)


                    pass
                elif token in [556]:
                    self.state = 6655
                    self.match(CopyBookParser.LESSTHANCHAR)
                    pass
                elif token in [192]:
                    self.state = 6656
                    self.match(CopyBookParser.EQUAL)
                    self.state = 6658
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1030,self._ctx)
                    if la_ == 1:
                        self.state = 6657
                        self.match(CopyBookParser.TO)


                    pass
                elif token in [552]:
                    self.state = 6660
                    self.match(CopyBookParser.EQUALCHAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 6663
                self.match(CopyBookParser.NOTEQUALCHAR)
                pass

            elif la_ == 3:
                self.state = 6664
                self.match(CopyBookParser.GREATER)
                self.state = 6666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==491:
                    self.state = 6665
                    self.match(CopyBookParser.THAN)


                self.state = 6668
                self.match(CopyBookParser.OR)
                self.state = 6669
                self.match(CopyBookParser.EQUAL)
                self.state = 6671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1033,self._ctx)
                if la_ == 1:
                    self.state = 6670
                    self.match(CopyBookParser.TO)


                pass

            elif la_ == 4:
                self.state = 6673
                self.match(CopyBookParser.MORETHANOREQUAL)
                pass

            elif la_ == 5:
                self.state = 6674
                self.match(CopyBookParser.LESS)
                self.state = 6676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==491:
                    self.state = 6675
                    self.match(CopyBookParser.THAN)


                self.state = 6678
                self.match(CopyBookParser.OR)
                self.state = 6679
                self.match(CopyBookParser.EQUAL)
                self.state = 6681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1035,self._ctx)
                if la_ == 1:
                    self.state = 6680
                    self.match(CopyBookParser.TO)


                pass

            elif la_ == 6:
                self.state = 6683
                self.match(CopyBookParser.LESSTHANOREQUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbbreviationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def abbreviation(self):
            return self.getTypedRuleContext(CopyBookParser.AbbreviationContext,0)


        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def NOT(self):
            return self.getToken(CopyBookParser.NOT, 0)

        def relationalOperator(self):
            return self.getTypedRuleContext(CopyBookParser.RelationalOperatorContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_abbreviation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbbreviation" ):
                listener.enterAbbreviation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbbreviation" ):
                listener.exitAbbreviation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbbreviation" ):
                return visitor.visitAbbreviation(self)
            else:
                return visitor.visitChildren(self)




    def abbreviation(self):

        localctx = CopyBookParser.AbbreviationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_abbreviation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1037,self._ctx)
            if la_ == 1:
                self.state = 6686
                self.match(CopyBookParser.NOT)


            self.state = 6690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
            if la_ == 1:
                self.state = 6689
                self.relationalOperator()


            self.state = 6698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1039,self._ctx)
            if la_ == 1:
                self.state = 6692
                self.arithmeticExpression()
                pass

            elif la_ == 2:
                self.state = 6693
                self.match(CopyBookParser.LPARENCHAR)
                self.state = 6694
                self.arithmeticExpression()
                self.state = 6695
                self.abbreviation()
                self.state = 6696
                self.match(CopyBookParser.RPARENCHAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def tableCall(self):
            return self.getTypedRuleContext(CopyBookParser.TableCallContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(CopyBookParser.FunctionCallContext,0)


        def specialRegister(self):
            return self.getTypedRuleContext(CopyBookParser.SpecialRegisterContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = CopyBookParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_identifier)
        try:
            self.state = 6704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6700
                self.qualifiedDataName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6701
                self.tableCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6702
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6703
                self.specialRegister()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def LPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LPARENCHAR)
            else:
                return self.getToken(CopyBookParser.LPARENCHAR, i)

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.Subscript_Context)
            else:
                return self.getTypedRuleContext(CopyBookParser.Subscript_Context,i)


        def RPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.RPARENCHAR)
            else:
                return self.getToken(CopyBookParser.RPARENCHAR, i)

        def referenceModifier(self):
            return self.getTypedRuleContext(CopyBookParser.ReferenceModifierContext,0)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMMACHAR)
            else:
                return self.getToken(CopyBookParser.COMMACHAR, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_tableCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableCall" ):
                listener.enterTableCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableCall" ):
                listener.exitTableCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableCall" ):
                return visitor.visitTableCall(self)
            else:
                return visitor.visitChildren(self)




    def tableCall(self):

        localctx = CopyBookParser.TableCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_tableCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6706
            self.qualifiedDataName()
            self.state = 6722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1043,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6707
                    self.match(CopyBookParser.LPARENCHAR)
                    self.state = 6708
                    self.subscript_()
                    self.state = 6715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9059977692598273) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079230399294447103) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 507780864428564537) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430472157) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2217216737293639) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                        self.state = 6710
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1041,self._ctx)
                        if la_ == 1:
                            self.state = 6709
                            self.match(CopyBookParser.COMMACHAR)


                        self.state = 6712
                        self.subscript_()
                        self.state = 6717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6718
                    self.match(CopyBookParser.RPARENCHAR) 
                self.state = 6724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1043,self._ctx)

            self.state = 6726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1044,self._ctx)
            if la_ == 1:
                self.state = 6725
                self.referenceModifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(CopyBookParser.FUNCTION, 0)

        def functionName(self):
            return self.getTypedRuleContext(CopyBookParser.FunctionNameContext,0)


        def LPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.LPARENCHAR)
            else:
                return self.getToken(CopyBookParser.LPARENCHAR, i)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.ArgumentContext,i)


        def RPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.RPARENCHAR)
            else:
                return self.getToken(CopyBookParser.RPARENCHAR, i)

        def referenceModifier(self):
            return self.getTypedRuleContext(CopyBookParser.ReferenceModifierContext,0)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMMACHAR)
            else:
                return self.getToken(CopyBookParser.COMMACHAR, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = CopyBookParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6728
            self.match(CopyBookParser.FUNCTION)
            self.state = 6729
            self.functionName()
            self.state = 6745
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6730
                    self.match(CopyBookParser.LPARENCHAR)
                    self.state = 6731
                    self.argument()
                    self.state = 6738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9059977692598273) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079230399294447103) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 507780864428564537) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430472157) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2217216737293639) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                        self.state = 6733
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1045,self._ctx)
                        if la_ == 1:
                            self.state = 6732
                            self.match(CopyBookParser.COMMACHAR)


                        self.state = 6735
                        self.argument()
                        self.state = 6740
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6741
                    self.match(CopyBookParser.RPARENCHAR) 
                self.state = 6747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)

            self.state = 6749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
            if la_ == 1:
                self.state = 6748
                self.referenceModifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def characterPosition(self):
            return self.getTypedRuleContext(CopyBookParser.CharacterPositionContext,0)


        def COLONCHAR(self):
            return self.getToken(CopyBookParser.COLONCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def length(self):
            return self.getTypedRuleContext(CopyBookParser.LengthContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_referenceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceModifier" ):
                listener.enterReferenceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceModifier" ):
                listener.exitReferenceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceModifier" ):
                return visitor.visitReferenceModifier(self)
            else:
                return visitor.visitChildren(self)




    def referenceModifier(self):

        localctx = CopyBookParser.ReferenceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_referenceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6751
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 6752
            self.characterPosition()
            self.state = 6753
            self.match(CopyBookParser.COLONCHAR)
            self.state = 6755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & 4630896727539286527) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 4432673528833) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9059977692598273) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & -9079230399294447103) != 0) or ((((_la - 322)) & ~0x3f) == 0 and ((1 << (_la - 322)) & 507780864428564537) != 0) or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 6947932741963874307) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & 72696208430472157) != 0) or ((((_la - 524)) & ~0x3f) == 0 and ((1 << (_la - 524)) & 2217216737293639) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36028766417321983) != 0):
                self.state = 6754
                self.length()


            self.state = 6757
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_characterPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterPosition" ):
                listener.enterCharacterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterPosition" ):
                listener.exitCharacterPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacterPosition" ):
                return visitor.visitCharacterPosition(self)
            else:
                return visitor.visitChildren(self)




    def characterPosition(self):

        localctx = CopyBookParser.CharacterPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_characterPosition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6759
            self.arithmeticExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLength" ):
                return visitor.visitLength(self)
            else:
                return visitor.visitChildren(self)




    def length(self):

        localctx = CopyBookParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6761
            self.arithmeticExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def indexName(self):
            return self.getTypedRuleContext(CopyBookParser.IndexNameContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = CopyBookParser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_subscript_)
        try:
            self.state = 6774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1052,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6763
                self.match(CopyBookParser.ALL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6764
                self.integerLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6765
                self.qualifiedDataName()
                self.state = 6767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                if la_ == 1:
                    self.state = 6766
                    self.integerLiteral()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6769
                self.indexName()
                self.state = 6771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                if la_ == 1:
                    self.state = 6770
                    self.integerLiteral()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6773
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def indexName(self):
            return self.getTypedRuleContext(CopyBookParser.IndexNameContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(CopyBookParser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = CopyBookParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_argument)
        try:
            self.state = 6787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1055,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6776
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6777
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6778
                self.qualifiedDataName()
                self.state = 6780
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1053,self._ctx)
                if la_ == 1:
                    self.state = 6779
                    self.integerLiteral()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6782
                self.indexName()
                self.state = 6784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
                if la_ == 1:
                    self.state = 6783
                    self.integerLiteral()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6786
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedDataNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataNameFormat1(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameFormat1Context,0)


        def qualifiedDataNameFormat2(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameFormat2Context,0)


        def qualifiedDataNameFormat3(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameFormat3Context,0)


        def qualifiedDataNameFormat4(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameFormat4Context,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_qualifiedDataName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedDataName" ):
                listener.enterQualifiedDataName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedDataName" ):
                listener.exitQualifiedDataName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedDataName" ):
                return visitor.visitQualifiedDataName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataName(self):

        localctx = CopyBookParser.QualifiedDataNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_qualifiedDataName)
        try:
            self.state = 6793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6789
                self.qualifiedDataNameFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6790
                self.qualifiedDataNameFormat2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6791
                self.qualifiedDataNameFormat3()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6792
                self.qualifiedDataNameFormat4()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedDataNameFormat1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def conditionName(self):
            return self.getTypedRuleContext(CopyBookParser.ConditionNameContext,0)


        def inFile(self):
            return self.getTypedRuleContext(CopyBookParser.InFileContext,0)


        def qualifiedInData(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CopyBookParser.QualifiedInDataContext)
            else:
                return self.getTypedRuleContext(CopyBookParser.QualifiedInDataContext,i)


        def getRuleIndex(self):
            return CopyBookParser.RULE_qualifiedDataNameFormat1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedDataNameFormat1" ):
                listener.enterQualifiedDataNameFormat1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedDataNameFormat1" ):
                listener.exitQualifiedDataNameFormat1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedDataNameFormat1" ):
                return visitor.visitQualifiedDataNameFormat1(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat1(self):

        localctx = CopyBookParser.QualifiedDataNameFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_qualifiedDataNameFormat1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
            if la_ == 1:
                self.state = 6795
                self.dataName()
                pass

            elif la_ == 2:
                self.state = 6796
                self.conditionName()
                pass


            self.state = 6808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1060,self._ctx)
            if la_ == 1:
                self.state = 6800 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6799
                        self.qualifiedInData()

                    else:
                        raise NoViableAltException(self)
                    self.state = 6802 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1058,self._ctx)

                self.state = 6805
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1059,self._ctx)
                if la_ == 1:
                    self.state = 6804
                    self.inFile()



            elif la_ == 2:
                self.state = 6807
                self.inFile()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedDataNameFormat2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paragraphName(self):
            return self.getTypedRuleContext(CopyBookParser.ParagraphNameContext,0)


        def inSection(self):
            return self.getTypedRuleContext(CopyBookParser.InSectionContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_qualifiedDataNameFormat2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedDataNameFormat2" ):
                listener.enterQualifiedDataNameFormat2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedDataNameFormat2" ):
                listener.exitQualifiedDataNameFormat2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedDataNameFormat2" ):
                return visitor.visitQualifiedDataNameFormat2(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat2(self):

        localctx = CopyBookParser.QualifiedDataNameFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_qualifiedDataNameFormat2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6810
            self.paragraphName()
            self.state = 6811
            self.inSection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedDataNameFormat3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textName(self):
            return self.getTypedRuleContext(CopyBookParser.TextNameContext,0)


        def inLibrary(self):
            return self.getTypedRuleContext(CopyBookParser.InLibraryContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_qualifiedDataNameFormat3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedDataNameFormat3" ):
                listener.enterQualifiedDataNameFormat3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedDataNameFormat3" ):
                listener.exitQualifiedDataNameFormat3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedDataNameFormat3" ):
                return visitor.visitQualifiedDataNameFormat3(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat3(self):

        localctx = CopyBookParser.QualifiedDataNameFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_qualifiedDataNameFormat3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6813
            self.textName()
            self.state = 6814
            self.inLibrary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedDataNameFormat4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINAGE_COUNTER(self):
            return self.getToken(CopyBookParser.LINAGE_COUNTER, 0)

        def inFile(self):
            return self.getTypedRuleContext(CopyBookParser.InFileContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_qualifiedDataNameFormat4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedDataNameFormat4" ):
                listener.enterQualifiedDataNameFormat4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedDataNameFormat4" ):
                listener.exitQualifiedDataNameFormat4(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedDataNameFormat4" ):
                return visitor.visitQualifiedDataNameFormat4(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat4(self):

        localctx = CopyBookParser.QualifiedDataNameFormat4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_qualifiedDataNameFormat4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6816
            self.match(CopyBookParser.LINAGE_COUNTER)
            self.state = 6817
            self.inFile()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedInDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inData(self):
            return self.getTypedRuleContext(CopyBookParser.InDataContext,0)


        def inTable(self):
            return self.getTypedRuleContext(CopyBookParser.InTableContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_qualifiedInData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedInData" ):
                listener.enterQualifiedInData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedInData" ):
                listener.exitQualifiedInData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedInData" ):
                return visitor.visitQualifiedInData(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedInData(self):

        localctx = CopyBookParser.QualifiedInDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_qualifiedInData)
        try:
            self.state = 6821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1061,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6819
                self.inData()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6820
                self.inTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_inData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInData" ):
                listener.enterInData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInData" ):
                listener.exitInData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInData" ):
                return visitor.visitInData(self)
            else:
                return visitor.visitChildren(self)




    def inData(self):

        localctx = CopyBookParser.InDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_inData)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6823
            _la = self._input.LA(1)
            if not(_la==246 or _la==335):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6824
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(CopyBookParser.FileNameContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_inFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInFile" ):
                listener.enterInFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInFile" ):
                listener.exitInFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInFile" ):
                return visitor.visitInFile(self)
            else:
                return visitor.visitChildren(self)




    def inFile(self):

        localctx = CopyBookParser.InFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_inFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6826
            _la = self._input.LA(1)
            if not(_la==246 or _la==335):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6827
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InMnemonicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mnemonicName(self):
            return self.getTypedRuleContext(CopyBookParser.MnemonicNameContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_inMnemonic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInMnemonic" ):
                listener.enterInMnemonic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInMnemonic" ):
                listener.exitInMnemonic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInMnemonic" ):
                return visitor.visitInMnemonic(self)
            else:
                return visitor.visitChildren(self)




    def inMnemonic(self):

        localctx = CopyBookParser.InMnemonicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_inMnemonic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6829
            _la = self._input.LA(1)
            if not(_la==246 or _la==335):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6830
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sectionName(self):
            return self.getTypedRuleContext(CopyBookParser.SectionNameContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_inSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSection" ):
                listener.enterInSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSection" ):
                listener.exitInSection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSection" ):
                return visitor.visitInSection(self)
            else:
                return visitor.visitChildren(self)




    def inSection(self):

        localctx = CopyBookParser.InSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_inSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6832
            _la = self._input.LA(1)
            if not(_la==246 or _la==335):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6833
            self.sectionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InLibraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libraryName(self):
            return self.getTypedRuleContext(CopyBookParser.LibraryNameContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_inLibrary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInLibrary" ):
                listener.enterInLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInLibrary" ):
                listener.exitInLibrary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInLibrary" ):
                return visitor.visitInLibrary(self)
            else:
                return visitor.visitChildren(self)




    def inLibrary(self):

        localctx = CopyBookParser.InLibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_inLibrary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6835
            _la = self._input.LA(1)
            if not(_la==246 or _la==335):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6836
            self.libraryName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableCall(self):
            return self.getTypedRuleContext(CopyBookParser.TableCallContext,0)


        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_inTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInTable" ):
                listener.enterInTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInTable" ):
                listener.exitInTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInTable" ):
                return visitor.visitInTable(self)
            else:
                return visitor.visitChildren(self)




    def inTable(self):

        localctx = CopyBookParser.InTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_inTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6838
            _la = self._input.LA(1)
            if not(_la==246 or _la==335):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6839
            self.tableCall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlphabetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_alphabetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlphabetName" ):
                listener.enterAlphabetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlphabetName" ):
                listener.exitAlphabetName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlphabetName" ):
                return visitor.visitAlphabetName(self)
            else:
                return visitor.visitChildren(self)




    def alphabetName(self):

        localctx = CopyBookParser.AlphabetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_alphabetName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6841
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(CopyBookParser.SystemNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_assignmentName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentName" ):
                listener.enterAssignmentName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentName" ):
                listener.exitAssignmentName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentName" ):
                return visitor.visitAssignmentName(self)
            else:
                return visitor.visitChildren(self)




    def assignmentName(self):

        localctx = CopyBookParser.AssignmentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_assignmentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6843
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasisNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def programName(self):
            return self.getTypedRuleContext(CopyBookParser.ProgramNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_basisName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasisName" ):
                listener.enterBasisName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasisName" ):
                listener.exitBasisName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasisName" ):
                return visitor.visitBasisName(self)
            else:
                return visitor.visitChildren(self)




    def basisName(self):

        localctx = CopyBookParser.BasisNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_basisName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6845
            self.programName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CdNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_cdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCdName" ):
                listener.enterCdName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCdName" ):
                listener.exitCdName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCdName" ):
                return visitor.visitCdName(self)
            else:
                return visitor.visitChildren(self)




    def cdName(self):

        localctx = CopyBookParser.CdNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1222, self.RULE_cdName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6847
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_className

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassName" ):
                listener.enterClassName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassName" ):
                listener.exitClassName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassName" ):
                return visitor.visitClassName(self)
            else:
                return visitor.visitChildren(self)




    def className(self):

        localctx = CopyBookParser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1224, self.RULE_className)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6849
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComputerNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(CopyBookParser.SystemNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_computerName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputerName" ):
                listener.enterComputerName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputerName" ):
                listener.exitComputerName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComputerName" ):
                return visitor.visitComputerName(self)
            else:
                return visitor.visitChildren(self)




    def computerName(self):

        localctx = CopyBookParser.ComputerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1226, self.RULE_computerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6851
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_conditionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionName" ):
                listener.enterConditionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionName" ):
                listener.exitConditionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionName" ):
                return visitor.visitConditionName(self)
            else:
                return visitor.visitChildren(self)




    def conditionName(self):

        localctx = CopyBookParser.ConditionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1228, self.RULE_conditionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6853
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataName" ):
                listener.enterDataName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataName" ):
                listener.exitDataName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataName" ):
                return visitor.visitDataName(self)
            else:
                return visitor.visitChildren(self)




    def dataName(self):

        localctx = CopyBookParser.DataNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1230, self.RULE_dataName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6855
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataDescNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILLER(self):
            return self.getToken(CopyBookParser.FILLER, 0)

        def CURSOR(self):
            return self.getToken(CopyBookParser.CURSOR, 0)

        def dataName(self):
            return self.getTypedRuleContext(CopyBookParser.DataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_dataDescName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataDescName" ):
                listener.enterDataDescName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataDescName" ):
                listener.exitDataDescName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataDescName" ):
                return visitor.visitDataDescName(self)
            else:
                return visitor.visitChildren(self)




    def dataDescName(self):

        localctx = CopyBookParser.DataDescNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1232, self.RULE_dataDescName)
        try:
            self.state = 6860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6857
                self.match(CopyBookParser.FILLER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6858
                self.match(CopyBookParser.CURSOR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6859
                self.dataName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(CopyBookParser.SystemNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_environmentName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironmentName" ):
                listener.enterEnvironmentName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironmentName" ):
                listener.exitEnvironmentName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnvironmentName" ):
                return visitor.visitEnvironmentName(self)
            else:
                return visitor.visitChildren(self)




    def environmentName(self):

        localctx = CopyBookParser.EnvironmentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1234, self.RULE_environmentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6862
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_fileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileName" ):
                listener.enterFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileName" ):
                listener.exitFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileName" ):
                return visitor.visitFileName(self)
            else:
                return visitor.visitChildren(self)




    def fileName(self):

        localctx = CopyBookParser.FileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1236, self.RULE_fileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6864
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(CopyBookParser.INTEGER, 0)

        def LENGTH(self):
            return self.getToken(CopyBookParser.LENGTH, 0)

        def RANDOM(self):
            return self.getToken(CopyBookParser.RANDOM, 0)

        def SUM(self):
            return self.getToken(CopyBookParser.SUM, 0)

        def WHEN_COMPILED(self):
            return self.getToken(CopyBookParser.WHEN_COMPILED, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = CopyBookParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1238, self.RULE_functionName)
        try:
            self.state = 6872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1063,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6866
                self.match(CopyBookParser.INTEGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6867
                self.match(CopyBookParser.LENGTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6868
                self.match(CopyBookParser.RANDOM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6869
                self.match(CopyBookParser.SUM)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6870
                self.match(CopyBookParser.WHEN_COMPILED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6871
                self.cobolWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_indexName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexName" ):
                listener.enterIndexName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexName" ):
                listener.exitIndexName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexName" ):
                return visitor.visitIndexName(self)
            else:
                return visitor.visitChildren(self)




    def indexName(self):

        localctx = CopyBookParser.IndexNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1240, self.RULE_indexName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6874
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(CopyBookParser.SystemNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_languageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguageName" ):
                listener.enterLanguageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguageName" ):
                listener.exitLanguageName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLanguageName" ):
                return visitor.visitLanguageName(self)
            else:
                return visitor.visitChildren(self)




    def languageName(self):

        localctx = CopyBookParser.LanguageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1242, self.RULE_languageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6876
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_libraryName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryName" ):
                listener.enterLibraryName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryName" ):
                listener.exitLibraryName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryName" ):
                return visitor.visitLibraryName(self)
            else:
                return visitor.visitChildren(self)




    def libraryName(self):

        localctx = CopyBookParser.LibraryNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1244, self.RULE_libraryName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6878
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_localName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalName" ):
                listener.enterLocalName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalName" ):
                listener.exitLocalName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalName" ):
                return visitor.visitLocalName(self)
            else:
                return visitor.visitChildren(self)




    def localName(self):

        localctx = CopyBookParser.LocalNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1246, self.RULE_localName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6880
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MnemonicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_mnemonicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMnemonicName" ):
                listener.enterMnemonicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMnemonicName" ):
                listener.exitMnemonicName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMnemonicName" ):
                return visitor.visitMnemonicName(self)
            else:
                return visitor.visitChildren(self)




    def mnemonicName(self):

        localctx = CopyBookParser.MnemonicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1248, self.RULE_mnemonicName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6882
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParagraphNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_paragraphName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParagraphName" ):
                listener.enterParagraphName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParagraphName" ):
                listener.exitParagraphName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParagraphName" ):
                return visitor.visitParagraphName(self)
            else:
                return visitor.visitChildren(self)




    def paragraphName(self):

        localctx = CopyBookParser.ParagraphNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1250, self.RULE_paragraphName)
        try:
            self.state = 6886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6884
                self.cobolWord()
                pass
            elif token in [570, 571, 572, 573]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6885
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paragraphName(self):
            return self.getTypedRuleContext(CopyBookParser.ParagraphNameContext,0)


        def inSection(self):
            return self.getTypedRuleContext(CopyBookParser.InSectionContext,0)


        def sectionName(self):
            return self.getTypedRuleContext(CopyBookParser.SectionNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureName" ):
                return visitor.visitProcedureName(self)
            else:
                return visitor.visitChildren(self)




    def procedureName(self):

        localctx = CopyBookParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1252, self.RULE_procedureName)
        try:
            self.state = 6893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1066,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6888
                self.paragraphName()
                self.state = 6890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1065,self._ctx)
                if la_ == 1:
                    self.state = 6889
                    self.inSection()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6892
                self.sectionName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONNUMERICLITERAL(self):
            return self.getToken(CopyBookParser.NONNUMERICLITERAL, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_programName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramName" ):
                listener.enterProgramName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramName" ):
                listener.exitProgramName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramName" ):
                return visitor.visitProgramName(self)
            else:
                return visitor.visitChildren(self)




    def programName(self):

        localctx = CopyBookParser.ProgramNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1254, self.RULE_programName)
        try:
            self.state = 6897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [569]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6895
                self.match(CopyBookParser.NONNUMERICLITERAL)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6896
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_recordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordName" ):
                listener.enterRecordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordName" ):
                listener.exitRecordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordName" ):
                return visitor.visitRecordName(self)
            else:
                return visitor.visitChildren(self)




    def recordName(self):

        localctx = CopyBookParser.RecordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1256, self.RULE_recordName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6899
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(CopyBookParser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_reportName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportName" ):
                listener.enterReportName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportName" ):
                listener.exitReportName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportName" ):
                return visitor.visitReportName(self)
            else:
                return visitor.visitChildren(self)




    def reportName(self):

        localctx = CopyBookParser.ReportNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1258, self.RULE_reportName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6901
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_routineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineName" ):
                listener.enterRoutineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineName" ):
                listener.exitRoutineName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineName" ):
                return visitor.visitRoutineName(self)
            else:
                return visitor.visitChildren(self)




    def routineName(self):

        localctx = CopyBookParser.RoutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1260, self.RULE_routineName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6903
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScreenNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_screenName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScreenName" ):
                listener.enterScreenName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScreenName" ):
                listener.exitScreenName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScreenName" ):
                return visitor.visitScreenName(self)
            else:
                return visitor.visitChildren(self)




    def screenName(self):

        localctx = CopyBookParser.ScreenNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1262, self.RULE_screenName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6905
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_sectionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSectionName" ):
                listener.enterSectionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSectionName" ):
                listener.exitSectionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSectionName" ):
                return visitor.visitSectionName(self)
            else:
                return visitor.visitChildren(self)




    def sectionName(self):

        localctx = CopyBookParser.SectionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1264, self.RULE_sectionName)
        try:
            self.state = 6909
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 28, 32, 33, 34, 48, 52, 56, 64, 100, 110, 111, 112, 119, 135, 142, 193, 205, 207, 210, 212, 221, 222, 246, 258, 271, 272, 279, 292, 293, 315, 322, 327, 335, 336, 338, 354, 372, 373, 378, 379, 386, 387, 406, 415, 420, 428, 436, 437, 439, 440, 451, 460, 462, 469, 483, 487, 489, 490, 493, 497, 500, 507, 524, 525, 530, 532, 542, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6907
                self.cobolWord()
                pass
            elif token in [570, 571, 572, 573]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6908
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_systemName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemName" ):
                listener.enterSystemName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemName" ):
                listener.exitSystemName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSystemName" ):
                return visitor.visitSystemName(self)
            else:
                return visitor.visitChildren(self)




    def systemName(self):

        localctx = CopyBookParser.SystemNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1266, self.RULE_systemName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6911
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolicCharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_symbolicCharacter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolicCharacter" ):
                listener.enterSymbolicCharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolicCharacter" ):
                listener.exitSymbolicCharacter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolicCharacter" ):
                return visitor.visitSymbolicCharacter(self)
            else:
                return visitor.visitChildren(self)




    def symbolicCharacter(self):

        localctx = CopyBookParser.SymbolicCharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1268, self.RULE_symbolicCharacter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6913
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_textName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextName" ):
                listener.enterTextName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextName" ):
                listener.exitTextName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextName" ):
                return visitor.visitTextName(self)
            else:
                return visitor.visitChildren(self)




    def textName(self):

        localctx = CopyBookParser.TextNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1270, self.RULE_textName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6915
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CopyBookParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CopyBookParser.FALSE, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = CopyBookParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1272, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6917
            _la = self._input.LA(1)
            if not(_la==210 or _la==507):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERICLITERAL(self):
            return self.getToken(CopyBookParser.NUMERICLITERAL, 0)

        def ZERO(self):
            return self.getToken(CopyBookParser.ZERO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(CopyBookParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteral(self):

        localctx = CopyBookParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1274, self.RULE_numericLiteral)
        try:
            self.state = 6922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [574]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6919
                self.match(CopyBookParser.NUMERICLITERAL)
                pass
            elif token in [534]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6920
                self.match(CopyBookParser.ZERO)
                pass
            elif token in [570, 571, 572, 573]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6921
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(CopyBookParser.INTEGERLITERAL, 0)

        def LEVEL_NUMBER_66(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_66, 0)

        def LEVEL_NUMBER_77(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_77, 0)

        def LEVEL_NUMBER_88(self):
            return self.getToken(CopyBookParser.LEVEL_NUMBER_88, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = CopyBookParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1276, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6924
            _la = self._input.LA(1)
            if not(((((_la - 570)) & ~0x3f) == 0 and ((1 << (_la - 570)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CicsDfhRespLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DFHRESP(self):
            return self.getToken(CopyBookParser.DFHRESP, 0)

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_cicsDfhRespLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCicsDfhRespLiteral" ):
                listener.enterCicsDfhRespLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCicsDfhRespLiteral" ):
                listener.exitCicsDfhRespLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCicsDfhRespLiteral" ):
                return visitor.visitCicsDfhRespLiteral(self)
            else:
                return visitor.visitChildren(self)




    def cicsDfhRespLiteral(self):

        localctx = CopyBookParser.CicsDfhRespLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1278, self.RULE_cicsDfhRespLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6926
            self.match(CopyBookParser.DFHRESP)
            self.state = 6927
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 6930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1070,self._ctx)
            if la_ == 1:
                self.state = 6928
                self.cobolWord()
                pass

            elif la_ == 2:
                self.state = 6929
                self.literal()
                pass


            self.state = 6932
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CicsDfhValueLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DFHVALUE(self):
            return self.getToken(CopyBookParser.DFHVALUE, 0)

        def LPARENCHAR(self):
            return self.getToken(CopyBookParser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(CopyBookParser.RPARENCHAR, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(CopyBookParser.CobolWordContext,0)


        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def getRuleIndex(self):
            return CopyBookParser.RULE_cicsDfhValueLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCicsDfhValueLiteral" ):
                listener.enterCicsDfhValueLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCicsDfhValueLiteral" ):
                listener.exitCicsDfhValueLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCicsDfhValueLiteral" ):
                return visitor.visitCicsDfhValueLiteral(self)
            else:
                return visitor.visitChildren(self)




    def cicsDfhValueLiteral(self):

        localctx = CopyBookParser.CicsDfhValueLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1280, self.RULE_cicsDfhValueLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6934
            self.match(CopyBookParser.DFHVALUE)
            self.state = 6935
            self.match(CopyBookParser.LPARENCHAR)
            self.state = 6938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1071,self._ctx)
            if la_ == 1:
                self.state = 6936
                self.cobolWord()
                pass

            elif la_ == 2:
                self.state = 6937
                self.literal()
                pass


            self.state = 6940
            self.match(CopyBookParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FigurativeConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def literal(self):
            return self.getTypedRuleContext(CopyBookParser.LiteralContext,0)


        def HIGH_VALUE(self):
            return self.getToken(CopyBookParser.HIGH_VALUE, 0)

        def HIGH_VALUES(self):
            return self.getToken(CopyBookParser.HIGH_VALUES, 0)

        def LOW_VALUE(self):
            return self.getToken(CopyBookParser.LOW_VALUE, 0)

        def LOW_VALUES(self):
            return self.getToken(CopyBookParser.LOW_VALUES, 0)

        def NULL_(self):
            return self.getToken(CopyBookParser.NULL_, 0)

        def NULLS(self):
            return self.getToken(CopyBookParser.NULLS, 0)

        def QUOTE(self):
            return self.getToken(CopyBookParser.QUOTE, 0)

        def QUOTES(self):
            return self.getToken(CopyBookParser.QUOTES, 0)

        def SPACE(self):
            return self.getToken(CopyBookParser.SPACE, 0)

        def SPACES(self):
            return self.getToken(CopyBookParser.SPACES, 0)

        def ZERO(self):
            return self.getToken(CopyBookParser.ZERO, 0)

        def ZEROS(self):
            return self.getToken(CopyBookParser.ZEROS, 0)

        def ZEROES(self):
            return self.getToken(CopyBookParser.ZEROES, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_figurativeConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFigurativeConstant" ):
                listener.enterFigurativeConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFigurativeConstant" ):
                listener.exitFigurativeConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFigurativeConstant" ):
                return visitor.visitFigurativeConstant(self)
            else:
                return visitor.visitChildren(self)




    def figurativeConstant(self):

        localctx = CopyBookParser.FigurativeConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1282, self.RULE_figurativeConstant)
        try:
            self.state = 6957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6942
                self.match(CopyBookParser.ALL)
                self.state = 6943
                self.literal()
                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6944
                self.match(CopyBookParser.HIGH_VALUE)
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6945
                self.match(CopyBookParser.HIGH_VALUES)
                pass
            elif token in [301]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6946
                self.match(CopyBookParser.LOW_VALUE)
                pass
            elif token in [302]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6947
                self.match(CopyBookParser.LOW_VALUES)
                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6948
                self.match(CopyBookParser.NULL_)
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6949
                self.match(CopyBookParser.NULLS)
                pass
            elif token in [379]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6950
                self.match(CopyBookParser.QUOTE)
                pass
            elif token in [380]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6951
                self.match(CopyBookParser.QUOTES)
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6952
                self.match(CopyBookParser.SPACE)
                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6953
                self.match(CopyBookParser.SPACES)
                pass
            elif token in [534]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6954
                self.match(CopyBookParser.ZERO)
                pass
            elif token in [536]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6955
                self.match(CopyBookParser.ZEROS)
                pass
            elif token in [537]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6956
                self.match(CopyBookParser.ZEROES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESS(self):
            return self.getToken(CopyBookParser.ADDRESS, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def identifier(self):
            return self.getTypedRuleContext(CopyBookParser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(CopyBookParser.DATE, 0)

        def DAY(self):
            return self.getToken(CopyBookParser.DAY, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(CopyBookParser.DAY_OF_WEEK, 0)

        def DEBUG_CONTENTS(self):
            return self.getToken(CopyBookParser.DEBUG_CONTENTS, 0)

        def DEBUG_ITEM(self):
            return self.getToken(CopyBookParser.DEBUG_ITEM, 0)

        def DEBUG_LINE(self):
            return self.getToken(CopyBookParser.DEBUG_LINE, 0)

        def DEBUG_NAME(self):
            return self.getToken(CopyBookParser.DEBUG_NAME, 0)

        def DEBUG_SUB_1(self):
            return self.getToken(CopyBookParser.DEBUG_SUB_1, 0)

        def DEBUG_SUB_2(self):
            return self.getToken(CopyBookParser.DEBUG_SUB_2, 0)

        def DEBUG_SUB_3(self):
            return self.getToken(CopyBookParser.DEBUG_SUB_3, 0)

        def LENGTH(self):
            return self.getToken(CopyBookParser.LENGTH, 0)

        def LINAGE_COUNTER(self):
            return self.getToken(CopyBookParser.LINAGE_COUNTER, 0)

        def LINE_COUNTER(self):
            return self.getToken(CopyBookParser.LINE_COUNTER, 0)

        def PAGE_COUNTER(self):
            return self.getToken(CopyBookParser.PAGE_COUNTER, 0)

        def RETURN_CODE(self):
            return self.getToken(CopyBookParser.RETURN_CODE, 0)

        def SHIFT_IN(self):
            return self.getToken(CopyBookParser.SHIFT_IN, 0)

        def SHIFT_OUT(self):
            return self.getToken(CopyBookParser.SHIFT_OUT, 0)

        def SORT_CONTROL(self):
            return self.getToken(CopyBookParser.SORT_CONTROL, 0)

        def SORT_CORE_SIZE(self):
            return self.getToken(CopyBookParser.SORT_CORE_SIZE, 0)

        def SORT_FILE_SIZE(self):
            return self.getToken(CopyBookParser.SORT_FILE_SIZE, 0)

        def SORT_MESSAGE(self):
            return self.getToken(CopyBookParser.SORT_MESSAGE, 0)

        def SORT_MODE_SIZE(self):
            return self.getToken(CopyBookParser.SORT_MODE_SIZE, 0)

        def SORT_RETURN(self):
            return self.getToken(CopyBookParser.SORT_RETURN, 0)

        def TALLY(self):
            return self.getToken(CopyBookParser.TALLY, 0)

        def TIME(self):
            return self.getToken(CopyBookParser.TIME, 0)

        def WHEN_COMPILED(self):
            return self.getToken(CopyBookParser.WHEN_COMPILED, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_specialRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialRegister" ):
                listener.enterSpecialRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialRegister" ):
                listener.exitSpecialRegister(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialRegister" ):
                return visitor.visitSpecialRegister(self)
            else:
                return visitor.visitChildren(self)




    def specialRegister(self):

        localctx = CopyBookParser.SpecialRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1284, self.RULE_specialRegister)
        try:
            self.state = 6992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6959
                self.match(CopyBookParser.ADDRESS)
                self.state = 6960
                self.match(CopyBookParser.OF)
                self.state = 6961
                self.identifier()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6962
                self.match(CopyBookParser.DATE)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6963
                self.match(CopyBookParser.DAY)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6964
                self.match(CopyBookParser.DAY_OF_WEEK)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6965
                self.match(CopyBookParser.DEBUG_CONTENTS)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6966
                self.match(CopyBookParser.DEBUG_ITEM)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6967
                self.match(CopyBookParser.DEBUG_LINE)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6968
                self.match(CopyBookParser.DEBUG_NAME)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6969
                self.match(CopyBookParser.DEBUG_SUB_1)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6970
                self.match(CopyBookParser.DEBUG_SUB_2)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6971
                self.match(CopyBookParser.DEBUG_SUB_3)
                pass
            elif token in [279]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6972
                self.match(CopyBookParser.LENGTH)
                self.state = 6974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1073,self._ctx)
                if la_ == 1:
                    self.state = 6973
                    self.match(CopyBookParser.OF)


                self.state = 6976
                self.identifier()
                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6977
                self.match(CopyBookParser.LINAGE_COUNTER)
                pass
            elif token in [291]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6978
                self.match(CopyBookParser.LINE_COUNTER)
                pass
            elif token in [353]:
                self.enterOuterAlt(localctx, 15)
                self.state = 6979
                self.match(CopyBookParser.PAGE_COUNTER)
                pass
            elif token in [416]:
                self.enterOuterAlt(localctx, 16)
                self.state = 6980
                self.match(CopyBookParser.RETURN_CODE)
                pass
            elif token in [447]:
                self.enterOuterAlt(localctx, 17)
                self.state = 6981
                self.match(CopyBookParser.SHIFT_IN)
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 18)
                self.state = 6982
                self.match(CopyBookParser.SHIFT_OUT)
                pass
            elif token in [453]:
                self.enterOuterAlt(localctx, 19)
                self.state = 6983
                self.match(CopyBookParser.SORT_CONTROL)
                pass
            elif token in [454]:
                self.enterOuterAlt(localctx, 20)
                self.state = 6984
                self.match(CopyBookParser.SORT_CORE_SIZE)
                pass
            elif token in [455]:
                self.enterOuterAlt(localctx, 21)
                self.state = 6985
                self.match(CopyBookParser.SORT_FILE_SIZE)
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 22)
                self.state = 6986
                self.match(CopyBookParser.SORT_MESSAGE)
                pass
            elif token in [458]:
                self.enterOuterAlt(localctx, 23)
                self.state = 6987
                self.match(CopyBookParser.SORT_MODE_SIZE)
                pass
            elif token in [459]:
                self.enterOuterAlt(localctx, 24)
                self.state = 6988
                self.match(CopyBookParser.SORT_RETURN)
                pass
            elif token in [483]:
                self.enterOuterAlt(localctx, 25)
                self.state = 6989
                self.match(CopyBookParser.TALLY)
                pass
            elif token in [497]:
                self.enterOuterAlt(localctx, 26)
                self.state = 6990
                self.match(CopyBookParser.TIME)
                pass
            elif token in [526]:
                self.enterOuterAlt(localctx, 27)
                self.state = 6991
                self.match(CopyBookParser.WHEN_COMPILED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTENTRYLINE(self, i:int=None):
            if i is None:
                return self.getTokens(CopyBookParser.COMMENTENTRYLINE)
            else:
                return self.getToken(CopyBookParser.COMMENTENTRYLINE, i)

        def getRuleIndex(self):
            return CopyBookParser.RULE_commentEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentEntry" ):
                listener.enterCommentEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentEntry" ):
                listener.exitCommentEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentEntry" ):
                return visitor.visitCommentEntry(self)
            else:
                return visitor.visitChildren(self)




    def commentEntry(self):

        localctx = CopyBookParser.CommentEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1286, self.RULE_commentEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6995 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6994
                self.match(CopyBookParser.COMMENTENTRYLINE)
                self.state = 6997 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==582):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADATA(self):
            return self.getToken(CopyBookParser.ADATA, 0)

        def ABORT(self):
            return self.getToken(CopyBookParser.ABORT, 0)

        def ACCEPT(self):
            return self.getToken(CopyBookParser.ACCEPT, 0)

        def ACCESS(self):
            return self.getToken(CopyBookParser.ACCESS, 0)

        def ADD(self):
            return self.getToken(CopyBookParser.ADD, 0)

        def ADDRESS(self):
            return self.getToken(CopyBookParser.ADDRESS, 0)

        def ADV(self):
            return self.getToken(CopyBookParser.ADV, 0)

        def ADVANCING(self):
            return self.getToken(CopyBookParser.ADVANCING, 0)

        def AFTER(self):
            return self.getToken(CopyBookParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(CopyBookParser.ALIAS, 0)

        def ALIGNED(self):
            return self.getToken(CopyBookParser.ALIGNED, 0)

        def ALL(self):
            return self.getToken(CopyBookParser.ALL, 0)

        def ALSO(self):
            return self.getToken(CopyBookParser.ALSO, 0)

        def ALTER(self):
            return self.getToken(CopyBookParser.ALTER, 0)

        def ALTERNATE(self):
            return self.getToken(CopyBookParser.ALTERNATE, 0)

        def ANSI(self):
            return self.getToken(CopyBookParser.ANSI, 0)

        def AND(self):
            return self.getToken(CopyBookParser.AND, 0)

        def ANY(self):
            return self.getToken(CopyBookParser.ANY, 0)

        def APOST(self):
            return self.getToken(CopyBookParser.APOST, 0)

        def AR(self):
            return self.getToken(CopyBookParser.AR, 0)

        def ARE(self):
            return self.getToken(CopyBookParser.ARE, 0)

        def AREA(self):
            return self.getToken(CopyBookParser.AREA, 0)

        def AREAS(self):
            return self.getToken(CopyBookParser.AREAS, 0)

        def ARITH(self):
            return self.getToken(CopyBookParser.ARITH, 0)

        def ASSIGN(self):
            return self.getToken(CopyBookParser.ASSIGN, 0)

        def AUTO(self):
            return self.getToken(CopyBookParser.AUTO, 0)

        def AUTHOR(self):
            return self.getToken(CopyBookParser.AUTHOR, 0)

        def ATTRIBUTE(self):
            return self.getToken(CopyBookParser.ATTRIBUTE, 0)

        def AWO(self):
            return self.getToken(CopyBookParser.AWO, 0)

        def BIN(self):
            return self.getToken(CopyBookParser.BIN, 0)

        def BLINK(self):
            return self.getToken(CopyBookParser.BLINK, 0)

        def BLOCK0(self):
            return self.getToken(CopyBookParser.BLOCK0, 0)

        def BUF(self):
            return self.getToken(CopyBookParser.BUF, 0)

        def BUFSIZE(self):
            return self.getToken(CopyBookParser.BUFSIZE, 0)

        def BY(self):
            return self.getToken(CopyBookParser.BY, 0)

        def CANCEL(self):
            return self.getToken(CopyBookParser.CANCEL, 0)

        def CBL(self):
            return self.getToken(CopyBookParser.CBL, 0)

        def CBLCARD(self):
            return self.getToken(CopyBookParser.CBLCARD, 0)

        def CHANNEL(self):
            return self.getToken(CopyBookParser.CHANNEL, 0)

        def CICS(self):
            return self.getToken(CopyBookParser.CICS, 0)

        def CO(self):
            return self.getToken(CopyBookParser.CO, 0)

        def COBOL2(self):
            return self.getToken(CopyBookParser.COBOL2, 0)

        def COBOL3(self):
            return self.getToken(CopyBookParser.COBOL3, 0)

        def CODEPAGE(self):
            return self.getToken(CopyBookParser.CODEPAGE, 0)

        def COMMACHAR(self):
            return self.getToken(CopyBookParser.COMMACHAR, 0)

        def COMPAT(self):
            return self.getToken(CopyBookParser.COMPAT, 0)

        def COMPILE(self):
            return self.getToken(CopyBookParser.COMPILE, 0)

        def CONTROL(self):
            return self.getToken(CopyBookParser.CONTROL, 0)

        def CP(self):
            return self.getToken(CopyBookParser.CP, 0)

        def CPP(self):
            return self.getToken(CopyBookParser.CPP, 0)

        def CPSM(self):
            return self.getToken(CopyBookParser.CPSM, 0)

        def CS(self):
            return self.getToken(CopyBookParser.CS, 0)

        def CURR(self):
            return self.getToken(CopyBookParser.CURR, 0)

        def CURRENCY(self):
            return self.getToken(CopyBookParser.CURRENCY, 0)

        def CURSOR(self):
            return self.getToken(CopyBookParser.CURSOR, 0)

        def DATA(self):
            return self.getToken(CopyBookParser.DATA, 0)

        def DATEPROC(self):
            return self.getToken(CopyBookParser.DATEPROC, 0)

        def DBCS(self):
            return self.getToken(CopyBookParser.DBCS, 0)

        def DD(self):
            return self.getToken(CopyBookParser.DD, 0)

        def DEBUG(self):
            return self.getToken(CopyBookParser.DEBUG, 0)

        def DECK(self):
            return self.getToken(CopyBookParser.DECK, 0)

        def DELETE(self):
            return self.getToken(CopyBookParser.DELETE, 0)

        def DFHRESP(self):
            return self.getToken(CopyBookParser.DFHRESP, 0)

        def DIAGTRUNC(self):
            return self.getToken(CopyBookParser.DIAGTRUNC, 0)

        def DLI(self):
            return self.getToken(CopyBookParser.DLI, 0)

        def DLL(self):
            return self.getToken(CopyBookParser.DLL, 0)

        def DP(self):
            return self.getToken(CopyBookParser.DP, 0)

        def DTR(self):
            return self.getToken(CopyBookParser.DTR, 0)

        def DU(self):
            return self.getToken(CopyBookParser.DU, 0)

        def DUMP(self):
            return self.getToken(CopyBookParser.DUMP, 0)

        def DYN(self):
            return self.getToken(CopyBookParser.DYN, 0)

        def DYNAM(self):
            return self.getToken(CopyBookParser.DYNAM, 0)

        def EDF(self):
            return self.getToken(CopyBookParser.EDF, 0)

        def EJECT(self):
            return self.getToken(CopyBookParser.EJECT, 0)

        def EJPD(self):
            return self.getToken(CopyBookParser.EJPD, 0)

        def EN(self):
            return self.getToken(CopyBookParser.EN, 0)

        def ENGLISH(self):
            return self.getToken(CopyBookParser.ENGLISH, 0)

        def END_EXEC(self):
            return self.getToken(CopyBookParser.END_EXEC, 0)

        def EPILOG(self):
            return self.getToken(CopyBookParser.EPILOG, 0)

        def ERASE(self):
            return self.getToken(CopyBookParser.ERASE, 0)

        def EXCI(self):
            return self.getToken(CopyBookParser.EXCI, 0)

        def EXIT(self):
            return self.getToken(CopyBookParser.EXIT, 0)

        def EXP(self):
            return self.getToken(CopyBookParser.EXP, 0)

        def EXPORTALL(self):
            return self.getToken(CopyBookParser.EXPORTALL, 0)

        def EXTEND(self):
            return self.getToken(CopyBookParser.EXTEND, 0)

        def FALSE(self):
            return self.getToken(CopyBookParser.FALSE, 0)

        def FASTSRT(self):
            return self.getToken(CopyBookParser.FASTSRT, 0)

        def FEPI(self):
            return self.getToken(CopyBookParser.FEPI, 0)

        def FILE(self):
            return self.getToken(CopyBookParser.FILE, 0)

        def FLAG(self):
            return self.getToken(CopyBookParser.FLAG, 0)

        def FLAGSTD(self):
            return self.getToken(CopyBookParser.FLAGSTD, 0)

        def FROM(self):
            return self.getToken(CopyBookParser.FROM, 0)

        def FULL(self):
            return self.getToken(CopyBookParser.FULL, 0)

        def FSRT(self):
            return self.getToken(CopyBookParser.FSRT, 0)

        def GDS(self):
            return self.getToken(CopyBookParser.GDS, 0)

        def GRAPHIC(self):
            return self.getToken(CopyBookParser.GRAPHIC, 0)

        def HOOK(self):
            return self.getToken(CopyBookParser.HOOK, 0)

        def IN(self):
            return self.getToken(CopyBookParser.IN, 0)

        def INTDATE(self):
            return self.getToken(CopyBookParser.INTDATE, 0)

        def INTO(self):
            return self.getToken(CopyBookParser.INTO, 0)

        def JA(self):
            return self.getToken(CopyBookParser.JA, 0)

        def JP(self):
            return self.getToken(CopyBookParser.JP, 0)

        def KA(self):
            return self.getToken(CopyBookParser.KA, 0)

        def LABEL(self):
            return self.getToken(CopyBookParser.LABEL, 0)

        def LANG(self):
            return self.getToken(CopyBookParser.LANG, 0)

        def LANGUAGE(self):
            return self.getToken(CopyBookParser.LANGUAGE, 0)

        def LC(self):
            return self.getToken(CopyBookParser.LC, 0)

        def LEASM(self):
            return self.getToken(CopyBookParser.LEASM, 0)

        def LENGTH(self):
            return self.getToken(CopyBookParser.LENGTH, 0)

        def LIB(self):
            return self.getToken(CopyBookParser.LIB, 0)

        def LILIAN(self):
            return self.getToken(CopyBookParser.LILIAN, 0)

        def LIN(self):
            return self.getToken(CopyBookParser.LIN, 0)

        def LINECOUNT(self):
            return self.getToken(CopyBookParser.LINECOUNT, 0)

        def LINKAGE(self):
            return self.getToken(CopyBookParser.LINKAGE, 0)

        def LIST(self):
            return self.getToken(CopyBookParser.LIST, 0)

        def LM(self):
            return self.getToken(CopyBookParser.LM, 0)

        def LONGMIXED(self):
            return self.getToken(CopyBookParser.LONGMIXED, 0)

        def LONGUPPER(self):
            return self.getToken(CopyBookParser.LONGUPPER, 0)

        def LU(self):
            return self.getToken(CopyBookParser.LU, 0)

        def MAP(self):
            return self.getToken(CopyBookParser.MAP, 0)

        def MARGINS(self):
            return self.getToken(CopyBookParser.MARGINS, 0)

        def MAX(self):
            return self.getToken(CopyBookParser.MAX, 0)

        def MD(self):
            return self.getToken(CopyBookParser.MD, 0)

        def MDECK(self):
            return self.getToken(CopyBookParser.MDECK, 0)

        def MIG(self):
            return self.getToken(CopyBookParser.MIG, 0)

        def MIXED(self):
            return self.getToken(CopyBookParser.MIXED, 0)

        def NAME(self):
            return self.getToken(CopyBookParser.NAME, 0)

        def NAT(self):
            return self.getToken(CopyBookParser.NAT, 0)

        def NATIONAL(self):
            return self.getToken(CopyBookParser.NATIONAL, 0)

        def NATLANG(self):
            return self.getToken(CopyBookParser.NATLANG, 0)

        def NN(self):
            return self.getToken(CopyBookParser.NN, 0)

        def NO(self):
            return self.getToken(CopyBookParser.NO, 0)

        def NOADATA(self):
            return self.getToken(CopyBookParser.NOADATA, 0)

        def NOADV(self):
            return self.getToken(CopyBookParser.NOADV, 0)

        def NOALIAS(self):
            return self.getToken(CopyBookParser.NOALIAS, 0)

        def NOAWO(self):
            return self.getToken(CopyBookParser.NOAWO, 0)

        def NOBLOCK0(self):
            return self.getToken(CopyBookParser.NOBLOCK0, 0)

        def NOC(self):
            return self.getToken(CopyBookParser.NOC, 0)

        def NOCBLCARD(self):
            return self.getToken(CopyBookParser.NOCBLCARD, 0)

        def NOCICS(self):
            return self.getToken(CopyBookParser.NOCICS, 0)

        def NOCMPR2(self):
            return self.getToken(CopyBookParser.NOCMPR2, 0)

        def NOCOMPILE(self):
            return self.getToken(CopyBookParser.NOCOMPILE, 0)

        def NOCPSM(self):
            return self.getToken(CopyBookParser.NOCPSM, 0)

        def NOCURR(self):
            return self.getToken(CopyBookParser.NOCURR, 0)

        def NOCURRENCY(self):
            return self.getToken(CopyBookParser.NOCURRENCY, 0)

        def NOD(self):
            return self.getToken(CopyBookParser.NOD, 0)

        def NODATEPROC(self):
            return self.getToken(CopyBookParser.NODATEPROC, 0)

        def NODBCS(self):
            return self.getToken(CopyBookParser.NODBCS, 0)

        def NODE(self):
            return self.getToken(CopyBookParser.NODE, 0)

        def NODEBUG(self):
            return self.getToken(CopyBookParser.NODEBUG, 0)

        def NODECK(self):
            return self.getToken(CopyBookParser.NODECK, 0)

        def NODIAGTRUNC(self):
            return self.getToken(CopyBookParser.NODIAGTRUNC, 0)

        def NODLL(self):
            return self.getToken(CopyBookParser.NODLL, 0)

        def NODP(self):
            return self.getToken(CopyBookParser.NODP, 0)

        def NODTR(self):
            return self.getToken(CopyBookParser.NODTR, 0)

        def NODU(self):
            return self.getToken(CopyBookParser.NODU, 0)

        def NODUMP(self):
            return self.getToken(CopyBookParser.NODUMP, 0)

        def NODYN(self):
            return self.getToken(CopyBookParser.NODYN, 0)

        def NODYNAM(self):
            return self.getToken(CopyBookParser.NODYNAM, 0)

        def NOEDF(self):
            return self.getToken(CopyBookParser.NOEDF, 0)

        def NOEJPD(self):
            return self.getToken(CopyBookParser.NOEJPD, 0)

        def NOEPILOG(self):
            return self.getToken(CopyBookParser.NOEPILOG, 0)

        def NOEXIT(self):
            return self.getToken(CopyBookParser.NOEXIT, 0)

        def NOEXP(self):
            return self.getToken(CopyBookParser.NOEXP, 0)

        def NOEXPORTALL(self):
            return self.getToken(CopyBookParser.NOEXPORTALL, 0)

        def NOF(self):
            return self.getToken(CopyBookParser.NOF, 0)

        def NOFASTSRT(self):
            return self.getToken(CopyBookParser.NOFASTSRT, 0)

        def NOFEPI(self):
            return self.getToken(CopyBookParser.NOFEPI, 0)

        def NOFLAG(self):
            return self.getToken(CopyBookParser.NOFLAG, 0)

        def NOFLAGMIG(self):
            return self.getToken(CopyBookParser.NOFLAGMIG, 0)

        def NOFLAGSTD(self):
            return self.getToken(CopyBookParser.NOFLAGSTD, 0)

        def NOFSRT(self):
            return self.getToken(CopyBookParser.NOFSRT, 0)

        def NOGRAPHIC(self):
            return self.getToken(CopyBookParser.NOGRAPHIC, 0)

        def NOHOOK(self):
            return self.getToken(CopyBookParser.NOHOOK, 0)

        def NOLENGTH(self):
            return self.getToken(CopyBookParser.NOLENGTH, 0)

        def NOLIB(self):
            return self.getToken(CopyBookParser.NOLIB, 0)

        def NOLINKAGE(self):
            return self.getToken(CopyBookParser.NOLINKAGE, 0)

        def NOLIST(self):
            return self.getToken(CopyBookParser.NOLIST, 0)

        def NOMAP(self):
            return self.getToken(CopyBookParser.NOMAP, 0)

        def NOMD(self):
            return self.getToken(CopyBookParser.NOMD, 0)

        def NOMDECK(self):
            return self.getToken(CopyBookParser.NOMDECK, 0)

        def NONAME(self):
            return self.getToken(CopyBookParser.NONAME, 0)

        def NONUM(self):
            return self.getToken(CopyBookParser.NONUM, 0)

        def NONUMBER(self):
            return self.getToken(CopyBookParser.NONUMBER, 0)

        def NOOBJ(self):
            return self.getToken(CopyBookParser.NOOBJ, 0)

        def NOOBJECT(self):
            return self.getToken(CopyBookParser.NOOBJECT, 0)

        def NOOFF(self):
            return self.getToken(CopyBookParser.NOOFF, 0)

        def NOOFFSET(self):
            return self.getToken(CopyBookParser.NOOFFSET, 0)

        def NOOPSEQUENCE(self):
            return self.getToken(CopyBookParser.NOOPSEQUENCE, 0)

        def NOOPT(self):
            return self.getToken(CopyBookParser.NOOPT, 0)

        def NOOPTIMIZE(self):
            return self.getToken(CopyBookParser.NOOPTIMIZE, 0)

        def NOOPTIONS(self):
            return self.getToken(CopyBookParser.NOOPTIONS, 0)

        def NOP(self):
            return self.getToken(CopyBookParser.NOP, 0)

        def NOPFD(self):
            return self.getToken(CopyBookParser.NOPFD, 0)

        def NOPROLOG(self):
            return self.getToken(CopyBookParser.NOPROLOG, 0)

        def NORENT(self):
            return self.getToken(CopyBookParser.NORENT, 0)

        def NOS(self):
            return self.getToken(CopyBookParser.NOS, 0)

        def NOSEP(self):
            return self.getToken(CopyBookParser.NOSEP, 0)

        def NOSEPARATE(self):
            return self.getToken(CopyBookParser.NOSEPARATE, 0)

        def NOSEQ(self):
            return self.getToken(CopyBookParser.NOSEQ, 0)

        def NOSEQUENCE(self):
            return self.getToken(CopyBookParser.NOSEQUENCE, 0)

        def NOSOURCE(self):
            return self.getToken(CopyBookParser.NOSOURCE, 0)

        def NOSPIE(self):
            return self.getToken(CopyBookParser.NOSPIE, 0)

        def NOSQL(self):
            return self.getToken(CopyBookParser.NOSQL, 0)

        def NOSQLC(self):
            return self.getToken(CopyBookParser.NOSQLC, 0)

        def NOSQLCCSID(self):
            return self.getToken(CopyBookParser.NOSQLCCSID, 0)

        def NOSSR(self):
            return self.getToken(CopyBookParser.NOSSR, 0)

        def NOSSRANGE(self):
            return self.getToken(CopyBookParser.NOSSRANGE, 0)

        def NOSTDTRUNC(self):
            return self.getToken(CopyBookParser.NOSTDTRUNC, 0)

        def NOTERM(self):
            return self.getToken(CopyBookParser.NOTERM, 0)

        def NOTERMINAL(self):
            return self.getToken(CopyBookParser.NOTERMINAL, 0)

        def NOTEST(self):
            return self.getToken(CopyBookParser.NOTEST, 0)

        def NOTHREAD(self):
            return self.getToken(CopyBookParser.NOTHREAD, 0)

        def NOTRIG(self):
            return self.getToken(CopyBookParser.NOTRIG, 0)

        def NOVBREF(self):
            return self.getToken(CopyBookParser.NOVBREF, 0)

        def NOWD(self):
            return self.getToken(CopyBookParser.NOWD, 0)

        def NOWORD(self):
            return self.getToken(CopyBookParser.NOWORD, 0)

        def NOX(self):
            return self.getToken(CopyBookParser.NOX, 0)

        def NOXREF(self):
            return self.getToken(CopyBookParser.NOXREF, 0)

        def NOZWB(self):
            return self.getToken(CopyBookParser.NOZWB, 0)

        def NS(self):
            return self.getToken(CopyBookParser.NS, 0)

        def NSEQ(self):
            return self.getToken(CopyBookParser.NSEQ, 0)

        def NSYMBOL(self):
            return self.getToken(CopyBookParser.NSYMBOL, 0)

        def NUM(self):
            return self.getToken(CopyBookParser.NUM, 0)

        def NUMBER(self):
            return self.getToken(CopyBookParser.NUMBER, 0)

        def NUMPROC(self):
            return self.getToken(CopyBookParser.NUMPROC, 0)

        def OBJ(self):
            return self.getToken(CopyBookParser.OBJ, 0)

        def OBJECT(self):
            return self.getToken(CopyBookParser.OBJECT, 0)

        def OF(self):
            return self.getToken(CopyBookParser.OF, 0)

        def OFF(self):
            return self.getToken(CopyBookParser.OFF, 0)

        def OFFSET(self):
            return self.getToken(CopyBookParser.OFFSET, 0)

        def ON(self):
            return self.getToken(CopyBookParser.ON, 0)

        def OP(self):
            return self.getToken(CopyBookParser.OP, 0)

        def OPMARGINS(self):
            return self.getToken(CopyBookParser.OPMARGINS, 0)

        def OPSEQUENCE(self):
            return self.getToken(CopyBookParser.OPSEQUENCE, 0)

        def OPT(self):
            return self.getToken(CopyBookParser.OPT, 0)

        def OPTFILE(self):
            return self.getToken(CopyBookParser.OPTFILE, 0)

        def OPTIMIZE(self):
            return self.getToken(CopyBookParser.OPTIMIZE, 0)

        def OPTIONS(self):
            return self.getToken(CopyBookParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(CopyBookParser.OUT, 0)

        def OUTDD(self):
            return self.getToken(CopyBookParser.OUTDD, 0)

        def PASSWORD(self):
            return self.getToken(CopyBookParser.PASSWORD, 0)

        def PFD(self):
            return self.getToken(CopyBookParser.PFD, 0)

        def PGMN(self):
            return self.getToken(CopyBookParser.PGMN, 0)

        def PGMNAME(self):
            return self.getToken(CopyBookParser.PGMNAME, 0)

        def PPTDBG(self):
            return self.getToken(CopyBookParser.PPTDBG, 0)

        def PROCESS(self):
            return self.getToken(CopyBookParser.PROCESS, 0)

        def PROLOG(self):
            return self.getToken(CopyBookParser.PROLOG, 0)

        def PROGRAM(self):
            return self.getToken(CopyBookParser.PROGRAM, 0)

        def QUEUE(self):
            return self.getToken(CopyBookParser.QUEUE, 0)

        def QUOTE(self):
            return self.getToken(CopyBookParser.QUOTE, 0)

        def READ(self):
            return self.getToken(CopyBookParser.READ, 0)

        def RECEIVE(self):
            return self.getToken(CopyBookParser.RECEIVE, 0)

        def RENT(self):
            return self.getToken(CopyBookParser.RENT, 0)

        def REPLACING(self):
            return self.getToken(CopyBookParser.REPLACING, 0)

        def RETURN(self):
            return self.getToken(CopyBookParser.RETURN, 0)

        def REWRITE(self):
            return self.getToken(CopyBookParser.REWRITE, 0)

        def RMODE(self):
            return self.getToken(CopyBookParser.RMODE, 0)

        def SCREEN(self):
            return self.getToken(CopyBookParser.SCREEN, 0)

        def SEND(self):
            return self.getToken(CopyBookParser.SEND, 0)

        def SELECT(self):
            return self.getToken(CopyBookParser.SELECT, 0)

        def SEP(self):
            return self.getToken(CopyBookParser.SEP, 0)

        def SEPARATE(self):
            return self.getToken(CopyBookParser.SEPARATE, 0)

        def SEQ(self):
            return self.getToken(CopyBookParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(CopyBookParser.SEQUENCE, 0)

        def SHORT(self):
            return self.getToken(CopyBookParser.SHORT, 0)

        def SIZE(self):
            return self.getToken(CopyBookParser.SIZE, 0)

        def SOURCE(self):
            return self.getToken(CopyBookParser.SOURCE, 0)

        def SP(self):
            return self.getToken(CopyBookParser.SP, 0)

        def SPACE(self):
            return self.getToken(CopyBookParser.SPACE, 0)

        def SPIE(self):
            return self.getToken(CopyBookParser.SPIE, 0)

        def SQL(self):
            return self.getToken(CopyBookParser.SQL, 0)

        def SQLC(self):
            return self.getToken(CopyBookParser.SQLC, 0)

        def SQLCCSID(self):
            return self.getToken(CopyBookParser.SQLCCSID, 0)

        def SQLIMS(self):
            return self.getToken(CopyBookParser.SQLIMS, 0)

        def SS(self):
            return self.getToken(CopyBookParser.SS, 0)

        def SSR(self):
            return self.getToken(CopyBookParser.SSR, 0)

        def SSRANGE(self):
            return self.getToken(CopyBookParser.SSRANGE, 0)

        def STATUS(self):
            return self.getToken(CopyBookParser.STATUS, 0)

        def STD(self):
            return self.getToken(CopyBookParser.STD, 0)

        def SYSEIB(self):
            return self.getToken(CopyBookParser.SYSEIB, 0)

        def SZ(self):
            return self.getToken(CopyBookParser.SZ, 0)

        def TALLY(self):
            return self.getToken(CopyBookParser.TALLY, 0)

        def TERM(self):
            return self.getToken(CopyBookParser.TERM, 0)

        def TERMINAL(self):
            return self.getToken(CopyBookParser.TERMINAL, 0)

        def TEST(self):
            return self.getToken(CopyBookParser.TEST, 0)

        def TEXT(self):
            return self.getToken(CopyBookParser.TEXT, 0)

        def THREAD(self):
            return self.getToken(CopyBookParser.THREAD, 0)

        def TIME(self):
            return self.getToken(CopyBookParser.TIME, 0)

        def TITLE(self):
            return self.getToken(CopyBookParser.TITLE, 0)

        def TRIG(self):
            return self.getToken(CopyBookParser.TRIG, 0)

        def TRUE(self):
            return self.getToken(CopyBookParser.TRUE, 0)

        def TRUNC(self):
            return self.getToken(CopyBookParser.TRUNC, 0)

        def UE(self):
            return self.getToken(CopyBookParser.UE, 0)

        def UPPER(self):
            return self.getToken(CopyBookParser.UPPER, 0)

        def VBREF(self):
            return self.getToken(CopyBookParser.VBREF, 0)

        def WAIT(self):
            return self.getToken(CopyBookParser.WAIT, 0)

        def WD(self):
            return self.getToken(CopyBookParser.WD, 0)

        def WHEN(self):
            return self.getToken(CopyBookParser.WHEN, 0)

        def WRITE(self):
            return self.getToken(CopyBookParser.WRITE, 0)

        def XMLPARSE(self):
            return self.getToken(CopyBookParser.XMLPARSE, 0)

        def XMLSS(self):
            return self.getToken(CopyBookParser.XMLSS, 0)

        def XOPTS(self):
            return self.getToken(CopyBookParser.XOPTS, 0)

        def XP(self):
            return self.getToken(CopyBookParser.XP, 0)

        def XREF(self):
            return self.getToken(CopyBookParser.XREF, 0)

        def YEARWINDOW(self):
            return self.getToken(CopyBookParser.YEARWINDOW, 0)

        def YW(self):
            return self.getToken(CopyBookParser.YW, 0)

        def YYYYMMDD(self):
            return self.getToken(CopyBookParser.YYYYMMDD, 0)

        def ZWB(self):
            return self.getToken(CopyBookParser.ZWB, 0)

        def C_CHAR(self):
            return self.getToken(CopyBookParser.C_CHAR, 0)

        def D_CHAR(self):
            return self.getToken(CopyBookParser.D_CHAR, 0)

        def E_CHAR(self):
            return self.getToken(CopyBookParser.E_CHAR, 0)

        def F_CHAR(self):
            return self.getToken(CopyBookParser.F_CHAR, 0)

        def H_CHAR(self):
            return self.getToken(CopyBookParser.H_CHAR, 0)

        def I_CHAR(self):
            return self.getToken(CopyBookParser.I_CHAR, 0)

        def M_CHAR(self):
            return self.getToken(CopyBookParser.M_CHAR, 0)

        def N_CHAR(self):
            return self.getToken(CopyBookParser.N_CHAR, 0)

        def Q_CHAR(self):
            return self.getToken(CopyBookParser.Q_CHAR, 0)

        def S_CHAR(self):
            return self.getToken(CopyBookParser.S_CHAR, 0)

        def U_CHAR(self):
            return self.getToken(CopyBookParser.U_CHAR, 0)

        def W_CHAR(self):
            return self.getToken(CopyBookParser.W_CHAR, 0)

        def X_CHAR(self):
            return self.getToken(CopyBookParser.X_CHAR, 0)

        def getRuleIndex(self):
            return CopyBookParser.RULE_charDataKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataKeyword" ):
                listener.enterCharDataKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataKeyword" ):
                listener.exitCharDataKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataKeyword" ):
                return visitor.visitCharDataKeyword(self)
            else:
                return visitor.visitChildren(self)




    def charDataKeyword(self):

        localctx = CopyBookParser.CharDataKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1288, self.RULE_charDataKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6999
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 76842699008641020) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36521446947684353) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 288230376151711873) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 9009398278193317) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 74326986043949315) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & 6782200037507083) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & -9133264830940036607) != 0) or ((((_la - 483)) & ~0x3f) == 0 and ((1 << (_la - 483)) & 577171036831892689) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -31) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -1) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -1) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & 36026567394066431) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





