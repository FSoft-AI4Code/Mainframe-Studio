# Generated from ./grammar/ldlp/LDLP.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,181,1527,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        1,0,1,0,1,0,1,1,3,1,301,8,1,1,1,3,1,304,8,1,1,2,4,2,307,8,2,11,2,
        12,2,308,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,371,
        8,3,1,4,1,4,1,4,3,4,376,8,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,3,6,
        386,8,6,3,6,388,8,6,1,7,1,7,1,7,1,8,1,8,1,8,3,8,396,8,8,1,9,1,9,
        3,9,400,8,9,1,10,1,10,3,10,404,8,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,12,1,12,3,12,414,8,12,1,13,1,13,3,13,418,8,13,1,14,1,14,1,14,1,
        14,3,14,424,8,14,1,14,1,14,3,14,428,8,14,1,14,3,14,431,8,14,1,14,
        1,14,3,14,435,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,443,8,15,1,
        15,1,15,3,15,447,8,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,467,8,20,1,
        20,1,20,3,20,471,8,20,1,21,1,21,1,21,3,21,476,8,21,1,21,1,21,3,21,
        480,8,21,1,22,1,22,3,22,484,8,22,1,23,1,23,1,23,3,23,489,8,23,1,
        23,1,23,1,23,3,23,494,8,23,5,23,496,8,23,10,23,12,23,499,9,23,1,
        23,3,23,502,8,23,1,24,1,24,3,24,506,8,24,1,25,1,25,1,25,5,25,511,
        8,25,10,25,12,25,514,9,25,1,25,3,25,517,8,25,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,28,1,28,3,28,529,8,28,1,28,1,28,3,28,533,8,
        28,1,29,1,29,1,30,1,30,1,30,3,30,540,8,30,1,30,3,30,543,8,30,1,31,
        1,31,1,31,3,31,548,8,31,1,32,1,32,1,32,1,32,3,32,554,8,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,3,32,563,8,32,1,32,1,32,3,32,567,8,32,
        1,32,1,32,1,32,1,32,3,32,573,8,32,3,32,575,8,32,1,33,1,33,3,33,579,
        8,33,1,34,1,34,1,34,1,34,1,34,3,34,586,8,34,1,34,1,34,3,34,590,8,
        34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,599,8,35,1,36,1,36,1,
        36,1,36,1,36,3,36,606,8,36,1,36,3,36,609,8,36,1,36,1,36,1,37,1,37,
        3,37,615,8,37,1,38,1,38,3,38,619,8,38,1,38,3,38,622,8,38,1,38,1,
        38,3,38,626,8,38,1,39,1,39,1,39,1,39,3,39,632,8,39,1,39,1,39,3,39,
        636,8,39,1,40,1,40,1,40,1,40,3,40,642,8,40,1,40,3,40,645,8,40,1,
        40,1,40,3,40,649,8,40,1,40,1,40,3,40,653,8,40,1,40,3,40,656,8,40,
        1,40,1,40,1,41,1,41,1,41,1,41,3,41,664,8,41,1,41,3,41,667,8,41,1,
        41,1,41,3,41,671,8,41,1,41,1,41,3,41,675,8,41,1,41,3,41,678,8,41,
        1,41,1,41,1,42,1,42,1,42,1,42,3,42,686,8,42,1,42,3,42,689,8,42,1,
        42,1,42,3,42,693,8,42,1,42,1,42,3,42,697,8,42,1,42,3,42,700,8,42,
        1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,712,8,43,
        10,43,12,43,715,9,43,1,43,1,43,3,43,719,8,43,1,43,1,43,1,43,1,43,
        1,43,5,43,726,8,43,10,43,12,43,729,9,43,1,43,1,43,3,43,733,8,43,
        1,43,3,43,736,8,43,1,43,3,43,739,8,43,1,43,1,43,3,43,743,8,43,1,
        43,1,43,3,43,747,8,43,1,43,3,43,750,8,43,1,43,1,43,1,44,1,44,1,44,
        1,44,3,44,758,8,44,1,44,1,44,3,44,762,8,44,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,3,45,773,8,45,1,45,1,45,3,45,777,8,45,1,45,
        3,45,780,8,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,5,47,789,8,47,10,
        47,12,47,792,9,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,5,
        50,803,8,50,10,50,12,50,806,9,50,1,50,1,50,3,50,810,8,50,1,51,1,
        51,1,52,1,52,1,53,1,53,1,53,1,53,3,53,820,8,53,1,53,1,53,3,53,824,
        8,53,1,53,3,53,827,8,53,1,53,1,53,3,53,831,8,53,1,53,1,53,3,53,835,
        8,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,3,56,844,8,56,1,56,1,56,
        3,56,848,8,56,3,56,850,8,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,
        59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,3,62,869,8,62,1,
        62,1,62,3,62,873,8,62,3,62,875,8,62,1,62,1,62,1,63,1,63,1,64,1,64,
        1,64,3,64,884,8,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,3,65,893,8,
        65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,902,8,65,1,65,1,65,1,
        65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,917,8,
        65,1,65,1,65,1,65,1,65,3,65,923,8,65,5,65,925,8,65,10,65,12,65,928,
        9,65,1,66,1,66,3,66,932,8,66,1,66,1,66,5,66,936,8,66,10,66,12,66,
        939,9,66,1,67,1,67,1,67,5,67,944,8,67,10,67,12,67,947,9,67,1,68,
        1,68,1,69,1,69,1,69,1,69,3,69,955,8,69,1,69,1,69,1,69,1,69,3,69,
        961,8,69,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,971,8,71,1,
        71,3,71,974,8,71,1,71,1,71,1,71,3,71,979,8,71,1,71,1,71,3,71,983,
        8,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,3,73,992,8,73,1,74,1,74,
        1,75,1,75,1,75,1,75,1,75,1,75,5,75,1002,8,75,10,75,12,75,1005,9,
        75,1,75,1,75,3,75,1009,8,75,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,
        78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,82,1,
        82,1,83,1,83,1,84,1,84,1,84,3,84,1037,8,84,1,84,1,84,3,84,1041,8,
        84,1,85,1,85,1,85,1,85,3,85,1047,8,85,1,86,1,86,1,86,1,86,3,86,1053,
        8,86,1,86,1,86,3,86,1057,8,86,1,87,1,87,1,87,1,87,1,87,3,87,1064,
        8,87,1,87,3,87,1067,8,87,1,87,1,87,3,87,1071,8,87,1,87,1,87,3,87,
        1075,8,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,1084,8,88,1,88,
        3,88,1087,8,88,1,88,1,88,3,88,1091,8,88,1,88,1,88,3,88,1095,8,88,
        1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1107,8,89,
        1,89,3,89,1110,8,89,1,89,3,89,1113,8,89,1,89,1,89,3,89,1117,8,89,
        1,89,1,89,3,89,1121,8,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,
        1,90,3,90,1132,8,90,1,90,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        3,93,1156,8,93,1,93,1,93,3,93,1160,8,93,1,94,1,94,1,94,1,94,3,94,
        1166,8,94,1,94,3,94,1169,8,94,1,95,1,95,1,95,1,95,3,95,1175,8,95,
        1,95,3,95,1178,8,95,1,95,1,95,1,95,1,95,1,95,3,95,1185,8,95,1,95,
        1,95,3,95,1189,8,95,1,96,1,96,1,96,3,96,1194,8,96,1,97,1,97,3,97,
        1198,8,97,1,98,1,98,3,98,1202,8,98,1,99,1,99,1,99,1,99,3,99,1208,
        8,99,1,100,1,100,1,100,1,101,1,101,1,101,1,101,3,101,1217,8,101,
        1,101,1,101,3,101,1221,8,101,1,101,3,101,1224,8,101,1,101,1,101,
        3,101,1228,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        3,102,1238,8,102,3,102,1240,8,102,1,102,1,102,1,102,1,102,3,102,
        1246,8,102,3,102,1248,8,102,1,102,3,102,1251,8,102,1,103,1,103,1,
        103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,3,105,
        1265,8,105,1,105,1,105,3,105,1269,8,105,1,106,1,106,1,106,3,106,
        1274,8,106,1,107,1,107,1,107,3,107,1279,8,107,1,108,1,108,1,108,
        1,108,3,108,1285,8,108,3,108,1287,8,108,1,109,1,109,1,109,1,109,
        1,109,1,109,3,109,1295,8,109,1,110,1,110,1,111,1,111,1,112,1,112,
        1,112,3,112,1304,8,112,1,112,3,112,1307,8,112,1,112,3,112,1310,8,
        112,1,112,1,112,3,112,1314,8,112,1,112,1,112,3,112,1318,8,112,1,
        113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1328,8,114,1,
        114,3,114,1331,8,114,1,115,1,115,1,115,3,115,1336,8,115,1,116,1,
        116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,3,117,1347,8,117,1,
        118,1,118,3,118,1351,8,118,1,118,1,118,3,118,1355,8,118,1,119,1,
        119,1,119,1,119,3,119,1361,8,119,1,119,1,119,1,120,1,120,1,120,3,
        120,1368,8,120,1,120,1,120,3,120,1372,8,120,1,120,1,120,3,120,1376,
        8,120,1,121,1,121,1,121,1,121,3,121,1382,8,121,1,122,1,122,1,122,
        1,122,1,122,3,122,1389,8,122,1,122,3,122,1392,8,122,1,123,1,123,
        1,123,1,123,1,124,1,124,1,124,1,124,3,124,1402,8,124,1,124,1,124,
        3,124,1406,8,124,1,124,3,124,1409,8,124,1,124,1,124,3,124,1413,8,
        124,1,125,1,125,1,125,1,125,3,125,1419,8,125,1,125,1,125,3,125,1423,
        8,125,1,125,3,125,1426,8,125,1,125,3,125,1429,8,125,1,125,3,125,
        1432,8,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,127,
        1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,131,1,131,3,131,1452,
        8,131,1,132,1,132,1,133,1,133,1,134,1,134,1,135,1,135,1,136,1,136,
        1,137,1,137,1,138,1,138,1,139,1,139,1,140,1,140,1,141,1,141,1,142,
        1,142,1,143,1,143,1,144,1,144,1,145,3,145,1481,8,145,1,145,1,145,
        3,145,1485,8,145,1,146,1,146,3,146,1489,8,146,1,146,1,146,1,146,
        3,146,1494,8,146,5,146,1496,8,146,10,146,12,146,1499,9,146,1,146,
        1,146,1,146,1,146,5,146,1505,8,146,10,146,12,146,1508,9,146,1,146,
        1,146,3,146,1512,8,146,1,147,1,147,3,147,1516,8,147,1,147,3,147,
        1519,8,147,1,147,1,147,3,147,1523,8,147,3,147,1525,8,147,1,147,0,
        1,130,148,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,0,15,4,0,62,62,83,83,99,99,112,112,
        2,0,141,141,143,144,2,0,111,111,135,135,2,0,80,80,123,123,2,0,18,
        18,67,67,3,0,45,45,48,48,50,50,3,0,18,18,54,54,67,67,3,0,10,10,37,
        37,114,114,3,0,52,52,72,72,149,149,1,0,29,30,2,0,148,148,150,150,
        5,0,75,75,158,160,162,162,164,166,170,171,2,0,157,157,166,167,9,
        0,3,7,9,41,43,44,52,55,57,61,63,70,72,111,113,145,147,151,2,0,27,
        27,76,76,1661,0,296,1,0,0,0,2,300,1,0,0,0,4,306,1,0,0,0,6,370,1,
        0,0,0,8,372,1,0,0,0,10,379,1,0,0,0,12,381,1,0,0,0,14,389,1,0,0,0,
        16,392,1,0,0,0,18,399,1,0,0,0,20,401,1,0,0,0,22,407,1,0,0,0,24,413,
        1,0,0,0,26,417,1,0,0,0,28,419,1,0,0,0,30,436,1,0,0,0,32,448,1,0,
        0,0,34,450,1,0,0,0,36,454,1,0,0,0,38,458,1,0,0,0,40,462,1,0,0,0,
        42,472,1,0,0,0,44,481,1,0,0,0,46,485,1,0,0,0,48,503,1,0,0,0,50,507,
        1,0,0,0,52,520,1,0,0,0,54,522,1,0,0,0,56,524,1,0,0,0,58,534,1,0,
        0,0,60,536,1,0,0,0,62,544,1,0,0,0,64,549,1,0,0,0,66,578,1,0,0,0,
        68,580,1,0,0,0,70,598,1,0,0,0,72,600,1,0,0,0,74,614,1,0,0,0,76,616,
        1,0,0,0,78,627,1,0,0,0,80,637,1,0,0,0,82,659,1,0,0,0,84,681,1,0,
        0,0,86,703,1,0,0,0,88,753,1,0,0,0,90,763,1,0,0,0,92,783,1,0,0,0,
        94,785,1,0,0,0,96,793,1,0,0,0,98,795,1,0,0,0,100,797,1,0,0,0,102,
        811,1,0,0,0,104,813,1,0,0,0,106,815,1,0,0,0,108,836,1,0,0,0,110,
        838,1,0,0,0,112,840,1,0,0,0,114,853,1,0,0,0,116,855,1,0,0,0,118,
        857,1,0,0,0,120,859,1,0,0,0,122,862,1,0,0,0,124,865,1,0,0,0,126,
        878,1,0,0,0,128,880,1,0,0,0,130,901,1,0,0,0,132,931,1,0,0,0,134,
        940,1,0,0,0,136,948,1,0,0,0,138,950,1,0,0,0,140,962,1,0,0,0,142,
        964,1,0,0,0,144,984,1,0,0,0,146,988,1,0,0,0,148,993,1,0,0,0,150,
        995,1,0,0,0,152,1010,1,0,0,0,154,1012,1,0,0,0,156,1016,1,0,0,0,158,
        1018,1,0,0,0,160,1021,1,0,0,0,162,1024,1,0,0,0,164,1026,1,0,0,0,
        166,1031,1,0,0,0,168,1033,1,0,0,0,170,1046,1,0,0,0,172,1048,1,0,
        0,0,174,1058,1,0,0,0,176,1079,1,0,0,0,178,1099,1,0,0,0,180,1125,
        1,0,0,0,182,1136,1,0,0,0,184,1138,1,0,0,0,186,1140,1,0,0,0,188,1161,
        1,0,0,0,190,1170,1,0,0,0,192,1190,1,0,0,0,194,1197,1,0,0,0,196,1201,
        1,0,0,0,198,1203,1,0,0,0,200,1209,1,0,0,0,202,1212,1,0,0,0,204,1229,
        1,0,0,0,206,1252,1,0,0,0,208,1256,1,0,0,0,210,1260,1,0,0,0,212,1270,
        1,0,0,0,214,1275,1,0,0,0,216,1280,1,0,0,0,218,1288,1,0,0,0,220,1296,
        1,0,0,0,222,1298,1,0,0,0,224,1300,1,0,0,0,226,1319,1,0,0,0,228,1321,
        1,0,0,0,230,1332,1,0,0,0,232,1337,1,0,0,0,234,1341,1,0,0,0,236,1350,
        1,0,0,0,238,1356,1,0,0,0,240,1364,1,0,0,0,242,1377,1,0,0,0,244,1383,
        1,0,0,0,246,1393,1,0,0,0,248,1397,1,0,0,0,250,1414,1,0,0,0,252,1433,
        1,0,0,0,254,1441,1,0,0,0,256,1443,1,0,0,0,258,1445,1,0,0,0,260,1447,
        1,0,0,0,262,1451,1,0,0,0,264,1453,1,0,0,0,266,1455,1,0,0,0,268,1457,
        1,0,0,0,270,1459,1,0,0,0,272,1461,1,0,0,0,274,1463,1,0,0,0,276,1465,
        1,0,0,0,278,1467,1,0,0,0,280,1469,1,0,0,0,282,1471,1,0,0,0,284,1473,
        1,0,0,0,286,1475,1,0,0,0,288,1477,1,0,0,0,290,1480,1,0,0,0,292,1488,
        1,0,0,0,294,1524,1,0,0,0,296,297,3,2,1,0,297,298,5,0,0,1,298,1,1,
        0,0,0,299,301,3,130,65,0,300,299,1,0,0,0,300,301,1,0,0,0,301,303,
        1,0,0,0,302,304,3,4,2,0,303,302,1,0,0,0,303,304,1,0,0,0,304,3,1,
        0,0,0,305,307,3,6,3,0,306,305,1,0,0,0,307,308,1,0,0,0,308,306,1,
        0,0,0,308,309,1,0,0,0,309,5,1,0,0,0,310,371,3,190,95,0,311,371,3,
        34,17,0,312,371,3,112,56,0,313,371,3,210,105,0,314,371,3,30,15,0,
        315,371,3,28,14,0,316,371,3,106,53,0,317,371,3,202,101,0,318,371,
        3,64,32,0,319,371,3,150,75,0,320,371,3,50,25,0,321,371,3,56,28,0,
        322,371,3,70,35,0,323,371,3,44,22,0,324,371,3,16,8,0,325,371,3,170,
        85,0,326,371,3,36,18,0,327,371,3,38,19,0,328,371,3,188,94,0,329,
        371,3,14,7,0,330,371,3,158,79,0,331,371,3,138,69,0,332,371,3,228,
        114,0,333,371,3,160,80,0,334,371,3,248,124,0,335,371,3,62,31,0,336,
        371,3,144,72,0,337,371,3,68,34,0,338,371,3,198,99,0,339,371,3,146,
        73,0,340,371,3,12,6,0,341,371,3,58,29,0,342,371,3,124,62,0,343,371,
        3,180,90,0,344,371,3,218,109,0,345,371,3,216,108,0,346,371,3,230,
        115,0,347,371,3,250,125,0,348,371,3,60,30,0,349,371,3,120,60,0,350,
        371,3,122,61,0,351,371,3,164,82,0,352,371,3,186,93,0,353,371,3,242,
        121,0,354,371,3,232,116,0,355,371,3,234,117,0,356,371,3,238,119,
        0,357,371,3,244,122,0,358,371,3,40,20,0,359,371,3,42,21,0,360,371,
        3,204,102,0,361,371,3,208,104,0,362,371,3,212,106,0,363,371,3,214,
        107,0,364,371,3,224,112,0,365,371,3,240,120,0,366,371,3,252,126,
        0,367,371,3,168,84,0,368,371,3,8,4,0,369,371,3,200,100,0,370,310,
        1,0,0,0,370,311,1,0,0,0,370,312,1,0,0,0,370,313,1,0,0,0,370,314,
        1,0,0,0,370,315,1,0,0,0,370,316,1,0,0,0,370,317,1,0,0,0,370,318,
        1,0,0,0,370,319,1,0,0,0,370,320,1,0,0,0,370,321,1,0,0,0,370,322,
        1,0,0,0,370,323,1,0,0,0,370,324,1,0,0,0,370,325,1,0,0,0,370,326,
        1,0,0,0,370,327,1,0,0,0,370,328,1,0,0,0,370,329,1,0,0,0,370,330,
        1,0,0,0,370,331,1,0,0,0,370,332,1,0,0,0,370,333,1,0,0,0,370,334,
        1,0,0,0,370,335,1,0,0,0,370,336,1,0,0,0,370,337,1,0,0,0,370,338,
        1,0,0,0,370,339,1,0,0,0,370,340,1,0,0,0,370,341,1,0,0,0,370,342,
        1,0,0,0,370,343,1,0,0,0,370,344,1,0,0,0,370,345,1,0,0,0,370,346,
        1,0,0,0,370,347,1,0,0,0,370,348,1,0,0,0,370,349,1,0,0,0,370,350,
        1,0,0,0,370,351,1,0,0,0,370,352,1,0,0,0,370,353,1,0,0,0,370,354,
        1,0,0,0,370,355,1,0,0,0,370,356,1,0,0,0,370,357,1,0,0,0,370,358,
        1,0,0,0,370,359,1,0,0,0,370,360,1,0,0,0,370,361,1,0,0,0,370,362,
        1,0,0,0,370,363,1,0,0,0,370,364,1,0,0,0,370,365,1,0,0,0,370,366,
        1,0,0,0,370,367,1,0,0,0,370,368,1,0,0,0,370,369,1,0,0,0,371,7,1,
        0,0,0,372,373,3,10,5,0,373,375,5,163,0,0,374,376,3,134,67,0,375,
        374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,5,169,0,0,378,
        9,1,0,0,0,379,380,3,290,145,0,380,11,1,0,0,0,381,387,5,3,0,0,382,
        385,3,294,147,0,383,386,3,294,147,0,384,386,3,270,135,0,385,383,
        1,0,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,382,
        1,0,0,0,387,388,1,0,0,0,388,13,1,0,0,0,389,390,5,5,0,0,390,391,3,
        270,135,0,391,15,1,0,0,0,392,393,5,4,0,0,393,395,3,260,130,0,394,
        396,3,18,9,0,395,394,1,0,0,0,395,396,1,0,0,0,396,17,1,0,0,0,397,
        400,3,20,10,0,398,400,3,22,11,0,399,397,1,0,0,0,399,398,1,0,0,0,
        400,19,1,0,0,0,401,403,5,61,0,0,402,404,7,0,0,0,403,402,1,0,0,0,
        403,404,1,0,0,0,404,405,1,0,0,0,405,406,3,24,12,0,406,21,1,0,0,0,
        407,408,5,68,0,0,408,409,3,24,12,0,409,410,3,26,13,0,410,23,1,0,
        0,0,411,414,3,290,145,0,412,414,3,294,147,0,413,411,1,0,0,0,413,
        412,1,0,0,0,414,25,1,0,0,0,415,418,3,290,145,0,416,418,3,294,147,
        0,417,415,1,0,0,0,417,416,1,0,0,0,418,27,1,0,0,0,419,420,5,7,0,0,
        420,423,3,130,65,0,421,424,3,290,145,0,422,424,3,294,147,0,423,421,
        1,0,0,0,423,422,1,0,0,0,424,427,1,0,0,0,425,426,5,69,0,0,426,428,
        3,290,145,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,
        431,5,121,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,434,1,0,0,0,432,
        433,5,71,0,0,433,435,3,258,129,0,434,432,1,0,0,0,434,435,1,0,0,0,
        435,29,1,0,0,0,436,442,5,8,0,0,437,443,5,181,0,0,438,443,5,98,0,
        0,439,443,3,290,145,0,440,441,5,26,0,0,441,443,5,181,0,0,442,437,
        1,0,0,0,442,438,1,0,0,0,442,439,1,0,0,0,442,440,1,0,0,0,443,446,
        1,0,0,0,444,445,5,11,0,0,445,447,3,32,16,0,446,444,1,0,0,0,446,447,
        1,0,0,0,447,31,1,0,0,0,448,449,3,290,145,0,449,33,1,0,0,0,450,451,
        3,290,145,0,451,452,5,152,0,0,452,453,3,130,65,0,453,35,1,0,0,0,
        454,455,5,14,0,0,455,456,3,132,66,0,456,457,3,290,145,0,457,37,1,
        0,0,0,458,459,5,15,0,0,459,460,3,132,66,0,460,461,3,290,145,0,461,
        39,1,0,0,0,462,463,5,17,0,0,463,464,5,19,0,0,464,466,3,294,147,0,
        465,467,3,272,136,0,466,465,1,0,0,0,466,467,1,0,0,0,467,470,1,0,
        0,0,468,469,5,71,0,0,469,471,3,258,129,0,470,468,1,0,0,0,470,471,
        1,0,0,0,471,41,1,0,0,0,472,475,5,21,0,0,473,476,5,27,0,0,474,476,
        3,274,137,0,475,473,1,0,0,0,475,474,1,0,0,0,476,479,1,0,0,0,477,
        478,5,11,0,0,478,480,3,32,16,0,479,477,1,0,0,0,479,480,1,0,0,0,480,
        43,1,0,0,0,481,483,5,22,0,0,482,484,5,9,0,0,483,482,1,0,0,0,483,
        484,1,0,0,0,484,45,1,0,0,0,485,488,5,25,0,0,486,489,3,294,147,0,
        487,489,3,290,145,0,488,486,1,0,0,0,488,487,1,0,0,0,489,497,1,0,
        0,0,490,493,5,28,0,0,491,494,3,294,147,0,492,494,3,290,145,0,493,
        491,1,0,0,0,493,492,1,0,0,0,494,496,1,0,0,0,495,490,1,0,0,0,496,
        499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,501,1,0,0,0,499,
        497,1,0,0,0,500,502,3,4,2,0,501,500,1,0,0,0,501,502,1,0,0,0,502,
        47,1,0,0,0,503,505,5,105,0,0,504,506,3,4,2,0,505,504,1,0,0,0,505,
        506,1,0,0,0,506,49,1,0,0,0,507,508,3,52,26,0,508,512,3,130,65,0,
        509,511,3,46,23,0,510,509,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,
        0,512,513,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,515,517,3,48,24,
        0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,3,54,27,
        0,519,51,1,0,0,0,520,521,5,20,0,0,521,53,1,0,0,0,522,523,5,47,0,
        0,523,55,1,0,0,0,524,525,5,31,0,0,525,526,3,290,145,0,526,528,3,
        130,65,0,527,529,5,121,0,0,528,527,1,0,0,0,528,529,1,0,0,0,529,532,
        1,0,0,0,530,531,5,71,0,0,531,533,3,258,129,0,532,530,1,0,0,0,532,
        533,1,0,0,0,533,57,1,0,0,0,534,535,5,32,0,0,535,59,1,0,0,0,536,539,
        5,33,0,0,537,538,5,132,0,0,538,540,3,130,65,0,539,537,1,0,0,0,539,
        540,1,0,0,0,540,542,1,0,0,0,541,543,5,101,0,0,542,541,1,0,0,0,542,
        543,1,0,0,0,543,61,1,0,0,0,544,547,5,34,0,0,545,548,3,268,134,0,
        546,548,5,51,0,0,547,545,1,0,0,0,547,546,1,0,0,0,548,63,1,0,0,0,
        549,574,5,36,0,0,550,553,3,66,33,0,551,552,5,2,0,0,552,554,3,66,
        33,0,553,551,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,556,5,66,
        0,0,556,562,3,264,132,0,557,558,3,290,145,0,558,559,5,66,0,0,559,
        560,3,264,132,0,560,563,1,0,0,0,561,563,5,43,0,0,562,557,1,0,0,0,
        562,561,1,0,0,0,562,563,1,0,0,0,563,566,1,0,0,0,564,565,5,71,0,0,
        565,567,3,258,129,0,566,564,1,0,0,0,566,567,1,0,0,0,567,575,1,0,
        0,0,568,569,7,1,0,0,569,572,3,66,33,0,570,571,5,71,0,0,571,573,3,
        258,129,0,572,570,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,550,
        1,0,0,0,574,568,1,0,0,0,575,65,1,0,0,0,576,579,3,290,145,0,577,579,
        5,181,0,0,578,576,1,0,0,0,578,577,1,0,0,0,579,67,1,0,0,0,580,581,
        5,39,0,0,581,582,3,130,65,0,582,585,3,290,145,0,583,584,7,2,0,0,
        584,586,3,130,65,0,585,583,1,0,0,0,585,586,1,0,0,0,586,589,1,0,0,
        0,587,588,5,38,0,0,588,590,3,130,65,0,589,587,1,0,0,0,589,590,1,
        0,0,0,590,69,1,0,0,0,591,599,3,72,36,0,592,599,3,80,40,0,593,599,
        3,82,41,0,594,599,3,84,42,0,595,599,3,86,43,0,596,599,3,88,44,0,
        597,599,3,90,45,0,598,591,1,0,0,0,598,592,1,0,0,0,598,593,1,0,0,
        0,598,594,1,0,0,0,598,595,1,0,0,0,598,596,1,0,0,0,598,597,1,0,0,
        0,599,71,1,0,0,0,600,601,5,40,0,0,601,602,5,6,0,0,602,605,3,74,37,
        0,603,604,5,71,0,0,604,606,3,258,129,0,605,603,1,0,0,0,605,606,1,
        0,0,0,606,608,1,0,0,0,607,609,3,4,2,0,608,607,1,0,0,0,608,609,1,
        0,0,0,609,610,1,0,0,0,610,611,3,104,52,0,611,73,1,0,0,0,612,615,
        3,76,38,0,613,615,3,78,39,0,614,612,1,0,0,0,614,613,1,0,0,0,615,
        75,1,0,0,0,616,618,3,100,50,0,617,619,5,129,0,0,618,617,1,0,0,0,
        618,619,1,0,0,0,619,621,1,0,0,0,620,622,7,3,0,0,621,620,1,0,0,0,
        621,622,1,0,0,0,622,625,1,0,0,0,623,624,5,96,0,0,624,626,3,96,48,
        0,625,623,1,0,0,0,625,626,1,0,0,0,626,77,1,0,0,0,627,628,3,98,49,
        0,628,631,5,59,0,0,629,632,3,96,48,0,630,632,5,53,0,0,631,629,1,
        0,0,0,631,630,1,0,0,0,632,635,1,0,0,0,633,634,5,118,0,0,634,636,
        3,262,131,0,635,633,1,0,0,0,635,636,1,0,0,0,636,79,1,0,0,0,637,638,
        5,40,0,0,638,639,5,18,0,0,639,641,3,100,50,0,640,642,5,129,0,0,641,
        640,1,0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,645,7,3,0,0,644,
        643,1,0,0,0,644,645,1,0,0,0,645,648,1,0,0,0,646,647,5,96,0,0,647,
        649,3,96,48,0,648,646,1,0,0,0,648,649,1,0,0,0,649,652,1,0,0,0,650,
        651,5,71,0,0,651,653,3,258,129,0,652,650,1,0,0,0,652,653,1,0,0,0,
        653,655,1,0,0,0,654,656,3,4,2,0,655,654,1,0,0,0,655,656,1,0,0,0,
        656,657,1,0,0,0,657,658,3,104,52,0,658,81,1,0,0,0,659,660,5,40,0,
        0,660,661,5,54,0,0,661,663,3,100,50,0,662,664,5,129,0,0,663,662,
        1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,667,7,3,0,0,666,665,
        1,0,0,0,666,667,1,0,0,0,667,670,1,0,0,0,668,669,5,96,0,0,669,671,
        3,96,48,0,670,668,1,0,0,0,670,671,1,0,0,0,671,674,1,0,0,0,672,673,
        5,71,0,0,673,675,3,258,129,0,674,672,1,0,0,0,674,675,1,0,0,0,675,
        677,1,0,0,0,676,678,3,4,2,0,677,676,1,0,0,0,677,678,1,0,0,0,678,
        679,1,0,0,0,679,680,3,104,52,0,680,83,1,0,0,0,681,682,5,40,0,0,682,
        683,5,67,0,0,683,685,3,100,50,0,684,686,5,129,0,0,685,684,1,0,0,
        0,685,686,1,0,0,0,686,688,1,0,0,0,687,689,7,3,0,0,688,687,1,0,0,
        0,688,689,1,0,0,0,689,692,1,0,0,0,690,691,5,96,0,0,691,693,3,96,
        48,0,692,690,1,0,0,0,692,693,1,0,0,0,693,696,1,0,0,0,694,695,5,71,
        0,0,695,697,3,258,129,0,696,694,1,0,0,0,696,697,1,0,0,0,697,699,
        1,0,0,0,698,700,3,4,2,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,
        1,0,0,0,701,702,3,104,52,0,702,85,1,0,0,0,703,704,5,40,0,0,704,705,
        5,70,0,0,705,706,3,100,50,0,706,718,7,4,0,0,707,708,5,163,0,0,708,
        713,3,102,51,0,709,710,5,28,0,0,710,712,3,102,51,0,711,709,1,0,0,
        0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,716,1,0,0,
        0,715,713,1,0,0,0,716,717,5,169,0,0,717,719,1,0,0,0,718,707,1,0,
        0,0,718,719,1,0,0,0,719,732,1,0,0,0,720,721,5,146,0,0,721,722,5,
        163,0,0,722,727,3,102,51,0,723,724,5,28,0,0,724,726,3,102,51,0,725,
        723,1,0,0,0,726,729,1,0,0,0,727,725,1,0,0,0,727,728,1,0,0,0,728,
        730,1,0,0,0,729,727,1,0,0,0,730,731,5,169,0,0,731,733,1,0,0,0,732,
        720,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,736,5,129,0,0,735,
        734,1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,0,737,739,7,3,0,0,738,
        737,1,0,0,0,738,739,1,0,0,0,739,742,1,0,0,0,740,741,5,96,0,0,741,
        743,3,96,48,0,742,740,1,0,0,0,742,743,1,0,0,0,743,746,1,0,0,0,744,
        745,5,71,0,0,745,747,3,258,129,0,746,744,1,0,0,0,746,747,1,0,0,0,
        747,749,1,0,0,0,748,750,3,4,2,0,749,748,1,0,0,0,749,750,1,0,0,0,
        750,751,1,0,0,0,751,752,3,104,52,0,752,87,1,0,0,0,753,754,5,40,0,
        0,754,755,5,83,0,0,755,757,3,100,50,0,756,758,7,3,0,0,757,756,1,
        0,0,0,757,758,1,0,0,0,758,761,1,0,0,0,759,760,5,71,0,0,760,762,3,
        258,129,0,761,759,1,0,0,0,761,762,1,0,0,0,762,89,1,0,0,0,763,764,
        5,40,0,0,764,765,5,142,0,0,765,766,3,292,146,0,766,767,3,92,46,0,
        767,768,5,163,0,0,768,769,3,94,47,0,769,772,5,169,0,0,770,771,5,
        96,0,0,771,773,3,96,48,0,772,770,1,0,0,0,772,773,1,0,0,0,773,776,
        1,0,0,0,774,775,5,71,0,0,775,777,3,258,129,0,776,774,1,0,0,0,776,
        777,1,0,0,0,777,779,1,0,0,0,778,780,3,4,2,0,779,778,1,0,0,0,779,
        780,1,0,0,0,780,781,1,0,0,0,781,782,3,104,52,0,782,91,1,0,0,0,783,
        784,3,290,145,0,784,93,1,0,0,0,785,790,3,102,51,0,786,787,5,28,0,
        0,787,789,3,102,51,0,788,786,1,0,0,0,789,792,1,0,0,0,790,788,1,0,
        0,0,790,791,1,0,0,0,791,95,1,0,0,0,792,790,1,0,0,0,793,794,3,290,
        145,0,794,97,1,0,0,0,795,796,3,290,145,0,796,99,1,0,0,0,797,809,
        3,290,145,0,798,799,5,163,0,0,799,804,3,102,51,0,800,801,5,28,0,
        0,801,803,3,102,51,0,802,800,1,0,0,0,803,806,1,0,0,0,804,802,1,0,
        0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,804,1,0,0,0,807,808,5,169,
        0,0,808,810,1,0,0,0,809,798,1,0,0,0,809,810,1,0,0,0,810,101,1,0,
        0,0,811,812,3,130,65,0,812,103,1,0,0,0,813,814,7,5,0,0,814,105,1,
        0,0,0,815,816,5,41,0,0,816,819,3,130,65,0,817,820,3,290,145,0,818,
        820,3,294,147,0,819,817,1,0,0,0,819,818,1,0,0,0,820,823,1,0,0,0,
        821,822,5,69,0,0,822,824,3,290,145,0,823,821,1,0,0,0,823,824,1,0,
        0,0,824,826,1,0,0,0,825,827,5,121,0,0,826,825,1,0,0,0,826,827,1,
        0,0,0,827,830,1,0,0,0,828,829,5,115,0,0,829,831,3,290,145,0,830,
        828,1,0,0,0,830,831,1,0,0,0,831,834,1,0,0,0,832,833,5,71,0,0,833,
        835,3,258,129,0,834,832,1,0,0,0,834,835,1,0,0,0,835,107,1,0,0,0,
        836,837,3,4,2,0,837,109,1,0,0,0,838,839,3,4,2,0,839,111,1,0,0,0,
        840,841,5,42,0,0,841,843,3,114,57,0,842,844,3,108,54,0,843,842,1,
        0,0,0,843,844,1,0,0,0,844,849,1,0,0,0,845,847,5,44,0,0,846,848,3,
        110,55,0,847,846,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,845,
        1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,852,3,118,59,0,852,113,
        1,0,0,0,853,854,3,130,65,0,854,115,1,0,0,0,855,856,3,290,145,0,856,
        117,1,0,0,0,857,858,7,5,0,0,858,119,1,0,0,0,859,860,5,49,0,0,860,
        861,3,266,133,0,861,121,1,0,0,0,862,863,5,55,0,0,863,864,3,266,133,
        0,864,123,1,0,0,0,865,866,5,74,0,0,866,868,3,130,65,0,867,869,3,
        108,54,0,868,867,1,0,0,0,868,869,1,0,0,0,869,874,1,0,0,0,870,872,
        5,44,0,0,871,873,3,110,55,0,872,871,1,0,0,0,872,873,1,0,0,0,873,
        875,1,0,0,0,874,870,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,
        877,3,126,63,0,877,125,1,0,0,0,878,879,7,5,0,0,879,127,1,0,0,0,880,
        881,3,290,145,0,881,883,5,163,0,0,882,884,3,134,67,0,883,882,1,0,
        0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,886,5,169,0,0,886,129,1,
        0,0,0,887,888,6,65,-1,0,888,889,5,2,0,0,889,892,3,130,65,0,890,891,
        5,2,0,0,891,893,3,130,65,0,892,890,1,0,0,0,892,893,1,0,0,0,893,902,
        1,0,0,0,894,895,5,163,0,0,895,896,3,130,65,0,896,897,5,169,0,0,897,
        902,1,0,0,0,898,902,3,128,64,0,899,902,3,292,146,0,900,902,3,294,
        147,0,901,887,1,0,0,0,901,894,1,0,0,0,901,898,1,0,0,0,901,899,1,
        0,0,0,901,900,1,0,0,0,902,926,1,0,0,0,903,904,10,7,0,0,904,905,5,
        2,0,0,905,925,3,130,65,8,906,907,10,6,0,0,907,908,3,254,127,0,908,
        909,3,130,65,7,909,925,1,0,0,0,910,911,10,5,0,0,911,912,3,256,128,
        0,912,913,3,130,65,6,913,925,1,0,0,0,914,916,10,8,0,0,915,917,5,
        166,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,922,
        5,89,0,0,919,920,3,256,128,0,920,921,3,130,65,0,921,923,1,0,0,0,
        922,919,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,903,1,0,0,0,
        924,906,1,0,0,0,924,910,1,0,0,0,924,914,1,0,0,0,925,928,1,0,0,0,
        926,924,1,0,0,0,926,927,1,0,0,0,927,131,1,0,0,0,928,926,1,0,0,0,
        929,932,3,290,145,0,930,932,3,294,147,0,931,929,1,0,0,0,931,930,
        1,0,0,0,932,937,1,0,0,0,933,934,5,174,0,0,934,936,3,132,66,0,935,
        933,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,
        133,1,0,0,0,939,937,1,0,0,0,940,945,3,136,68,0,941,942,5,28,0,0,
        942,944,3,136,68,0,943,941,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,
        0,945,946,1,0,0,0,946,135,1,0,0,0,947,945,1,0,0,0,948,949,3,130,
        65,0,949,137,1,0,0,0,950,951,5,58,0,0,951,954,3,92,46,0,952,953,
        5,90,0,0,953,955,3,140,70,0,954,952,1,0,0,0,954,955,1,0,0,0,955,
        956,1,0,0,0,956,957,5,11,0,0,957,960,3,98,49,0,958,959,5,117,0,0,
        959,961,3,262,131,0,960,958,1,0,0,0,960,961,1,0,0,0,961,139,1,0,
        0,0,962,963,3,290,145,0,963,141,1,0,0,0,964,965,5,65,0,0,965,966,
        3,290,145,0,966,967,5,75,0,0,967,968,3,100,50,0,968,970,7,6,0,0,
        969,971,5,110,0,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,
        0,972,974,5,129,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,
        0,0,975,978,7,3,0,0,976,977,5,96,0,0,977,979,3,130,65,0,978,976,
        1,0,0,0,978,979,1,0,0,0,979,982,1,0,0,0,980,981,5,71,0,0,981,983,
        3,258,129,0,982,980,1,0,0,0,982,983,1,0,0,0,983,143,1,0,0,0,984,
        985,5,63,0,0,985,986,3,130,65,0,986,987,3,290,145,0,987,145,1,0,
        0,0,988,989,5,76,0,0,989,991,3,290,145,0,990,992,3,148,74,0,991,
        990,1,0,0,0,991,992,1,0,0,0,992,147,1,0,0,0,993,994,3,290,145,0,
        994,149,1,0,0,0,995,996,5,78,0,0,996,1008,3,152,76,0,997,998,5,163,
        0,0,998,1003,3,154,77,0,999,1000,5,174,0,0,1000,1002,3,154,77,0,
        1001,999,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,
        0,0,0,1004,1006,1,0,0,0,1005,1003,1,0,0,0,1006,1007,5,169,0,0,1007,
        1009,1,0,0,0,1008,997,1,0,0,0,1008,1009,1,0,0,0,1009,151,1,0,0,0,
        1010,1011,3,130,65,0,1011,153,1,0,0,0,1012,1013,3,152,76,0,1013,
        1014,5,158,0,0,1014,1015,3,266,133,0,1015,155,1,0,0,0,1016,1017,
        3,292,146,0,1017,157,1,0,0,0,1018,1019,5,79,0,0,1019,1020,3,162,
        81,0,1020,159,1,0,0,0,1021,1022,5,82,0,0,1022,1023,3,162,81,0,1023,
        161,1,0,0,0,1024,1025,3,290,145,0,1025,163,1,0,0,0,1026,1027,5,86,
        0,0,1027,1028,5,84,0,0,1028,1029,3,130,65,0,1029,1030,3,166,83,0,
        1030,165,1,0,0,0,1031,1032,3,290,145,0,1032,167,1,0,0,0,1033,1034,
        5,87,0,0,1034,1036,7,7,0,0,1035,1037,7,8,0,0,1036,1035,1,0,0,0,1036,
        1037,1,0,0,0,1037,1038,1,0,0,0,1038,1040,3,130,65,0,1039,1041,3,
        130,65,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,169,1,0,0,0,1042,
        1047,3,172,86,0,1043,1047,3,174,87,0,1044,1047,3,176,88,0,1045,1047,
        3,178,89,0,1046,1042,1,0,0,0,1046,1043,1,0,0,0,1046,1044,1,0,0,0,
        1046,1045,1,0,0,0,1047,171,1,0,0,0,1048,1049,5,85,0,0,1049,1050,
        3,130,65,0,1050,1052,3,266,133,0,1051,1053,7,3,0,0,1052,1051,1,0,
        0,0,1052,1053,1,0,0,0,1053,1056,1,0,0,0,1054,1055,5,71,0,0,1055,
        1057,3,258,129,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,173,1,
        0,0,0,1058,1059,5,85,0,0,1059,1060,5,67,0,0,1060,1061,3,130,65,0,
        1061,1063,3,266,133,0,1062,1064,5,129,0,0,1063,1062,1,0,0,0,1063,
        1064,1,0,0,0,1064,1066,1,0,0,0,1065,1067,7,3,0,0,1066,1065,1,0,0,
        0,1066,1067,1,0,0,0,1067,1070,1,0,0,0,1068,1069,5,96,0,0,1069,1071,
        3,130,65,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1074,1,0,0,0,
        1072,1073,5,71,0,0,1073,1075,3,258,129,0,1074,1072,1,0,0,0,1074,
        1075,1,0,0,0,1075,1076,1,0,0,0,1076,1077,3,4,2,0,1077,1078,5,45,
        0,0,1078,175,1,0,0,0,1079,1080,5,85,0,0,1080,1081,5,54,0,0,1081,
        1083,3,266,133,0,1082,1084,5,129,0,0,1083,1082,1,0,0,0,1083,1084,
        1,0,0,0,1084,1086,1,0,0,0,1085,1087,7,3,0,0,1086,1085,1,0,0,0,1086,
        1087,1,0,0,0,1087,1090,1,0,0,0,1088,1089,5,96,0,0,1089,1091,3,130,
        65,0,1090,1088,1,0,0,0,1090,1091,1,0,0,0,1091,1094,1,0,0,0,1092,
        1093,5,71,0,0,1093,1095,3,258,129,0,1094,1092,1,0,0,0,1094,1095,
        1,0,0,0,1095,1096,1,0,0,0,1096,1097,3,4,2,0,1097,1098,5,45,0,0,1098,
        177,1,0,0,0,1099,1100,5,85,0,0,1100,1101,5,70,0,0,1101,1102,3,266,
        133,0,1102,1103,7,4,0,0,1103,1106,3,130,65,0,1104,1105,5,146,0,0,
        1105,1107,3,130,65,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1109,
        1,0,0,0,1108,1110,5,129,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,
        1110,1112,1,0,0,0,1111,1113,7,3,0,0,1112,1111,1,0,0,0,1112,1113,
        1,0,0,0,1113,1116,1,0,0,0,1114,1115,5,96,0,0,1115,1117,3,130,65,
        0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1120,1,0,0,0,1118,1119,
        5,71,0,0,1119,1121,3,258,129,0,1120,1118,1,0,0,0,1120,1121,1,0,0,
        0,1121,1122,1,0,0,0,1122,1123,3,4,2,0,1123,1124,5,45,0,0,1124,179,
        1,0,0,0,1125,1131,5,88,0,0,1126,1127,5,151,0,0,1127,1128,5,163,0,
        0,1128,1129,3,130,65,0,1129,1130,5,169,0,0,1130,1132,1,0,0,0,1131,
        1126,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,0,0,1133,1134,3,182,
        91,0,1134,1135,7,5,0,0,1135,181,1,0,0,0,1136,1137,3,4,2,0,1137,183,
        1,0,0,0,1138,1139,7,9,0,0,1139,185,1,0,0,0,1140,1141,5,91,0,0,1141,
        1142,3,184,92,0,1142,1143,5,163,0,0,1143,1144,3,98,49,0,1144,1145,
        5,28,0,0,1145,1146,3,98,49,0,1146,1155,5,169,0,0,1147,1148,5,157,
        0,0,1148,1149,3,184,92,0,1149,1150,5,163,0,0,1150,1151,3,98,49,0,
        1151,1152,5,28,0,0,1152,1153,3,98,49,0,1153,1154,5,169,0,0,1154,
        1156,1,0,0,0,1155,1147,1,0,0,0,1155,1156,1,0,0,0,1156,1159,1,0,0,
        0,1157,1158,5,71,0,0,1158,1160,3,258,129,0,1159,1157,1,0,0,0,1159,
        1160,1,0,0,0,1160,187,1,0,0,0,1161,1165,5,92,0,0,1162,1166,5,16,
        0,0,1163,1166,5,52,0,0,1164,1166,3,130,65,0,1165,1162,1,0,0,0,1165,
        1163,1,0,0,0,1165,1164,1,0,0,0,1166,1168,1,0,0,0,1167,1169,3,130,
        65,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,189,1,0,0,0,1170,1171,
        5,93,0,0,1171,1174,3,130,65,0,1172,1173,5,111,0,0,1173,1175,3,194,
        97,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,1177,1,0,0,0,1176,
        1178,3,192,96,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,
        0,0,0,1179,1184,3,290,145,0,1180,1181,5,111,0,0,1181,1185,3,196,
        98,0,1182,1185,5,133,0,0,1183,1185,5,134,0,0,1184,1180,1,0,0,0,1184,
        1182,1,0,0,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1188,1,0,0,
        0,1186,1187,5,71,0,0,1187,1189,3,258,129,0,1188,1186,1,0,0,0,1188,
        1189,1,0,0,0,1189,191,1,0,0,0,1190,1193,5,84,0,0,1191,1194,3,290,
        145,0,1192,1194,3,294,147,0,1193,1191,1,0,0,0,1193,1192,1,0,0,0,
        1194,193,1,0,0,0,1195,1198,3,290,145,0,1196,1198,3,294,147,0,1197,
        1195,1,0,0,0,1197,1196,1,0,0,0,1198,195,1,0,0,0,1199,1202,3,290,
        145,0,1200,1202,3,294,147,0,1201,1199,1,0,0,0,1201,1200,1,0,0,0,
        1202,197,1,0,0,0,1203,1204,5,94,0,0,1204,1207,3,290,145,0,1205,1206,
        5,66,0,0,1206,1208,3,292,146,0,1207,1205,1,0,0,0,1207,1208,1,0,0,
        0,1208,199,1,0,0,0,1209,1210,5,95,0,0,1210,1211,3,290,145,0,1211,
        201,1,0,0,0,1212,1213,5,97,0,0,1213,1216,3,130,65,0,1214,1217,3,
        290,145,0,1215,1217,3,294,147,0,1216,1214,1,0,0,0,1216,1215,1,0,
        0,0,1217,1220,1,0,0,0,1218,1219,5,69,0,0,1219,1221,3,290,145,0,1220,
        1218,1,0,0,0,1220,1221,1,0,0,0,1221,1223,1,0,0,0,1222,1224,5,121,
        0,0,1223,1222,1,0,0,0,1223,1224,1,0,0,0,1224,1227,1,0,0,0,1225,1226,
        5,71,0,0,1226,1228,3,258,129,0,1227,1225,1,0,0,0,1227,1228,1,0,0,
        0,1228,203,1,0,0,0,1229,1230,5,104,0,0,1230,1231,3,290,145,0,1231,
        1232,5,11,0,0,1232,1239,3,294,147,0,1233,1234,5,64,0,0,1234,1237,
        3,274,137,0,1235,1236,5,13,0,0,1236,1238,3,276,138,0,1237,1235,1,
        0,0,0,1237,1238,1,0,0,0,1238,1240,1,0,0,0,1239,1233,1,0,0,0,1239,
        1240,1,0,0,0,1240,1247,1,0,0,0,1241,1242,5,73,0,0,1242,1245,3,274,
        137,0,1243,1244,5,13,0,0,1244,1246,3,276,138,0,1245,1243,1,0,0,0,
        1245,1246,1,0,0,0,1246,1248,1,0,0,0,1247,1241,1,0,0,0,1247,1248,
        1,0,0,0,1248,1250,1,0,0,0,1249,1251,3,206,103,0,1250,1249,1,0,0,
        0,1250,1251,1,0,0,0,1251,205,1,0,0,0,1252,1253,3,290,145,0,1253,
        1254,5,69,0,0,1254,1255,3,290,145,0,1255,207,1,0,0,0,1256,1257,5,
        108,0,0,1257,1258,3,278,139,0,1258,1259,3,268,134,0,1259,209,1,0,
        0,0,1260,1264,5,113,0,0,1261,1265,3,130,65,0,1262,1265,5,23,0,0,
        1263,1265,5,56,0,0,1264,1261,1,0,0,0,1264,1262,1,0,0,0,1264,1263,
        1,0,0,0,1264,1265,1,0,0,0,1265,1268,1,0,0,0,1266,1267,5,139,0,0,
        1267,1269,3,130,65,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,211,
        1,0,0,0,1270,1273,5,114,0,0,1271,1272,5,11,0,0,1272,1274,3,280,140,
        0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,213,1,0,0,0,1275,1278,
        5,116,0,0,1276,1279,3,282,141,0,1277,1279,3,262,131,0,1278,1276,
        1,0,0,0,1278,1277,1,0,0,0,1279,215,1,0,0,0,1280,1286,5,120,0,0,1281,
        1284,3,130,65,0,1282,1285,3,130,65,0,1283,1285,5,27,0,0,1284,1282,
        1,0,0,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,1287,1,0,0,0,1286,
        1281,1,0,0,0,1286,1287,1,0,0,0,1287,217,1,0,0,0,1288,1294,5,119,
        0,0,1289,1295,3,130,65,0,1290,1291,3,220,110,0,1291,1292,5,12,0,
        0,1292,1293,3,222,111,0,1293,1295,1,0,0,0,1294,1289,1,0,0,0,1294,
        1290,1,0,0,0,1294,1295,1,0,0,0,1295,219,1,0,0,0,1296,1297,3,290,
        145,0,1297,221,1,0,0,0,1298,1299,3,290,145,0,1299,223,1,0,0,0,1300,
        1303,5,122,0,0,1301,1304,3,294,147,0,1302,1304,3,290,145,0,1303,
        1301,1,0,0,0,1303,1302,1,0,0,0,1304,1306,1,0,0,0,1305,1307,3,226,
        113,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,1309,1,0,0,0,1308,
        1310,5,145,0,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1313,1,0,
        0,0,1311,1312,5,81,0,0,1312,1314,3,130,65,0,1313,1311,1,0,0,0,1313,
        1314,1,0,0,0,1314,1317,1,0,0,0,1315,1316,5,106,0,0,1316,1318,3,130,
        65,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,225,1,0,0,0,1319,1320,
        3,290,145,0,1320,227,1,0,0,0,1321,1327,5,132,0,0,1322,1328,3,130,
        65,0,1323,1324,5,146,0,0,1324,1328,7,10,0,0,1325,1326,5,46,0,0,1326,
        1328,3,130,65,0,1327,1322,1,0,0,0,1327,1323,1,0,0,0,1327,1325,1,
        0,0,0,1328,1330,1,0,0,0,1329,1331,5,100,0,0,1330,1329,1,0,0,0,1330,
        1331,1,0,0,0,1331,229,1,0,0,0,1332,1333,5,135,0,0,1333,1335,3,130,
        65,0,1334,1336,3,130,65,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,
        231,1,0,0,0,1337,1338,5,124,0,0,1338,1339,3,130,65,0,1339,1340,3,
        290,145,0,1340,233,1,0,0,0,1341,1342,5,125,0,0,1342,1346,3,130,65,
        0,1343,1347,3,236,118,0,1344,1345,5,60,0,0,1345,1347,3,98,49,0,1346,
        1343,1,0,0,0,1346,1344,1,0,0,0,1347,235,1,0,0,0,1348,1351,3,262,
        131,0,1349,1351,3,130,65,0,1350,1348,1,0,0,0,1350,1349,1,0,0,0,1351,
        1354,1,0,0,0,1352,1353,5,103,0,0,1353,1355,3,130,65,0,1354,1352,
        1,0,0,0,1354,1355,1,0,0,0,1355,237,1,0,0,0,1356,1360,5,126,0,0,1357,
        1361,5,9,0,0,1358,1361,5,102,0,0,1359,1361,3,290,145,0,1360,1357,
        1,0,0,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,1362,1,0,0,0,1362,
        1363,3,130,65,0,1363,239,1,0,0,0,1364,1367,5,127,0,0,1365,1366,5,
        11,0,0,1366,1368,3,280,140,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,
        1368,1369,1,0,0,0,1369,1371,3,226,113,0,1370,1372,3,130,65,0,1371,
        1370,1,0,0,0,1371,1372,1,0,0,0,1372,1375,1,0,0,0,1373,1374,5,13,
        0,0,1374,1376,3,130,65,0,1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,
        241,1,0,0,0,1377,1378,5,130,0,0,1378,1381,3,260,130,0,1379,1382,
        3,266,133,0,1380,1382,5,9,0,0,1381,1379,1,0,0,0,1381,1380,1,0,0,
        0,1382,243,1,0,0,0,1383,1384,5,131,0,0,1384,1385,3,98,49,0,1385,
        1388,3,130,65,0,1386,1387,5,107,0,0,1387,1389,3,130,65,0,1388,1386,
        1,0,0,0,1388,1389,1,0,0,0,1389,1391,1,0,0,0,1390,1392,5,57,0,0,1391,
        1390,1,0,0,0,1391,1392,1,0,0,0,1392,245,1,0,0,0,1393,1394,5,136,
        0,0,1394,1395,3,130,65,0,1395,1396,3,290,145,0,1396,247,1,0,0,0,
        1397,1398,5,137,0,0,1398,1401,3,130,65,0,1399,1402,3,290,145,0,1400,
        1402,3,294,147,0,1401,1399,1,0,0,0,1401,1400,1,0,0,0,1402,1405,1,
        0,0,0,1403,1404,5,69,0,0,1404,1406,3,290,145,0,1405,1403,1,0,0,0,
        1405,1406,1,0,0,0,1406,1408,1,0,0,0,1407,1409,5,121,0,0,1408,1407,
        1,0,0,0,1408,1409,1,0,0,0,1409,1412,1,0,0,0,1410,1411,5,71,0,0,1411,
        1413,3,258,129,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,249,1,
        0,0,0,1414,1415,5,138,0,0,1415,1418,3,130,65,0,1416,1417,5,35,0,
        0,1417,1419,3,130,65,0,1418,1416,1,0,0,0,1418,1419,1,0,0,0,1419,
        1422,1,0,0,0,1420,1421,5,109,0,0,1421,1423,3,130,65,0,1422,1420,
        1,0,0,0,1422,1423,1,0,0,0,1423,1425,1,0,0,0,1424,1426,5,23,0,0,1425,
        1424,1,0,0,0,1425,1426,1,0,0,0,1426,1428,1,0,0,0,1427,1429,5,27,
        0,0,1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1431,1,0,0,0,1430,1432,
        5,77,0,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,251,1,0,0,0,1433,
        1434,5,147,0,0,1434,1435,3,280,140,0,1435,1436,5,106,0,0,1436,1437,
        3,130,65,0,1437,1438,1,0,0,0,1438,1439,5,71,0,0,1439,1440,3,258,
        129,0,1440,253,1,0,0,0,1441,1442,7,11,0,0,1442,255,1,0,0,0,1443,
        1444,7,12,0,0,1444,257,1,0,0,0,1445,1446,3,290,145,0,1446,259,1,
        0,0,0,1447,1448,3,292,146,0,1448,261,1,0,0,0,1449,1452,3,290,145,
        0,1450,1452,3,294,147,0,1451,1449,1,0,0,0,1451,1450,1,0,0,0,1452,
        263,1,0,0,0,1453,1454,3,292,146,0,1454,265,1,0,0,0,1455,1456,3,290,
        145,0,1456,267,1,0,0,0,1457,1458,3,290,145,0,1458,269,1,0,0,0,1459,
        1460,3,290,145,0,1460,271,1,0,0,0,1461,1462,3,294,147,0,1462,273,
        1,0,0,0,1463,1464,3,290,145,0,1464,275,1,0,0,0,1465,1466,5,181,0,
        0,1466,277,1,0,0,0,1467,1468,5,181,0,0,1468,279,1,0,0,0,1469,1470,
        3,290,145,0,1470,281,1,0,0,0,1471,1472,3,290,145,0,1472,283,1,0,
        0,0,1473,1474,3,290,145,0,1474,285,1,0,0,0,1475,1476,7,13,0,0,1476,
        287,1,0,0,0,1477,1478,7,14,0,0,1478,289,1,0,0,0,1479,1481,5,163,
        0,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1484,
        3,292,146,0,1483,1485,5,169,0,0,1484,1483,1,0,0,0,1484,1485,1,0,
        0,0,1485,291,1,0,0,0,1486,1489,5,180,0,0,1487,1489,3,286,143,0,1488,
        1486,1,0,0,0,1488,1487,1,0,0,0,1489,1497,1,0,0,0,1490,1493,5,156,
        0,0,1491,1494,5,180,0,0,1492,1494,3,286,143,0,1493,1491,1,0,0,0,
        1493,1492,1,0,0,0,1494,1496,1,0,0,0,1495,1490,1,0,0,0,1496,1499,
        1,0,0,0,1497,1495,1,0,0,0,1497,1498,1,0,0,0,1498,1511,1,0,0,0,1499,
        1497,1,0,0,0,1500,1501,5,161,0,0,1501,1506,3,130,65,0,1502,1503,
        5,28,0,0,1503,1505,3,130,65,0,1504,1502,1,0,0,0,1505,1508,1,0,0,
        0,1506,1504,1,0,0,0,1506,1507,1,0,0,0,1507,1509,1,0,0,0,1508,1506,
        1,0,0,0,1509,1510,5,168,0,0,1510,1512,1,0,0,0,1511,1500,1,0,0,0,
        1511,1512,1,0,0,0,1512,293,1,0,0,0,1513,1525,5,1,0,0,1514,1516,5,
        163,0,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,0,1517,
        1519,5,2,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1520,1,0,0,
        0,1520,1522,5,181,0,0,1521,1523,5,169,0,0,1522,1521,1,0,0,0,1522,
        1523,1,0,0,0,1523,1525,1,0,0,0,1524,1513,1,0,0,0,1524,1515,1,0,0,
        0,1525,295,1,0,0,0,200,300,303,308,370,375,385,387,395,399,403,413,
        417,423,427,430,434,442,446,466,470,475,479,483,488,493,497,501,
        505,512,516,528,532,539,542,547,553,562,566,572,574,578,585,589,
        598,605,608,614,618,621,625,631,635,641,644,648,652,655,663,666,
        670,674,677,685,688,692,696,699,713,718,727,732,735,738,742,746,
        749,757,761,772,776,779,790,804,809,819,823,826,830,834,843,847,
        849,868,872,874,883,892,901,916,922,924,926,931,937,945,954,960,
        970,973,978,982,991,1003,1008,1036,1040,1046,1052,1056,1063,1066,
        1070,1074,1083,1086,1090,1094,1106,1109,1112,1116,1120,1131,1155,
        1159,1165,1168,1174,1177,1184,1188,1193,1197,1201,1207,1216,1220,
        1223,1227,1237,1239,1245,1247,1250,1264,1268,1273,1278,1284,1286,
        1294,1303,1306,1309,1313,1317,1327,1330,1335,1346,1350,1354,1360,
        1367,1371,1375,1381,1388,1391,1401,1405,1408,1412,1418,1422,1425,
        1428,1431,1451,1480,1484,1488,1493,1497,1506,1511,1515,1518,1522,
        1524
    ]

class LDLPParser ( Parser ):

    grammarFileName = "LDLP.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'AsA'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "','", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':='", "'\\'", "<INVALID>", 
                     "<INVALID>", "'.'", "<INVALID>", "'='", "'>'", "<INVALID>", 
                     "'['", "<INVALID>", "'('", "'<'", "'<>'", "<INVALID>", 
                     "<INVALID>", "']'", "')'", "<INVALID>", "'isA'", "'>>'", 
                     "':'", "'&'", "'+'", "'-'", "'**'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>", "STRING_LITERALS", "Arithmetic_operators", 
                      "ABORT", "ACCESS_EXT", "ACCEPT", "ACTUAL", "ADD", 
                      "ADVANCE", "ALL", "ALWAYS", "AS", "ASA", "AT", "ATTACH", 
                      "ATTACH_AND_SPACE", "ATTENTION", "ATTRIBUTE", "BACK", 
                      "BDNAME", "BEGIN_CASE", "BEGIN_PAGE", "BREAK", "BYE", 
                      "CALL", "CASE", "CHANNEL", "CLEAR", "COMMA", "COMPARE_ASCENDING", 
                      "COMPARE_DESCENDING", "COMPUTE", "CONTINUE", "CRITICAL_POINT", 
                      "CURSOR", "DATA", "DATE_CONVERT", "DEBUG", "DELIMITER", 
                      "DETACH", "DETERMINE", "DIVIDE", "DO_WHEN", "EDIT_ONLY", 
                      "ELSE", "END", "END_AFTER", "END_CASE", "END_EXIT", 
                      "END_USE", "END_NO_PRINT", "END_OF_PAGE", "ERROR", 
                      "EVENT", "EVERY", "EXCLUSIVE", "EXIT", "EXIST", "EXTRACT", 
                      "EXTRACTED_AS", "FILE", "FIND", "FIRST", "FLAG", "FOOTING", 
                      "FOREACH", "FORMAT", "FROM", "GET", "GIVING", "GROUP", 
                      "GS", "HALT", "HEADING", "IF", "IN", "INITIALIZE", 
                      "INHERIT", "INSERT", "JUMP_TO", "KEY_ONLY", "LA", 
                      "LABEL", "LAST", "LENGTH", "LOOKUP", "LOAD", "LOG", 
                      "LOOP", "NUMERIC", "MAPPER", "MATCH", "MESSAGE", "MOVE", 
                      "MOVE_DATE", "MOVE_TIME", "MULTI", "MULTIPLY", "NEW_PAGE", 
                      "NEXT", "NO_COMMIT", "NO_RELEASE", "ODT", "ON", "ON_CHANGE", 
                      "OTHERWISE", "PA", "PACK", "PAGE", "PARTITION", "POLYMORPHIC", 
                      "POSITION", "PRIOR", "RECALL", "RELEASE", "REMAINDER", 
                      "RESTART", "RETAIN_AS", "RETAINED_AS", "RETURN", "ROC", 
                      "ROUNDED", "RUN", "SECURE", "SEND_LIST_DYNAMIC", "SEND_LIST_STATIC", 
                      "SEND_MESSAGE", "SEND_PRINT", "SEND_STATUS", "SERIAL", 
                      "SET_DB", "SET_TITLE", "SLEEP", "SORTA", "SORTD", 
                      "START", "STN_INFO", "SUBTRACT", "SWITCH_TO", "TEACH", 
                      "THIS", "TO_ALPHA", "TOTAL", "TODAY_NUMBER", "TO_DATE", 
                      "TRACE", "UNTIL", "WAKE", "WAKEUP", "WARNING", "WOKEN", 
                      "WHILE", "ASSIGN", "Backslash", "WS", "COMMENT", "DOT", 
                      "AND", "EQ", "GT", "GE", "LB", "LE", "LP", "LT", "NEQ", 
                      "NOT", "OR", "RB", "RP", "CAST", "ISA", "SHIFT", "COLON", 
                      "AMPERSAND", "PLUS", "MINUS", "EXP", "MULT", "DIV", 
                      "IDENTIFIER", "NUMERIC_LITERALS" ]

    RULE_startRule = 0
    RULE_runtime = 1
    RULE_statements = 2
    RULE_statement = 3
    RULE_functionCallingStatement = 4
    RULE_function_name = 5
    RULE_abortStatement = 6
    RULE_acceptStatement = 7
    RULE_accessExtStatement = 8
    RULE_locator = 9
    RULE_find = 10
    RULE_get = 11
    RULE_database = 12
    RULE_item = 13
    RULE_addStatement = 14
    RULE_advanceStatement = 15
    RULE_outputStream = 16
    RULE_assignment = 17
    RULE_attachStatement = 18
    RULE_attachAndSpaceStatement = 19
    RULE_attributeStatement = 20
    RULE_beginpageStatement = 21
    RULE_breakStatement = 22
    RULE_case = 23
    RULE_otherwise = 24
    RULE_caseStatement = 25
    RULE_beginCase = 26
    RULE_endcase = 27
    RULE_computeStatement = 28
    RULE_continueStatement = 29
    RULE_criticalpointStatement = 30
    RULE_cursorStatement = 31
    RULE_dateConvertStatement = 32
    RULE_dateVariable = 33
    RULE_detachStatement = 34
    RULE_determineStatement = 35
    RULE_determineActualStatement = 36
    RULE_variant = 37
    RULE_databaseVariant = 38
    RULE_extractFileVariant = 39
    RULE_determineBackStatement = 40
    RULE_determineEveryStatement = 41
    RULE_determineFromStatement = 42
    RULE_determineGroupStatement = 43
    RULE_determineLastStatement = 44
    RULE_determineTotalStatement = 45
    RULE_attributeName = 46
    RULE_keyArguments = 47
    RULE_records = 48
    RULE_extractFile = 49
    RULE_iterator = 50
    RULE_argument = 51
    RULE_determineEnd = 52
    RULE_divideStatement = 53
    RULE_dowhenBlock = 54
    RULE_elseBlock = 55
    RULE_dowhenStatement = 56
    RULE_condition = 57
    RULE_classAttribute = 58
    RULE_endDowhen = 59
    RULE_enduseStatement = 60
    RULE_excludeStatement = 61
    RULE_ifStatement = 62
    RULE_endIf = 63
    RULE_methodCall = 64
    RULE_expression = 65
    RULE_stringExpression = 66
    RULE_paramList = 67
    RULE_param = 68
    RULE_extractStatement = 69
    RULE_header = 70
    RULE_foreachStatement = 71
    RULE_flagStatement = 72
    RULE_initializeStatement = 73
    RULE_initializationValue = 74
    RULE_insertStatement = 75
    RULE_insertable = 76
    RULE_mapping = 77
    RULE_tableName = 78
    RULE_jumptoStatement = 79
    RULE_labelStatement = 80
    RULE_label = 81
    RULE_loadStatement = 82
    RULE_ispecAttribute = 83
    RULE_logStatement = 84
    RULE_lookupStatement = 85
    RULE_lookupBaseStatement = 86
    RULE_lookupFromStatement = 87
    RULE_lookupEveryStatement = 88
    RULE_lookupGroupStatement = 89
    RULE_loopStatement = 90
    RULE_loopBlock = 91
    RULE_compareType = 92
    RULE_matchStatement = 93
    RULE_messageStatement = 94
    RULE_moveStatement = 95
    RULE_length = 96
    RULE_source_variable = 97
    RULE_target_variable = 98
    RULE_movedateStatement = 99
    RULE_movetimeStatement = 100
    RULE_multiplyStatement = 101
    RULE_onchangeStatement = 102
    RULE_routineCall = 103
    RULE_pageStatement = 104
    RULE_recallStatement = 105
    RULE_releaseStatement = 106
    RULE_restartStatement = 107
    RULE_rocStatement = 108
    RULE_returnStatement = 109
    RULE_instance = 110
    RULE_interface = 111
    RULE_runStatement = 112
    RULE_device = 113
    RULE_sleepStatement = 114
    RULE_startStatement = 115
    RULE_sendListDynamicStatement = 116
    RULE_sendListStaticStatement = 117
    RULE_downloadFile = 118
    RULE_sendMessageStatement = 119
    RULE_sendPrintStatement = 120
    RULE_setDBStatement = 121
    RULE_setTitleStatement = 122
    RULE_stninfoStatement = 123
    RULE_subtractStatement = 124
    RULE_switchtoStatement = 125
    RULE_wakeStatement = 126
    RULE_relational_operator = 127
    RULE_logical_operator = 128
    RULE_status = 129
    RULE_dbName = 130
    RULE_fileName = 131
    RULE_dateFormat = 132
    RULE_className = 133
    RULE_varName = 134
    RULE_objectName = 135
    RULE_userCode = 136
    RULE_frameName = 137
    RULE_lineNumber = 138
    RULE_pageNumber = 139
    RULE_reportName = 140
    RULE_profileName = 141
    RULE_deviceName = 142
    RULE_keywords = 143
    RULE_specialName = 144
    RULE_variable = 145
    RULE_identifier = 146
    RULE_literal = 147

    ruleNames =  [ "startRule", "runtime", "statements", "statement", "functionCallingStatement", 
                   "function_name", "abortStatement", "acceptStatement", 
                   "accessExtStatement", "locator", "find", "get", "database", 
                   "item", "addStatement", "advanceStatement", "outputStream", 
                   "assignment", "attachStatement", "attachAndSpaceStatement", 
                   "attributeStatement", "beginpageStatement", "breakStatement", 
                   "case", "otherwise", "caseStatement", "beginCase", "endcase", 
                   "computeStatement", "continueStatement", "criticalpointStatement", 
                   "cursorStatement", "dateConvertStatement", "dateVariable", 
                   "detachStatement", "determineStatement", "determineActualStatement", 
                   "variant", "databaseVariant", "extractFileVariant", "determineBackStatement", 
                   "determineEveryStatement", "determineFromStatement", 
                   "determineGroupStatement", "determineLastStatement", 
                   "determineTotalStatement", "attributeName", "keyArguments", 
                   "records", "extractFile", "iterator", "argument", "determineEnd", 
                   "divideStatement", "dowhenBlock", "elseBlock", "dowhenStatement", 
                   "condition", "classAttribute", "endDowhen", "enduseStatement", 
                   "excludeStatement", "ifStatement", "endIf", "methodCall", 
                   "expression", "stringExpression", "paramList", "param", 
                   "extractStatement", "header", "foreachStatement", "flagStatement", 
                   "initializeStatement", "initializationValue", "insertStatement", 
                   "insertable", "mapping", "tableName", "jumptoStatement", 
                   "labelStatement", "label", "loadStatement", "ispecAttribute", 
                   "logStatement", "lookupStatement", "lookupBaseStatement", 
                   "lookupFromStatement", "lookupEveryStatement", "lookupGroupStatement", 
                   "loopStatement", "loopBlock", "compareType", "matchStatement", 
                   "messageStatement", "moveStatement", "length", "source_variable", 
                   "target_variable", "movedateStatement", "movetimeStatement", 
                   "multiplyStatement", "onchangeStatement", "routineCall", 
                   "pageStatement", "recallStatement", "releaseStatement", 
                   "restartStatement", "rocStatement", "returnStatement", 
                   "instance", "interface", "runStatement", "device", "sleepStatement", 
                   "startStatement", "sendListDynamicStatement", "sendListStaticStatement", 
                   "downloadFile", "sendMessageStatement", "sendPrintStatement", 
                   "setDBStatement", "setTitleStatement", "stninfoStatement", 
                   "subtractStatement", "switchtoStatement", "wakeStatement", 
                   "relational_operator", "logical_operator", "status", 
                   "dbName", "fileName", "dateFormat", "className", "varName", 
                   "objectName", "userCode", "frameName", "lineNumber", 
                   "pageNumber", "reportName", "profileName", "deviceName", 
                   "keywords", "specialName", "variable", "identifier", 
                   "literal" ]

    EOF = Token.EOF
    STRING_LITERALS=1
    Arithmetic_operators=2
    ABORT=3
    ACCESS_EXT=4
    ACCEPT=5
    ACTUAL=6
    ADD=7
    ADVANCE=8
    ALL=9
    ALWAYS=10
    AS=11
    ASA=12
    AT=13
    ATTACH=14
    ATTACH_AND_SPACE=15
    ATTENTION=16
    ATTRIBUTE=17
    BACK=18
    BDNAME=19
    BEGIN_CASE=20
    BEGIN_PAGE=21
    BREAK=22
    BYE=23
    CALL=24
    CASE=25
    CHANNEL=26
    CLEAR=27
    COMMA=28
    COMPARE_ASCENDING=29
    COMPARE_DESCENDING=30
    COMPUTE=31
    CONTINUE=32
    CRITICAL_POINT=33
    CURSOR=34
    DATA=35
    DATE_CONVERT=36
    DEBUG=37
    DELIMITER=38
    DETACH=39
    DETERMINE=40
    DIVIDE=41
    DO_WHEN=42
    EDIT_ONLY=43
    ELSE=44
    END=45
    END_AFTER=46
    END_CASE=47
    END_EXIT=48
    END_USE=49
    END_NO_PRINT=50
    END_OF_PAGE=51
    ERROR=52
    EVENT=53
    EVERY=54
    EXCLUSIVE=55
    EXIT=56
    EXIST=57
    EXTRACT=58
    EXTRACTED_AS=59
    FILE=60
    FIND=61
    FIRST=62
    FLAG=63
    FOOTING=64
    FOREACH=65
    FORMAT=66
    FROM=67
    GET=68
    GIVING=69
    GROUP=70
    GS=71
    HALT=72
    HEADING=73
    IF=74
    IN=75
    INITIALIZE=76
    INHERIT=77
    INSERT=78
    JUMP_TO=79
    KEY_ONLY=80
    LA=81
    LABEL=82
    LAST=83
    LENGTH=84
    LOOKUP=85
    LOAD=86
    LOG=87
    LOOP=88
    NUMERIC=89
    MAPPER=90
    MATCH=91
    MESSAGE=92
    MOVE=93
    MOVE_DATE=94
    MOVE_TIME=95
    MULTI=96
    MULTIPLY=97
    NEW_PAGE=98
    NEXT=99
    NO_COMMIT=100
    NO_RELEASE=101
    ODT=102
    ON=103
    ON_CHANGE=104
    OTHERWISE=105
    PA=106
    PACK=107
    PAGE=108
    PARTITION=109
    POLYMORPHIC=110
    POSITION=111
    PRIOR=112
    RECALL=113
    RELEASE=114
    REMAINDER=115
    RESTART=116
    RETAIN_AS=117
    RETAINED_AS=118
    RETURN=119
    ROC=120
    ROUNDED=121
    RUN=122
    SECURE=123
    SEND_LIST_DYNAMIC=124
    SEND_LIST_STATIC=125
    SEND_MESSAGE=126
    SEND_PRINT=127
    SEND_STATUS=128
    SERIAL=129
    SET_DB=130
    SET_TITLE=131
    SLEEP=132
    SORTA=133
    SORTD=134
    START=135
    STN_INFO=136
    SUBTRACT=137
    SWITCH_TO=138
    TEACH=139
    THIS=140
    TO_ALPHA=141
    TOTAL=142
    TODAY_NUMBER=143
    TO_DATE=144
    TRACE=145
    UNTIL=146
    WAKE=147
    WAKEUP=148
    WARNING=149
    WOKEN=150
    WHILE=151
    ASSIGN=152
    Backslash=153
    WS=154
    COMMENT=155
    DOT=156
    AND=157
    EQ=158
    GT=159
    GE=160
    LB=161
    LE=162
    LP=163
    LT=164
    NEQ=165
    NOT=166
    OR=167
    RB=168
    RP=169
    CAST=170
    ISA=171
    SHIFT=172
    COLON=173
    AMPERSAND=174
    PLUS=175
    MINUS=176
    EXP=177
    MULT=178
    DIV=179
    IDENTIFIER=180
    NUMERIC_LITERALS=181

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def runtime(self):
            return self.getTypedRuleContext(LDLPParser.RuntimeContext,0)


        def EOF(self):
            return self.getToken(LDLPParser.EOF, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = LDLPParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.runtime()
            self.state = 297
            self.match(LDLPParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuntimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_runtime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuntime" ):
                listener.enterRuntime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuntime" ):
                listener.exitRuntime(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRuntime" ):
                return visitor.visitRuntime(self)
            else:
                return visitor.visitChildren(self)




    def runtime(self):

        localctx = LDLPParser.RuntimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_runtime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 299
                self.expression(0)


            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 302
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.StatementContext)
            else:
                return self.getTypedRuleContext(LDLPParser.StatementContext,i)


        def getRuleIndex(self):
            return LDLPParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = LDLPParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 305
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 308 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moveStatement(self):
            return self.getTypedRuleContext(LDLPParser.MoveStatementContext,0)


        def assignment(self):
            return self.getTypedRuleContext(LDLPParser.AssignmentContext,0)


        def dowhenStatement(self):
            return self.getTypedRuleContext(LDLPParser.DowhenStatementContext,0)


        def recallStatement(self):
            return self.getTypedRuleContext(LDLPParser.RecallStatementContext,0)


        def advanceStatement(self):
            return self.getTypedRuleContext(LDLPParser.AdvanceStatementContext,0)


        def addStatement(self):
            return self.getTypedRuleContext(LDLPParser.AddStatementContext,0)


        def divideStatement(self):
            return self.getTypedRuleContext(LDLPParser.DivideStatementContext,0)


        def multiplyStatement(self):
            return self.getTypedRuleContext(LDLPParser.MultiplyStatementContext,0)


        def dateConvertStatement(self):
            return self.getTypedRuleContext(LDLPParser.DateConvertStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(LDLPParser.InsertStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(LDLPParser.CaseStatementContext,0)


        def computeStatement(self):
            return self.getTypedRuleContext(LDLPParser.ComputeStatementContext,0)


        def determineStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(LDLPParser.BreakStatementContext,0)


        def accessExtStatement(self):
            return self.getTypedRuleContext(LDLPParser.AccessExtStatementContext,0)


        def lookupStatement(self):
            return self.getTypedRuleContext(LDLPParser.LookupStatementContext,0)


        def attachStatement(self):
            return self.getTypedRuleContext(LDLPParser.AttachStatementContext,0)


        def attachAndSpaceStatement(self):
            return self.getTypedRuleContext(LDLPParser.AttachAndSpaceStatementContext,0)


        def messageStatement(self):
            return self.getTypedRuleContext(LDLPParser.MessageStatementContext,0)


        def acceptStatement(self):
            return self.getTypedRuleContext(LDLPParser.AcceptStatementContext,0)


        def jumptoStatement(self):
            return self.getTypedRuleContext(LDLPParser.JumptoStatementContext,0)


        def extractStatement(self):
            return self.getTypedRuleContext(LDLPParser.ExtractStatementContext,0)


        def sleepStatement(self):
            return self.getTypedRuleContext(LDLPParser.SleepStatementContext,0)


        def labelStatement(self):
            return self.getTypedRuleContext(LDLPParser.LabelStatementContext,0)


        def subtractStatement(self):
            return self.getTypedRuleContext(LDLPParser.SubtractStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(LDLPParser.CursorStatementContext,0)


        def flagStatement(self):
            return self.getTypedRuleContext(LDLPParser.FlagStatementContext,0)


        def detachStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetachStatementContext,0)


        def movedateStatement(self):
            return self.getTypedRuleContext(LDLPParser.MovedateStatementContext,0)


        def initializeStatement(self):
            return self.getTypedRuleContext(LDLPParser.InitializeStatementContext,0)


        def abortStatement(self):
            return self.getTypedRuleContext(LDLPParser.AbortStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(LDLPParser.ContinueStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(LDLPParser.IfStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(LDLPParser.LoopStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(LDLPParser.ReturnStatementContext,0)


        def rocStatement(self):
            return self.getTypedRuleContext(LDLPParser.RocStatementContext,0)


        def startStatement(self):
            return self.getTypedRuleContext(LDLPParser.StartStatementContext,0)


        def switchtoStatement(self):
            return self.getTypedRuleContext(LDLPParser.SwitchtoStatementContext,0)


        def criticalpointStatement(self):
            return self.getTypedRuleContext(LDLPParser.CriticalpointStatementContext,0)


        def enduseStatement(self):
            return self.getTypedRuleContext(LDLPParser.EnduseStatementContext,0)


        def excludeStatement(self):
            return self.getTypedRuleContext(LDLPParser.ExcludeStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(LDLPParser.LoadStatementContext,0)


        def matchStatement(self):
            return self.getTypedRuleContext(LDLPParser.MatchStatementContext,0)


        def setDBStatement(self):
            return self.getTypedRuleContext(LDLPParser.SetDBStatementContext,0)


        def sendListDynamicStatement(self):
            return self.getTypedRuleContext(LDLPParser.SendListDynamicStatementContext,0)


        def sendListStaticStatement(self):
            return self.getTypedRuleContext(LDLPParser.SendListStaticStatementContext,0)


        def sendMessageStatement(self):
            return self.getTypedRuleContext(LDLPParser.SendMessageStatementContext,0)


        def setTitleStatement(self):
            return self.getTypedRuleContext(LDLPParser.SetTitleStatementContext,0)


        def attributeStatement(self):
            return self.getTypedRuleContext(LDLPParser.AttributeStatementContext,0)


        def beginpageStatement(self):
            return self.getTypedRuleContext(LDLPParser.BeginpageStatementContext,0)


        def onchangeStatement(self):
            return self.getTypedRuleContext(LDLPParser.OnchangeStatementContext,0)


        def pageStatement(self):
            return self.getTypedRuleContext(LDLPParser.PageStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(LDLPParser.ReleaseStatementContext,0)


        def restartStatement(self):
            return self.getTypedRuleContext(LDLPParser.RestartStatementContext,0)


        def runStatement(self):
            return self.getTypedRuleContext(LDLPParser.RunStatementContext,0)


        def sendPrintStatement(self):
            return self.getTypedRuleContext(LDLPParser.SendPrintStatementContext,0)


        def wakeStatement(self):
            return self.getTypedRuleContext(LDLPParser.WakeStatementContext,0)


        def logStatement(self):
            return self.getTypedRuleContext(LDLPParser.LogStatementContext,0)


        def functionCallingStatement(self):
            return self.getTypedRuleContext(LDLPParser.FunctionCallingStatementContext,0)


        def movetimeStatement(self):
            return self.getTypedRuleContext(LDLPParser.MovetimeStatementContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = LDLPParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        try:
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self.moveStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 311
                self.assignment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 312
                self.dowhenStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 313
                self.recallStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 314
                self.advanceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 315
                self.addStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 316
                self.divideStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 317
                self.multiplyStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 318
                self.dateConvertStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 319
                self.insertStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 320
                self.caseStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 321
                self.computeStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 322
                self.determineStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 323
                self.breakStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 324
                self.accessExtStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 325
                self.lookupStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 326
                self.attachStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 327
                self.attachAndSpaceStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 328
                self.messageStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 329
                self.acceptStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 330
                self.jumptoStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 331
                self.extractStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 332
                self.sleepStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 333
                self.labelStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 334
                self.subtractStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 335
                self.cursorStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 336
                self.flagStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 337
                self.detachStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 338
                self.movedateStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 339
                self.initializeStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 340
                self.abortStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 341
                self.continueStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 342
                self.ifStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 343
                self.loopStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 344
                self.returnStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 345
                self.rocStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 346
                self.startStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 347
                self.switchtoStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 348
                self.criticalpointStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 349
                self.enduseStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 350
                self.excludeStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 351
                self.loadStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 352
                self.matchStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 353
                self.setDBStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 354
                self.sendListDynamicStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 355
                self.sendListStaticStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 356
                self.sendMessageStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 357
                self.setTitleStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 358
                self.attributeStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 359
                self.beginpageStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 360
                self.onchangeStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 361
                self.pageStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 362
                self.releaseStatement()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 363
                self.restartStatement()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 364
                self.runStatement()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 365
                self.sendPrintStatement()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 366
                self.wakeStatement()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 367
                self.logStatement()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 368
                self.functionCallingStatement()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 369
                self.movetimeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(LDLPParser.Function_nameContext,0)


        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def paramList(self):
            return self.getTypedRuleContext(LDLPParser.ParamListContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_functionCallingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallingStatement" ):
                listener.enterFunctionCallingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallingStatement" ):
                listener.exitFunctionCallingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallingStatement" ):
                return visitor.visitFunctionCallingStatement(self)
            else:
                return visitor.visitChildren(self)




    def functionCallingStatement(self):

        localctx = LDLPParser.FunctionCallingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_functionCallingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.function_name()
            self.state = 373
            self.match(LDLPParser.LP)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4688216425767108866) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 13510833258364927) != 0):
                self.state = 374
                self.paramList()


            self.state = 377
            self.match(LDLPParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = LDLPParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbortStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT(self):
            return self.getToken(LDLPParser.ABORT, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.LiteralContext)
            else:
                return self.getTypedRuleContext(LDLPParser.LiteralContext,i)


        def objectName(self):
            return self.getTypedRuleContext(LDLPParser.ObjectNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_abortStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbortStatement" ):
                listener.enterAbortStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbortStatement" ):
                listener.exitAbortStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbortStatement" ):
                return visitor.visitAbortStatement(self)
            else:
                return visitor.visitChildren(self)




    def abortStatement(self):

        localctx = LDLPParser.AbortStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_abortStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(LDLPParser.ABORT)
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 382
                self.literal()
                self.state = 385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 383
                    self.literal()

                elif la_ == 2:
                    self.state = 384
                    self.objectName()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCEPT(self):
            return self.getToken(LDLPParser.ACCEPT, 0)

        def objectName(self):
            return self.getTypedRuleContext(LDLPParser.ObjectNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_acceptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcceptStatement" ):
                listener.enterAcceptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcceptStatement" ):
                listener.exitAcceptStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAcceptStatement" ):
                return visitor.visitAcceptStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptStatement(self):

        localctx = LDLPParser.AcceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_acceptStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(LDLPParser.ACCEPT)
            self.state = 390
            self.objectName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessExtStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS_EXT(self):
            return self.getToken(LDLPParser.ACCESS_EXT, 0)

        def dbName(self):
            return self.getTypedRuleContext(LDLPParser.DbNameContext,0)


        def locator(self):
            return self.getTypedRuleContext(LDLPParser.LocatorContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_accessExtStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessExtStatement" ):
                listener.enterAccessExtStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessExtStatement" ):
                listener.exitAccessExtStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessExtStatement" ):
                return visitor.visitAccessExtStatement(self)
            else:
                return visitor.visitChildren(self)




    def accessExtStatement(self):

        localctx = LDLPParser.AccessExtStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_accessExtStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(LDLPParser.ACCESS_EXT)
            self.state = 393
            self.dbName()
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 394
                self.locator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def find(self):
            return self.getTypedRuleContext(LDLPParser.FindContext,0)


        def get(self):
            return self.getTypedRuleContext(LDLPParser.GetContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_locator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocator" ):
                listener.enterLocator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocator" ):
                listener.exitLocator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocator" ):
                return visitor.visitLocator(self)
            else:
                return visitor.visitChildren(self)




    def locator(self):

        localctx = LDLPParser.LocatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_locator)
        try:
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 397
                self.find()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self.get()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIND(self):
            return self.getToken(LDLPParser.FIND, 0)

        def database(self):
            return self.getTypedRuleContext(LDLPParser.DatabaseContext,0)


        def FIRST(self):
            return self.getToken(LDLPParser.FIRST, 0)

        def LAST(self):
            return self.getToken(LDLPParser.LAST, 0)

        def NEXT(self):
            return self.getToken(LDLPParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(LDLPParser.PRIOR, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_find

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFind" ):
                listener.enterFind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFind" ):
                listener.exitFind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind" ):
                return visitor.visitFind(self)
            else:
                return visitor.visitChildren(self)




    def find(self):

        localctx = LDLPParser.FindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_find)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(LDLPParser.FIND)
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 402
                _la = self._input.LA(1)
                if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 1126037347893249) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 405
            self.database()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(LDLPParser.GET, 0)

        def database(self):
            return self.getTypedRuleContext(LDLPParser.DatabaseContext,0)


        def item(self):
            return self.getTypedRuleContext(LDLPParser.ItemContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_get

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet" ):
                listener.enterGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet" ):
                listener.exitGet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGet" ):
                return visitor.visitGet(self)
            else:
                return visitor.visitChildren(self)




    def get(self):

        localctx = LDLPParser.GetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_get)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(LDLPParser.GET)
            self.state = 408
            self.database()
            self.state = 409
            self.item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase" ):
                listener.enterDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase" ):
                listener.exitDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase" ):
                return visitor.visitDatabase(self)
            else:
                return visitor.visitChildren(self)




    def database(self):

        localctx = LDLPParser.DatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_database)
        try:
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItem" ):
                listener.enterItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItem" ):
                listener.exitItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItem" ):
                return visitor.visitItem(self)
            else:
                return visitor.visitChildren(self)




    def item(self):

        localctx = LDLPParser.ItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_item)
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(LDLPParser.ADD, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.VariableContext)
            else:
                return self.getTypedRuleContext(LDLPParser.VariableContext,i)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def GIVING(self):
            return self.getToken(LDLPParser.GIVING, 0)

        def ROUNDED(self):
            return self.getToken(LDLPParser.ROUNDED, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_addStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddStatement" ):
                listener.enterAddStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddStatement" ):
                listener.exitAddStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddStatement" ):
                return visitor.visitAddStatement(self)
            else:
                return visitor.visitChildren(self)




    def addStatement(self):

        localctx = LDLPParser.AddStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_addStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(LDLPParser.ADD)
            self.state = 420
            self.expression(0)
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 421
                self.variable()
                pass

            elif la_ == 2:
                self.state = 422
                self.literal()
                pass


            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 425
                self.match(LDLPParser.GIVING)
                self.state = 426
                self.variable()


            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 429
                self.match(LDLPParser.ROUNDED)


            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 432
                self.match(LDLPParser.GS)
                self.state = 433
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdvanceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADVANCE(self):
            return self.getToken(LDLPParser.ADVANCE, 0)

        def NUMERIC_LITERALS(self):
            return self.getToken(LDLPParser.NUMERIC_LITERALS, 0)

        def NEW_PAGE(self):
            return self.getToken(LDLPParser.NEW_PAGE, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def CHANNEL(self):
            return self.getToken(LDLPParser.CHANNEL, 0)

        def AS(self):
            return self.getToken(LDLPParser.AS, 0)

        def outputStream(self):
            return self.getTypedRuleContext(LDLPParser.OutputStreamContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_advanceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdvanceStatement" ):
                listener.enterAdvanceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdvanceStatement" ):
                listener.exitAdvanceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdvanceStatement" ):
                return visitor.visitAdvanceStatement(self)
            else:
                return visitor.visitChildren(self)




    def advanceStatement(self):

        localctx = LDLPParser.AdvanceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_advanceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(LDLPParser.ADVANCE)
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 437
                self.match(LDLPParser.NUMERIC_LITERALS)
                pass

            elif la_ == 2:
                self.state = 438
                self.match(LDLPParser.NEW_PAGE)
                pass

            elif la_ == 3:
                self.state = 439
                self.variable()
                pass

            elif la_ == 4:
                self.state = 440
                self.match(LDLPParser.CHANNEL)
                self.state = 441
                self.match(LDLPParser.NUMERIC_LITERALS)
                pass


            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 444
                self.match(LDLPParser.AS)
                self.state = 445
                self.outputStream()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputStreamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_outputStream

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputStream" ):
                listener.enterOutputStream(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputStream" ):
                listener.exitOutputStream(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputStream" ):
                return visitor.visitOutputStream(self)
            else:
                return visitor.visitChildren(self)




    def outputStream(self):

        localctx = LDLPParser.OutputStreamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_outputStream)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def ASSIGN(self):
            return self.getToken(LDLPParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = LDLPParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.variable()
            self.state = 451
            self.match(LDLPParser.ASSIGN)
            self.state = 452
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(LDLPParser.ATTACH, 0)

        def stringExpression(self):
            return self.getTypedRuleContext(LDLPParser.StringExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_attachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttachStatement" ):
                listener.enterAttachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttachStatement" ):
                listener.exitAttachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttachStatement" ):
                return visitor.visitAttachStatement(self)
            else:
                return visitor.visitChildren(self)




    def attachStatement(self):

        localctx = LDLPParser.AttachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attachStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(LDLPParser.ATTACH)
            self.state = 455
            self.stringExpression()
            self.state = 456
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttachAndSpaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH_AND_SPACE(self):
            return self.getToken(LDLPParser.ATTACH_AND_SPACE, 0)

        def stringExpression(self):
            return self.getTypedRuleContext(LDLPParser.StringExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_attachAndSpaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttachAndSpaceStatement" ):
                listener.enterAttachAndSpaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttachAndSpaceStatement" ):
                listener.exitAttachAndSpaceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttachAndSpaceStatement" ):
                return visitor.visitAttachAndSpaceStatement(self)
            else:
                return visitor.visitChildren(self)




    def attachAndSpaceStatement(self):

        localctx = LDLPParser.AttachAndSpaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attachAndSpaceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(LDLPParser.ATTACH_AND_SPACE)
            self.state = 459
            self.stringExpression()
            self.state = 460
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(LDLPParser.ATTRIBUTE, 0)

        def BDNAME(self):
            return self.getToken(LDLPParser.BDNAME, 0)

        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def userCode(self):
            return self.getTypedRuleContext(LDLPParser.UserCodeContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_attributeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStatement" ):
                listener.enterAttributeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStatement" ):
                listener.exitAttributeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeStatement" ):
                return visitor.visitAttributeStatement(self)
            else:
                return visitor.visitChildren(self)




    def attributeStatement(self):

        localctx = LDLPParser.AttributeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_attributeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(LDLPParser.ATTRIBUTE)
            self.state = 463
            self.match(LDLPParser.BDNAME)
            self.state = 464
            self.literal()
            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 465
                self.userCode()


            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 468
                self.match(LDLPParser.GS)
                self.state = 469
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginpageStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_PAGE(self):
            return self.getToken(LDLPParser.BEGIN_PAGE, 0)

        def CLEAR(self):
            return self.getToken(LDLPParser.CLEAR, 0)

        def frameName(self):
            return self.getTypedRuleContext(LDLPParser.FrameNameContext,0)


        def AS(self):
            return self.getToken(LDLPParser.AS, 0)

        def outputStream(self):
            return self.getTypedRuleContext(LDLPParser.OutputStreamContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_beginpageStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginpageStatement" ):
                listener.enterBeginpageStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginpageStatement" ):
                listener.exitBeginpageStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginpageStatement" ):
                return visitor.visitBeginpageStatement(self)
            else:
                return visitor.visitChildren(self)




    def beginpageStatement(self):

        localctx = LDLPParser.BeginpageStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_beginpageStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(LDLPParser.BEGIN_PAGE)
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 473
                self.match(LDLPParser.CLEAR)
                pass

            elif la_ == 2:
                self.state = 474
                self.frameName()
                pass


            self.state = 479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 477
                self.match(LDLPParser.AS)
                self.state = 478
                self.outputStream()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(LDLPParser.BREAK, 0)

        def ALL(self):
            return self.getToken(LDLPParser.ALL, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = LDLPParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(LDLPParser.BREAK)
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 482
                self.match(LDLPParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(LDLPParser.CASE, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.LiteralContext)
            else:
                return self.getTypedRuleContext(LDLPParser.LiteralContext,i)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.VariableContext)
            else:
                return self.getTypedRuleContext(LDLPParser.VariableContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.COMMA)
            else:
                return self.getToken(LDLPParser.COMMA, i)

        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase" ):
                listener.enterCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase" ):
                listener.exitCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase" ):
                return visitor.visitCase(self)
            else:
                return visitor.visitChildren(self)




    def case(self):

        localctx = LDLPParser.CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(LDLPParser.CASE)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 486
                self.literal()
                pass

            elif la_ == 2:
                self.state = 487
                self.variable()
                pass


            self.state = 497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 490
                    self.match(LDLPParser.COMMA)
                    self.state = 493
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                    if la_ == 1:
                        self.state = 491
                        self.literal()
                        pass

                    elif la_ == 2:
                        self.state = 492
                        self.variable()
                        pass

             
                self.state = 499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 500
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherwiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OTHERWISE(self):
            return self.getToken(LDLPParser.OTHERWISE, 0)

        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_otherwise

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtherwise" ):
                listener.enterOtherwise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtherwise" ):
                listener.exitOtherwise(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOtherwise" ):
                return visitor.visitOtherwise(self)
            else:
                return visitor.visitChildren(self)




    def otherwise(self):

        localctx = LDLPParser.OtherwiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_otherwise)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(LDLPParser.OTHERWISE)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 504
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def beginCase(self):
            return self.getTypedRuleContext(LDLPParser.BeginCaseContext,0)


        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def endcase(self):
            return self.getTypedRuleContext(LDLPParser.EndcaseContext,0)


        def case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.CaseContext)
            else:
                return self.getTypedRuleContext(LDLPParser.CaseContext,i)


        def otherwise(self):
            return self.getTypedRuleContext(LDLPParser.OtherwiseContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseStatement" ):
                return visitor.visitCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def caseStatement(self):

        localctx = LDLPParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.beginCase()
            self.state = 508
            self.expression(0)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25:
                self.state = 509
                self.case()
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 515
                self.otherwise()


            self.state = 518
            self.endcase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_CASE(self):
            return self.getToken(LDLPParser.BEGIN_CASE, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_beginCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginCase" ):
                listener.enterBeginCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginCase" ):
                listener.exitBeginCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginCase" ):
                return visitor.visitBeginCase(self)
            else:
                return visitor.visitChildren(self)




    def beginCase(self):

        localctx = LDLPParser.BeginCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_beginCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(LDLPParser.BEGIN_CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndcaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END_CASE(self):
            return self.getToken(LDLPParser.END_CASE, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_endcase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndcase" ):
                listener.enterEndcase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndcase" ):
                listener.exitEndcase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndcase" ):
                return visitor.visitEndcase(self)
            else:
                return visitor.visitChildren(self)




    def endcase(self):

        localctx = LDLPParser.EndcaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_endcase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(LDLPParser.END_CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComputeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPUTE(self):
            return self.getToken(LDLPParser.COMPUTE, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def ROUNDED(self):
            return self.getToken(LDLPParser.ROUNDED, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_computeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputeStatement" ):
                listener.enterComputeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputeStatement" ):
                listener.exitComputeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComputeStatement" ):
                return visitor.visitComputeStatement(self)
            else:
                return visitor.visitChildren(self)




    def computeStatement(self):

        localctx = LDLPParser.ComputeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_computeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(LDLPParser.COMPUTE)
            self.state = 525
            self.variable()
            self.state = 526
            self.expression(0)
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 527
                self.match(LDLPParser.ROUNDED)


            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 530
                self.match(LDLPParser.GS)
                self.state = 531
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(LDLPParser.CONTINUE, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = LDLPParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(LDLPParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CriticalpointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CRITICAL_POINT(self):
            return self.getToken(LDLPParser.CRITICAL_POINT, 0)

        def SLEEP(self):
            return self.getToken(LDLPParser.SLEEP, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def NO_RELEASE(self):
            return self.getToken(LDLPParser.NO_RELEASE, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_criticalpointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCriticalpointStatement" ):
                listener.enterCriticalpointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCriticalpointStatement" ):
                listener.exitCriticalpointStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCriticalpointStatement" ):
                return visitor.visitCriticalpointStatement(self)
            else:
                return visitor.visitChildren(self)




    def criticalpointStatement(self):

        localctx = LDLPParser.CriticalpointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_criticalpointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(LDLPParser.CRITICAL_POINT)
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 537
                self.match(LDLPParser.SLEEP)
                self.state = 538
                self.expression(0)


            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 541
                self.match(LDLPParser.NO_RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(LDLPParser.CURSOR, 0)

        def varName(self):
            return self.getTypedRuleContext(LDLPParser.VarNameContext,0)


        def END_OF_PAGE(self):
            return self.getToken(LDLPParser.END_OF_PAGE, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_cursorStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorStatement" ):
                listener.enterCursorStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorStatement" ):
                listener.exitCursorStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursorStatement" ):
                return visitor.visitCursorStatement(self)
            else:
                return visitor.visitChildren(self)




    def cursorStatement(self):

        localctx = LDLPParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_cursorStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(LDLPParser.CURSOR)
            self.state = 547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 163, 180]:
                self.state = 545
                self.varName()
                pass
            elif token in [51]:
                self.state = 546
                self.match(LDLPParser.END_OF_PAGE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateConvertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CONVERT(self):
            return self.getToken(LDLPParser.DATE_CONVERT, 0)

        def dateVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.DateVariableContext)
            else:
                return self.getTypedRuleContext(LDLPParser.DateVariableContext,i)


        def TODAY_NUMBER(self):
            return self.getToken(LDLPParser.TODAY_NUMBER, 0)

        def TO_DATE(self):
            return self.getToken(LDLPParser.TO_DATE, 0)

        def TO_ALPHA(self):
            return self.getToken(LDLPParser.TO_ALPHA, 0)

        def FORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.FORMAT)
            else:
                return self.getToken(LDLPParser.FORMAT, i)

        def dateFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.DateFormatContext)
            else:
                return self.getTypedRuleContext(LDLPParser.DateFormatContext,i)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def Arithmetic_operators(self):
            return self.getToken(LDLPParser.Arithmetic_operators, 0)

        def EDIT_ONLY(self):
            return self.getToken(LDLPParser.EDIT_ONLY, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_dateConvertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateConvertStatement" ):
                listener.enterDateConvertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateConvertStatement" ):
                listener.exitDateConvertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateConvertStatement" ):
                return visitor.visitDateConvertStatement(self)
            else:
                return visitor.visitChildren(self)




    def dateConvertStatement(self):

        localctx = LDLPParser.DateConvertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dateConvertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(LDLPParser.DATE_CONVERT)
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 550
                self.dateVariable()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 551
                    self.match(LDLPParser.Arithmetic_operators)

                    self.state = 552
                    self.dateVariable()


                self.state = 555
                self.match(LDLPParser.FORMAT)
                self.state = 556
                self.dateFormat()
                self.state = 562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 557
                    self.variable()
                    self.state = 558
                    self.match(LDLPParser.FORMAT)
                    self.state = 559
                    self.dateFormat()

                elif la_ == 2:
                    self.state = 561
                    self.match(LDLPParser.EDIT_ONLY)


                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 564
                    self.match(LDLPParser.GS)
                    self.state = 565
                    self.status()


                pass

            elif la_ == 2:
                self.state = 568
                _la = self._input.LA(1)
                if not(((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 13) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 569
                self.dateVariable()
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 570
                    self.match(LDLPParser.GS)
                    self.state = 571
                    self.status()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def NUMERIC_LITERALS(self):
            return self.getToken(LDLPParser.NUMERIC_LITERALS, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_dateVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateVariable" ):
                listener.enterDateVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateVariable" ):
                listener.exitDateVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateVariable" ):
                return visitor.visitDateVariable(self)
            else:
                return visitor.visitChildren(self)




    def dateVariable(self):

        localctx = LDLPParser.DateVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dateVariable)
        try:
            self.state = 578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 163, 180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.variable()
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.match(LDLPParser.NUMERIC_LITERALS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.start_position = None # ExpressionContext
            self.delimiter = None # ExpressionContext

        def DETACH(self):
            return self.getToken(LDLPParser.DETACH, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def DELIMITER(self):
            return self.getToken(LDLPParser.DELIMITER, 0)

        def POSITION(self):
            return self.getToken(LDLPParser.POSITION, 0)

        def START(self):
            return self.getToken(LDLPParser.START, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_detachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetachStatement" ):
                listener.enterDetachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetachStatement" ):
                listener.exitDetachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetachStatement" ):
                return visitor.visitDetachStatement(self)
            else:
                return visitor.visitChildren(self)




    def detachStatement(self):

        localctx = LDLPParser.DetachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_detachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(LDLPParser.DETACH)
            self.state = 581
            self.expression(0)
            self.state = 582
            self.variable()
            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 583
                _la = self._input.LA(1)
                if not(_la==111 or _la==135):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 584
                localctx.start_position = self.expression(0)


            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 587
                self.match(LDLPParser.DELIMITER)
                self.state = 588
                localctx.delimiter = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def determineActualStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineActualStatementContext,0)


        def determineBackStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineBackStatementContext,0)


        def determineEveryStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineEveryStatementContext,0)


        def determineFromStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineFromStatementContext,0)


        def determineGroupStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineGroupStatementContext,0)


        def determineLastStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineLastStatementContext,0)


        def determineTotalStatement(self):
            return self.getTypedRuleContext(LDLPParser.DetermineTotalStatementContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_determineStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineStatement" ):
                listener.enterDetermineStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineStatement" ):
                listener.exitDetermineStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineStatement" ):
                return visitor.visitDetermineStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineStatement(self):

        localctx = LDLPParser.DetermineStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_determineStatement)
        try:
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 591
                self.determineActualStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self.determineBackStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 593
                self.determineEveryStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 594
                self.determineFromStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 595
                self.determineGroupStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 596
                self.determineLastStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 597
                self.determineTotalStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineActualStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def ACTUAL(self):
            return self.getToken(LDLPParser.ACTUAL, 0)

        def variant(self):
            return self.getTypedRuleContext(LDLPParser.VariantContext,0)


        def determineEnd(self):
            return self.getTypedRuleContext(LDLPParser.DetermineEndContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_determineActualStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineActualStatement" ):
                listener.enterDetermineActualStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineActualStatement" ):
                listener.exitDetermineActualStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineActualStatement" ):
                return visitor.visitDetermineActualStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineActualStatement(self):

        localctx = LDLPParser.DetermineActualStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_determineActualStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(LDLPParser.DETERMINE)
            self.state = 601
            self.match(LDLPParser.ACTUAL)
            self.state = 602
            self.variant()
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 603
                self.match(LDLPParser.GS)
                self.state = 604
                self.status()


            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 607
                self.statements()


            self.state = 610
            self.determineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def databaseVariant(self):
            return self.getTypedRuleContext(LDLPParser.DatabaseVariantContext,0)


        def extractFileVariant(self):
            return self.getTypedRuleContext(LDLPParser.ExtractFileVariantContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_variant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariant" ):
                listener.enterVariant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariant" ):
                listener.exitVariant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariant" ):
                return visitor.visitVariant(self)
            else:
                return visitor.visitChildren(self)




    def variant(self):

        localctx = LDLPParser.VariantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variant)
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.databaseVariant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.extractFileVariant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseVariantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iterator(self):
            return self.getTypedRuleContext(LDLPParser.IteratorContext,0)


        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def records(self):
            return self.getTypedRuleContext(LDLPParser.RecordsContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_databaseVariant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabaseVariant" ):
                listener.enterDatabaseVariant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabaseVariant" ):
                listener.exitDatabaseVariant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseVariant" ):
                return visitor.visitDatabaseVariant(self)
            else:
                return visitor.visitChildren(self)




    def databaseVariant(self):

        localctx = LDLPParser.DatabaseVariantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_databaseVariant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.iterator()
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 617
                self.match(LDLPParser.SERIAL)


            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 620
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 623
                self.match(LDLPParser.MULTI)
                self.state = 624
                self.records()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractFileVariantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extractFile(self):
            return self.getTypedRuleContext(LDLPParser.ExtractFileContext,0)


        def EXTRACTED_AS(self):
            return self.getToken(LDLPParser.EXTRACTED_AS, 0)

        def records(self):
            return self.getTypedRuleContext(LDLPParser.RecordsContext,0)


        def EVENT(self):
            return self.getToken(LDLPParser.EVENT, 0)

        def RETAINED_AS(self):
            return self.getToken(LDLPParser.RETAINED_AS, 0)

        def fileName(self):
            return self.getTypedRuleContext(LDLPParser.FileNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_extractFileVariant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFileVariant" ):
                listener.enterExtractFileVariant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFileVariant" ):
                listener.exitExtractFileVariant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractFileVariant" ):
                return visitor.visitExtractFileVariant(self)
            else:
                return visitor.visitChildren(self)




    def extractFileVariant(self):

        localctx = LDLPParser.ExtractFileVariantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_extractFileVariant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.extractFile()
            self.state = 628
            self.match(LDLPParser.EXTRACTED_AS)
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 629
                self.records()
                pass

            elif la_ == 2:
                self.state = 630
                self.match(LDLPParser.EVENT)
                pass


            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 633
                self.match(LDLPParser.RETAINED_AS)
                self.state = 634
                self.fileName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineBackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def BACK(self):
            return self.getToken(LDLPParser.BACK, 0)

        def iterator(self):
            return self.getTypedRuleContext(LDLPParser.IteratorContext,0)


        def determineEnd(self):
            return self.getTypedRuleContext(LDLPParser.DetermineEndContext,0)


        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def records(self):
            return self.getTypedRuleContext(LDLPParser.RecordsContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_determineBackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineBackStatement" ):
                listener.enterDetermineBackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineBackStatement" ):
                listener.exitDetermineBackStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineBackStatement" ):
                return visitor.visitDetermineBackStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineBackStatement(self):

        localctx = LDLPParser.DetermineBackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_determineBackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(LDLPParser.DETERMINE)
            self.state = 638
            self.match(LDLPParser.BACK)
            self.state = 639
            self.iterator()
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 640
                self.match(LDLPParser.SERIAL)


            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 643
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 646
                self.match(LDLPParser.MULTI)
                self.state = 647
                self.records()


            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 650
                self.match(LDLPParser.GS)
                self.state = 651
                self.status()


            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 654
                self.statements()


            self.state = 657
            self.determineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineEveryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def EVERY(self):
            return self.getToken(LDLPParser.EVERY, 0)

        def iterator(self):
            return self.getTypedRuleContext(LDLPParser.IteratorContext,0)


        def determineEnd(self):
            return self.getTypedRuleContext(LDLPParser.DetermineEndContext,0)


        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def records(self):
            return self.getTypedRuleContext(LDLPParser.RecordsContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_determineEveryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineEveryStatement" ):
                listener.enterDetermineEveryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineEveryStatement" ):
                listener.exitDetermineEveryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineEveryStatement" ):
                return visitor.visitDetermineEveryStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineEveryStatement(self):

        localctx = LDLPParser.DetermineEveryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_determineEveryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(LDLPParser.DETERMINE)
            self.state = 660
            self.match(LDLPParser.EVERY)
            self.state = 661
            self.iterator()
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 662
                self.match(LDLPParser.SERIAL)


            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 665
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 668
                self.match(LDLPParser.MULTI)
                self.state = 669
                self.records()


            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 672
                self.match(LDLPParser.GS)
                self.state = 673
                self.status()


            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 676
                self.statements()


            self.state = 679
            self.determineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineFromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def FROM(self):
            return self.getToken(LDLPParser.FROM, 0)

        def iterator(self):
            return self.getTypedRuleContext(LDLPParser.IteratorContext,0)


        def determineEnd(self):
            return self.getTypedRuleContext(LDLPParser.DetermineEndContext,0)


        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def records(self):
            return self.getTypedRuleContext(LDLPParser.RecordsContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_determineFromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineFromStatement" ):
                listener.enterDetermineFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineFromStatement" ):
                listener.exitDetermineFromStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineFromStatement" ):
                return visitor.visitDetermineFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineFromStatement(self):

        localctx = LDLPParser.DetermineFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_determineFromStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(LDLPParser.DETERMINE)
            self.state = 682
            self.match(LDLPParser.FROM)
            self.state = 683
            self.iterator()
            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 684
                self.match(LDLPParser.SERIAL)


            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 687
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 690
                self.match(LDLPParser.MULTI)
                self.state = 691
                self.records()


            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 694
                self.match(LDLPParser.GS)
                self.state = 695
                self.status()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 698
                self.statements()


            self.state = 701
            self.determineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineGroupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._argument = None # ArgumentContext
            self.args = list() # of ArgumentContexts
            self.until_args = list() # of ArgumentContexts

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def GROUP(self):
            return self.getToken(LDLPParser.GROUP, 0)

        def iterator(self):
            return self.getTypedRuleContext(LDLPParser.IteratorContext,0)


        def determineEnd(self):
            return self.getTypedRuleContext(LDLPParser.DetermineEndContext,0)


        def FROM(self):
            return self.getToken(LDLPParser.FROM, 0)

        def BACK(self):
            return self.getToken(LDLPParser.BACK, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.LP)
            else:
                return self.getToken(LDLPParser.LP, i)

        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.RP)
            else:
                return self.getToken(LDLPParser.RP, i)

        def UNTIL(self):
            return self.getToken(LDLPParser.UNTIL, 0)

        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def records(self):
            return self.getTypedRuleContext(LDLPParser.RecordsContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ArgumentContext,i)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.COMMA)
            else:
                return self.getToken(LDLPParser.COMMA, i)

        def getRuleIndex(self):
            return LDLPParser.RULE_determineGroupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineGroupStatement" ):
                listener.enterDetermineGroupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineGroupStatement" ):
                listener.exitDetermineGroupStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineGroupStatement" ):
                return visitor.visitDetermineGroupStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineGroupStatement(self):

        localctx = LDLPParser.DetermineGroupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_determineGroupStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(LDLPParser.DETERMINE)
            self.state = 704
            self.match(LDLPParser.GROUP)
            self.state = 705
            self.iterator()
            self.state = 706
            _la = self._input.LA(1)
            if not(_la==18 or _la==67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 707
                self.match(LDLPParser.LP)
                self.state = 708
                localctx._argument = self.argument()
                localctx.args.append(localctx._argument)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==28:
                    self.state = 709
                    self.match(LDLPParser.COMMA)
                    self.state = 710
                    localctx._argument = self.argument()
                    localctx.args.append(localctx._argument)
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 716
                self.match(LDLPParser.RP)


            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 720
                self.match(LDLPParser.UNTIL)
                self.state = 721
                self.match(LDLPParser.LP)
                self.state = 722
                localctx._argument = self.argument()
                localctx.until_args.append(localctx._argument)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==28:
                    self.state = 723
                    self.match(LDLPParser.COMMA)
                    self.state = 724
                    localctx._argument = self.argument()
                    localctx.until_args.append(localctx._argument)
                    self.state = 729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 730
                self.match(LDLPParser.RP)


            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 734
                self.match(LDLPParser.SERIAL)


            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 737
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 740
                self.match(LDLPParser.MULTI)
                self.state = 741
                self.records()


            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 744
                self.match(LDLPParser.GS)
                self.state = 745
                self.status()


            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 748
                self.statements()


            self.state = 751
            self.determineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineLastStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def LAST(self):
            return self.getToken(LDLPParser.LAST, 0)

        def iterator(self):
            return self.getTypedRuleContext(LDLPParser.IteratorContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_determineLastStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineLastStatement" ):
                listener.enterDetermineLastStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineLastStatement" ):
                listener.exitDetermineLastStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineLastStatement" ):
                return visitor.visitDetermineLastStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineLastStatement(self):

        localctx = LDLPParser.DetermineLastStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_determineLastStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(LDLPParser.DETERMINE)
            self.state = 754
            self.match(LDLPParser.LAST)
            self.state = 755
            self.iterator()
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 756
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 759
                self.match(LDLPParser.GS)
                self.state = 760
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineTotalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def TOTAL(self):
            return self.getToken(LDLPParser.TOTAL, 0)

        def identifier(self):
            return self.getTypedRuleContext(LDLPParser.IdentifierContext,0)


        def attributeName(self):
            return self.getTypedRuleContext(LDLPParser.AttributeNameContext,0)


        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def keyArguments(self):
            return self.getTypedRuleContext(LDLPParser.KeyArgumentsContext,0)


        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def determineEnd(self):
            return self.getTypedRuleContext(LDLPParser.DetermineEndContext,0)


        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def records(self):
            return self.getTypedRuleContext(LDLPParser.RecordsContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_determineTotalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineTotalStatement" ):
                listener.enterDetermineTotalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineTotalStatement" ):
                listener.exitDetermineTotalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineTotalStatement" ):
                return visitor.visitDetermineTotalStatement(self)
            else:
                return visitor.visitChildren(self)




    def determineTotalStatement(self):

        localctx = LDLPParser.DetermineTotalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_determineTotalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(LDLPParser.DETERMINE)
            self.state = 764
            self.match(LDLPParser.TOTAL)
            self.state = 765
            self.identifier()
            self.state = 766
            self.attributeName()
            self.state = 767
            self.match(LDLPParser.LP)
            self.state = 768
            self.keyArguments()
            self.state = 769
            self.match(LDLPParser.RP)
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 770
                self.match(LDLPParser.MULTI)
                self.state = 771
                self.records()


            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 774
                self.match(LDLPParser.GS)
                self.state = 775
                self.status()


            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                self.state = 778
                self.statements()


            self.state = 781
            self.determineEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_attributeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeName" ):
                listener.enterAttributeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeName" ):
                listener.exitAttributeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeName" ):
                return visitor.visitAttributeName(self)
            else:
                return visitor.visitChildren(self)




    def attributeName(self):

        localctx = LDLPParser.AttributeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_attributeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.COMMA)
            else:
                return self.getToken(LDLPParser.COMMA, i)

        def getRuleIndex(self):
            return LDLPParser.RULE_keyArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyArguments" ):
                listener.enterKeyArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyArguments" ):
                listener.exitKeyArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyArguments" ):
                return visitor.visitKeyArguments(self)
            else:
                return visitor.visitChildren(self)




    def keyArguments(self):

        localctx = LDLPParser.KeyArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_keyArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.argument()
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28:
                self.state = 786
                self.match(LDLPParser.COMMA)
                self.state = 787
                self.argument()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_records

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecords" ):
                listener.enterRecords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecords" ):
                listener.exitRecords(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecords" ):
                return visitor.visitRecords(self)
            else:
                return visitor.visitChildren(self)




    def records(self):

        localctx = LDLPParser.RecordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_records)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_extractFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFile" ):
                listener.enterExtractFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFile" ):
                listener.exitExtractFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractFile" ):
                return visitor.visitExtractFile(self)
            else:
                return visitor.visitChildren(self)




    def extractFile(self):

        localctx = LDLPParser.ExtractFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_extractFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ArgumentContext,i)


        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.COMMA)
            else:
                return self.getToken(LDLPParser.COMMA, i)

        def getRuleIndex(self):
            return LDLPParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = LDLPParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.variable()
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 798
                self.match(LDLPParser.LP)
                self.state = 799
                self.argument()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==28:
                    self.state = 800
                    self.match(LDLPParser.COMMA)
                    self.state = 801
                    self.argument()
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 807
                self.match(LDLPParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = LDLPParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DetermineEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(LDLPParser.END, 0)

        def END_EXIT(self):
            return self.getToken(LDLPParser.END_EXIT, 0)

        def END_NO_PRINT(self):
            return self.getToken(LDLPParser.END_NO_PRINT, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_determineEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetermineEnd" ):
                listener.enterDetermineEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetermineEnd" ):
                listener.exitDetermineEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetermineEnd" ):
                return visitor.visitDetermineEnd(self)
            else:
                return visitor.visitChildren(self)




    def determineEnd(self):

        localctx = LDLPParser.DetermineEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_determineEnd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1442559255642112) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivideStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.giving_variable = None # VariableContext
            self.remainder_variable = None # VariableContext

        def DIVIDE(self):
            return self.getToken(LDLPParser.DIVIDE, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.VariableContext)
            else:
                return self.getTypedRuleContext(LDLPParser.VariableContext,i)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def GIVING(self):
            return self.getToken(LDLPParser.GIVING, 0)

        def ROUNDED(self):
            return self.getToken(LDLPParser.ROUNDED, 0)

        def REMAINDER(self):
            return self.getToken(LDLPParser.REMAINDER, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_divideStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivideStatement" ):
                listener.enterDivideStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivideStatement" ):
                listener.exitDivideStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDivideStatement" ):
                return visitor.visitDivideStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideStatement(self):

        localctx = LDLPParser.DivideStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_divideStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(LDLPParser.DIVIDE)
            self.state = 816
            self.expression(0)
            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 817
                self.variable()
                pass

            elif la_ == 2:
                self.state = 818
                self.literal()
                pass


            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 821
                self.match(LDLPParser.GIVING)
                self.state = 822
                localctx.giving_variable = self.variable()


            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 825
                self.match(LDLPParser.ROUNDED)


            self.state = 830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 828
                self.match(LDLPParser.REMAINDER)
                self.state = 829
                localctx.remainder_variable = self.variable()


            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 832
                self.match(LDLPParser.GS)
                self.state = 833
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DowhenBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_dowhenBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDowhenBlock" ):
                listener.enterDowhenBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDowhenBlock" ):
                listener.exitDowhenBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDowhenBlock" ):
                return visitor.visitDowhenBlock(self)
            else:
                return visitor.visitChildren(self)




    def dowhenBlock(self):

        localctx = LDLPParser.DowhenBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dowhenBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseBlock" ):
                return visitor.visitElseBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseBlock(self):

        localctx = LDLPParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_elseBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DowhenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO_WHEN(self):
            return self.getToken(LDLPParser.DO_WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(LDLPParser.ConditionContext,0)


        def endDowhen(self):
            return self.getTypedRuleContext(LDLPParser.EndDowhenContext,0)


        def dowhenBlock(self):
            return self.getTypedRuleContext(LDLPParser.DowhenBlockContext,0)


        def ELSE(self):
            return self.getToken(LDLPParser.ELSE, 0)

        def elseBlock(self):
            return self.getTypedRuleContext(LDLPParser.ElseBlockContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_dowhenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDowhenStatement" ):
                listener.enterDowhenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDowhenStatement" ):
                listener.exitDowhenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDowhenStatement" ):
                return visitor.visitDowhenStatement(self)
            else:
                return visitor.visitChildren(self)




    def dowhenStatement(self):

        localctx = LDLPParser.DowhenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dowhenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(LDLPParser.DO_WHEN)
            self.state = 841
            self.condition()
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 842
                self.dowhenBlock()


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 845
                self.match(LDLPParser.ELSE)
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                    self.state = 846
                    self.elseBlock()




            self.state = 851
            self.endDowhen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = LDLPParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_classAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassAttribute" ):
                listener.enterClassAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassAttribute" ):
                listener.exitClassAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassAttribute" ):
                return visitor.visitClassAttribute(self)
            else:
                return visitor.visitChildren(self)




    def classAttribute(self):

        localctx = LDLPParser.ClassAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_classAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndDowhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(LDLPParser.END, 0)

        def END_EXIT(self):
            return self.getToken(LDLPParser.END_EXIT, 0)

        def END_NO_PRINT(self):
            return self.getToken(LDLPParser.END_NO_PRINT, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_endDowhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndDowhen" ):
                listener.enterEndDowhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndDowhen" ):
                listener.exitEndDowhen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndDowhen" ):
                return visitor.visitEndDowhen(self)
            else:
                return visitor.visitChildren(self)




    def endDowhen(self):

        localctx = LDLPParser.EndDowhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_endDowhen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1442559255642112) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnduseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END_USE(self):
            return self.getToken(LDLPParser.END_USE, 0)

        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_enduseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnduseStatement" ):
                listener.enterEnduseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnduseStatement" ):
                listener.exitEnduseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnduseStatement" ):
                return visitor.visitEnduseStatement(self)
            else:
                return visitor.visitChildren(self)




    def enduseStatement(self):

        localctx = LDLPParser.EnduseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_enduseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(LDLPParser.END_USE)
            self.state = 860
            self.className()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExcludeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUSIVE(self):
            return self.getToken(LDLPParser.EXCLUSIVE, 0)

        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_excludeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcludeStatement" ):
                listener.enterExcludeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcludeStatement" ):
                listener.exitExcludeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcludeStatement" ):
                return visitor.visitExcludeStatement(self)
            else:
                return visitor.visitChildren(self)




    def excludeStatement(self):

        localctx = LDLPParser.ExcludeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_excludeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(LDLPParser.EXCLUSIVE)
            self.state = 863
            self.className()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(LDLPParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def endIf(self):
            return self.getTypedRuleContext(LDLPParser.EndIfContext,0)


        def dowhenBlock(self):
            return self.getTypedRuleContext(LDLPParser.DowhenBlockContext,0)


        def ELSE(self):
            return self.getToken(LDLPParser.ELSE, 0)

        def elseBlock(self):
            return self.getTypedRuleContext(LDLPParser.ElseBlockContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = LDLPParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(LDLPParser.IF)
            self.state = 866
            self.expression(0)
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 867
                self.dowhenBlock()


            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 870
                self.match(LDLPParser.ELSE)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4687649077767176200) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503634003623935) != 0):
                    self.state = 871
                    self.elseBlock()




            self.state = 876
            self.endIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(LDLPParser.END, 0)

        def END_EXIT(self):
            return self.getToken(LDLPParser.END_EXIT, 0)

        def END_NO_PRINT(self):
            return self.getToken(LDLPParser.END_NO_PRINT, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_endIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndIf" ):
                listener.enterEndIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndIf" ):
                listener.exitEndIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndIf" ):
                return visitor.visitEndIf(self)
            else:
                return visitor.visitChildren(self)




    def endIf(self):

        localctx = LDLPParser.EndIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_endIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1442559255642112) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def paramList(self):
            return self.getTypedRuleContext(LDLPParser.ParamListContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall" ):
                return visitor.visitMethodCall(self)
            else:
                return visitor.visitChildren(self)




    def methodCall(self):

        localctx = LDLPParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_methodCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.variable()
            self.state = 881
            self.match(LDLPParser.LP)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4688216425767108866) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 13510833258364927) != 0):
                self.state = 882
                self.paramList()


            self.state = 885
            self.match(LDLPParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arithmetic_operators(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.Arithmetic_operators)
            else:
                return self.getToken(LDLPParser.Arithmetic_operators, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def methodCall(self):
            return self.getTypedRuleContext(LDLPParser.MethodCallContext,0)


        def identifier(self):
            return self.getTypedRuleContext(LDLPParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def relational_operator(self):
            return self.getTypedRuleContext(LDLPParser.Relational_operatorContext,0)


        def logical_operator(self):
            return self.getTypedRuleContext(LDLPParser.Logical_operatorContext,0)


        def NUMERIC(self):
            return self.getToken(LDLPParser.NUMERIC, 0)

        def NOT(self):
            return self.getToken(LDLPParser.NOT, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LDLPParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 888
                self.match(LDLPParser.Arithmetic_operators)
                self.state = 889
                self.expression(0)
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(LDLPParser.Arithmetic_operators)
                    self.state = 891
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 894
                self.match(LDLPParser.LP)
                self.state = 895
                self.expression(0)
                self.state = 896
                self.match(LDLPParser.RP)
                pass

            elif la_ == 3:
                self.state = 898
                self.methodCall()
                pass

            elif la_ == 4:
                self.state = 899
                self.identifier()
                pass

            elif la_ == 5:
                self.state = 900
                self.literal()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 924
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        localctx = LDLPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 903
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 904
                        self.match(LDLPParser.Arithmetic_operators)
                        self.state = 905
                        self.expression(8)
                        pass

                    elif la_ == 2:
                        localctx = LDLPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 906
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 907
                        self.relational_operator()
                        self.state = 908
                        self.expression(7)
                        pass

                    elif la_ == 3:
                        localctx = LDLPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 910
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 911
                        self.logical_operator()
                        self.state = 912
                        self.expression(6)
                        pass

                    elif la_ == 4:
                        localctx = LDLPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 914
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 916
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==166:
                            self.state = 915
                            self.match(LDLPParser.NOT)


                        self.state = 918
                        self.match(LDLPParser.NUMERIC)
                        self.state = 922
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                        if la_ == 1:
                            self.state = 919
                            self.logical_operator()
                            self.state = 920
                            self.expression(0)


                        pass

             
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.AMPERSAND)
            else:
                return self.getToken(LDLPParser.AMPERSAND, i)

        def stringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.StringExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.StringExpressionContext,i)


        def getRuleIndex(self):
            return LDLPParser.RULE_stringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringExpression" ):
                listener.enterStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringExpression" ):
                listener.exitStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringExpression" ):
                return visitor.visitStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringExpression(self):

        localctx = LDLPParser.StringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_stringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 929
                self.variable()
                pass

            elif la_ == 2:
                self.state = 930
                self.literal()
                pass


            self.state = 937
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 933
                    self.match(LDLPParser.AMPERSAND)
                    self.state = 934
                    self.stringExpression() 
                self.state = 939
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ParamContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.COMMA)
            else:
                return self.getToken(LDLPParser.COMMA, i)

        def getRuleIndex(self):
            return LDLPParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = LDLPParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.param()
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28:
                self.state = 941
                self.match(LDLPParser.COMMA)
                self.state = 942
                self.param()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = LDLPParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTRACT(self):
            return self.getToken(LDLPParser.EXTRACT, 0)

        def attributeName(self):
            return self.getTypedRuleContext(LDLPParser.AttributeNameContext,0)


        def AS(self):
            return self.getToken(LDLPParser.AS, 0)

        def extractFile(self):
            return self.getTypedRuleContext(LDLPParser.ExtractFileContext,0)


        def MAPPER(self):
            return self.getToken(LDLPParser.MAPPER, 0)

        def header(self):
            return self.getTypedRuleContext(LDLPParser.HeaderContext,0)


        def RETAIN_AS(self):
            return self.getToken(LDLPParser.RETAIN_AS, 0)

        def fileName(self):
            return self.getTypedRuleContext(LDLPParser.FileNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_extractStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractStatement" ):
                listener.enterExtractStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractStatement" ):
                listener.exitExtractStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractStatement" ):
                return visitor.visitExtractStatement(self)
            else:
                return visitor.visitChildren(self)




    def extractStatement(self):

        localctx = LDLPParser.ExtractStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_extractStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(LDLPParser.EXTRACT)
            self.state = 951
            self.attributeName()
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 952
                self.match(LDLPParser.MAPPER)
                self.state = 953
                self.header()


            self.state = 956
            self.match(LDLPParser.AS)
            self.state = 957
            self.extractFile()
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 958
                self.match(LDLPParser.RETAIN_AS)
                self.state = 959
                self.fileName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHeader" ):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)




    def header(self):

        localctx = LDLPParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(LDLPParser.FOREACH, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def IN(self):
            return self.getToken(LDLPParser.IN, 0)

        def iterator(self):
            return self.getTypedRuleContext(LDLPParser.IteratorContext,0)


        def FROM(self):
            return self.getToken(LDLPParser.FROM, 0)

        def BACK(self):
            return self.getToken(LDLPParser.BACK, 0)

        def EVERY(self):
            return self.getToken(LDLPParser.EVERY, 0)

        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def POLYMORPHIC(self):
            return self.getToken(LDLPParser.POLYMORPHIC, 0)

        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_foreachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeachStatement" ):
                return visitor.visitForeachStatement(self)
            else:
                return visitor.visitChildren(self)




    def foreachStatement(self):

        localctx = LDLPParser.ForeachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_foreachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(LDLPParser.FOREACH)
            self.state = 965
            self.variable()
            self.state = 966
            self.match(LDLPParser.IN)
            self.state = 967
            self.iterator()
            self.state = 968
            _la = self._input.LA(1)
            if not(((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 563018672898049) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 969
                self.match(LDLPParser.POLYMORPHIC)


            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 972
                self.match(LDLPParser.SERIAL)


            self.state = 975
            _la = self._input.LA(1)
            if not(_la==80 or _la==123):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 976
                self.match(LDLPParser.MULTI)
                self.state = 977
                self.expression(0)


            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 980
                self.match(LDLPParser.GS)
                self.state = 981
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLAG(self):
            return self.getToken(LDLPParser.FLAG, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_flagStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlagStatement" ):
                listener.enterFlagStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlagStatement" ):
                listener.exitFlagStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlagStatement" ):
                return visitor.visitFlagStatement(self)
            else:
                return visitor.visitChildren(self)




    def flagStatement(self):

        localctx = LDLPParser.FlagStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_flagStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(LDLPParser.FLAG)
            self.state = 985
            self.expression(0)
            self.state = 986
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIALIZE(self):
            return self.getToken(LDLPParser.INITIALIZE, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def initializationValue(self):
            return self.getTypedRuleContext(LDLPParser.InitializationValueContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_initializeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializeStatement" ):
                listener.enterInitializeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializeStatement" ):
                listener.exitInitializeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializeStatement" ):
                return visitor.visitInitializeStatement(self)
            else:
                return visitor.visitChildren(self)




    def initializeStatement(self):

        localctx = LDLPParser.InitializeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_initializeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(LDLPParser.INITIALIZE)
            self.state = 989
            self.variable()
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 990
                self.initializationValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializationValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_initializationValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializationValue" ):
                listener.enterInitializationValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializationValue" ):
                listener.exitInitializationValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializationValue" ):
                return visitor.visitInitializationValue(self)
            else:
                return visitor.visitChildren(self)




    def initializationValue(self):

        localctx = LDLPParser.InitializationValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_initializationValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(LDLPParser.INSERT, 0)

        def insertable(self):
            return self.getTypedRuleContext(LDLPParser.InsertableContext,0)


        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def mapping(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.MappingContext)
            else:
                return self.getTypedRuleContext(LDLPParser.MappingContext,i)


        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.AMPERSAND)
            else:
                return self.getToken(LDLPParser.AMPERSAND, i)

        def getRuleIndex(self):
            return LDLPParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = LDLPParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(LDLPParser.INSERT)
            self.state = 996
            self.insertable()
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 997
                self.match(LDLPParser.LP)
                self.state = 998
                self.mapping()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==174:
                    self.state = 999
                    self.match(LDLPParser.AMPERSAND)
                    self.state = 1000
                    self.mapping()
                    self.state = 1005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1006
                self.match(LDLPParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_insertable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertable" ):
                listener.enterInsertable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertable" ):
                listener.exitInsertable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertable" ):
                return visitor.visitInsertable(self)
            else:
                return visitor.visitChildren(self)




    def insertable(self):

        localctx = LDLPParser.InsertableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_insertable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertable(self):
            return self.getTypedRuleContext(LDLPParser.InsertableContext,0)


        def EQ(self):
            return self.getToken(LDLPParser.EQ, 0)

        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = LDLPParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.insertable()
            self.state = 1013
            self.match(LDLPParser.EQ)
            self.state = 1014
            self.className()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(LDLPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = LDLPParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumptoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JUMP_TO(self):
            return self.getToken(LDLPParser.JUMP_TO, 0)

        def label(self):
            return self.getTypedRuleContext(LDLPParser.LabelContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_jumptoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumptoStatement" ):
                listener.enterJumptoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumptoStatement" ):
                listener.exitJumptoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumptoStatement" ):
                return visitor.visitJumptoStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumptoStatement(self):

        localctx = LDLPParser.JumptoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_jumptoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(LDLPParser.JUMP_TO)
            self.state = 1019
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(LDLPParser.LABEL, 0)

        def label(self):
            return self.getTypedRuleContext(LDLPParser.LabelContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_labelStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelStatement" ):
                listener.enterLabelStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelStatement" ):
                listener.exitLabelStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelStatement" ):
                return visitor.visitLabelStatement(self)
            else:
                return visitor.visitChildren(self)




    def labelStatement(self):

        localctx = LDLPParser.LabelStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_labelStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(LDLPParser.LABEL)
            self.state = 1022
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel" ):
                return visitor.visitLabel(self)
            else:
                return visitor.visitChildren(self)




    def label(self):

        localctx = LDLPParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(LDLPParser.LOAD, 0)

        def LENGTH(self):
            return self.getToken(LDLPParser.LENGTH, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def ispecAttribute(self):
            return self.getTypedRuleContext(LDLPParser.IspecAttributeContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadStatement" ):
                return visitor.visitLoadStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadStatement(self):

        localctx = LDLPParser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_loadStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(LDLPParser.LOAD)
            self.state = 1027
            self.match(LDLPParser.LENGTH)
            self.state = 1028
            self.expression(0)
            self.state = 1029
            self.ispecAttribute()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IspecAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_ispecAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIspecAttribute" ):
                listener.enterIspecAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIspecAttribute" ):
                listener.exitIspecAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIspecAttribute" ):
                return visitor.visitIspecAttribute(self)
            else:
                return visitor.visitChildren(self)




    def ispecAttribute(self):

        localctx = LDLPParser.IspecAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_ispecAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(LDLPParser.LOG, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def DEBUG(self):
            return self.getToken(LDLPParser.DEBUG, 0)

        def RELEASE(self):
            return self.getToken(LDLPParser.RELEASE, 0)

        def ALWAYS(self):
            return self.getToken(LDLPParser.ALWAYS, 0)

        def ERROR(self):
            return self.getToken(LDLPParser.ERROR, 0)

        def WARNING(self):
            return self.getToken(LDLPParser.WARNING, 0)

        def HALT(self):
            return self.getToken(LDLPParser.HALT, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_logStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogStatement" ):
                listener.enterLogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogStatement" ):
                listener.exitLogStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogStatement" ):
                return visitor.visitLogStatement(self)
            else:
                return visitor.visitChildren(self)




    def logStatement(self):

        localctx = LDLPParser.LogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_logStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(LDLPParser.LOG)
            self.state = 1034
            _la = self._input.LA(1)
            if not(_la==10 or _la==37 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1035
                _la = self._input.LA(1)
                if not(_la==52 or _la==72 or _la==149):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1038
            self.expression(0)
            self.state = 1040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1039
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lookupBaseStatement(self):
            return self.getTypedRuleContext(LDLPParser.LookupBaseStatementContext,0)


        def lookupFromStatement(self):
            return self.getTypedRuleContext(LDLPParser.LookupFromStatementContext,0)


        def lookupEveryStatement(self):
            return self.getTypedRuleContext(LDLPParser.LookupEveryStatementContext,0)


        def lookupGroupStatement(self):
            return self.getTypedRuleContext(LDLPParser.LookupGroupStatementContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_lookupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupStatement" ):
                listener.enterLookupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupStatement" ):
                listener.exitLookupStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupStatement" ):
                return visitor.visitLookupStatement(self)
            else:
                return visitor.visitChildren(self)




    def lookupStatement(self):

        localctx = LDLPParser.LookupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_lookupStatement)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.lookupBaseStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.lookupFromStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1044
                self.lookupEveryStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1045
                self.lookupGroupStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupBaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOKUP(self):
            return self.getToken(LDLPParser.LOOKUP, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_lookupBaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupBaseStatement" ):
                listener.enterLookupBaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupBaseStatement" ):
                listener.exitLookupBaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupBaseStatement" ):
                return visitor.visitLookupBaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def lookupBaseStatement(self):

        localctx = LDLPParser.LookupBaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_lookupBaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(LDLPParser.LOOKUP)
            self.state = 1049
            self.expression(0)
            self.state = 1050
            self.className()
            self.state = 1052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1051
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1054
                self.match(LDLPParser.GS)
                self.state = 1055
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupFromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOKUP(self):
            return self.getToken(LDLPParser.LOOKUP, 0)

        def FROM(self):
            return self.getToken(LDLPParser.FROM, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def END(self):
            return self.getToken(LDLPParser.END, 0)

        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_lookupFromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupFromStatement" ):
                listener.enterLookupFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupFromStatement" ):
                listener.exitLookupFromStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupFromStatement" ):
                return visitor.visitLookupFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def lookupFromStatement(self):

        localctx = LDLPParser.LookupFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_lookupFromStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(LDLPParser.LOOKUP)
            self.state = 1059
            self.match(LDLPParser.FROM)
            self.state = 1060
            self.expression(0)
            self.state = 1061
            self.className()
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1062
                self.match(LDLPParser.SERIAL)


            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1065
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1068
                self.match(LDLPParser.MULTI)
                self.state = 1069
                self.expression(0)


            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1072
                self.match(LDLPParser.GS)
                self.state = 1073
                self.status()


            self.state = 1076
            self.statements()
            self.state = 1077
            self.match(LDLPParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupEveryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOKUP(self):
            return self.getToken(LDLPParser.LOOKUP, 0)

        def EVERY(self):
            return self.getToken(LDLPParser.EVERY, 0)

        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def END(self):
            return self.getToken(LDLPParser.END, 0)

        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_lookupEveryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupEveryStatement" ):
                listener.enterLookupEveryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupEveryStatement" ):
                listener.exitLookupEveryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupEveryStatement" ):
                return visitor.visitLookupEveryStatement(self)
            else:
                return visitor.visitChildren(self)




    def lookupEveryStatement(self):

        localctx = LDLPParser.LookupEveryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lookupEveryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(LDLPParser.LOOKUP)
            self.state = 1080
            self.match(LDLPParser.EVERY)
            self.state = 1081
            self.className()
            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1082
                self.match(LDLPParser.SERIAL)


            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1085
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1088
                self.match(LDLPParser.MULTI)
                self.state = 1089
                self.expression(0)


            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1092
                self.match(LDLPParser.GS)
                self.state = 1093
                self.status()


            self.state = 1096
            self.statements()
            self.state = 1097
            self.match(LDLPParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupGroupStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.until_exp = None # ExpressionContext
            self.multi_exp = None # ExpressionContext

        def LOOKUP(self):
            return self.getToken(LDLPParser.LOOKUP, 0)

        def GROUP(self):
            return self.getToken(LDLPParser.GROUP, 0)

        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def END(self):
            return self.getToken(LDLPParser.END, 0)

        def FROM(self):
            return self.getToken(LDLPParser.FROM, 0)

        def BACK(self):
            return self.getToken(LDLPParser.BACK, 0)

        def UNTIL(self):
            return self.getToken(LDLPParser.UNTIL, 0)

        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_lookupGroupStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupGroupStatement" ):
                listener.enterLookupGroupStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupGroupStatement" ):
                listener.exitLookupGroupStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupGroupStatement" ):
                return visitor.visitLookupGroupStatement(self)
            else:
                return visitor.visitChildren(self)




    def lookupGroupStatement(self):

        localctx = LDLPParser.LookupGroupStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lookupGroupStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(LDLPParser.LOOKUP)
            self.state = 1100
            self.match(LDLPParser.GROUP)
            self.state = 1101
            self.className()
            self.state = 1102
            _la = self._input.LA(1)
            if not(_la==18 or _la==67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1103
            self.expression(0)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1104
                self.match(LDLPParser.UNTIL)
                self.state = 1105
                localctx.until_exp = self.expression(0)


            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1108
                self.match(LDLPParser.SERIAL)


            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1111
                _la = self._input.LA(1)
                if not(_la==80 or _la==123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1114
                self.match(LDLPParser.MULTI)
                self.state = 1115
                localctx.multi_exp = self.expression(0)


            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1118
                self.match(LDLPParser.GS)
                self.state = 1119
                self.status()


            self.state = 1122
            self.statements()
            self.state = 1123
            self.match(LDLPParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self):
            return self.getToken(LDLPParser.LOOP, 0)

        def loopBlock(self):
            return self.getTypedRuleContext(LDLPParser.LoopBlockContext,0)


        def END(self):
            return self.getToken(LDLPParser.END, 0)

        def END_EXIT(self):
            return self.getToken(LDLPParser.END_EXIT, 0)

        def END_NO_PRINT(self):
            return self.getToken(LDLPParser.END_NO_PRINT, 0)

        def WHILE(self):
            return self.getToken(LDLPParser.WHILE, 0)

        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = LDLPParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(LDLPParser.LOOP)
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1126
                self.match(LDLPParser.WHILE)
                self.state = 1127
                self.match(LDLPParser.LP)
                self.state = 1128
                self.expression(0)
                self.state = 1129
                self.match(LDLPParser.RP)


            self.state = 1133
            self.loopBlock()
            self.state = 1134
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1442559255642112) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(LDLPParser.StatementsContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_loopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopBlock" ):
                listener.enterLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopBlock" ):
                listener.exitLoopBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopBlock" ):
                return visitor.visitLoopBlock(self)
            else:
                return visitor.visitChildren(self)




    def loopBlock(self):

        localctx = LDLPParser.LoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_loopBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPARE_ASCENDING(self):
            return self.getToken(LDLPParser.COMPARE_ASCENDING, 0)

        def COMPARE_DESCENDING(self):
            return self.getToken(LDLPParser.COMPARE_DESCENDING, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_compareType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareType" ):
                listener.enterCompareType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareType" ):
                listener.exitCompareType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareType" ):
                return visitor.visitCompareType(self)
            else:
                return visitor.visitChildren(self)




    def compareType(self):

        localctx = LDLPParser.CompareTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_compareType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            _la = self._input.LA(1)
            if not(_la==29 or _la==30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(LDLPParser.MATCH, 0)

        def compareType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.CompareTypeContext)
            else:
                return self.getTypedRuleContext(LDLPParser.CompareTypeContext,i)


        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.LP)
            else:
                return self.getToken(LDLPParser.LP, i)

        def extractFile(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExtractFileContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExtractFileContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.COMMA)
            else:
                return self.getToken(LDLPParser.COMMA, i)

        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.RP)
            else:
                return self.getToken(LDLPParser.RP, i)

        def AND(self):
            return self.getToken(LDLPParser.AND, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_matchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatement" ):
                listener.enterMatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatement" ):
                listener.exitMatchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatement" ):
                return visitor.visitMatchStatement(self)
            else:
                return visitor.visitChildren(self)




    def matchStatement(self):

        localctx = LDLPParser.MatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_matchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(LDLPParser.MATCH)
            self.state = 1141
            self.compareType()
            self.state = 1142
            self.match(LDLPParser.LP)
            self.state = 1143
            self.extractFile()
            self.state = 1144
            self.match(LDLPParser.COMMA)
            self.state = 1145
            self.extractFile()
            self.state = 1146
            self.match(LDLPParser.RP)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 1147
                self.match(LDLPParser.AND)
                self.state = 1148
                self.compareType()
                self.state = 1149
                self.match(LDLPParser.LP)
                self.state = 1150
                self.extractFile()
                self.state = 1151
                self.match(LDLPParser.COMMA)
                self.state = 1152
                self.extractFile()
                self.state = 1153
                self.match(LDLPParser.RP)


            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1157
                self.match(LDLPParser.GS)
                self.state = 1158
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(LDLPParser.MESSAGE, 0)

        def ATTENTION(self):
            return self.getToken(LDLPParser.ATTENTION, 0)

        def ERROR(self):
            return self.getToken(LDLPParser.ERROR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def getRuleIndex(self):
            return LDLPParser.RULE_messageStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageStatement" ):
                listener.enterMessageStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageStatement" ):
                listener.exitMessageStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageStatement" ):
                return visitor.visitMessageStatement(self)
            else:
                return visitor.visitChildren(self)




    def messageStatement(self):

        localctx = LDLPParser.MessageStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_messageStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(LDLPParser.MESSAGE)
            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1162
                self.match(LDLPParser.ATTENTION)
                pass

            elif la_ == 2:
                self.state = 1163
                self.match(LDLPParser.ERROR)
                pass

            elif la_ == 3:
                self.state = 1164
                self.expression(0)
                pass


            self.state = 1168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1167
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(LDLPParser.MOVE, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def POSITION(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.POSITION)
            else:
                return self.getToken(LDLPParser.POSITION, i)

        def source_variable(self):
            return self.getTypedRuleContext(LDLPParser.Source_variableContext,0)


        def length(self):
            return self.getTypedRuleContext(LDLPParser.LengthContext,0)


        def target_variable(self):
            return self.getTypedRuleContext(LDLPParser.Target_variableContext,0)


        def SORTA(self):
            return self.getToken(LDLPParser.SORTA, 0)

        def SORTD(self):
            return self.getToken(LDLPParser.SORTD, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_moveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMoveStatement" ):
                listener.enterMoveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMoveStatement" ):
                listener.exitMoveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMoveStatement" ):
                return visitor.visitMoveStatement(self)
            else:
                return visitor.visitChildren(self)




    def moveStatement(self):

        localctx = LDLPParser.MoveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_moveStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(LDLPParser.MOVE)
            self.state = 1171
            self.expression(0)
            self.state = 1174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1172
                self.match(LDLPParser.POSITION)
                self.state = 1173
                self.source_variable()


            self.state = 1177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1176
                self.length()


            self.state = 1179
            self.variable()
            self.state = 1184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1180
                self.match(LDLPParser.POSITION)
                self.state = 1181
                self.target_variable()

            elif la_ == 2:
                self.state = 1182
                self.match(LDLPParser.SORTA)

            elif la_ == 3:
                self.state = 1183
                self.match(LDLPParser.SORTD)


            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1186
                self.match(LDLPParser.GS)
                self.state = 1187
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(LDLPParser.LENGTH, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLength" ):
                return visitor.visitLength(self)
            else:
                return visitor.visitChildren(self)




    def length(self):

        localctx = LDLPParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(LDLPParser.LENGTH)
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1191
                self.variable()
                pass

            elif la_ == 2:
                self.state = 1192
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_source_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_variable" ):
                listener.enterSource_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_variable" ):
                listener.exitSource_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSource_variable" ):
                return visitor.visitSource_variable(self)
            else:
                return visitor.visitChildren(self)




    def source_variable(self):

        localctx = LDLPParser.Source_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_source_variable)
        try:
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_target_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_variable" ):
                listener.enterTarget_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_variable" ):
                listener.exitTarget_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_variable" ):
                return visitor.visitTarget_variable(self)
            else:
                return visitor.visitChildren(self)




    def target_variable(self):

        localctx = LDLPParser.Target_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_target_variable)
        try:
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MovedateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE_DATE(self):
            return self.getToken(LDLPParser.MOVE_DATE, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def FORMAT(self):
            return self.getToken(LDLPParser.FORMAT, 0)

        def identifier(self):
            return self.getTypedRuleContext(LDLPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_movedateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMovedateStatement" ):
                listener.enterMovedateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMovedateStatement" ):
                listener.exitMovedateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMovedateStatement" ):
                return visitor.visitMovedateStatement(self)
            else:
                return visitor.visitChildren(self)




    def movedateStatement(self):

        localctx = LDLPParser.MovedateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_movedateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(LDLPParser.MOVE_DATE)
            self.state = 1204
            self.variable()
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1205
                self.match(LDLPParser.FORMAT)
                self.state = 1206
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MovetimeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE_TIME(self):
            return self.getToken(LDLPParser.MOVE_TIME, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_movetimeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMovetimeStatement" ):
                listener.enterMovetimeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMovetimeStatement" ):
                listener.exitMovetimeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMovetimeStatement" ):
                return visitor.visitMovetimeStatement(self)
            else:
                return visitor.visitChildren(self)




    def movetimeStatement(self):

        localctx = LDLPParser.MovetimeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_movetimeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.match(LDLPParser.MOVE_TIME)
            self.state = 1210
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.giving_variable = None # VariableContext

        def MULTIPLY(self):
            return self.getToken(LDLPParser.MULTIPLY, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.VariableContext)
            else:
                return self.getTypedRuleContext(LDLPParser.VariableContext,i)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def GIVING(self):
            return self.getToken(LDLPParser.GIVING, 0)

        def ROUNDED(self):
            return self.getToken(LDLPParser.ROUNDED, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_multiplyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyStatement" ):
                listener.enterMultiplyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyStatement" ):
                listener.exitMultiplyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyStatement" ):
                return visitor.visitMultiplyStatement(self)
            else:
                return visitor.visitChildren(self)




    def multiplyStatement(self):

        localctx = LDLPParser.MultiplyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_multiplyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(LDLPParser.MULTIPLY)
            self.state = 1213
            self.expression(0)
            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1214
                self.variable()
                pass

            elif la_ == 2:
                self.state = 1215
                self.literal()
                pass


            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1218
                self.match(LDLPParser.GIVING)
                self.state = 1219
                localctx.giving_variable = self.variable()


            self.state = 1223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1222
                self.match(LDLPParser.ROUNDED)


            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1225
                self.match(LDLPParser.GS)
                self.state = 1226
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnchangeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.footing_frame_name = None # FrameNameContext
            self.footing_line_number = None # LineNumberContext
            self.heading_frame_name = None # FrameNameContext
            self.heading_line_number = None # LineNumberContext

        def ON_CHANGE(self):
            return self.getToken(LDLPParser.ON_CHANGE, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def AS(self):
            return self.getToken(LDLPParser.AS, 0)

        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def FOOTING(self):
            return self.getToken(LDLPParser.FOOTING, 0)

        def HEADING(self):
            return self.getToken(LDLPParser.HEADING, 0)

        def routineCall(self):
            return self.getTypedRuleContext(LDLPParser.RoutineCallContext,0)


        def frameName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.FrameNameContext)
            else:
                return self.getTypedRuleContext(LDLPParser.FrameNameContext,i)


        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.AT)
            else:
                return self.getToken(LDLPParser.AT, i)

        def lineNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.LineNumberContext)
            else:
                return self.getTypedRuleContext(LDLPParser.LineNumberContext,i)


        def getRuleIndex(self):
            return LDLPParser.RULE_onchangeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnchangeStatement" ):
                listener.enterOnchangeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnchangeStatement" ):
                listener.exitOnchangeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnchangeStatement" ):
                return visitor.visitOnchangeStatement(self)
            else:
                return visitor.visitChildren(self)




    def onchangeStatement(self):

        localctx = LDLPParser.OnchangeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_onchangeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(LDLPParser.ON_CHANGE)
            self.state = 1230
            self.variable()
            self.state = 1231
            self.match(LDLPParser.AS)
            self.state = 1232
            self.literal()
            self.state = 1239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1233
                self.match(LDLPParser.FOOTING)
                self.state = 1234
                localctx.footing_frame_name = self.frameName()
                self.state = 1237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1235
                    self.match(LDLPParser.AT)
                    self.state = 1236
                    localctx.footing_line_number = self.lineNumber()




            self.state = 1247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1241
                self.match(LDLPParser.HEADING)
                self.state = 1242
                localctx.heading_frame_name = self.frameName()
                self.state = 1245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1243
                    self.match(LDLPParser.AT)
                    self.state = 1244
                    localctx.heading_line_number = self.lineNumber()




            self.state = 1250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1249
                self.routineCall()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.VariableContext)
            else:
                return self.getTypedRuleContext(LDLPParser.VariableContext,i)


        def GIVING(self):
            return self.getToken(LDLPParser.GIVING, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_routineCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineCall" ):
                listener.enterRoutineCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineCall" ):
                listener.exitRoutineCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineCall" ):
                return visitor.visitRoutineCall(self)
            else:
                return visitor.visitChildren(self)




    def routineCall(self):

        localctx = LDLPParser.RoutineCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_routineCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.variable()
            self.state = 1253
            self.match(LDLPParser.GIVING)
            self.state = 1254
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(LDLPParser.PAGE, 0)

        def pageNumber(self):
            return self.getTypedRuleContext(LDLPParser.PageNumberContext,0)


        def varName(self):
            return self.getTypedRuleContext(LDLPParser.VarNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_pageStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageStatement" ):
                listener.enterPageStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageStatement" ):
                listener.exitPageStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageStatement" ):
                return visitor.visitPageStatement(self)
            else:
                return visitor.visitChildren(self)




    def pageStatement(self):

        localctx = LDLPParser.PageStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_pageStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(LDLPParser.PAGE)
            self.state = 1257
            self.pageNumber()
            self.state = 1258
            self.varName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECALL(self):
            return self.getToken(LDLPParser.RECALL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def BYE(self):
            return self.getToken(LDLPParser.BYE, 0)

        def EXIT(self):
            return self.getToken(LDLPParser.EXIT, 0)

        def TEACH(self):
            return self.getToken(LDLPParser.TEACH, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_recallStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecallStatement" ):
                listener.enterRecallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecallStatement" ):
                listener.exitRecallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecallStatement" ):
                return visitor.visitRecallStatement(self)
            else:
                return visitor.visitChildren(self)




    def recallStatement(self):

        localctx = LDLPParser.RecallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_recallStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(LDLPParser.RECALL)
            self.state = 1264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1261
                self.expression(0)

            elif la_ == 2:
                self.state = 1262
                self.match(LDLPParser.BYE)

            elif la_ == 3:
                self.state = 1263
                self.match(LDLPParser.EXIT)


            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1266
                self.match(LDLPParser.TEACH)
                self.state = 1267
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(LDLPParser.RELEASE, 0)

        def AS(self):
            return self.getToken(LDLPParser.AS, 0)

        def reportName(self):
            return self.getTypedRuleContext(LDLPParser.ReportNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReleaseStatement" ):
                return visitor.visitReleaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def releaseStatement(self):

        localctx = LDLPParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(LDLPParser.RELEASE)
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1271
                self.match(LDLPParser.AS)
                self.state = 1272
                self.reportName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestartStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART(self):
            return self.getToken(LDLPParser.RESTART, 0)

        def profileName(self):
            return self.getTypedRuleContext(LDLPParser.ProfileNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(LDLPParser.FileNameContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_restartStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestartStatement" ):
                listener.enterRestartStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestartStatement" ):
                listener.exitRestartStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestartStatement" ):
                return visitor.visitRestartStatement(self)
            else:
                return visitor.visitChildren(self)




    def restartStatement(self):

        localctx = LDLPParser.RestartStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_restartStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(LDLPParser.RESTART)
            self.state = 1278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1276
                self.profileName()
                pass

            elif la_ == 2:
                self.state = 1277
                self.fileName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RocStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROC(self):
            return self.getToken(LDLPParser.ROC, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def CLEAR(self):
            return self.getToken(LDLPParser.CLEAR, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_rocStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRocStatement" ):
                listener.enterRocStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRocStatement" ):
                listener.exitRocStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRocStatement" ):
                return visitor.visitRocStatement(self)
            else:
                return visitor.visitChildren(self)




    def rocStatement(self):

        localctx = LDLPParser.RocStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_rocStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(LDLPParser.ROC)
            self.state = 1286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1281
                self.expression(0)
                self.state = 1284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1282
                    self.expression(0)

                elif la_ == 2:
                    self.state = 1283
                    self.match(LDLPParser.CLEAR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(LDLPParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def instance(self):
            return self.getTypedRuleContext(LDLPParser.InstanceContext,0)


        def ASA(self):
            return self.getToken(LDLPParser.ASA, 0)

        def interface(self):
            return self.getTypedRuleContext(LDLPParser.InterfaceContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = LDLPParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(LDLPParser.RETURN)
            self.state = 1294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1289
                self.expression(0)

            elif la_ == 2:
                self.state = 1290
                self.instance()
                self.state = 1291
                self.match(LDLPParser.ASA)
                self.state = 1292
                self.interface()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_instance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstance" ):
                listener.enterInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstance" ):
                listener.exitInstance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstance" ):
                return visitor.visitInstance(self)
            else:
                return visitor.visitChildren(self)




    def instance(self):

        localctx = LDLPParser.InstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_instance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_interface

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface" ):
                listener.enterInterface(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface" ):
                listener.exitInterface(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface" ):
                return visitor.visitInterface(self)
            else:
                return visitor.visitChildren(self)




    def interface(self):

        localctx = LDLPParser.InterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_interface)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RunStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initial_language = None # ExpressionContext
            self.parameter = None # ExpressionContext

        def RUN(self):
            return self.getToken(LDLPParser.RUN, 0)

        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def device(self):
            return self.getTypedRuleContext(LDLPParser.DeviceContext,0)


        def TRACE(self):
            return self.getToken(LDLPParser.TRACE, 0)

        def LA(self):
            return self.getToken(LDLPParser.LA, 0)

        def PA(self):
            return self.getToken(LDLPParser.PA, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def getRuleIndex(self):
            return LDLPParser.RULE_runStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRunStatement" ):
                listener.enterRunStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRunStatement" ):
                listener.exitRunStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRunStatement" ):
                return visitor.visitRunStatement(self)
            else:
                return visitor.visitChildren(self)




    def runStatement(self):

        localctx = LDLPParser.RunStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_runStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(LDLPParser.RUN)
            self.state = 1303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1301
                self.literal()
                pass

            elif la_ == 2:
                self.state = 1302
                self.variable()
                pass


            self.state = 1306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1305
                self.device()


            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1308
                self.match(LDLPParser.TRACE)


            self.state = 1313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1311
                self.match(LDLPParser.LA)
                self.state = 1312
                localctx.initial_language = self.expression(0)


            self.state = 1317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1315
                self.match(LDLPParser.PA)
                self.state = 1316
                localctx.parameter = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_device

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevice" ):
                listener.enterDevice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevice" ):
                listener.exitDevice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDevice" ):
                return visitor.visitDevice(self)
            else:
                return visitor.visitChildren(self)




    def device(self):

        localctx = LDLPParser.DeviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_device)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SleepStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLEEP(self):
            return self.getToken(LDLPParser.SLEEP, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def UNTIL(self):
            return self.getToken(LDLPParser.UNTIL, 0)

        def END_AFTER(self):
            return self.getToken(LDLPParser.END_AFTER, 0)

        def WAKEUP(self):
            return self.getToken(LDLPParser.WAKEUP, 0)

        def WOKEN(self):
            return self.getToken(LDLPParser.WOKEN, 0)

        def NO_COMMIT(self):
            return self.getToken(LDLPParser.NO_COMMIT, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_sleepStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSleepStatement" ):
                listener.enterSleepStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSleepStatement" ):
                listener.exitSleepStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSleepStatement" ):
                return visitor.visitSleepStatement(self)
            else:
                return visitor.visitChildren(self)




    def sleepStatement(self):

        localctx = LDLPParser.SleepStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_sleepStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(LDLPParser.SLEEP)
            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 163, 180, 181]:
                self.state = 1322
                self.expression(0)
                pass
            elif token in [146]:
                self.state = 1323
                self.match(LDLPParser.UNTIL)
                self.state = 1324
                _la = self._input.LA(1)
                if not(_la==148 or _la==150):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [46]:
                self.state = 1325
                self.match(LDLPParser.END_AFTER)
                self.state = 1326
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1329
                self.match(LDLPParser.NO_COMMIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(LDLPParser.START, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def getRuleIndex(self):
            return LDLPParser.RULE_startStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartStatement" ):
                listener.enterStartStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartStatement" ):
                listener.exitStartStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartStatement" ):
                return visitor.visitStartStatement(self)
            else:
                return visitor.visitChildren(self)




    def startStatement(self):

        localctx = LDLPParser.StartStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_startStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(LDLPParser.START)
            self.state = 1333
            self.expression(0)
            self.state = 1335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1334
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendListDynamicStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEND_LIST_DYNAMIC(self):
            return self.getToken(LDLPParser.SEND_LIST_DYNAMIC, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_sendListDynamicStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendListDynamicStatement" ):
                listener.enterSendListDynamicStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendListDynamicStatement" ):
                listener.exitSendListDynamicStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendListDynamicStatement" ):
                return visitor.visitSendListDynamicStatement(self)
            else:
                return visitor.visitChildren(self)




    def sendListDynamicStatement(self):

        localctx = LDLPParser.SendListDynamicStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_sendListDynamicStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(LDLPParser.SEND_LIST_DYNAMIC)
            self.state = 1338
            self.expression(0)
            self.state = 1339
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendListStaticStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEND_LIST_STATIC(self):
            return self.getToken(LDLPParser.SEND_LIST_STATIC, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def downloadFile(self):
            return self.getTypedRuleContext(LDLPParser.DownloadFileContext,0)


        def FILE(self):
            return self.getToken(LDLPParser.FILE, 0)

        def extractFile(self):
            return self.getTypedRuleContext(LDLPParser.ExtractFileContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_sendListStaticStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendListStaticStatement" ):
                listener.enterSendListStaticStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendListStaticStatement" ):
                listener.exitSendListStaticStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendListStaticStatement" ):
                return visitor.visitSendListStaticStatement(self)
            else:
                return visitor.visitChildren(self)




    def sendListStaticStatement(self):

        localctx = LDLPParser.SendListStaticStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_sendListStaticStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(LDLPParser.SEND_LIST_STATIC)
            self.state = 1342
            self.expression(0)
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1343
                self.downloadFile()
                pass

            elif la_ == 2:
                self.state = 1344
                self.match(LDLPParser.FILE)
                self.state = 1345
                self.extractFile()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(LDLPParser.FileNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def ON(self):
            return self.getToken(LDLPParser.ON, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_downloadFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownloadFile" ):
                listener.enterDownloadFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownloadFile" ):
                listener.exitDownloadFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDownloadFile" ):
                return visitor.visitDownloadFile(self)
            else:
                return visitor.visitChildren(self)




    def downloadFile(self):

        localctx = LDLPParser.DownloadFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_downloadFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1348
                self.fileName()
                pass

            elif la_ == 2:
                self.state = 1349
                self.expression(0)
                pass


            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1352
                self.match(LDLPParser.ON)
                self.state = 1353
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendMessageStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEND_MESSAGE(self):
            return self.getToken(LDLPParser.SEND_MESSAGE, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def ALL(self):
            return self.getToken(LDLPParser.ALL, 0)

        def ODT(self):
            return self.getToken(LDLPParser.ODT, 0)

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_sendMessageStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendMessageStatement" ):
                listener.enterSendMessageStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendMessageStatement" ):
                listener.exitSendMessageStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendMessageStatement" ):
                return visitor.visitSendMessageStatement(self)
            else:
                return visitor.visitChildren(self)




    def sendMessageStatement(self):

        localctx = LDLPParser.SendMessageStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_sendMessageStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(LDLPParser.SEND_MESSAGE)
            self.state = 1360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1357
                self.match(LDLPParser.ALL)
                pass

            elif la_ == 2:
                self.state = 1358
                self.match(LDLPParser.ODT)
                pass

            elif la_ == 3:
                self.state = 1359
                self.variable()
                pass


            self.state = 1362
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendPrintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.output_device = None # ExpressionContext
            self.at_expr = None # ExpressionContext

        def SEND_PRINT(self):
            return self.getToken(LDLPParser.SEND_PRINT, 0)

        def device(self):
            return self.getTypedRuleContext(LDLPParser.DeviceContext,0)


        def AS(self):
            return self.getToken(LDLPParser.AS, 0)

        def reportName(self):
            return self.getTypedRuleContext(LDLPParser.ReportNameContext,0)


        def AT(self):
            return self.getToken(LDLPParser.AT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def getRuleIndex(self):
            return LDLPParser.RULE_sendPrintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendPrintStatement" ):
                listener.enterSendPrintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendPrintStatement" ):
                listener.exitSendPrintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendPrintStatement" ):
                return visitor.visitSendPrintStatement(self)
            else:
                return visitor.visitChildren(self)




    def sendPrintStatement(self):

        localctx = LDLPParser.SendPrintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_sendPrintStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(LDLPParser.SEND_PRINT)
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1365
                self.match(LDLPParser.AS)
                self.state = 1366
                self.reportName()


            self.state = 1369
            self.device()
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1370
                localctx.output_device = self.expression(0)


            self.state = 1375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1373
                self.match(LDLPParser.AT)
                self.state = 1374
                localctx.at_expr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetDBStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_DB(self):
            return self.getToken(LDLPParser.SET_DB, 0)

        def dbName(self):
            return self.getTypedRuleContext(LDLPParser.DbNameContext,0)


        def className(self):
            return self.getTypedRuleContext(LDLPParser.ClassNameContext,0)


        def ALL(self):
            return self.getToken(LDLPParser.ALL, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_setDBStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDBStatement" ):
                listener.enterSetDBStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDBStatement" ):
                listener.exitSetDBStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetDBStatement" ):
                return visitor.visitSetDBStatement(self)
            else:
                return visitor.visitChildren(self)




    def setDBStatement(self):

        localctx = LDLPParser.SetDBStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_setDBStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(LDLPParser.SET_DB)
            self.state = 1378
            self.dbName()
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1379
                self.className()
                pass

            elif la_ == 2:
                self.state = 1380
                self.match(LDLPParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTitleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_TITLE(self):
            return self.getToken(LDLPParser.SET_TITLE, 0)

        def extractFile(self):
            return self.getTypedRuleContext(LDLPParser.ExtractFileContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def PACK(self):
            return self.getToken(LDLPParser.PACK, 0)

        def EXIST(self):
            return self.getToken(LDLPParser.EXIST, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_setTitleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTitleStatement" ):
                listener.enterSetTitleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTitleStatement" ):
                listener.exitSetTitleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTitleStatement" ):
                return visitor.visitSetTitleStatement(self)
            else:
                return visitor.visitChildren(self)




    def setTitleStatement(self):

        localctx = LDLPParser.SetTitleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_setTitleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(LDLPParser.SET_TITLE)
            self.state = 1384
            self.extractFile()
            self.state = 1385
            self.expression(0)
            self.state = 1388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1386
                self.match(LDLPParser.PACK)
                self.state = 1387
                self.expression(0)


            self.state = 1391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1390
                self.match(LDLPParser.EXIST)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StninfoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STN_INFO(self):
            return self.getToken(LDLPParser.STN_INFO, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_stninfoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStninfoStatement" ):
                listener.enterStninfoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStninfoStatement" ):
                listener.exitStninfoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStninfoStatement" ):
                return visitor.visitStninfoStatement(self)
            else:
                return visitor.visitChildren(self)




    def stninfoStatement(self):

        localctx = LDLPParser.StninfoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_stninfoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(LDLPParser.STN_INFO)
            self.state = 1394
            self.expression(0)
            self.state = 1395
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtractStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTRACT(self):
            return self.getToken(LDLPParser.SUBTRACT, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.VariableContext)
            else:
                return self.getTypedRuleContext(LDLPParser.VariableContext,i)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def GIVING(self):
            return self.getToken(LDLPParser.GIVING, 0)

        def ROUNDED(self):
            return self.getToken(LDLPParser.ROUNDED, 0)

        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_subtractStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtractStatement" ):
                listener.enterSubtractStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtractStatement" ):
                listener.exitSubtractStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtractStatement" ):
                return visitor.visitSubtractStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractStatement(self):

        localctx = LDLPParser.SubtractStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_subtractStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.match(LDLPParser.SUBTRACT)
            self.state = 1398
            self.expression(0)
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1399
                self.variable()
                pass

            elif la_ == 2:
                self.state = 1400
                self.literal()
                pass


            self.state = 1405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1403
                self.match(LDLPParser.GIVING)
                self.state = 1404
                self.variable()


            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1407
                self.match(LDLPParser.ROUNDED)


            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1410
                self.match(LDLPParser.GS)
                self.state = 1411
                self.status()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchtoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data = None # ExpressionContext
            self.partition = None # ExpressionContext

        def SWITCH_TO(self):
            return self.getToken(LDLPParser.SWITCH_TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def DATA(self):
            return self.getToken(LDLPParser.DATA, 0)

        def PARTITION(self):
            return self.getToken(LDLPParser.PARTITION, 0)

        def BYE(self):
            return self.getToken(LDLPParser.BYE, 0)

        def CLEAR(self):
            return self.getToken(LDLPParser.CLEAR, 0)

        def INHERIT(self):
            return self.getToken(LDLPParser.INHERIT, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_switchtoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchtoStatement" ):
                listener.enterSwitchtoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchtoStatement" ):
                listener.exitSwitchtoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchtoStatement" ):
                return visitor.visitSwitchtoStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchtoStatement(self):

        localctx = LDLPParser.SwitchtoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_switchtoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(LDLPParser.SWITCH_TO)
            self.state = 1415
            self.expression(0)
            self.state = 1418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1416
                self.match(LDLPParser.DATA)
                self.state = 1417
                localctx.data = self.expression(0)


            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1420
                self.match(LDLPParser.PARTITION)
                self.state = 1421
                localctx.partition = self.expression(0)


            self.state = 1425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1424
                self.match(LDLPParser.BYE)


            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1427
                self.match(LDLPParser.CLEAR)


            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1430
                self.match(LDLPParser.INHERIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WakeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAKE(self):
            return self.getToken(LDLPParser.WAKE, 0)

        def reportName(self):
            return self.getTypedRuleContext(LDLPParser.ReportNameContext,0)


        def PA(self):
            return self.getToken(LDLPParser.PA, 0)

        def expression(self):
            return self.getTypedRuleContext(LDLPParser.ExpressionContext,0)


        def GS(self):
            return self.getToken(LDLPParser.GS, 0)

        def status(self):
            return self.getTypedRuleContext(LDLPParser.StatusContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_wakeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWakeStatement" ):
                listener.enterWakeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWakeStatement" ):
                listener.exitWakeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWakeStatement" ):
                return visitor.visitWakeStatement(self)
            else:
                return visitor.visitChildren(self)




    def wakeStatement(self):

        localctx = LDLPParser.WakeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_wakeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(LDLPParser.WAKE)
            self.state = 1434
            self.reportName()

            self.state = 1435
            self.match(LDLPParser.PA)
            self.state = 1436
            self.expression(0)

            self.state = 1438
            self.match(LDLPParser.GS)
            self.state = 1439
            self.status()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(LDLPParser.EQ, 0)

        def GT(self):
            return self.getToken(LDLPParser.GT, 0)

        def GE(self):
            return self.getToken(LDLPParser.GE, 0)

        def LE(self):
            return self.getToken(LDLPParser.LE, 0)

        def LT(self):
            return self.getToken(LDLPParser.LT, 0)

        def NEQ(self):
            return self.getToken(LDLPParser.NEQ, 0)

        def NOT(self):
            return self.getToken(LDLPParser.NOT, 0)

        def CAST(self):
            return self.getToken(LDLPParser.CAST, 0)

        def IN(self):
            return self.getToken(LDLPParser.IN, 0)

        def ISA(self):
            return self.getToken(LDLPParser.ISA, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = LDLPParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_relational_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            _la = self._input.LA(1)
            if not(_la==75 or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & 12759) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(LDLPParser.NOT, 0)

        def AND(self):
            return self.getToken(LDLPParser.AND, 0)

        def OR(self):
            return self.getToken(LDLPParser.OR, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_logical_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_operator" ):
                listener.enterLogical_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_operator" ):
                listener.exitLogical_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_operator" ):
                return visitor.visitLogical_operator(self)
            else:
                return visitor.visitChildren(self)




    def logical_operator(self):

        localctx = LDLPParser.Logical_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_logical_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 1537) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_status

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatus" ):
                listener.enterStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatus" ):
                listener.exitStatus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatus" ):
                return visitor.visitStatus(self)
            else:
                return visitor.visitChildren(self)




    def status(self):

        localctx = LDLPParser.StatusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_status)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DbNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(LDLPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_dbName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbName" ):
                listener.enterDbName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbName" ):
                listener.exitDbName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbName" ):
                return visitor.visitDbName(self)
            else:
                return visitor.visitChildren(self)




    def dbName(self):

        localctx = LDLPParser.DbNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_dbName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_fileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileName" ):
                listener.enterFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileName" ):
                listener.exitFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileName" ):
                return visitor.visitFileName(self)
            else:
                return visitor.visitChildren(self)




    def fileName(self):

        localctx = LDLPParser.FileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_fileName)
        try:
            self.state = 1451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1449
                self.variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1450
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(LDLPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_dateFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateFormat" ):
                listener.enterDateFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateFormat" ):
                listener.exitDateFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateFormat" ):
                return visitor.visitDateFormat(self)
            else:
                return visitor.visitChildren(self)




    def dateFormat(self):

        localctx = LDLPParser.DateFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_dateFormat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_className

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassName" ):
                listener.enterClassName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassName" ):
                listener.exitClassName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassName" ):
                return visitor.visitClassName(self)
            else:
                return visitor.visitChildren(self)




    def className(self):

        localctx = LDLPParser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_className)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_varName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarName" ):
                listener.enterVarName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarName" ):
                listener.exitVarName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarName" ):
                return visitor.visitVarName(self)
            else:
                return visitor.visitChildren(self)




    def varName(self):

        localctx = LDLPParser.VarNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_varName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_objectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectName" ):
                listener.enterObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectName" ):
                listener.exitObjectName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectName" ):
                return visitor.visitObjectName(self)
            else:
                return visitor.visitChildren(self)




    def objectName(self):

        localctx = LDLPParser.ObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_objectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(LDLPParser.LiteralContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_userCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserCode" ):
                listener.enterUserCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserCode" ):
                listener.exitUserCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserCode" ):
                return visitor.visitUserCode(self)
            else:
                return visitor.visitChildren(self)




    def userCode(self):

        localctx = LDLPParser.UserCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_userCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_frameName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameName" ):
                listener.enterFrameName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameName" ):
                listener.exitFrameName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameName" ):
                return visitor.visitFrameName(self)
            else:
                return visitor.visitChildren(self)




    def frameName(self):

        localctx = LDLPParser.FrameNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_frameName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERALS(self):
            return self.getToken(LDLPParser.NUMERIC_LITERALS, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_lineNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineNumber" ):
                listener.enterLineNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineNumber" ):
                listener.exitLineNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineNumber" ):
                return visitor.visitLineNumber(self)
            else:
                return visitor.visitChildren(self)




    def lineNumber(self):

        localctx = LDLPParser.LineNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_lineNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.match(LDLPParser.NUMERIC_LITERALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERALS(self):
            return self.getToken(LDLPParser.NUMERIC_LITERALS, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_pageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageNumber" ):
                listener.enterPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageNumber" ):
                listener.exitPageNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageNumber" ):
                return visitor.visitPageNumber(self)
            else:
                return visitor.visitChildren(self)




    def pageNumber(self):

        localctx = LDLPParser.PageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_pageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.match(LDLPParser.NUMERIC_LITERALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReportNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_reportName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReportName" ):
                listener.enterReportName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReportName" ):
                listener.exitReportName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReportName" ):
                return visitor.visitReportName(self)
            else:
                return visitor.visitChildren(self)




    def reportName(self):

        localctx = LDLPParser.ReportNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_reportName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_profileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfileName" ):
                listener.enterProfileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfileName" ):
                listener.exitProfileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProfileName" ):
                return visitor.visitProfileName(self)
            else:
                return visitor.visitChildren(self)




    def profileName(self):

        localctx = LDLPParser.ProfileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_profileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeviceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(LDLPParser.VariableContext,0)


        def getRuleIndex(self):
            return LDLPParser.RULE_deviceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeviceName" ):
                listener.enterDeviceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeviceName" ):
                listener.exitDeviceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeviceName" ):
                return visitor.visitDeviceName(self)
            else:
                return visitor.visitChildren(self)




    def deviceName(self):

        localctx = LDLPParser.DeviceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_deviceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self.variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACK(self):
            return self.getToken(LDLPParser.BACK, 0)

        def ABORT(self):
            return self.getToken(LDLPParser.ABORT, 0)

        def ACCESS_EXT(self):
            return self.getToken(LDLPParser.ACCESS_EXT, 0)

        def ACCEPT(self):
            return self.getToken(LDLPParser.ACCEPT, 0)

        def ACTUAL(self):
            return self.getToken(LDLPParser.ACTUAL, 0)

        def ADD(self):
            return self.getToken(LDLPParser.ADD, 0)

        def ALL(self):
            return self.getToken(LDLPParser.ALL, 0)

        def ALWAYS(self):
            return self.getToken(LDLPParser.ALWAYS, 0)

        def AS(self):
            return self.getToken(LDLPParser.AS, 0)

        def ASA(self):
            return self.getToken(LDLPParser.ASA, 0)

        def AT(self):
            return self.getToken(LDLPParser.AT, 0)

        def ATTACH(self):
            return self.getToken(LDLPParser.ATTACH, 0)

        def ATTACH_AND_SPACE(self):
            return self.getToken(LDLPParser.ATTACH_AND_SPACE, 0)

        def ATTENTION(self):
            return self.getToken(LDLPParser.ATTENTION, 0)

        def ATTRIBUTE(self):
            return self.getToken(LDLPParser.ATTRIBUTE, 0)

        def BDNAME(self):
            return self.getToken(LDLPParser.BDNAME, 0)

        def BEGIN_CASE(self):
            return self.getToken(LDLPParser.BEGIN_CASE, 0)

        def BEGIN_PAGE(self):
            return self.getToken(LDLPParser.BEGIN_PAGE, 0)

        def BREAK(self):
            return self.getToken(LDLPParser.BREAK, 0)

        def BYE(self):
            return self.getToken(LDLPParser.BYE, 0)

        def CALL(self):
            return self.getToken(LDLPParser.CALL, 0)

        def CASE(self):
            return self.getToken(LDLPParser.CASE, 0)

        def CHANNEL(self):
            return self.getToken(LDLPParser.CHANNEL, 0)

        def CLEAR(self):
            return self.getToken(LDLPParser.CLEAR, 0)

        def COMMA(self):
            return self.getToken(LDLPParser.COMMA, 0)

        def COMPARE_ASCENDING(self):
            return self.getToken(LDLPParser.COMPARE_ASCENDING, 0)

        def COMPARE_DESCENDING(self):
            return self.getToken(LDLPParser.COMPARE_DESCENDING, 0)

        def COMPUTE(self):
            return self.getToken(LDLPParser.COMPUTE, 0)

        def CONTINUE(self):
            return self.getToken(LDLPParser.CONTINUE, 0)

        def CRITICAL_POINT(self):
            return self.getToken(LDLPParser.CRITICAL_POINT, 0)

        def CURSOR(self):
            return self.getToken(LDLPParser.CURSOR, 0)

        def DATA(self):
            return self.getToken(LDLPParser.DATA, 0)

        def DATE_CONVERT(self):
            return self.getToken(LDLPParser.DATE_CONVERT, 0)

        def DEBUG(self):
            return self.getToken(LDLPParser.DEBUG, 0)

        def DELIMITER(self):
            return self.getToken(LDLPParser.DELIMITER, 0)

        def DETACH(self):
            return self.getToken(LDLPParser.DETACH, 0)

        def DETERMINE(self):
            return self.getToken(LDLPParser.DETERMINE, 0)

        def DIVIDE(self):
            return self.getToken(LDLPParser.DIVIDE, 0)

        def EDIT_ONLY(self):
            return self.getToken(LDLPParser.EDIT_ONLY, 0)

        def ELSE(self):
            return self.getToken(LDLPParser.ELSE, 0)

        def ERROR(self):
            return self.getToken(LDLPParser.ERROR, 0)

        def EVENT(self):
            return self.getToken(LDLPParser.EVENT, 0)

        def EVERY(self):
            return self.getToken(LDLPParser.EVERY, 0)

        def EXCLUSIVE(self):
            return self.getToken(LDLPParser.EXCLUSIVE, 0)

        def EXIST(self):
            return self.getToken(LDLPParser.EXIST, 0)

        def EXTRACT(self):
            return self.getToken(LDLPParser.EXTRACT, 0)

        def EXTRACTED_AS(self):
            return self.getToken(LDLPParser.EXTRACTED_AS, 0)

        def FILE(self):
            return self.getToken(LDLPParser.FILE, 0)

        def FIND(self):
            return self.getToken(LDLPParser.FIND, 0)

        def FLAG(self):
            return self.getToken(LDLPParser.FLAG, 0)

        def FOOTING(self):
            return self.getToken(LDLPParser.FOOTING, 0)

        def FOREACH(self):
            return self.getToken(LDLPParser.FOREACH, 0)

        def FORMAT(self):
            return self.getToken(LDLPParser.FORMAT, 0)

        def FROM(self):
            return self.getToken(LDLPParser.FROM, 0)

        def GET(self):
            return self.getToken(LDLPParser.GET, 0)

        def GIVING(self):
            return self.getToken(LDLPParser.GIVING, 0)

        def GROUP(self):
            return self.getToken(LDLPParser.GROUP, 0)

        def HALT(self):
            return self.getToken(LDLPParser.HALT, 0)

        def HEADING(self):
            return self.getToken(LDLPParser.HEADING, 0)

        def IF(self):
            return self.getToken(LDLPParser.IF, 0)

        def IN(self):
            return self.getToken(LDLPParser.IN, 0)

        def INITIALIZE(self):
            return self.getToken(LDLPParser.INITIALIZE, 0)

        def INHERIT(self):
            return self.getToken(LDLPParser.INHERIT, 0)

        def INSERT(self):
            return self.getToken(LDLPParser.INSERT, 0)

        def JUMP_TO(self):
            return self.getToken(LDLPParser.JUMP_TO, 0)

        def KEY_ONLY(self):
            return self.getToken(LDLPParser.KEY_ONLY, 0)

        def LA(self):
            return self.getToken(LDLPParser.LA, 0)

        def LABEL(self):
            return self.getToken(LDLPParser.LABEL, 0)

        def LAST(self):
            return self.getToken(LDLPParser.LAST, 0)

        def LENGTH(self):
            return self.getToken(LDLPParser.LENGTH, 0)

        def LOOKUP(self):
            return self.getToken(LDLPParser.LOOKUP, 0)

        def LOAD(self):
            return self.getToken(LDLPParser.LOAD, 0)

        def LOG(self):
            return self.getToken(LDLPParser.LOG, 0)

        def LOOP(self):
            return self.getToken(LDLPParser.LOOP, 0)

        def NUMERIC(self):
            return self.getToken(LDLPParser.NUMERIC, 0)

        def MAPPER(self):
            return self.getToken(LDLPParser.MAPPER, 0)

        def MATCH(self):
            return self.getToken(LDLPParser.MATCH, 0)

        def MESSAGE(self):
            return self.getToken(LDLPParser.MESSAGE, 0)

        def MOVE(self):
            return self.getToken(LDLPParser.MOVE, 0)

        def MOVE_DATE(self):
            return self.getToken(LDLPParser.MOVE_DATE, 0)

        def MOVE_TIME(self):
            return self.getToken(LDLPParser.MOVE_TIME, 0)

        def MULTI(self):
            return self.getToken(LDLPParser.MULTI, 0)

        def MULTIPLY(self):
            return self.getToken(LDLPParser.MULTIPLY, 0)

        def NEW_PAGE(self):
            return self.getToken(LDLPParser.NEW_PAGE, 0)

        def NEXT(self):
            return self.getToken(LDLPParser.NEXT, 0)

        def NO_COMMIT(self):
            return self.getToken(LDLPParser.NO_COMMIT, 0)

        def NO_RELEASE(self):
            return self.getToken(LDLPParser.NO_RELEASE, 0)

        def ODT(self):
            return self.getToken(LDLPParser.ODT, 0)

        def ON(self):
            return self.getToken(LDLPParser.ON, 0)

        def ON_CHANGE(self):
            return self.getToken(LDLPParser.ON_CHANGE, 0)

        def OTHERWISE(self):
            return self.getToken(LDLPParser.OTHERWISE, 0)

        def PA(self):
            return self.getToken(LDLPParser.PA, 0)

        def PACK(self):
            return self.getToken(LDLPParser.PACK, 0)

        def PAGE(self):
            return self.getToken(LDLPParser.PAGE, 0)

        def PARTITION(self):
            return self.getToken(LDLPParser.PARTITION, 0)

        def POLYMORPHIC(self):
            return self.getToken(LDLPParser.POLYMORPHIC, 0)

        def POSITION(self):
            return self.getToken(LDLPParser.POSITION, 0)

        def RECALL(self):
            return self.getToken(LDLPParser.RECALL, 0)

        def RELEASE(self):
            return self.getToken(LDLPParser.RELEASE, 0)

        def REMAINDER(self):
            return self.getToken(LDLPParser.REMAINDER, 0)

        def RESTART(self):
            return self.getToken(LDLPParser.RESTART, 0)

        def RETAIN_AS(self):
            return self.getToken(LDLPParser.RETAIN_AS, 0)

        def RETAINED_AS(self):
            return self.getToken(LDLPParser.RETAINED_AS, 0)

        def RETURN(self):
            return self.getToken(LDLPParser.RETURN, 0)

        def ROC(self):
            return self.getToken(LDLPParser.ROC, 0)

        def ROUNDED(self):
            return self.getToken(LDLPParser.ROUNDED, 0)

        def RUN(self):
            return self.getToken(LDLPParser.RUN, 0)

        def SECURE(self):
            return self.getToken(LDLPParser.SECURE, 0)

        def SEND_LIST_DYNAMIC(self):
            return self.getToken(LDLPParser.SEND_LIST_DYNAMIC, 0)

        def SEND_LIST_STATIC(self):
            return self.getToken(LDLPParser.SEND_LIST_STATIC, 0)

        def SEND_MESSAGE(self):
            return self.getToken(LDLPParser.SEND_MESSAGE, 0)

        def SEND_PRINT(self):
            return self.getToken(LDLPParser.SEND_PRINT, 0)

        def SEND_STATUS(self):
            return self.getToken(LDLPParser.SEND_STATUS, 0)

        def SERIAL(self):
            return self.getToken(LDLPParser.SERIAL, 0)

        def SET_DB(self):
            return self.getToken(LDLPParser.SET_DB, 0)

        def SET_TITLE(self):
            return self.getToken(LDLPParser.SET_TITLE, 0)

        def SLEEP(self):
            return self.getToken(LDLPParser.SLEEP, 0)

        def SORTA(self):
            return self.getToken(LDLPParser.SORTA, 0)

        def SORTD(self):
            return self.getToken(LDLPParser.SORTD, 0)

        def START(self):
            return self.getToken(LDLPParser.START, 0)

        def STN_INFO(self):
            return self.getToken(LDLPParser.STN_INFO, 0)

        def SUBTRACT(self):
            return self.getToken(LDLPParser.SUBTRACT, 0)

        def SWITCH_TO(self):
            return self.getToken(LDLPParser.SWITCH_TO, 0)

        def TEACH(self):
            return self.getToken(LDLPParser.TEACH, 0)

        def THIS(self):
            return self.getToken(LDLPParser.THIS, 0)

        def TO_ALPHA(self):
            return self.getToken(LDLPParser.TO_ALPHA, 0)

        def TOTAL(self):
            return self.getToken(LDLPParser.TOTAL, 0)

        def TODAY_NUMBER(self):
            return self.getToken(LDLPParser.TODAY_NUMBER, 0)

        def TO_DATE(self):
            return self.getToken(LDLPParser.TO_DATE, 0)

        def TRACE(self):
            return self.getToken(LDLPParser.TRACE, 0)

        def WAKE(self):
            return self.getToken(LDLPParser.WAKE, 0)

        def WAKEUP(self):
            return self.getToken(LDLPParser.WAKEUP, 0)

        def WARNING(self):
            return self.getToken(LDLPParser.WARNING, 0)

        def WOKEN(self):
            return self.getToken(LDLPParser.WOKEN, 0)

        def WHILE(self):
            return self.getToken(LDLPParser.WHILE, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_keywords

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywords" ):
                listener.enterKeywords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywords" ):
                listener.exitKeywords(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywords" ):
                return visitor.visitKeywords(self)
            else:
                return visitor.visitChildren(self)




    def keywords(self):

        localctx = LDLPParser.KeywordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_keywords)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4688216425767108872) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -281474976710785) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16515071) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLEAR(self):
            return self.getToken(LDLPParser.CLEAR, 0)

        def INITIALIZE(self):
            return self.getToken(LDLPParser.INITIALIZE, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_specialName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialName" ):
                listener.enterSpecialName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialName" ):
                listener.exitSpecialName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialName" ):
                return visitor.visitSpecialName(self)
            else:
                return visitor.visitChildren(self)




    def specialName(self):

        localctx = LDLPParser.SpecialNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_specialName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            _la = self._input.LA(1)
            if not(_la==27 or _la==76):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(LDLPParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = LDLPParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163:
                self.state = 1479
                self.match(LDLPParser.LP)


            self.state = 1482
            self.identifier()
            self.state = 1484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1483
                self.match(LDLPParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.IDENTIFIER)
            else:
                return self.getToken(LDLPParser.IDENTIFIER, i)

        def keywords(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.KeywordsContext)
            else:
                return self.getTypedRuleContext(LDLPParser.KeywordsContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.DOT)
            else:
                return self.getToken(LDLPParser.DOT, i)

        def LB(self):
            return self.getToken(LDLPParser.LB, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LDLPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LDLPParser.ExpressionContext,i)


        def RB(self):
            return self.getToken(LDLPParser.RB, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LDLPParser.COMMA)
            else:
                return self.getToken(LDLPParser.COMMA, i)

        def getRuleIndex(self):
            return LDLPParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = LDLPParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.state = 1486
                self.match(LDLPParser.IDENTIFIER)
                pass
            elif token in [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151]:
                self.state = 1487
                self.keywords()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1490
                    self.match(LDLPParser.DOT)
                    self.state = 1493
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [180]:
                        self.state = 1491
                        self.match(LDLPParser.IDENTIFIER)
                        pass
                    elif token in [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151]:
                        self.state = 1492
                        self.keywords()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1500
                self.match(LDLPParser.LB)
                self.state = 1501
                self.expression(0)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==28:
                    self.state = 1502
                    self.match(LDLPParser.COMMA)
                    self.state = 1503
                    self.expression(0)
                    self.state = 1508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1509
                self.match(LDLPParser.RB)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERALS(self):
            return self.getToken(LDLPParser.STRING_LITERALS, 0)

        def NUMERIC_LITERALS(self):
            return self.getToken(LDLPParser.NUMERIC_LITERALS, 0)

        def LP(self):
            return self.getToken(LDLPParser.LP, 0)

        def Arithmetic_operators(self):
            return self.getToken(LDLPParser.Arithmetic_operators, 0)

        def RP(self):
            return self.getToken(LDLPParser.RP, 0)

        def getRuleIndex(self):
            return LDLPParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = LDLPParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 1524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.match(LDLPParser.STRING_LITERALS)
                pass
            elif token in [2, 163, 181]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1514
                    self.match(LDLPParser.LP)


                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 1517
                    self.match(LDLPParser.Arithmetic_operators)


                self.state = 1520
                self.match(LDLPParser.NUMERIC_LITERALS)
                self.state = 1522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1521
                    self.match(LDLPParser.RP)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[65] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         




